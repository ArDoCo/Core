{"id":"3368242f-d572-3d92-9031-dc20a86dcff1","classesAndInterfaces":[{"name":"Category","fullyQualifiedName":"tools.descartes.teastore.entities.Category","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Create a new and empty category.\r\n\t ","lineNumber":28,"isOrphan":false},{"type":"LineComment","text":"always use the setters when setting variables here","lineNumber":32,"isOrphan":true},{"type":"LineComment","text":"do not access the attributes directly","lineNumber":33,"isOrphan":true},{"type":"JavadocComment","text":"\r\n\t * Every Entity needs a Copy-Constructor!\r\n\t * @param category The entity to Copy.\r\n\t ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n\t * @return The id.\r\n\t ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * For REST use only.\r\n\t * Sets the ID. Ignored by persistence.\r\n\t * @param id ID, as passed by the REST API.\r\n\t ","lineNumber":54,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the name.\r\n\t * @return The category name.\r\n\t ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Set the name.\r\n\t * @param name The category name.\r\n\t ","lineNumber":71,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the description.\r\n\t * @return The category description.\r\n\t ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Set the description.\r\n\t * @param description The category description.\r\n\t ","lineNumber":87,"isOrphan":false},{"type":"BlockComment","text":" (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t ","lineNumber":95,"isOrphan":false},{"type":"BlockComment","text":" (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t ","lineNumber":106,"isOrphan":false}],"allMethods":[{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n\t * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n\t * @return The id.\r\n\t "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n\t * For REST use only.\r\n\t * Sets the ID. Ignored by persistence.\r\n\t * @param id ID, as passed by the REST API.\r\n\t "},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":"\r\n\t * Get the name.\r\n\t * @return The category name.\r\n\t "},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":"\r\n\t * Set the name.\r\n\t * @param name The category name.\r\n\t "},{"fullQualified":"public String getDescription()","name":"getDescription","type":"String","javadoc":"\r\n\t * Get the description.\r\n\t * @return The category description.\r\n\t "},{"fullQualified":"public void setDescription(String description)","name":"setDescription","type":"void","javadoc":"\r\n\t * Set the description.\r\n\t * @param description The category description.\r\n\t "},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public Category()","javadocComment":"\r\n\t * Create a new and empty category.\r\n\t "},{"identifier":"public Category(Category category)","javadocComment":"\r\n\t * Every Entity needs a Copy-Constructor!\r\n\t * @param category The entity to Copy.\r\n\t "}]},{"name":"ImageSize","fullyQualifiedName":"tools.descartes.teastore.entities.ImageSize","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Divider string.\r\n   ","lineNumber":11,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Image width.\r\n   ","lineNumber":16,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Image height.\r\n   ","lineNumber":21,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Default constructor.\r\n   ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Constructor with variable width and height.\r\n   * \r\n   * @param width\r\n   *          imageWidth\r\n   * @param height\r\n   *          imageHeight\r\n   ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Constructor with ImageSize object.\r\n   * \r\n   * @param size\r\n   *          ImageSize object\r\n   ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for image width.\r\n   * @return image width\r\n   ","lineNumber":56,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Setter for image width.\r\n   * @param width image width\r\n   ","lineNumber":64,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for image height.\r\n   * @return image height.\r\n   ","lineNumber":75,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Setter for image height.\r\n   * @param height image height\r\n   ","lineNumber":83,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Calculates number of pixels of an image.\r\n   * @return number of pixels\r\n   ","lineNumber":94,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Parses from String.\r\n   * @param str String to pars from\r\n   * @return ImageSize object\r\n   ","lineNumber":102,"isOrphan":false}],"allMethods":[{"fullQualified":"public int getWidth()","name":"getWidth","type":"int","javadoc":"\r\n   * Getter for image width.\r\n   * @return image width\r\n   "},{"fullQualified":"public void setWidth(int width)","name":"setWidth","type":"void","javadoc":"\r\n   * Setter for image width.\r\n   * @param width image width\r\n   "},{"fullQualified":"public int getHeight()","name":"getHeight","type":"int","javadoc":"\r\n   * Getter for image height.\r\n   * @return image height.\r\n   "},{"fullQualified":"public void setHeight(int height)","name":"setHeight","type":"void","javadoc":"\r\n   * Setter for image height.\r\n   * @param height image height\r\n   "},{"fullQualified":"public int getPixelCount()","name":"getPixelCount","type":"int","javadoc":"\r\n   * Calculates number of pixels of an image.\r\n   * @return number of pixels\r\n   "},{"fullQualified":"public static ImageSize parseImageSize(String str)","name":"parseImageSize","type":"ImageSize","javadoc":"\r\n   * Parses from String.\r\n   * @param str String to pars from\r\n   * @return ImageSize object\r\n   "},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public ImageSize()","javadocComment":"\r\n   * Default constructor.\r\n   "},{"identifier":"public ImageSize(int width, int height)","javadocComment":"\r\n   * Constructor with variable width and height.\r\n   * \r\n   * @param width\r\n   *          imageWidth\r\n   * @param height\r\n   *          imageHeight\r\n   "},{"identifier":"public ImageSize(ImageSize size)","javadocComment":"\r\n   * Constructor with ImageSize object.\r\n   * \r\n   * @param size\r\n   *          ImageSize object\r\n   "}]},{"name":"SessionBlob","fullyQualifiedName":"tools.descartes.teastore.entities.message.SessionBlob","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Constructor, creates an empty order.\r\n\t ","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Getter for the userid.\r\n\t * @return userid\r\n\t ","lineNumber":29,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Setter for the userid.\r\n\t * @param uID userid\r\n\t ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Getter for session id.\r\n\t * @return session id\r\n\t ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Setter for session id.\r\n\t * @param sID session id\r\n\t ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Getter for trust token.\r\n\t * @return trust token\r\n\t ","lineNumber":61,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Setter for trust token.\r\n\t * @param token trust token.\r\n\t ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Setter for the message.\r\n\t * @param message String\r\n\t ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Getter for the message.\r\n\t * @return message\r\n\t ","lineNumber":85,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Getter for order.\r\n\t * @return order\r\n\t ","lineNumber":93,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Setter for order.\r\n\t * @param order order\r\n\t ","lineNumber":101,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Getter for order items.\r\n\t * @return order items.\r\n\t ","lineNumber":109,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Setter for order items.\r\n\t * @param orderItems list of order items\r\n\t ","lineNumber":117,"isOrphan":false}],"allMethods":[{"fullQualified":"public Long getUID()","name":"getUID","type":"Long","javadoc":"\r\n\t * Getter for the userid.\r\n\t * @return userid\r\n\t "},{"fullQualified":"public void setUID(Long uID)","name":"setUID","type":"void","javadoc":"\r\n\t * Setter for the userid.\r\n\t * @param uID userid\r\n\t "},{"fullQualified":"public String getSID()","name":"getSID","type":"String","javadoc":"\r\n\t * Getter for session id.\r\n\t * @return session id\r\n\t "},{"fullQualified":"public void setSID(String sID)","name":"setSID","type":"void","javadoc":"\r\n\t * Setter for session id.\r\n\t * @param sID session id\r\n\t "},{"fullQualified":"public String getToken()","name":"getToken","type":"String","javadoc":"\r\n\t * Getter for trust token.\r\n\t * @return trust token\r\n\t "},{"fullQualified":"public void setToken(String token)","name":"setToken","type":"void","javadoc":"\r\n\t * Setter for trust token.\r\n\t * @param token trust token.\r\n\t "},{"fullQualified":"public void setMessage(String message)","name":"setMessage","type":"void","javadoc":"\r\n\t * Setter for the message.\r\n\t * @param message String\r\n\t "},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":"\r\n\t * Getter for the message.\r\n\t * @return message\r\n\t "},{"fullQualified":"public Order getOrder()","name":"getOrder","type":"Order","javadoc":"\r\n\t * Getter for order.\r\n\t * @return order\r\n\t "},{"fullQualified":"public void setOrder(Order order)","name":"setOrder","type":"void","javadoc":"\r\n\t * Setter for order.\r\n\t * @param order order\r\n\t "},{"fullQualified":"public List<OrderItem> getOrderItems()","name":"getOrderItems","type":"List<OrderItem>","javadoc":"\r\n\t * Getter for order items.\r\n\t * @return order items.\r\n\t "},{"fullQualified":"public void setOrderItems(List<OrderItem> orderItems)","name":"setOrderItems","type":"void","javadoc":"\r\n\t * Setter for order items.\r\n\t * @param orderItems list of order items\r\n\t "}],"allConstructors":[{"identifier":"public SessionBlob()","javadocComment":"\r\n\t * Constructor, creates an empty order.\r\n\t "}]},{"name":"Order","fullyQualifiedName":"tools.descartes.teastore.entities.Order","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Create a new and empty order.\r\n   ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Every entity needs a copy constructor.\r\n   * \r\n   * @param order\r\n   *          The order to copy.\r\n   ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n   * \r\n   * @return The id.\r\n   ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * For REST use only. Sets the ID. Ignored by persistence.\r\n   * \r\n   * @param id\r\n   *          ID, as passed by the REST API.\r\n   ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the User id.\r\n   * \r\n   * @return the userId.\r\n   ","lineNumber":82,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the User Id.\r\n   * \r\n   * @param userId\r\n   *          the userId to set.\r\n   ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the time of order (ISO formatted). Formatted using {@link DateTimeFormatter.ISO_LOCAL_DATE_TIME}.\r\n   * \r\n   * @return the time.\r\n   ","lineNumber":101,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the time of order (ISO formatted). Format using {@link DateTimeFormatter.ISO_LOCAL_DATE_TIME}.\r\n   * \r\n   * @param time\r\n   *          the time to set.\r\n   ","lineNumber":110,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the total price in cents.\r\n   * \r\n   * @return the totalPriceInCents.\r\n   ","lineNumber":120,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the total price in cents.\r\n   * \r\n   * @param totalPriceInCents\r\n   *          the totalPriceInCents to set.\r\n   ","lineNumber":129,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the name for the address.\r\n   * \r\n   * @return the addressName.\r\n   ","lineNumber":139,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the name for the address.\r\n   * \r\n   * @param addressName\r\n   *          the addressName to set.\r\n   ","lineNumber":148,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get address line 1.\r\n   * \r\n   * @return the address1.\r\n   ","lineNumber":158,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set address line 1.\r\n   * \r\n   * @param address1\r\n   *          the address1 to set.\r\n   ","lineNumber":167,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get address line 2.\r\n   * \r\n   * @return the address2.\r\n   ","lineNumber":177,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set address line 2.\r\n   * \r\n   * @param address2\r\n   *          the address2 to set.\r\n   ","lineNumber":186,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the name of the credit card company.\r\n   * \r\n   * @return the creditCardCompany.\r\n   ","lineNumber":196,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the name of the credit card company.\r\n   * \r\n   * @param creditCardCompany\r\n   *          the creditCardCompany to set.\r\n   ","lineNumber":205,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the credit card number.\r\n   * \r\n   * @return the creditCardNumber.\r\n   ","lineNumber":215,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the credit card number.\r\n   * \r\n   * @param creditCardNumber\r\n   *          the creditCardNumber to set.\r\n   ","lineNumber":224,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the credit card expiry date (ISO formatted). Formatted using {@link DateTimeFormatter.ISO_LOCAL_DATE}.\r\n   * \r\n   * @return the creditCardExpiryDate.\r\n   ","lineNumber":234,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the credit card expiry date (ISO formatted). Format using {@link DateTimeFormatter.ISO_LOCAL_DATE}.\r\n   * \r\n   * @param creditCardExpiryDate\r\n   *          the creditCardExpiryDate to set.\r\n   ","lineNumber":243,"isOrphan":false},{"type":"BlockComment","text":"\r\n   * (non-Javadoc)\r\n   * \r\n   * @see java.lang.Object#hashCode()\r\n   ","lineNumber":253,"isOrphan":false},{"type":"BlockComment","text":"\r\n   * (non-Javadoc)\r\n   * \r\n   * @see java.lang.Object#equals(java.lang.Object)\r\n   ","lineNumber":267,"isOrphan":false}],"allMethods":[{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n   * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n   * \r\n   * @return The id.\r\n   "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n   * For REST use only. Sets the ID. Ignored by persistence.\r\n   * \r\n   * @param id\r\n   *          ID, as passed by the REST API.\r\n   "},{"fullQualified":"public long getUserId()","name":"getUserId","type":"long","javadoc":"\r\n   * Get the User id.\r\n   * \r\n   * @return the userId.\r\n   "},{"fullQualified":"public void setUserId(long userId)","name":"setUserId","type":"void","javadoc":"\r\n   * Set the User Id.\r\n   * \r\n   * @param userId\r\n   *          the userId to set.\r\n   "},{"fullQualified":"public String getTime()","name":"getTime","type":"String","javadoc":"\r\n   * Get the time of order (ISO formatted). Formatted using {@link DateTimeFormatter.ISO_LOCAL_DATE_TIME}.\r\n   * \r\n   * @return the time.\r\n   "},{"fullQualified":"public void setTime(String time)","name":"setTime","type":"void","javadoc":"\r\n   * Set the time of order (ISO formatted). Format using {@link DateTimeFormatter.ISO_LOCAL_DATE_TIME}.\r\n   * \r\n   * @param time\r\n   *          the time to set.\r\n   "},{"fullQualified":"public long getTotalPriceInCents()","name":"getTotalPriceInCents","type":"long","javadoc":"\r\n   * Get the total price in cents.\r\n   * \r\n   * @return the totalPriceInCents.\r\n   "},{"fullQualified":"public void setTotalPriceInCents(long totalPriceInCents)","name":"setTotalPriceInCents","type":"void","javadoc":"\r\n   * Set the total price in cents.\r\n   * \r\n   * @param totalPriceInCents\r\n   *          the totalPriceInCents to set.\r\n   "},{"fullQualified":"public String getAddressName()","name":"getAddressName","type":"String","javadoc":"\r\n   * Get the name for the address.\r\n   * \r\n   * @return the addressName.\r\n   "},{"fullQualified":"public void setAddressName(String addressName)","name":"setAddressName","type":"void","javadoc":"\r\n   * Set the name for the address.\r\n   * \r\n   * @param addressName\r\n   *          the addressName to set.\r\n   "},{"fullQualified":"public String getAddress1()","name":"getAddress1","type":"String","javadoc":"\r\n   * Get address line 1.\r\n   * \r\n   * @return the address1.\r\n   "},{"fullQualified":"public void setAddress1(String address1)","name":"setAddress1","type":"void","javadoc":"\r\n   * Set address line 1.\r\n   * \r\n   * @param address1\r\n   *          the address1 to set.\r\n   "},{"fullQualified":"public String getAddress2()","name":"getAddress2","type":"String","javadoc":"\r\n   * Get address line 2.\r\n   * \r\n   * @return the address2.\r\n   "},{"fullQualified":"public void setAddress2(String address2)","name":"setAddress2","type":"void","javadoc":"\r\n   * Set address line 2.\r\n   * \r\n   * @param address2\r\n   *          the address2 to set.\r\n   "},{"fullQualified":"public String getCreditCardCompany()","name":"getCreditCardCompany","type":"String","javadoc":"\r\n   * Get the name of the credit card company.\r\n   * \r\n   * @return the creditCardCompany.\r\n   "},{"fullQualified":"public void setCreditCardCompany(String creditCardCompany)","name":"setCreditCardCompany","type":"void","javadoc":"\r\n   * Set the name of the credit card company.\r\n   * \r\n   * @param creditCardCompany\r\n   *          the creditCardCompany to set.\r\n   "},{"fullQualified":"public String getCreditCardNumber()","name":"getCreditCardNumber","type":"String","javadoc":"\r\n   * Get the credit card number.\r\n   * \r\n   * @return the creditCardNumber.\r\n   "},{"fullQualified":"public void setCreditCardNumber(String creditCardNumber)","name":"setCreditCardNumber","type":"void","javadoc":"\r\n   * Set the credit card number.\r\n   * \r\n   * @param creditCardNumber\r\n   *          the creditCardNumber to set.\r\n   "},{"fullQualified":"public String getCreditCardExpiryDate()","name":"getCreditCardExpiryDate","type":"String","javadoc":"\r\n   * Get the credit card expiry date (ISO formatted). Formatted using {@link DateTimeFormatter.ISO_LOCAL_DATE}.\r\n   * \r\n   * @return the creditCardExpiryDate.\r\n   "},{"fullQualified":"public void setCreditCardExpiryDate(String creditCardExpiryDate)","name":"setCreditCardExpiryDate","type":"void","javadoc":"\r\n   * Set the credit card expiry date (ISO formatted). Format using {@link DateTimeFormatter.ISO_LOCAL_DATE}.\r\n   * \r\n   * @param creditCardExpiryDate\r\n   *          the creditCardExpiryDate to set.\r\n   "},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public Order()","javadocComment":"\r\n   * Create a new and empty order.\r\n   "},{"identifier":"public Order(Order order)","javadocComment":"\r\n   * Every entity needs a copy constructor.\r\n   * \r\n   * @param order\r\n   *          The order to copy.\r\n   "}]},{"name":"OrderItem","fullyQualifiedName":"tools.descartes.teastore.entities.OrderItem","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Create a new and empty OrderItem.\r\n   ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Every Entity needs a Copy-Constructor!\r\n   * \r\n   * @param orderItem\r\n   *          The entity to Copy.\r\n   ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n   * \r\n   * @return The id.\r\n   ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * For REST use only. Sets the ID. Ignored by persistence.\r\n   * \r\n   * @param id\r\n   *          ID, as passed by the REST API.\r\n   ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * ID of the order item's product.\r\n   * \r\n   * @return Product Id;\r\n   ","lineNumber":70,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Sets the ID of the order item's product. Every order Item MUST have a valid product ID.\r\n   * \r\n   * @param productId\r\n   *          The product ID to set.\r\n   ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the quantity (amount in shopping cart/order).\r\n   * \r\n   * @return The quantity.\r\n   ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the quantity (amount in shopping cart/order).\r\n   * \r\n   * @param quantity\r\n   *          The quantity.\r\n   ","lineNumber":98,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * The price per single item in the order item.\r\n   * \r\n   * @return Price per single item.\r\n   ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the price per single item in the order item.\r\n   * \r\n   * @param unitPriceInCents\r\n   *          Price per single item.\r\n   ","lineNumber":117,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Gets the ID of the order item's order.\r\n   * \r\n   * @return The order ID.\r\n   ","lineNumber":127,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Sets the ID of the order item's order. Persistence requires that every order item MUST have a valid order ID. For\r\n   * persistence the order must already exist in database.\r\n   * \r\n   * @param orderId\r\n   *          The order ID to set.\r\n   ","lineNumber":136,"isOrphan":false},{"type":"BlockComment","text":"\r\n   * (non-Javadoc)\r\n   * \r\n   * @see java.lang.Object#hashCode()\r\n   ","lineNumber":147,"isOrphan":false},{"type":"BlockComment","text":"\r\n   * (non-Javadoc)\r\n   * \r\n   * @see java.lang.Object#equals(java.lang.Object)\r\n   ","lineNumber":162,"isOrphan":false}],"allMethods":[{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n   * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n   * \r\n   * @return The id.\r\n   "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n   * For REST use only. Sets the ID. Ignored by persistence.\r\n   * \r\n   * @param id\r\n   *          ID, as passed by the REST API.\r\n   "},{"fullQualified":"public long getProductId()","name":"getProductId","type":"long","javadoc":"\r\n   * ID of the order item's product.\r\n   * \r\n   * @return Product Id;\r\n   "},{"fullQualified":"public void setProductId(long productId)","name":"setProductId","type":"void","javadoc":"\r\n   * Sets the ID of the order item's product. Every order Item MUST have a valid product ID.\r\n   * \r\n   * @param productId\r\n   *          The product ID to set.\r\n   "},{"fullQualified":"public int getQuantity()","name":"getQuantity","type":"int","javadoc":"\r\n   * Get the quantity (amount in shopping cart/order).\r\n   * \r\n   * @return The quantity.\r\n   "},{"fullQualified":"public void setQuantity(int quantity)","name":"setQuantity","type":"void","javadoc":"\r\n   * Set the quantity (amount in shopping cart/order).\r\n   * \r\n   * @param quantity\r\n   *          The quantity.\r\n   "},{"fullQualified":"public long getUnitPriceInCents()","name":"getUnitPriceInCents","type":"long","javadoc":"\r\n   * The price per single item in the order item.\r\n   * \r\n   * @return Price per single item.\r\n   "},{"fullQualified":"public void setUnitPriceInCents(long unitPriceInCents)","name":"setUnitPriceInCents","type":"void","javadoc":"\r\n   * Set the price per single item in the order item.\r\n   * \r\n   * @param unitPriceInCents\r\n   *          Price per single item.\r\n   "},{"fullQualified":"public long getOrderId()","name":"getOrderId","type":"long","javadoc":"\r\n   * Gets the ID of the order item's order.\r\n   * \r\n   * @return The order ID.\r\n   "},{"fullQualified":"public void setOrderId(long orderId)","name":"setOrderId","type":"void","javadoc":"\r\n   * Sets the ID of the order item's order. Persistence requires that every order item MUST have a valid order ID. For\r\n   * persistence the order must already exist in database.\r\n   * \r\n   * @param orderId\r\n   *          The order ID to set.\r\n   "},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public OrderItem()","javadocComment":"\r\n   * Create a new and empty OrderItem.\r\n   "},{"identifier":"public OrderItem(OrderItem orderItem)","javadocComment":"\r\n   * Every Entity needs a Copy-Constructor!\r\n   * \r\n   * @param orderItem\r\n   *          The entity to Copy.\r\n   "}]},{"name":"Product","fullyQualifiedName":"tools.descartes.teastore.entities.Product","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Create a new and empty Product.\r\n   ","lineNumber":31,"isOrphan":false},{"type":"LineComment","text":" always use the setters when setting variables here","lineNumber":35,"isOrphan":true},{"type":"LineComment","text":" do not access the attributes directly","lineNumber":36,"isOrphan":true},{"type":"JavadocComment","text":"\r\n   * Every Entity needs a Copy-Constructor!\r\n   * \r\n   * @param product\r\n   *          The entity to Copy.\r\n   ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n   * \r\n   * @return The id.\r\n   ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * For REST use only. Sets the product ID. Ignored by persistence.\r\n   * \r\n   * @param id\r\n   *          Product ID, as passed by the REST API.\r\n   ","lineNumber":62,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the ID of the product's category.\r\n   * \r\n   * @return The category id.\r\n   ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * For REST use only. Sets the category ID. Ignored by persistence.\r\n   * \r\n   * @param categoryId\r\n   *          Category ID, as passed by the REST API.\r\n   ","lineNumber":81,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the name.\r\n   * \r\n   * @return The product name.\r\n   ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the name.\r\n   * \r\n   * @param name\r\n   *          The product name.\r\n   ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the description.\r\n   * \r\n   * @return The product description.\r\n   ","lineNumber":110,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the description.\r\n   * \r\n   * @param description\r\n   *          The product description.\r\n   ","lineNumber":119,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the product list price (recommended price per unit) in cents.\r\n   * \r\n   * @return The list price in cents.\r\n   ","lineNumber":129,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * For REST use only. Sets the product price in cents. Ignored by persistence.\r\n   * \r\n   * @param listPriceInCents\r\n   *          The price in cents, as passed by the REST API.\r\n   ","lineNumber":138,"isOrphan":false},{"type":"BlockComment","text":"\r\n   * (non-Javadoc)\r\n   * \r\n   * @see java.lang.Object#hashCode()\r\n   ","lineNumber":148,"isOrphan":false},{"type":"BlockComment","text":"\r\n   * (non-Javadoc)\r\n   * \r\n   * @see java.lang.Object#equals(java.lang.Object)\r\n   ","lineNumber":162,"isOrphan":false}],"allMethods":[{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n   * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n   * \r\n   * @return The id.\r\n   "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n   * For REST use only. Sets the product ID. Ignored by persistence.\r\n   * \r\n   * @param id\r\n   *          Product ID, as passed by the REST API.\r\n   "},{"fullQualified":"public long getCategoryId()","name":"getCategoryId","type":"long","javadoc":"\r\n   * Set the ID of the product's category.\r\n   * \r\n   * @return The category id.\r\n   "},{"fullQualified":"public void setCategoryId(long categoryId)","name":"setCategoryId","type":"void","javadoc":"\r\n   * For REST use only. Sets the category ID. Ignored by persistence.\r\n   * \r\n   * @param categoryId\r\n   *          Category ID, as passed by the REST API.\r\n   "},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":"\r\n   * Get the name.\r\n   * \r\n   * @return The product name.\r\n   "},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":"\r\n   * Set the name.\r\n   * \r\n   * @param name\r\n   *          The product name.\r\n   "},{"fullQualified":"public String getDescription()","name":"getDescription","type":"String","javadoc":"\r\n   * Get the description.\r\n   * \r\n   * @return The product description.\r\n   "},{"fullQualified":"public void setDescription(String description)","name":"setDescription","type":"void","javadoc":"\r\n   * Set the description.\r\n   * \r\n   * @param description\r\n   *          The product description.\r\n   "},{"fullQualified":"public long getListPriceInCents()","name":"getListPriceInCents","type":"long","javadoc":"\r\n   * Get the product list price (recommended price per unit) in cents.\r\n   * \r\n   * @return The list price in cents.\r\n   "},{"fullQualified":"public void setListPriceInCents(long listPriceInCents)","name":"setListPriceInCents","type":"void","javadoc":"\r\n   * For REST use only. Sets the product price in cents. Ignored by persistence.\r\n   * \r\n   * @param listPriceInCents\r\n   *          The price in cents, as passed by the REST API.\r\n   "},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public Product()","javadocComment":"\r\n   * Create a new and empty Product.\r\n   "},{"identifier":"public Product(Product product)","javadocComment":"\r\n   * Every Entity needs a Copy-Constructor!\r\n   * \r\n   * @param product\r\n   *          The entity to Copy.\r\n   "}]},{"name":"User","fullyQualifiedName":"tools.descartes.teastore.entities.User","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Create a new and empty user.\r\n   ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Every entity needs a copy constructor.\r\n   * \r\n   * @param user\r\n   *          The user to copy.\r\n   ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n   * \r\n   * @return The id.\r\n   ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * For REST use only. Sets the ID. Ignored by persistence.\r\n   * \r\n   * @param id\r\n   *          ID, as passed by the REST API.\r\n   ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the Username.\r\n   * \r\n   * @return the userName.\r\n   ","lineNumber":70,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the username, should only be set at creation.\r\n   * \r\n   * @param userName\r\n   *          the userName to set.\r\n   ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the password hash.\r\n   * \r\n   * @return the password hash.\r\n   ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the password hash.\r\n   * \r\n   * @param password\r\n   *          the password hash to set.\r\n   ","lineNumber":98,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the user's real name.\r\n   * \r\n   * @return the realName.\r\n   ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the user's real name.\r\n   * \r\n   * @param realName\r\n   *          the realName to set.\r\n   ","lineNumber":117,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the user's email address.\r\n   * \r\n   * @return the email.\r\n   ","lineNumber":127,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Set the user's email address.\r\n   * \r\n   * @param email\r\n   *          the email to set.\r\n   ","lineNumber":136,"isOrphan":false},{"type":"BlockComment","text":"\r\n   * (non-Javadoc)\r\n   * \r\n   * @see java.lang.Object#hashCode()\r\n   ","lineNumber":146,"isOrphan":false},{"type":"BlockComment","text":"\r\n   * (non-Javadoc)\r\n   * \r\n   * @see java.lang.Object#equals(java.lang.Object)\r\n   ","lineNumber":164,"isOrphan":false}],"allMethods":[{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n   * Get the id (remember that this ID may be incorrect, especially if a separate id was passed).\r\n   * \r\n   * @return The id.\r\n   "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n   * For REST use only. Sets the ID. Ignored by persistence.\r\n   * \r\n   * @param id\r\n   *          ID, as passed by the REST API.\r\n   "},{"fullQualified":"public String getUserName()","name":"getUserName","type":"String","javadoc":"\r\n   * Get the Username.\r\n   * \r\n   * @return the userName.\r\n   "},{"fullQualified":"public void setUserName(String userName)","name":"setUserName","type":"void","javadoc":"\r\n   * Set the username, should only be set at creation.\r\n   * \r\n   * @param userName\r\n   *          the userName to set.\r\n   "},{"fullQualified":"public String getPassword()","name":"getPassword","type":"String","javadoc":"\r\n   * Get the password hash.\r\n   * \r\n   * @return the password hash.\r\n   "},{"fullQualified":"public void setPassword(String password)","name":"setPassword","type":"void","javadoc":"\r\n   * Set the password hash.\r\n   * \r\n   * @param password\r\n   *          the password hash to set.\r\n   "},{"fullQualified":"public String getRealName()","name":"getRealName","type":"String","javadoc":"\r\n   * Get the user's real name.\r\n   * \r\n   * @return the realName.\r\n   "},{"fullQualified":"public void setRealName(String realName)","name":"setRealName","type":"void","javadoc":"\r\n   * Set the user's real name.\r\n   * \r\n   * @param realName\r\n   *          the realName to set.\r\n   "},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":"\r\n   * Get the user's email address.\r\n   * \r\n   * @return the email.\r\n   "},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":"\r\n   * Set the user's email address.\r\n   * \r\n   * @param email\r\n   *          the email to set.\r\n   "},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public User()","javadocComment":"\r\n   * Create a new and empty user.\r\n   "},{"identifier":"public User(User user)","javadocComment":"\r\n   * Every entity needs a copy constructor.\r\n   * \r\n   * @param user\r\n   *          The user to copy.\r\n   "}]},{"name":"InterfaceTests","fullyQualifiedName":"tools.descartes.teastore.entities.InterfaceTests","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"AuthCartRest","fullyQualifiedName":"tools.descartes.teastore.auth.rest.AuthCartRest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Adds product to cart. If the product is already in the cart the quantity is\r\n   * increased.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          productid\r\n   * @return Response containing session blob with updated cart\r\n   ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Remove product from cart.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          product id\r\n   * @return Response containing Sessionblob with updated cart\r\n   ","lineNumber":84,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Updates quantity of product in cart.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          Productid\r\n   * @param quantity\r\n   *          New quantity\r\n   * @return Response containing Sessionblob with updated cart\r\n   ","lineNumber":111,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response addProductToCart(SessionBlob blob, @PathParam(\"pid\") final Long pid)","name":"addProductToCart","type":"Response","javadoc":"\r\n   * Adds product to cart. If the product is already in the cart the quantity is\r\n   * increased.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          productid\r\n   * @return Response containing session blob with updated cart\r\n   "},{"fullQualified":"public Response removeProductFromCart(SessionBlob blob, @PathParam(\"pid\") final Long pid)","name":"removeProductFromCart","type":"Response","javadoc":"\r\n   * Remove product from cart.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          product id\r\n   * @return Response containing Sessionblob with updated cart\r\n   "},{"fullQualified":"public Response updateQuantity(SessionBlob blob, @PathParam(\"pid\") final Long pid, @QueryParam(\"quantity\") int quantity)","name":"updateQuantity","type":"Response","javadoc":"\r\n   * Updates quantity of product in cart.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          Productid\r\n   * @param quantity\r\n   *          New quantity\r\n   * @return Response containing Sessionblob with updated cart\r\n   "}],"allConstructors":[]},{"name":"AuthUserActionsRest","fullyQualifiedName":"tools.descartes.teastore.auth.rest.AuthUserActionsRest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Persists order in database.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @param totalPriceInCents\r\n   *          totalPrice\r\n   * @param addressName\r\n   *          address\r\n   * @param address1\r\n   *          address\r\n   * @param address2\r\n   *          address\r\n   * @param creditCardCompany\r\n   *          creditcard\r\n   * @param creditCardNumber\r\n   *          creditcard\r\n   * @param creditCardExpiryDate\r\n   *          creditcard\r\n   * @return Response containing SessionBlob\r\n   ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * User login.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @param name\r\n   *          Username\r\n   * @param password\r\n   *          password\r\n   * @return Response with SessionBlob containing login information.\r\n   ","lineNumber":120,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * User logout.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @return Response with SessionBlob\r\n   ","lineNumber":155,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks if user is logged in.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @return Response with true if logged in\r\n   ","lineNumber":172,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response placeOrder(SessionBlob blob, @QueryParam(\"totalPriceInCents\") long totalPriceInCents, @QueryParam(\"addressName\") String addressName, @QueryParam(\"address1\") String address1, @QueryParam(\"address2\") String address2, @QueryParam(\"creditCardCompany\") String creditCardCompany, @QueryParam(\"creditCardNumber\") String creditCardNumber, @QueryParam(\"creditCardExpiryDate\") String creditCardExpiryDate)","name":"placeOrder","type":"Response","javadoc":"\r\n   * Persists order in database.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @param totalPriceInCents\r\n   *          totalPrice\r\n   * @param addressName\r\n   *          address\r\n   * @param address1\r\n   *          address\r\n   * @param address2\r\n   *          address\r\n   * @param creditCardCompany\r\n   *          creditcard\r\n   * @param creditCardNumber\r\n   *          creditcard\r\n   * @param creditCardExpiryDate\r\n   *          creditcard\r\n   * @return Response containing SessionBlob\r\n   "},{"fullQualified":"public Response login(SessionBlob blob, @QueryParam(\"name\") String name, @QueryParam(\"password\") String password)","name":"login","type":"Response","javadoc":"\r\n   * User login.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @param name\r\n   *          Username\r\n   * @param password\r\n   *          password\r\n   * @return Response with SessionBlob containing login information.\r\n   "},{"fullQualified":"public Response logout(SessionBlob blob)","name":"logout","type":"Response","javadoc":"\r\n   * User logout.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @return Response with SessionBlob\r\n   "},{"fullQualified":"public Response isLoggedIn(SessionBlob blob)","name":"isLoggedIn","type":"Response","javadoc":"\r\n   * Checks if user is logged in.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @return Response with true if logged in\r\n   "}],"allConstructors":[]},{"name":"ReadyRest","fullyQualifiedName":"tools.descartes.teastore.auth.rest.ReadyRest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * This methods checks, if the service is ready.\r\n   * \r\n   * @return True, if recommender is ready; false, if not.\r\n   ","lineNumber":32,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response isReady()","name":"isReady","type":"Response","javadoc":"\r\n   * This methods checks, if the service is ready.\r\n   * \r\n   * @return True, if recommender is ready; false, if not.\r\n   "}],"allConstructors":[]},{"name":"BCryptProvider","fullyQualifiedName":"tools.descartes.teastore.auth.security.BCryptProvider","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Hides default constructor.\r\n   ","lineNumber":12,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * validate password using BCrypt.\r\n   * @param password password\r\n   * @param password2 other password\r\n   * @return true if password is correct\r\n   ","lineNumber":19,"isOrphan":false}],"allMethods":[{"fullQualified":"public static boolean checkPassword(String password, String password2)","name":"checkPassword","type":"boolean","javadoc":"\r\n   * validate password using BCrypt.\r\n   * @param password password\r\n   * @param password2 other password\r\n   * @return true if password is correct\r\n   "}],"allConstructors":[{"identifier":"private BCryptProvider()","javadocComment":"\r\n   * Hides default constructor.\r\n   "}]},{"name":"ConstantKeyProvider","fullyQualifiedName":"tools.descartes.teastore.auth.security.ConstantKeyProvider","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":28,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getKey(SessionBlob blob)","name":"getKey","type":"String","javadoc":"\r\n   * {@inheritDoc}\r\n   "}],"allConstructors":[]},{"name":"IKeyProvider","fullyQualifiedName":"tools.descartes.teastore.auth.security.IKeyProvider","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Returns a key for a session blob. Key must be the same, regardless of the\r\n   * store instance upon which this call is made.\r\n   * \r\n   * @param blob\r\n   *          The blob to secure.\r\n   * @return The key.\r\n   ","lineNumber":28,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getKey(SessionBlob blob)","name":"getKey","type":"String","javadoc":"\r\n   * Returns a key for a session blob. Key must be the same, regardless of the\r\n   * store instance upon which this call is made.\r\n   * \r\n   * @param blob\r\n   *          The blob to secure.\r\n   * @return The key.\r\n   "}],"allConstructors":[]},{"name":"ISecurityProvider","fullyQualifiedName":"tools.descartes.teastore.auth.security.ISecurityProvider","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Get the key provider for this security provider.\r\n   * \r\n   * @return The key provider.\r\n   ","lineNumber":27,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Secures a session blob. May encrypt or hash values within the blob.\r\n   * \r\n   * @param blob\r\n   *          The blob to secure.\r\n   * @return A secure blob to be passed on to the web ui.\r\n   ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Validates a secured session blob. Returns a valid and readable (e.g.\r\n   * decrypted) blob. Returns null for invalid blobs.\r\n   * \r\n   * @param blob\r\n   *          The blob to secure.\r\n   * @return The valid and readable (e.g. decrypted) blob. Returns null for\r\n   *         invalid blobs.\r\n   ","lineNumber":43,"isOrphan":false}],"allMethods":[{"fullQualified":"public IKeyProvider getKeyProvider()","name":"getKeyProvider","type":"IKeyProvider","javadoc":"\r\n   * Get the key provider for this security provider.\r\n   * \r\n   * @return The key provider.\r\n   "},{"fullQualified":"public SessionBlob secure(SessionBlob blob)","name":"secure","type":"SessionBlob","javadoc":"\r\n   * Secures a session blob. May encrypt or hash values within the blob.\r\n   * \r\n   * @param blob\r\n   *          The blob to secure.\r\n   * @return A secure blob to be passed on to the web ui.\r\n   "},{"fullQualified":"public SessionBlob validate(SessionBlob blob)","name":"validate","type":"SessionBlob","javadoc":"\r\n   * Validates a secured session blob. Returns a valid and readable (e.g.\r\n   * decrypted) blob. Returns null for invalid blobs.\r\n   * \r\n   * @param blob\r\n   *          The blob to secure.\r\n   * @return The valid and readable (e.g. decrypted) blob. Returns null for\r\n   *         invalid blobs.\r\n   "}],"allConstructors":[]},{"name":"ISessionIdGenerator","fullyQualifiedName":"tools.descartes.teastore.auth.security.ISessionIdGenerator","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Generates session id.\r\n   * \r\n   * @return session id\r\n   ","lineNumber":11,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getSessionId()","name":"getSessionId","type":"String","javadoc":"\r\n   * Generates session id.\r\n   * \r\n   * @return session id\r\n   "}],"allConstructors":[]},{"name":"RandomSessionIdGenerator","fullyQualifiedName":"tools.descartes.teastore.auth.security.RandomSessionIdGenerator","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getSessionId()","name":"getSessionId","type":"String","javadoc":null}],"allConstructors":[]},{"name":"ShaSecurityProvider","fullyQualifiedName":"tools.descartes.teastore.auth.security.ShaSecurityProvider","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public IKeyProvider getKeyProvider()","name":"getKeyProvider","type":"IKeyProvider","javadoc":null},{"fullQualified":"public SessionBlob secure(SessionBlob blob)","name":"secure","type":"SessionBlob","javadoc":null},{"fullQualified":"private String blobToString(SessionBlob blob)","name":"blobToString","type":"String","javadoc":null},{"fullQualified":"public SessionBlob validate(SessionBlob blob)","name":"validate","type":"SessionBlob","javadoc":null},{"fullQualified":"private String getSha512(String passwordToHash)","name":"getSha512","type":"String","javadoc":null}],"allConstructors":[]},{"name":"AuthStartup","fullyQualifiedName":"tools.descartes.teastore.auth.startup.AuthStartup","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Also set this accordingly in RegistryClientStartup.\r\n   ","lineNumber":39,"isOrphan":true},{"type":"JavadocComment","text":"\r\n   * Empty constructor.\r\n   ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * shutdown routine.\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param event The servlet context event at destruction.\r\n   ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * startup routine.\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param event The servlet context event at initialization.\r\n   ","lineNumber":59,"isOrphan":false}],"allMethods":[{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":"\r\n   * shutdown routine.\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param event The servlet context event at destruction.\r\n   "},{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":"\r\n   * startup routine.\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param event The servlet context event at initialization.\r\n   "}],"allConstructors":[{"identifier":"public AuthStartup()","javadocComment":"\r\n   * Empty constructor.\r\n   "}]},{"name":"ConstantKeyProviderTest","fullyQualifiedName":"tools.descartes.teastore.auth.security.ConstantKeyProviderTest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * checks the getKey() functionality.\r\n   ","lineNumber":17,"isOrphan":false}],"allMethods":[{"fullQualified":"public void test()","name":"test","type":"void","javadoc":"\r\n   * checks the getKey() functionality.\r\n   "}],"allConstructors":[]},{"name":"ShaSecurityProviderTest","fullyQualifiedName":"tools.descartes.teastore.auth.security.ShaSecurityProviderTest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * checks security token behavior.\r\n   ","lineNumber":17,"isOrphan":false}],"allMethods":[{"fullQualified":"public void test()","name":"test","type":"void","javadoc":"\r\n   * checks security token behavior.\r\n   "}],"allConstructors":[]},{"name":"AbstractCache","fullyQualifiedName":"tools.descartes.teastore.image.cache.AbstractCache","isInterface":false,"codeComments":[{"type":"BlockComment","text":"\r\n   * Implementations for interface IDataCache\r\n   ","lineNumber":125,"isOrphan":true},{"type":"BlockComment","text":"\r\n   * Implementations for interface IDataStorage\r\n   ","lineNumber":231,"isOrphan":true},{"type":"BlockComment","text":"\r\n   * Modifier for current cache size\r\n   ","lineNumber":288,"isOrphan":true},{"type":"BlockComment","text":"\r\n   * Abstract methods to store data that is implementation specific\r\n   ","lineNumber":322,"isOrphan":true},{"type":"JavadocComment","text":"\r\n   * Basic abstract cache constructor for subclasses.  \r\n   * @param entries Collection to store entries.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum memory used by the cache in bytes.\r\n   * @param cachingRule Caching rule determining if data should be cached.\r\n   ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the storage object queried if entry cannot be found in the cache.\r\n   * @return Storage object.\r\n   ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the collection containing all cached entries.\r\n   * @return Entry collection.\r\n   ","lineNumber":85,"isOrphan":false},{"type":"LineComment","text":" Set entries must be reordered. A change in the object itself will not trigger","lineNumber":104,"isOrphan":true},{"type":"LineComment","text":" a reordering","lineNumber":105,"isOrphan":false},{"type":"LineComment","text":" If the new cache size is smaller than the old one, we might need to evict","lineNumber":144,"isOrphan":true},{"type":"LineComment","text":" entries","lineNumber":145,"isOrphan":false},{"type":"LineComment","text":" Search entry in cache","lineNumber":253,"isOrphan":false},{"type":"LineComment","text":" No entry in cache found, search in underlying storage","lineNumber":256,"isOrphan":false},{"type":"LineComment","text":" Data found, cache it and return","lineNumber":261,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Changes the current memory size of this cache by subtracting the given byte size from the current size.\r\n   * @param size Bytes removed from cache.\r\n   ","lineNumber":292,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Changes the current memory size of this cache by adding the given byte size to the current size.\r\n   * @param size Bytes added to cache.\r\n   ","lineNumber":309,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Creates a wrapper object that can be stored in the cache, containing the given data.\r\n   * @param data Data to wrap in cache entry wrapper object.\r\n   * @return Wrapped cache entry.\r\n   ","lineNumber":326,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Inserts a given entry wrapper object into the cache.\r\n   * @param data Wrapper object to insert into internal collection.\r\n   ","lineNumber":333,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Evicts one entry in the cache according to the caching strategy of a specific implementation.\r\n   ","lineNumber":343,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Tags an element as used and restores order in the entry collection as the wrapper object has changed.\r\n   * @param data Wrapper object to tag as used.\r\n   ","lineNumber":348,"isOrphan":false},{"type":"LineComment","text":" In the best case, we only have to tag the data as used","lineNumber":353,"isOrphan":false}],"allMethods":[{"fullQualified":"protected IDataStorage<T> getCachedStorage()","name":"getCachedStorage","type":"IDataStorage<T>","javadoc":"\r\n   * Returns the storage object queried if entry cannot be found in the cache.\r\n   * @return Storage object.\r\n   "},{"fullQualified":"protected S getEntries()","name":"getEntries","type":"S","javadoc":"\r\n   * Returns the collection containing all cached entries.\r\n   * @return Entry collection.\r\n   "},{"fullQualified":"private F findInEntries(long id)","name":"findInEntries","type":"F","javadoc":null},{"fullQualified":"private T getData(long id, boolean markUsed)","name":"getData","type":"T","javadoc":null},{"fullQualified":"public long getMaxCacheSize()","name":"getMaxCacheSize","type":"long","javadoc":null},{"fullQualified":"public boolean setMaxCacheSize(long maxCacheSize)","name":"setMaxCacheSize","type":"boolean","javadoc":null},{"fullQualified":"public long getCurrentCacheSize()","name":"getCurrentCacheSize","type":"long","javadoc":null},{"fullQualified":"public long getFreeSpace()","name":"getFreeSpace","type":"long","javadoc":null},{"fullQualified":"public boolean hasStorageFor(long size)","name":"hasStorageFor","type":"boolean","javadoc":null},{"fullQualified":"public void cacheData(T data)","name":"cacheData","type":"void","javadoc":null},{"fullQualified":"public void uncacheData(T data)","name":"uncacheData","type":"void","javadoc":null},{"fullQualified":"public boolean dataIsCachable(T data)","name":"dataIsCachable","type":"boolean","javadoc":null},{"fullQualified":"public boolean dataIsInCache(long id)","name":"dataIsInCache","type":"boolean","javadoc":null},{"fullQualified":"public void clearCache()","name":"clearCache","type":"void","javadoc":null},{"fullQualified":"public boolean dataExists(long id)","name":"dataExists","type":"boolean","javadoc":null},{"fullQualified":"public T loadData(long id)","name":"loadData","type":"T","javadoc":null},{"fullQualified":"public boolean saveData(T data)","name":"saveData","type":"boolean","javadoc":null},{"fullQualified":"public boolean dataIsStorable(T data)","name":"dataIsStorable","type":"boolean","javadoc":null},{"fullQualified":"public boolean deleteData(T data)","name":"deleteData","type":"boolean","javadoc":null},{"fullQualified":"protected void dataRemovedFromCache(long size)","name":"dataRemovedFromCache","type":"void","javadoc":"\r\n   * Changes the current memory size of this cache by subtracting the given byte size from the current size.\r\n   * @param size Bytes removed from cache.\r\n   "},{"fullQualified":"protected void dataAddedToCache(long size)","name":"dataAddedToCache","type":"void","javadoc":"\r\n   * Changes the current memory size of this cache by adding the given byte size to the current size.\r\n   * @param size Bytes added to cache.\r\n   "},{"fullQualified":"protected abstract F createEntry(T data)","name":"createEntry","type":"F","javadoc":"\r\n   * Creates a wrapper object that can be stored in the cache, containing the given data.\r\n   * @param data Data to wrap in cache entry wrapper object.\r\n   * @return Wrapped cache entry.\r\n   "},{"fullQualified":"protected void addEntry(F data)","name":"addEntry","type":"void","javadoc":"\r\n   * Inserts a given entry wrapper object into the cache.\r\n   * @param data Wrapper object to insert into internal collection.\r\n   "},{"fullQualified":"protected abstract void removeEntryByCachingStrategy()","name":"removeEntryByCachingStrategy","type":"void","javadoc":"\r\n   * Evicts one entry in the cache according to the caching strategy of a specific implementation.\r\n   "},{"fullQualified":"protected void reorderAndTag(F data)","name":"reorderAndTag","type":"void","javadoc":"\r\n   * Tags an element as used and restores order in the entry collection as the wrapper object has changed.\r\n   * @param data Wrapper object to tag as used.\r\n   "}],"allConstructors":[{"identifier":"public AbstractCache(S entries, IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * Basic abstract cache constructor for subclasses.  \r\n   * @param entries Collection to store entries.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum memory used by the cache in bytes.\r\n   * @param cachingRule Caching rule determining if data should be cached.\r\n   "}]},{"name":"AbstractQueueCache","fullyQualifiedName":"tools.descartes.teastore.image.cache.AbstractQueueCache","isInterface":false,"codeComments":[{"type":"BlockComment","text":"\r\n   * Implementations of abstract superclass\r\n   ","lineNumber":43,"isOrphan":true},{"type":"JavadocComment","text":"\r\n   * Base constructor used by specific implementations.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum memory used by the cache in bytes.\r\n   * @param cachingRule Caching rule determining if data should be cached.\r\n   ","lineNumber":32,"isOrphan":false}],"allMethods":[{"fullQualified":"public SimpleEntry<T> createEntry(T data)","name":"createEntry","type":"SimpleEntry<T>","javadoc":null},{"fullQualified":"protected abstract void removeEntryByCachingStrategy()","name":"removeEntryByCachingStrategy","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public AbstractQueueCache(IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * Base constructor used by specific implementations.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum memory used by the cache in bytes.\r\n   * @param cachingRule Caching rule determining if data should be cached.\r\n   "}]},{"name":"AbstractTreeCache","fullyQualifiedName":"tools.descartes.teastore.image.cache.AbstractTreeCache","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Base constructor used by specific implementations.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum memory used by the cache in bytes.\r\n   * @param cachingRule Caching rule determining if data should be cached.\r\n   * @param ordering Predicate determining the eviction strategy (sorting if the internal tree) if no memory is left. \r\n   ","lineNumber":34,"isOrphan":false}],"allMethods":[{"fullQualified":"protected abstract F createEntry(T data)","name":"createEntry","type":"F","javadoc":null},{"fullQualified":"protected void removeEntryByCachingStrategy()","name":"removeEntryByCachingStrategy","type":"void","javadoc":null},{"fullQualified":"protected void reorderAndTag(F data)","name":"reorderAndTag","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public AbstractTreeCache(IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule, Comparator<F> ordering)","javadocComment":"\r\n   * Base constructor used by specific implementations.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum memory used by the cache in bytes.\r\n   * @param cachingRule Caching rule determining if data should be cached.\r\n   * @param ordering Predicate determining the eviction strategy (sorting if the internal tree) if no memory is left. \r\n   "}]},{"name":"AbstractEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.AbstractEntry","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Basic constructor storing the cachable data. If the cachable data supplied is\r\n   * null, a {@link java.lang.NullPointerException} is thrown.\r\n   * \r\n   * @param data\r\n   *          Cachable data\r\n   ","lineNumber":33,"isOrphan":false}],"allMethods":[{"fullQualified":"public D getData()","name":"getData","type":"D","javadoc":null},{"fullQualified":"public abstract void wasUsed()","name":"wasUsed","type":"void","javadoc":null},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":null},{"fullQualified":"public long getByteSize()","name":"getByteSize","type":"long","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public AbstractEntry(D data)","javadocComment":"\r\n   * Basic constructor storing the cachable data. If the cachable data supplied is\r\n   * null, a {@link java.lang.NullPointerException} is thrown.\r\n   * \r\n   * @param data\r\n   *          Cachable data\r\n   "}]},{"name":"CountedEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.CountedEntry","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Basic constructor storing the cachable data. If the cachable data supplied is\r\n   * null, a {@link java.lang.NullPointerException} is thrown.\r\n   * \r\n   * @param data\r\n   *          Cachable data\r\n   ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns how often the entry was retrieved from cache.\r\n   * \r\n   * @return Number of times this entry was retrieved from cache\r\n   ","lineNumber":44,"isOrphan":false}],"allMethods":[{"fullQualified":"public int getUseCount()","name":"getUseCount","type":"int","javadoc":"\r\n   * Returns how often the entry was retrieved from cache.\r\n   * \r\n   * @return Number of times this entry was retrieved from cache\r\n   "},{"fullQualified":"public void wasUsed()","name":"wasUsed","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public CountedEntry(D data)","javadocComment":"\r\n   * Basic constructor storing the cachable data. If the cachable data supplied is\r\n   * null, a {@link java.lang.NullPointerException} is thrown.\r\n   * \r\n   * @param data\r\n   *          Cachable data\r\n   "}]},{"name":"ICachable","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.ICachable","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Returns the byte size of the cachable data.\r\n   * \r\n   * @return The byte size of the cachable data\r\n   ","lineNumber":29,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the unique identifier of the cachable data.\r\n   * \r\n   * @return The unique identifier of the cachable data\r\n   ","lineNumber":36,"isOrphan":false}],"allMethods":[{"fullQualified":"public long getByteSize()","name":"getByteSize","type":"long","javadoc":"\r\n   * Returns the byte size of the cachable data.\r\n   * \r\n   * @return The byte size of the cachable data\r\n   "},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n   * Returns the unique identifier of the cachable data.\r\n   * \r\n   * @return The unique identifier of the cachable data\r\n   "}],"allConstructors":[]},{"name":"ICacheEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.ICacheEntry","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Method signaling to the wrapper that this entry was read from the cache.\r\n   ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the cachable data stored in this wrapper class.\r\n   * \r\n   * @return The cachable data\r\n   ","lineNumber":33,"isOrphan":false}],"allMethods":[{"fullQualified":"public void wasUsed()","name":"wasUsed","type":"void","javadoc":"\r\n   * Method signaling to the wrapper that this entry was read from the cache.\r\n   "},{"fullQualified":"public T getData()","name":"getData","type":"T","javadoc":"\r\n   * Returns the cachable data stored in this wrapper class.\r\n   * \r\n   * @return The cachable data\r\n   "}],"allConstructors":[]},{"name":"SimpleEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.SimpleEntry","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Basic constructor storing the cachable data. If the cachable data supplied is\r\n   * null, a {@link java.lang.NullPointerException} is thrown.\r\n   * \r\n   * @param data\r\n   *          Cachable data\r\n   ","lineNumber":28,"isOrphan":false},{"type":"LineComment","text":" There is nothing to do.","lineNumber":41,"isOrphan":true}],"allMethods":[{"fullQualified":"public void wasUsed()","name":"wasUsed","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public SimpleEntry(D data)","javadocComment":"\r\n   * Basic constructor storing the cachable data. If the cachable data supplied is\r\n   * null, a {@link java.lang.NullPointerException} is thrown.\r\n   * \r\n   * @param data\r\n   *          Cachable data\r\n   "}]},{"name":"TimedEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.TimedEntry","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Basic constructor storing the cachable data. If the cachable data supplied is\r\n   * null, a {@link java.lang.NullPointerException} is thrown.\r\n   * \r\n   * @param data\r\n   *          Cachable data\r\n   ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the last time this entry was retrieved from cache.\r\n   * \r\n   * @return The last time in nanoseconds\r\n   ","lineNumber":46,"isOrphan":false}],"allMethods":[{"fullQualified":"public long getTime()","name":"getTime","type":"long","javadoc":"\r\n   * Returns the last time this entry was retrieved from cache.\r\n   * \r\n   * @return The last time in nanoseconds\r\n   "},{"fullQualified":"public void wasUsed()","name":"wasUsed","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public TimedEntry(D data)","javadocComment":"\r\n   * Basic constructor storing the cachable data. If the cachable data supplied is\r\n   * null, a {@link java.lang.NullPointerException} is thrown.\r\n   * \r\n   * @param data\r\n   *          Cachable data\r\n   "}]},{"name":"FirstInFirstOut","fullyQualifiedName":"tools.descartes.teastore.image.cache.FirstInFirstOut","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * FIFO cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * FIFO cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * FIFO cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * FIFO cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":56,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void removeEntryByCachingStrategy()","name":"removeEntryByCachingStrategy","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FirstInFirstOut()","javadocComment":"\r\n   * FIFO cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   "},{"identifier":"public FirstInFirstOut(long maxCacheSize)","javadocComment":"\r\n   * FIFO cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   "},{"identifier":"public FirstInFirstOut(long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * FIFO cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "},{"identifier":"public FirstInFirstOut(IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * FIFO cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "}]},{"name":"IDataCache","fullyQualifiedName":"tools.descartes.teastore.image.cache.IDataCache","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Standard cache size of 3MiB.\r\n   ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the maximum cache size in bytes.\r\n   * @return Maximum cache size in bytes.\r\n   ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the current size of the data in the cache in bytes.\r\n   * @return Current size of the data in the cache in bytes.\r\n   ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the remaining space for data in bytes.\r\n   * @return Remaining space for data in bytes.\r\n   ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks if there is enough space left for the given size.\r\n   * @param size Size to check for in bytes.\r\n   * @return True if the cache has enough memory left or false otherwise.\r\n   ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Inserts data into the cache if allowed by the caching rule. Will evict one or more entries if not enough memory \r\n   * is left.\r\n   * @param data Data object to cache.\r\n   ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Remove data from cache.\r\n   * @param data Data to be removed from cache.\r\n   ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks whether data is cachable according to the caching rule.\r\n   * @param data Data to be checked if it is cachable.\r\n   * @return True if the caching rule allows caching of the given object or false otherwise.\r\n   ","lineNumber":71,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks whether a given ID resides in the cache.\r\n   * @param id ID to check if it resides in the cache.\r\n   * @return True if the data with the given ID resides in cache or false otherwise.\r\n   ","lineNumber":78,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Resets the cache and deletes all elements from it.\r\n   ","lineNumber":85,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Changes the maximum cache size. If the new cache size is smaller than before, entries could be evicted according \r\n   * to the eviction strategy.\r\n   * @param cacheSize Positive maximum size of the cache in bytes.\r\n   * @return True if the new cache size was successfully set or false otherwise.\r\n   ","lineNumber":90,"isOrphan":false}],"allMethods":[{"fullQualified":"public long getMaxCacheSize()","name":"getMaxCacheSize","type":"long","javadoc":"\r\n   * Returns the maximum cache size in bytes.\r\n   * @return Maximum cache size in bytes.\r\n   "},{"fullQualified":"public long getCurrentCacheSize()","name":"getCurrentCacheSize","type":"long","javadoc":"\r\n   * Returns the current size of the data in the cache in bytes.\r\n   * @return Current size of the data in the cache in bytes.\r\n   "},{"fullQualified":"public long getFreeSpace()","name":"getFreeSpace","type":"long","javadoc":"\r\n   * Returns the remaining space for data in bytes.\r\n   * @return Remaining space for data in bytes.\r\n   "},{"fullQualified":"public boolean hasStorageFor(long size)","name":"hasStorageFor","type":"boolean","javadoc":"\r\n   * Checks if there is enough space left for the given size.\r\n   * @param size Size to check for in bytes.\r\n   * @return True if the cache has enough memory left or false otherwise.\r\n   "},{"fullQualified":"public void cacheData(T data)","name":"cacheData","type":"void","javadoc":"\r\n   * Inserts data into the cache if allowed by the caching rule. Will evict one or more entries if not enough memory \r\n   * is left.\r\n   * @param data Data object to cache.\r\n   "},{"fullQualified":"public void uncacheData(T data)","name":"uncacheData","type":"void","javadoc":"\r\n   * Remove data from cache.\r\n   * @param data Data to be removed from cache.\r\n   "},{"fullQualified":"public boolean dataIsCachable(T data)","name":"dataIsCachable","type":"boolean","javadoc":"\r\n   * Checks whether data is cachable according to the caching rule.\r\n   * @param data Data to be checked if it is cachable.\r\n   * @return True if the caching rule allows caching of the given object or false otherwise.\r\n   "},{"fullQualified":"public boolean dataIsInCache(long id)","name":"dataIsInCache","type":"boolean","javadoc":"\r\n   * Checks whether a given ID resides in the cache.\r\n   * @param id ID to check if it resides in the cache.\r\n   * @return True if the data with the given ID resides in cache or false otherwise.\r\n   "},{"fullQualified":"public void clearCache()","name":"clearCache","type":"void","javadoc":"\r\n   * Resets the cache and deletes all elements from it.\r\n   "},{"fullQualified":"public boolean setMaxCacheSize(long cacheSize)","name":"setMaxCacheSize","type":"boolean","javadoc":"\r\n   * Changes the maximum cache size. If the new cache size is smaller than before, entries could be evicted according \r\n   * to the eviction strategy.\r\n   * @param cacheSize Positive maximum size of the cache in bytes.\r\n   * @return True if the new cache size was successfully set or false otherwise.\r\n   "}],"allConstructors":[]},{"name":"LastInFirstOut","fullyQualifiedName":"tools.descartes.teastore.image.cache.LastInFirstOut","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * LIFO cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * LIFO cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * LIFO cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * LIFO cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":56,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void removeEntryByCachingStrategy()","name":"removeEntryByCachingStrategy","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public LastInFirstOut()","javadocComment":"\r\n   * LIFO cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   "},{"identifier":"public LastInFirstOut(long maxCacheSize)","javadocComment":"\r\n   * LIFO cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   "},{"identifier":"public LastInFirstOut(long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * LIFO cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "},{"identifier":"public LastInFirstOut(IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * LIFO cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "}]},{"name":"LeastFrequentlyUsed","fullyQualifiedName":"tools.descartes.teastore.image.cache.LeastFrequentlyUsed","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * LFU cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * LFU cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * LFU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * LFU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":58,"isOrphan":false}],"allMethods":[{"fullQualified":"protected CountedEntry<T> createEntry(T data)","name":"createEntry","type":"CountedEntry<T>","javadoc":null}],"allConstructors":[{"identifier":"public LeastFrequentlyUsed()","javadocComment":"\r\n   * LFU cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   "},{"identifier":"public LeastFrequentlyUsed(long maxCacheSize)","javadocComment":"\r\n   * LFU cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   "},{"identifier":"public LeastFrequentlyUsed(long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * LFU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "},{"identifier":"public LeastFrequentlyUsed(IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * LFU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "}]},{"name":"LeastRecentlyUsed","fullyQualifiedName":"tools.descartes.teastore.image.cache.LeastRecentlyUsed","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * LRU cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * LRU cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * LRU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":47,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * LRU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":57,"isOrphan":false}],"allMethods":[{"fullQualified":"protected TimedEntry<T> createEntry(T data)","name":"createEntry","type":"TimedEntry<T>","javadoc":null}],"allConstructors":[{"identifier":"public LeastRecentlyUsed()","javadocComment":"\r\n   * LRU cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   "},{"identifier":"public LeastRecentlyUsed(long maxCacheSize)","javadocComment":"\r\n   * LRU cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   "},{"identifier":"public LeastRecentlyUsed(long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * LRU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "},{"identifier":"public LeastRecentlyUsed(IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * LRU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "}]},{"name":"MostRecentlyUsed","fullyQualifiedName":"tools.descartes.teastore.image.cache.MostRecentlyUsed","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * MRU cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * MRU cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * MRU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":47,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * MRU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":57,"isOrphan":false}],"allMethods":[{"fullQualified":"protected TimedEntry<T> createEntry(T data)","name":"createEntry","type":"TimedEntry<T>","javadoc":null}],"allConstructors":[{"identifier":"public MostRecentlyUsed()","javadocComment":"\r\n   * MRU cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   "},{"identifier":"public MostRecentlyUsed(long maxCacheSize)","javadocComment":"\r\n   * MRU cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   "},{"identifier":"public MostRecentlyUsed(long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * MRU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "},{"identifier":"public MostRecentlyUsed(IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * MRU cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "}]},{"name":"RandomReplacement","fullyQualifiedName":"tools.descartes.teastore.image.cache.RandomReplacement","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * RR cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * RR cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * RR cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * RR cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   ","lineNumber":59,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * RR cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache. The given seed will be used for the random number generator to behave deterministically.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   * @param seed Specified seed for the random number generator.\r\n   ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Sets the seed for the random number generator to the given value.\r\n   * @param seed Specified seed for the random number generator.\r\n   ","lineNumber":87,"isOrphan":false}],"allMethods":[{"fullQualified":"public void setSeed(long seed)","name":"setSeed","type":"void","javadoc":"\r\n   * Sets the seed for the random number generator to the given value.\r\n   * @param seed Specified seed for the random number generator.\r\n   "},{"fullQualified":"protected void removeEntryByCachingStrategy()","name":"removeEntryByCachingStrategy","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public RandomReplacement()","javadocComment":"\r\n   * RR cache standard constructor setting the maximum cache size to the standard value \r\n   * {@link tools.descartes.teastore.image.cache.IDataCache.STD_MAX_CACHE_SIZE} and allowing all data to be cached.\r\n   "},{"identifier":"public RandomReplacement(long maxCacheSize)","javadocComment":"\r\n   * RR cache constructor setting the maximum cache size to the given size and allowing all data to be cached.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   "},{"identifier":"public RandomReplacement(long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * RR cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "},{"identifier":"public RandomReplacement(IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule)","javadocComment":"\r\n   * RR cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   "},{"identifier":"public RandomReplacement(IDataStorage<T> cachedStorage, long maxCacheSize, Predicate<T> cachingRule, long seed)","javadocComment":"\r\n   * RR cache constructor setting the maximum cache size to the given size and caching only data that is tested true \r\n   * for the given caching rule. This constructor also lets you set the underlying storage, queried if an entry is not \r\n   * found in the cache. The given seed will be used for the random number generator to behave deterministically.\r\n   * @param cachedStorage Storage object to query if an entry is not found in the cache.\r\n   * @param maxCacheSize Maximum cache size in bytes.\r\n   * @param cachingRule Cache rule determining which data will be cached.\r\n   * @param seed Specified seed for the random number generator.\r\n   "}]},{"name":"CacheAll","fullyQualifiedName":"tools.descartes.teastore.image.cache.rules.CacheAll","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean test(T t)","name":"test","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"ImageDB","fullyQualifiedName":"tools.descartes.teastore.image.ImageDB","isInterface":false,"codeComments":[{"type":"LineComment","text":" Internal storage container to allow mapping product IDs and image names (for","lineNumber":35,"isOrphan":true},{"type":"LineComment","text":" non-generated images) to images","lineNumber":36,"isOrphan":true},{"type":"LineComment","text":" with different sizes","lineNumber":37,"isOrphan":false},{"type":"LineComment","text":" Locking","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Standard constructor creating a new and empty image database.\r\n   ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Copy constructor making a shallow copy of the given image database. If the\r\n   * database to copy is null, a {@link java.lang.NullPointerException} will be\r\n   * thrown.\r\n   * \r\n   * @param copy\r\n   *          Image database to copy.\r\n   ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks whether a given image key (product ID or name) is available in the\r\n   * given size. If the given image key is null, a\r\n   * {@link java.lang.NullPointerException} will be thrown.\r\n   * \r\n   * @param imageKey\r\n   *          Image key to check for\r\n   * @param imageSize\r\n   *          Image size to check for\r\n   * @return True if the image was found in the correct size, otherwise false\r\n   ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks whether a given product ID is available in the given size.\r\n   * \r\n   * @param productID\r\n   *          Product ID to check for\r\n   * @param imageSize\r\n   *          Image size to check for\r\n   * @return True if the image was found in the correct size, otherwise false\r\n   ","lineNumber":95,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks whether a given image name is available in the given size.\r\n   * \r\n   * @param name\r\n   *          Image name to check for\r\n   * @param imageSize\r\n   *          Image size to check for\r\n   * @return True if the image was found in the correct size, otherwise false\r\n   ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Finds and returns the image ID for the given image key (product ID or name)\r\n   * and size. If the image key cannot be found or is not available in the given\r\n   * size, 0 will be returned. If the image key is null, a\r\n   * {@link java.lang.NullPointerException} will be thrown.\r\n   * \r\n   * @param imageKey\r\n   *          Image key to find\r\n   * @param imageSize\r\n   *          Image size to find\r\n   * @return The image ID if the image with the size was found, otherwise 0\r\n   ","lineNumber":121,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Finds and returns the image ID for the given product ID and size. If the\r\n   * product ID cannot be found or is not available in the given size, 0 will be\r\n   * returned.\r\n   * \r\n   * @param productID\r\n   *          Product ID to find\r\n   * @param imageSize\r\n   *          Image size to find\r\n   * @return The image ID if the image with the size was found, otherwise 0\r\n   ","lineNumber":145,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Finds and returns the image ID for the given image name and size. If the name\r\n   * cannot be found or is not available in the given size, 0 will be returned.\r\n   * \r\n   * @param name\r\n   *          Image name to find\r\n   * @param imageSize\r\n   *          Image size to find\r\n   * @return The image ID if the image with the size was found, otherwise 0\r\n   ","lineNumber":160,"isOrphan":false},{"type":"LineComment","text":" Does actually all the heavy lifting for the getImageID methods","lineNumber":174,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the image size for a given image ID or null if it could not be found.\r\n   * \r\n   * @param imageID\r\n   *          The image ID to get the image size for\r\n   * @return The image size or null if the ID could not be found\r\n   ","lineNumber":192,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Creates a new mapping between, an image key (either product ID or name), the\r\n   * unique image ID and the size of the image. If the image key or image size is\r\n   * null, a {@link java.lang.NullPointerException} will be thrown.\r\n   * \r\n   * @param imageKey\r\n   *          The image key, either product ID or image name\r\n   * @param imageID\r\n   *          The unique image ID\r\n   * @param imageSize\r\n   *          The size of the image\r\n   ","lineNumber":210,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Creates a new mapping between, a product ID, the unique image ID and the size\r\n   * of the image. If the image size is null, a\r\n   * {@link java.lang.NullPointerException} will be thrown.\r\n   * \r\n   * @param productID\r\n   *          The product ID\r\n   * @param imageID\r\n   *          The unique image ID\r\n   * @param imageSize\r\n   *          The size of the image\r\n   ","lineNumber":235,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Creates a new mapping between, an image name, the unique image ID and the\r\n   * size of the image. If the image name or size is null, a\r\n   * {@link java.lang.NullPointerExcpetion} will be thrown.\r\n   * \r\n   * @param name\r\n   *          The image name\r\n   * @param imageID\r\n   *          The unique image ID\r\n   * @param imageSize\r\n   *          The size of the image\r\n   ","lineNumber":251,"isOrphan":false},{"type":"LineComment","text":" Actually creates the image mapping","lineNumber":272,"isOrphan":false},{"type":"LineComment","text":" In case the product ID or image name is not known, we create a new map to","lineNumber":280,"isOrphan":true},{"type":"LineComment","text":" store the mapping","lineNumber":281,"isOrphan":false},{"type":"LineComment","text":" Add the new mapping to the internal map and put it back into the correct","lineNumber":290,"isOrphan":true},{"type":"LineComment","text":" database (map)","lineNumber":291,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Removes an image id from the database. This will not delete an image but just remove all connections between a \r\n   * product or WebUI id and the given image id.\r\n   * @param imageID Image ID to remove from this database.\r\n   ","lineNumber":300,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean hasImageID(ImageDBKey imageKey, ImageSize imageSize)","name":"hasImageID","type":"boolean","javadoc":"\r\n   * Checks whether a given image key (product ID or name) is available in the\r\n   * given size. If the given image key is null, a\r\n   * {@link java.lang.NullPointerException} will be thrown.\r\n   * \r\n   * @param imageKey\r\n   *          Image key to check for\r\n   * @param imageSize\r\n   *          Image size to check for\r\n   * @return True if the image was found in the correct size, otherwise false\r\n   "},{"fullQualified":"public boolean hasImageID(long productID, ImageSize imageSize)","name":"hasImageID","type":"boolean","javadoc":"\r\n   * Checks whether a given product ID is available in the given size.\r\n   * \r\n   * @param productID\r\n   *          Product ID to check for\r\n   * @param imageSize\r\n   *          Image size to check for\r\n   * @return True if the image was found in the correct size, otherwise false\r\n   "},{"fullQualified":"public boolean hasImageID(String name, ImageSize imageSize)","name":"hasImageID","type":"boolean","javadoc":"\r\n   * Checks whether a given image name is available in the given size.\r\n   * \r\n   * @param name\r\n   *          Image name to check for\r\n   * @param imageSize\r\n   *          Image size to check for\r\n   * @return True if the image was found in the correct size, otherwise false\r\n   "},{"fullQualified":"public long getImageID(ImageDBKey imageKey, ImageSize imageSize)","name":"getImageID","type":"long","javadoc":"\r\n   * Finds and returns the image ID for the given image key (product ID or name)\r\n   * and size. If the image key cannot be found or is not available in the given\r\n   * size, 0 will be returned. If the image key is null, a\r\n   * {@link java.lang.NullPointerException} will be thrown.\r\n   * \r\n   * @param imageKey\r\n   *          Image key to find\r\n   * @param imageSize\r\n   *          Image size to find\r\n   * @return The image ID if the image with the size was found, otherwise 0\r\n   "},{"fullQualified":"public long getImageID(long productID, ImageSize imageSize)","name":"getImageID","type":"long","javadoc":"\r\n   * Finds and returns the image ID for the given product ID and size. If the\r\n   * product ID cannot be found or is not available in the given size, 0 will be\r\n   * returned.\r\n   * \r\n   * @param productID\r\n   *          Product ID to find\r\n   * @param imageSize\r\n   *          Image size to find\r\n   * @return The image ID if the image with the size was found, otherwise 0\r\n   "},{"fullQualified":"public long getImageID(String name, ImageSize imageSize)","name":"getImageID","type":"long","javadoc":"\r\n   * Finds and returns the image ID for the given image name and size. If the name\r\n   * cannot be found or is not available in the given size, 0 will be returned.\r\n   * \r\n   * @param name\r\n   *          Image name to find\r\n   * @param imageSize\r\n   *          Image size to find\r\n   * @return The image ID if the image with the size was found, otherwise 0\r\n   "},{"fullQualified":"private long findImageID(K key, ImageSize imageSize, HashMap<K, Map<Long, ImageSize>> db)","name":"findImageID","type":"long","javadoc":null},{"fullQualified":"public ImageSize getImageSize(long imageID)","name":"getImageSize","type":"ImageSize","javadoc":"\r\n   * Returns the image size for a given image ID or null if it could not be found.\r\n   * \r\n   * @param imageID\r\n   *          The image ID to get the image size for\r\n   * @return The image size or null if the ID could not be found\r\n   "},{"fullQualified":"public void setImageMapping(ImageDBKey imageKey, long imageID, ImageSize imageSize)","name":"setImageMapping","type":"void","javadoc":"\r\n   * Creates a new mapping between, an image key (either product ID or name), the\r\n   * unique image ID and the size of the image. If the image key or image size is\r\n   * null, a {@link java.lang.NullPointerException} will be thrown.\r\n   * \r\n   * @param imageKey\r\n   *          The image key, either product ID or image name\r\n   * @param imageID\r\n   *          The unique image ID\r\n   * @param imageSize\r\n   *          The size of the image\r\n   "},{"fullQualified":"public void setImageMapping(long productID, long imageID, ImageSize imageSize)","name":"setImageMapping","type":"void","javadoc":"\r\n   * Creates a new mapping between, a product ID, the unique image ID and the size\r\n   * of the image. If the image size is null, a\r\n   * {@link java.lang.NullPointerException} will be thrown.\r\n   * \r\n   * @param productID\r\n   *          The product ID\r\n   * @param imageID\r\n   *          The unique image ID\r\n   * @param imageSize\r\n   *          The size of the image\r\n   "},{"fullQualified":"public void setImageMapping(String name, long imageID, ImageSize imageSize)","name":"setImageMapping","type":"void","javadoc":"\r\n   * Creates a new mapping between, an image name, the unique image ID and the\r\n   * size of the image. If the image name or size is null, a\r\n   * {@link java.lang.NullPointerExcpetion} will be thrown.\r\n   * \r\n   * @param name\r\n   *          The image name\r\n   * @param imageID\r\n   *          The unique image ID\r\n   * @param imageSize\r\n   *          The size of the image\r\n   "},{"fullQualified":"private void map(K key, long imageID, ImageSize imageSize, HashMap<K, Map<Long, ImageSize>> db)","name":"map","type":"void","javadoc":null},{"fullQualified":"public void removeImageMapping(long imageID)","name":"removeImageMapping","type":"void","javadoc":"\r\n   * Removes an image id from the database. This will not delete an image but just remove all connections between a \r\n   * product or WebUI id and the given image id.\r\n   * @param imageID Image ID to remove from this database.\r\n   "},{"fullQualified":"private void unmap(long imageID, HashMap<K, Map<Long, ImageSize>> db)","name":"unmap","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public ImageDB()","javadocComment":"\r\n   * Standard constructor creating a new and empty image database.\r\n   "},{"identifier":"public ImageDB(ImageDB copy)","javadocComment":"\r\n   * Copy constructor making a shallow copy of the given image database. If the\r\n   * database to copy is null, a {@link java.lang.NullPointerException} will be\r\n   * thrown.\r\n   * \r\n   * @param copy\r\n   *          Image database to copy.\r\n   "}]},{"name":"ImageDBKey","fullyQualifiedName":"tools.descartes.teastore.image.ImageDBKey","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * This entry will represent a product id in the image database.\r\n   * @param productID Product id.\r\n   ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * This entry will represents a product id in the image database.\r\n   * @param webuiName Web UI image name.\r\n   ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks whether this image database entry represents a product or a static image for the web interface. \r\n   * @return True if this image database entry represents a product id, otherwise false.\r\n   ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the stored product id this entry represents or zero if it represents a web interface entry.\r\n   * @return Product id or zero if it is a web interface entry.\r\n   ","lineNumber":54,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the stored web interface name or NULL if it represents a product id.\r\n   * @return Web interface image name or NULL if it represents a product id.\r\n   ","lineNumber":62,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean isProductKey()","name":"isProductKey","type":"boolean","javadoc":"\r\n   * Checks whether this image database entry represents a product or a static image for the web interface. \r\n   * @return True if this image database entry represents a product id, otherwise false.\r\n   "},{"fullQualified":"public long getProductID()","name":"getProductID","type":"long","javadoc":"\r\n   * Returns the stored product id this entry represents or zero if it represents a web interface entry.\r\n   * @return Product id or zero if it is a web interface entry.\r\n   "},{"fullQualified":"public String getWebUIName()","name":"getWebUIName","type":"String","javadoc":"\r\n   * Returns the stored web interface name or NULL if it represents a product id.\r\n   * @return Web interface image name or NULL if it represents a product id.\r\n   "}],"allConstructors":[{"identifier":"public ImageDBKey(long productID)","javadocComment":"\r\n   * This entry will represent a product id in the image database.\r\n   * @param productID Product id.\r\n   "},{"identifier":"public ImageDBKey(String webuiName)","javadocComment":"\r\n   * This entry will represents a product id in the image database.\r\n   * @param webuiName Web UI image name.\r\n   "}]},{"name":"ImageScaler","fullyQualifiedName":"tools.descartes.teastore.image.ImageScaler","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Scales a given image by rendering the supplied image to the size, determined\r\n   * by the given {@link tools.descartes.teastore.entities.ImageSize}. The method\r\n   * will throw a {@link java.lang.NullPointerException} if the supplied image or\r\n   * size is null.\r\n   * \r\n   * @param image\r\n   *          Image to scale to the given size\r\n   * @param size\r\n   *          Size to scale image to\r\n   * @return New image scaled to the given\r\n   *         {@link tools.descartes.teastore.entities.ImageSize}\r\n   ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Scales a given image by rendering the supplied image by the given scaling\r\n   * factor. Width and height are scaled by the same factor. Ratios above one will\r\n   * result in larger images and ratios below one will result in smaller images.\r\n   * The new image size is calculated by multiplying the ratio with the old image\r\n   * size. Numbers behind the decimal point will dropped (integer arithmetics).\r\n   * The method will throw an {@link java.lang.IllegalArgumentException} if the\r\n   * scaling factor is 0 or below. A {@link java.lang.NullPointerException} will\r\n   * be thrown if the supplied image is null.\r\n   * \r\n   * @param image\r\n   *          Image to scale by the given ratio\r\n   * @param scalingFactor\r\n   *          Ratio to scale image\r\n   * @return New image scaled by the given ratio\r\n   ","lineNumber":64,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Scales a given image by rendering the supplied image by the two given scaling\r\n   * factors for width and height. Width and height are scaled independently.\r\n   * Ratios above one will result in larger images and ratios below one will\r\n   * result in smaller images. The new image size is calculated by multiplying the\r\n   * ratio with the old image size. Numbers behind the decimal point will dropped\r\n   * (integer arithmetics). The method will throw an\r\n   * {@link java.lang.IllegalArgumentException} if either of the two scaling\r\n   * factors is 0 or below. A {@link java.lang.NullPointerException} will be\r\n   * thrown if the supplied image is null.\r\n   * \r\n   * @param image\r\n   *          Image to scale by the two given ratio\r\n   * @param widthScaling\r\n   *          Ratio to scale image width\r\n   * @param heightScaling\r\n   *          Ratio to scale image height\r\n   * @return New image scaled by the given ratios\r\n   ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Scales a given image by rendering the supplied image to the given size. The\r\n   * method will return a new image with the given size as width and height. The\r\n   * method will throw an {@link java.lang.IllegalArgumentException} if the pixel\r\n   * size is 0 or below. A {@link java.lang.NullPointerException} will be thrown\r\n   * if the supplied image is null\r\n   * \r\n   * @param image\r\n   *          Image to scale to the given size\r\n   * @param size\r\n   *          Size to scale image to in pixel\r\n   * @return New image scaled to the given size\r\n   ","lineNumber":132,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Scales a given image by rendering the supplied image with the given width and\r\n   * height into a new image and returning the new image. The method will throw an\r\n   * {@link java.lang.IllegalArgumentException} if either of the two image sizes\r\n   * is 0 or below. A {@link java.lang.NullPointerException} will be thrown if the\r\n   * supplied image is null.\r\n   * \r\n   * @param image\r\n   *          Image to scale to the given width and height\r\n   * @param width\r\n   *          Width to scale image to\r\n   * @param height\r\n   *          Height to scale image to\r\n   * @return New image scaled to the given width and height\r\n   ","lineNumber":154,"isOrphan":false}],"allMethods":[{"fullQualified":"public static BufferedImage scale(BufferedImage image, ImageSize size)","name":"scale","type":"BufferedImage","javadoc":"\r\n   * Scales a given image by rendering the supplied image to the size, determined\r\n   * by the given {@link tools.descartes.teastore.entities.ImageSize}. The method\r\n   * will throw a {@link java.lang.NullPointerException} if the supplied image or\r\n   * size is null.\r\n   * \r\n   * @param image\r\n   *          Image to scale to the given size\r\n   * @param size\r\n   *          Size to scale image to\r\n   * @return New image scaled to the given\r\n   *         {@link tools.descartes.teastore.entities.ImageSize}\r\n   "},{"fullQualified":"public static BufferedImage scale(BufferedImage image, double scalingFactor)","name":"scale","type":"BufferedImage","javadoc":"\r\n   * Scales a given image by rendering the supplied image by the given scaling\r\n   * factor. Width and height are scaled by the same factor. Ratios above one will\r\n   * result in larger images and ratios below one will result in smaller images.\r\n   * The new image size is calculated by multiplying the ratio with the old image\r\n   * size. Numbers behind the decimal point will dropped (integer arithmetics).\r\n   * The method will throw an {@link java.lang.IllegalArgumentException} if the\r\n   * scaling factor is 0 or below. A {@link java.lang.NullPointerException} will\r\n   * be thrown if the supplied image is null.\r\n   * \r\n   * @param image\r\n   *          Image to scale by the given ratio\r\n   * @param scalingFactor\r\n   *          Ratio to scale image\r\n   * @return New image scaled by the given ratio\r\n   "},{"fullQualified":"public static BufferedImage scale(BufferedImage image, double widthScaling, double heightScaling)","name":"scale","type":"BufferedImage","javadoc":"\r\n   * Scales a given image by rendering the supplied image by the two given scaling\r\n   * factors for width and height. Width and height are scaled independently.\r\n   * Ratios above one will result in larger images and ratios below one will\r\n   * result in smaller images. The new image size is calculated by multiplying the\r\n   * ratio with the old image size. Numbers behind the decimal point will dropped\r\n   * (integer arithmetics). The method will throw an\r\n   * {@link java.lang.IllegalArgumentException} if either of the two scaling\r\n   * factors is 0 or below. A {@link java.lang.NullPointerException} will be\r\n   * thrown if the supplied image is null.\r\n   * \r\n   * @param image\r\n   *          Image to scale by the two given ratio\r\n   * @param widthScaling\r\n   *          Ratio to scale image width\r\n   * @param heightScaling\r\n   *          Ratio to scale image height\r\n   * @return New image scaled by the given ratios\r\n   "},{"fullQualified":"public static BufferedImage scale(BufferedImage image, int size)","name":"scale","type":"BufferedImage","javadoc":"\r\n   * Scales a given image by rendering the supplied image to the given size. The\r\n   * method will return a new image with the given size as width and height. The\r\n   * method will throw an {@link java.lang.IllegalArgumentException} if the pixel\r\n   * size is 0 or below. A {@link java.lang.NullPointerException} will be thrown\r\n   * if the supplied image is null\r\n   * \r\n   * @param image\r\n   *          Image to scale to the given size\r\n   * @param size\r\n   *          Size to scale image to in pixel\r\n   * @return New image scaled to the given size\r\n   "},{"fullQualified":"public static BufferedImage scale(BufferedImage image, int width, int height)","name":"scale","type":"BufferedImage","javadoc":"\r\n   * Scales a given image by rendering the supplied image with the given width and\r\n   * height into a new image and returning the new image. The method will throw an\r\n   * {@link java.lang.IllegalArgumentException} if either of the two image sizes\r\n   * is 0 or below. A {@link java.lang.NullPointerException} will be thrown if the\r\n   * supplied image is null.\r\n   * \r\n   * @param image\r\n   *          Image to scale to the given width and height\r\n   * @param width\r\n   *          Width to scale image to\r\n   * @param height\r\n   *          Height to scale image to\r\n   * @return New image scaled to the given width and height\r\n   "}],"allConstructors":[{"identifier":"private ImageScaler()","javadocComment":null}]},{"name":"ImageProviderEndpoint","fullyQualifiedName":"tools.descartes.teastore.image.rest.ImageProviderEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Queries the image provider for the given product IDs in the given size, provided as strings.\r\n   * @param images Map of product IDs and the corresponding image size as string.\r\n   * @return Map of product IDs and the image data as base64 encoded string.\r\n   ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Queries the image provider for the given web interface image names in the given size, provided as strings.\r\n   * @param images Map of web interface image names and the corresponding image size as string.\r\n   * @return Map of web interface image names and the image data as base64 encoded string.\r\n   ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Signals the image provider to regenerate all product images. This is usually necessary if the product database\r\n   * changed.\r\n   * @return Returns status code 200.\r\n   ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks if the setup of the image provider and image generation has finished.\r\n   * @return Returns true if the setup is finished.\r\n   ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks the current state, configuration settings, number of images, cache size, etc., of the image provider.\r\n   * @return Returns a string containing the current state and configuration.\r\n   ","lineNumber":93,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Sets the cache size to the given value.\r\n   * @param cacheSize The new cache size in bytes. Cache size must be positive.\r\n   * @return True if the cache size was set successfully, otherwise false.\r\n   ","lineNumber":104,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response getProductImages(HashMap<Long, String> images)","name":"getProductImages","type":"Response","javadoc":"\r\n   * Queries the image provider for the given product IDs in the given size, provided as strings.\r\n   * @param images Map of product IDs and the corresponding image size as string.\r\n   * @return Map of product IDs and the image data as base64 encoded string.\r\n   "},{"fullQualified":"public Response getWebUIImages(HashMap<String, String> images)","name":"getWebUIImages","type":"Response","javadoc":"\r\n   * Queries the image provider for the given web interface image names in the given size, provided as strings.\r\n   * @param images Map of web interface image names and the corresponding image size as string.\r\n   * @return Map of web interface image names and the image data as base64 encoded string.\r\n   "},{"fullQualified":"public Response regenerateImages()","name":"regenerateImages","type":"Response","javadoc":"\r\n   * Signals the image provider to regenerate all product images. This is usually necessary if the product database\r\n   * changed.\r\n   * @return Returns status code 200.\r\n   "},{"fullQualified":"public Response isFinished()","name":"isFinished","type":"Response","javadoc":"\r\n   * Checks if the setup of the image provider and image generation has finished.\r\n   * @return Returns true if the setup is finished.\r\n   "},{"fullQualified":"public Response getState()","name":"getState","type":"Response","javadoc":"\r\n   * Checks the current state, configuration settings, number of images, cache size, etc., of the image provider.\r\n   * @return Returns a string containing the current state and configuration.\r\n   "},{"fullQualified":"public Response setCacheSize(long cacheSize)","name":"setCacheSize","type":"Response","javadoc":"\r\n   * Sets the cache size to the given value.\r\n   * @param cacheSize The new cache size in bytes. Cache size must be positive.\r\n   * @return True if the cache size was set successfully, otherwise false.\r\n   "}],"allConstructors":[]},{"name":"CreatorFactory","fullyQualifiedName":"tools.descartes.teastore.image.setup.CreatorFactory","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Standard constructor defining all necessary information to create image generation runnables.\r\n   * @param shapesPerImage Number of shapes per generated image.\r\n   * @param imgDB Image database to add image to.\r\n   * @param imgSize Size of the images to generate.\r\n   * @param workingDir Directory to store images.\r\n   * @param products Product IDs for which images will be generated.\r\n   * @param categoryImages Category images that are added after random shapes for the image have been generated.\r\n   * @param nrOfImagesGenerated Current number of images that have been generated by all runnables.\r\n   ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Create the image generation runnable.\r\n   * @return Image generation runnable.\r\n   ","lineNumber":91,"isOrphan":false}],"allMethods":[{"fullQualified":"public Runnable newRunnable()","name":"newRunnable","type":"Runnable","javadoc":"\r\n   * Create the image generation runnable.\r\n   * @return Image generation runnable.\r\n   "}],"allConstructors":[{"identifier":"public CreatorFactory(int shapesPerImage, ImageDB imgDB, ImageSize imgSize, Path workingDir, Map<Category, List<Long>> products, Map<Category, BufferedImage> categoryImages, AtomicLong nrOfImagesGenerated)","javadocComment":"\r\n   * Standard constructor defining all necessary information to create image generation runnables.\r\n   * @param shapesPerImage Number of shapes per generated image.\r\n   * @param imgDB Image database to add image to.\r\n   * @param imgSize Size of the images to generate.\r\n   * @param workingDir Directory to store images.\r\n   * @param products Product IDs for which images will be generated.\r\n   * @param categoryImages Category images that are added after random shapes for the image have been generated.\r\n   * @param nrOfImagesGenerated Current number of images that have been generated by all runnables.\r\n   "}]},{"name":"CreatorRunner","fullyQualifiedName":"tools.descartes.teastore.image.setup.CreatorRunner","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Creates a new runnable object to generate a single image.\r\n   * @param imgDB Image database to add image to.\r\n   * @param size Size of the images to generate\r\n   * @param productID Product ID for which the images will be generated.\r\n   * @param shapesPerImage Number of shapes per generated image.\r\n   * @param categoryImage Category images that are added after random shapes for the image have been generated.\r\n   * @param workingDir Directory to store image.\r\n   * @param nrOfImagesGenerated Current number of images that have been generated by all runnables.\r\n   ","lineNumber":40,"isOrphan":false},{"type":"LineComment","text":" All products must be added to the database","lineNumber":70,"isOrphan":false},{"type":"LineComment","text":" Resolve path and create a new image","lineNumber":73,"isOrphan":false}],"allMethods":[{"fullQualified":"public void run()","name":"run","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public CreatorRunner(ImageDB imgDB, ImageSize size, long productID, int shapesPerImage, BufferedImage categoryImage, Path workingDir, AtomicLong nrOfImagesGenerated)","javadocComment":"\r\n   * Creates a new runnable object to generate a single image.\r\n   * @param imgDB Image database to add image to.\r\n   * @param size Size of the images to generate\r\n   * @param productID Product ID for which the images will be generated.\r\n   * @param shapesPerImage Number of shapes per generated image.\r\n   * @param categoryImage Category images that are added after random shapes for the image have been generated.\r\n   * @param workingDir Directory to store image.\r\n   * @param nrOfImagesGenerated Current number of images that have been generated by all runnables.\r\n   "}]},{"name":"ImageCreator","fullyQualifiedName":"tools.descartes.teastore.image.setup.ImageCreator","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Random number generator seed.\r\n   ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Standard number of shapes added for each image.\r\n   ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Maximum RGB color code used in determining the color of the background, a shape or text.\r\n   ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Maximum font size of random text in an image.\r\n   ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Maximum number of characters of random text in an image.\r\n   ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Maximum number for ascii character.\r\n   ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Create an image with the given number of shapes, with the given size. The shapes will be added to the supplied \r\n   * buffered image using the given random number generator.\r\n   * @param shapesPerImage Number of shapes added to the buffered image.\r\n   * @param categoryImg Image added at the end representing the product category.\r\n   * @param size Size of the image in pixel.\r\n   * @param rand Random number generator.\r\n   * @return Returns the given buffered image with the added shapes and category image.\r\n   ","lineNumber":67,"isOrphan":false}],"allMethods":[{"fullQualified":"public static BufferedImage createImage(int shapesPerImage, BufferedImage categoryImg, ImageSize size, Random rand)","name":"createImage","type":"BufferedImage","javadoc":"\r\n   * Create an image with the given number of shapes, with the given size. The shapes will be added to the supplied \r\n   * buffered image using the given random number generator.\r\n   * @param shapesPerImage Number of shapes added to the buffered image.\r\n   * @param categoryImg Image added at the end representing the product category.\r\n   * @param size Size of the image in pixel.\r\n   * @param rand Random number generator.\r\n   * @return Returns the given buffered image with the added shapes and category image.\r\n   "},{"fullQualified":"private static void drawCategoryImage(Graphics2D graphics, ImageSize maxSize, BufferedImage categoryImg, Random rand)","name":"drawCategoryImage","type":"void","javadoc":null},{"fullQualified":"private static void switchColor(Graphics2D graphics, Random rand)","name":"switchColor","type":"void","javadoc":null},{"fullQualified":"private static void makeRectangle(Graphics2D graphics, ImageSize maxSize, Random rand)","name":"makeRectangle","type":"void","javadoc":null},{"fullQualified":"private static void makeLine(Graphics2D graphics, ImageSize maxSize, Random rand)","name":"makeLine","type":"void","javadoc":null},{"fullQualified":"private static void makeOval(Graphics2D graphics, ImageSize maxSize, Random rand)","name":"makeOval","type":"void","javadoc":null},{"fullQualified":"private static void makeText(Graphics2D graphics, ImageSize maxSize, Random rand)","name":"makeText","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private ImageCreator()","javadocComment":null}]},{"name":"ImageProviderStartup","fullyQualifiedName":"tools.descartes.teastore.image.setup.ImageProviderStartup","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Empty constructor.\r\n   ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at destruction.\r\n   ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at initialization.\r\n   ","lineNumber":53,"isOrphan":false}],"allMethods":[{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":"\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at destruction.\r\n   "},{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":"\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at initialization.\r\n   "}],"allConstructors":[{"identifier":"public ImageProviderStartup()","javadocComment":"\r\n   * Empty constructor.\r\n   "}]},{"name":"SetupControllerConstants","fullyQualifiedName":"tools.descartes.teastore.image.setup.SetupController.SetupControllerConstants","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Standard working directory in which the images are stored.\r\n\t ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * Longest wait period before querying the persistence again if it is finished creating entries.\r\n     ","lineNumber":97,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * Wait time in ms before checking again for an existing persistence service.\r\n     ","lineNumber":102,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * Number of available logical cpus for image creation.\r\n     ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * Wait time in ms for the image creation thread pool to terminate all threads.\r\n     ","lineNumber":113,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * Wait time in ms (per image to generate) before an image provider service is registered if there is another\r\n     * image provider service registered.\r\n     ","lineNumber":118,"isOrphan":false}],"allMethods":[],"allConstructors":[]},{"name":"DriveStorage","fullyQualifiedName":"tools.descartes.teastore.image.storage.DriveStorage","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Standard constructor creating a storage in the working directory on the physical disc.\r\n   * @param workingDir Working directory on the physical disc where the data is stored.\r\n   * @param imgDB Image database containing the IDs for the data.\r\n   * @param storageRule Storage rule which data can be stored.\r\n   ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the stored image on the physical disc for a given image id at the given path.\r\n   * @param imgFile Image file path to load binary data.\r\n   * @param id Image id to acquire the correct lock prohibiting write access to the file.\r\n   * @return The image stored on disc or NULL if an IOException occurred during reading.\r\n   ","lineNumber":93,"isOrphan":false},{"type":"LineComment","text":" Try aquiring a lock for a file.","lineNumber":102,"isOrphan":false},{"type":"LineComment","text":" We return true so we do not trigger an error. This is intended","lineNumber":138,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean dataExists(long id)","name":"dataExists","type":"boolean","javadoc":null},{"fullQualified":"private ReadWriteLock getIDLock(long id)","name":"getIDLock","type":"ReadWriteLock","javadoc":null},{"fullQualified":"protected StoreImage loadFromDisk(Path imgFile, long id)","name":"loadFromDisk","type":"StoreImage","javadoc":"\r\n   * Returns the stored image on the physical disc for a given image id at the given path.\r\n   * @param imgFile Image file path to load binary data.\r\n   * @param id Image id to acquire the correct lock prohibiting write access to the file.\r\n   * @return The image stored on disc or NULL if an IOException occurred during reading.\r\n   "},{"fullQualified":"public StoreImage loadData(long id)","name":"loadData","type":"StoreImage","javadoc":null},{"fullQualified":"public boolean saveData(StoreImage data)","name":"saveData","type":"boolean","javadoc":null},{"fullQualified":"public boolean dataIsStorable(StoreImage data)","name":"dataIsStorable","type":"boolean","javadoc":null},{"fullQualified":"public boolean deleteData(StoreImage data)","name":"deleteData","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public DriveStorage(Path workingDir, ImageDB imgDB, Predicate<StoreImage> storageRule)","javadocComment":"\r\n   * Standard constructor creating a storage in the working directory on the physical disc.\r\n   * @param workingDir Working directory on the physical disc where the data is stored.\r\n   * @param imgDB Image database containing the IDs for the data.\r\n   * @param storageRule Storage rule which data can be stored.\r\n   "}]},{"name":"IDataStorage","fullyQualifiedName":"tools.descartes.teastore.image.storage.IDataStorage","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Check whether data with the given ID resides in the storage.\r\n   * @param id ID to check for.\r\n   * @return True if the data with the given ID is found, otherwise false.\r\n   ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the data with the given ID if it resides in the storage.\r\n   * @param id ID of data to load.\r\n   * @return The data if it resides in storage or NULL if ID does not reside in storage.\r\n   ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Save data in the storage.\r\n   * @param data Data to save in the storage.\r\n   * @return True if data was saved in the storage, otherwise false.\r\n   ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks whether data can be saved in the storage according to the storage rule.\r\n   * @param data Data to check if it complies with the storage rule and can be stored.\r\n   * @return True if the data complies with the storage rule, otherwise false.\r\n   ","lineNumber":47,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Removes the data from storage.\r\n   * @param data Data to be removed from storage.\r\n   * @return True if the data was deleted, otherwise false.\r\n   ","lineNumber":54,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean dataExists(long id)","name":"dataExists","type":"boolean","javadoc":"\r\n   * Check whether data with the given ID resides in the storage.\r\n   * @param id ID to check for.\r\n   * @return True if the data with the given ID is found, otherwise false.\r\n   "},{"fullQualified":"public T loadData(long id)","name":"loadData","type":"T","javadoc":"\r\n   * Returns the data with the given ID if it resides in the storage.\r\n   * @param id ID of data to load.\r\n   * @return The data if it resides in storage or NULL if ID does not reside in storage.\r\n   "},{"fullQualified":"public boolean saveData(T data)","name":"saveData","type":"boolean","javadoc":"\r\n   * Save data in the storage.\r\n   * @param data Data to save in the storage.\r\n   * @return True if data was saved in the storage, otherwise false.\r\n   "},{"fullQualified":"public boolean dataIsStorable(T data)","name":"dataIsStorable","type":"boolean","javadoc":"\r\n   * Checks whether data can be saved in the storage according to the storage rule.\r\n   * @param data Data to check if it complies with the storage rule and can be stored.\r\n   * @return True if the data complies with the storage rule, otherwise false.\r\n   "},{"fullQualified":"public boolean deleteData(T data)","name":"deleteData","type":"boolean","javadoc":"\r\n   * Removes the data from storage.\r\n   * @param data Data to be removed from storage.\r\n   * @return True if the data was deleted, otherwise false.\r\n   "}],"allConstructors":[]},{"name":"NoStorage","fullyQualifiedName":"tools.descartes.teastore.image.storage.NoStorage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean dataExists(long id)","name":"dataExists","type":"boolean","javadoc":null},{"fullQualified":"public T loadData(long id)","name":"loadData","type":"T","javadoc":null},{"fullQualified":"public boolean saveData(T data)","name":"saveData","type":"boolean","javadoc":null},{"fullQualified":"public boolean dataIsStorable(T data)","name":"dataIsStorable","type":"boolean","javadoc":null},{"fullQualified":"public boolean deleteData(T data)","name":"deleteData","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"StoreAll","fullyQualifiedName":"tools.descartes.teastore.image.storage.rules.StoreAll","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean test(T t)","name":"test","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"StoreLargeImages","fullyQualifiedName":"tools.descartes.teastore.image.storage.rules.StoreLargeImages","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean test(StoreImage t)","name":"test","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"StoreImage","fullyQualifiedName":"tools.descartes.teastore.image.StoreImage","isInterface":false,"codeComments":[{"type":"LineComment","text":" Converts the Java internal image representation to a byte array and encodes","lineNumber":134,"isOrphan":true},{"type":"JavadocComment","text":"\r\n   * Standard image format for storage (reading and writing).\r\n   ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * String prepended in the\r\n   * \r\n   * <pre>\r\n   * src\r\n   * </pre>\r\n   * \r\n   * attribute of an image tag for embedding the image data.\r\n   ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Creates a new store image with a given id and size. The image is converted\r\n   * from the Java internal representation to a base64 encoded byte array.\r\n   * \r\n   * @param id\r\n   *          The unique image id.\r\n   * @param image\r\n   *          The image data itself.\r\n   * @param size\r\n   *          The image size.\r\n   ","lineNumber":61,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Constructor.\r\n   * @param id imageId\r\n   * @param base64 base64 encoded byte array\r\n   * @param size Imagesize object\r\n   ","lineNumber":83,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Copy constructor for StoreImage.\r\n   * \r\n   * @param image\r\n   *          Image to copy.\r\n   ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the unique image identifier.\r\n   * \r\n   * @return Unique image id.\r\n   ","lineNumber":125,"isOrphan":false},{"type":"LineComment","text":" it in base64 for embedding.","lineNumber":135,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the image as the Java internal representation.\r\n   * \r\n   * @return The image itself.\r\n   ","lineNumber":146,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the image size.\r\n   * \r\n   * @return The image size.\r\n   ","lineNumber":162,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the number of bytes stored in the internal data structure.\r\n   * \r\n   * @return Number of bytes stored for this image.\r\n   ","lineNumber":171,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the base64 encoded byte array as string.\r\n   * \r\n   * @return Base64 encoded data as string.\r\n   ","lineNumber":181,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for bytearray.\r\n   * @return bytearray\r\n   ","lineNumber":190,"isOrphan":false},{"type":"LineComment","text":" Auto-generated","lineNumber":203,"isOrphan":false}],"allMethods":[{"fullQualified":"private void setImageSize(ImageSize size)","name":"setImageSize","type":"void","javadoc":null},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n   * Returns the unique image identifier.\r\n   * \r\n   * @return Unique image id.\r\n   "},{"fullQualified":"private void setImage(BufferedImage image)","name":"setImage","type":"void","javadoc":null},{"fullQualified":"public BufferedImage getImage()","name":"getImage","type":"BufferedImage","javadoc":"\r\n   * Returns the image as the Java internal representation.\r\n   * \r\n   * @return The image itself.\r\n   "},{"fullQualified":"public ImageSize getSize()","name":"getSize","type":"ImageSize","javadoc":"\r\n   * Returns the image size.\r\n   * \r\n   * @return The image size.\r\n   "},{"fullQualified":"public long getByteSize()","name":"getByteSize","type":"long","javadoc":"\r\n   * Returns the number of bytes stored in the internal data structure.\r\n   * \r\n   * @return Number of bytes stored for this image.\r\n   "},{"fullQualified":"public String getBase64()","name":"getBase64","type":"String","javadoc":"\r\n   * Returns the base64 encoded byte array as string.\r\n   * \r\n   * @return Base64 encoded data as string.\r\n   "},{"fullQualified":"public byte[] getByteArray()","name":"getByteArray","type":"byte[]","javadoc":"\r\n   * Getter for bytearray.\r\n   * @return bytearray\r\n   "},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public StoreImage(final long id, BufferedImage image, ImageSize size)","javadocComment":"\r\n   * Creates a new store image with a given id and size. The image is converted\r\n   * from the Java internal representation to a base64 encoded byte array.\r\n   * \r\n   * @param id\r\n   *          The unique image id.\r\n   * @param image\r\n   *          The image data itself.\r\n   * @param size\r\n   *          The image size.\r\n   "},{"identifier":"public StoreImage(final long id, byte[] base64, ImageSize size)","javadocComment":"\r\n   * Constructor.\r\n   * @param id imageId\r\n   * @param base64 base64 encoded byte array\r\n   * @param size Imagesize object\r\n   "},{"identifier":"public StoreImage(StoreImage image)","javadocComment":"\r\n   * Copy constructor for StoreImage.\r\n   * \r\n   * @param image\r\n   *          Image to copy.\r\n   "}]},{"name":"AbstractCacheTestInit","fullyQualifiedName":"tools.descartes.teastore.image.cache.AbstractCacheTestInit","isInterface":false,"codeComments":[{"type":"LineComment","text":" when(c0.getId()).thenReturn(0L);","lineNumber":25,"isOrphan":true},{"type":"LineComment","text":" when(c0.getByteSize()).thenReturn(1000L);","lineNumber":26,"isOrphan":true},{"type":"LineComment","text":" when(c0.equals(any())).thenReturn(false);","lineNumber":27,"isOrphan":true},{"type":"LineComment","text":" when(c0.equals(c0)).thenReturn(true);","lineNumber":28,"isOrphan":true},{"type":"LineComment","text":" when(c1.getId()).thenReturn(1L);","lineNumber":29,"isOrphan":true},{"type":"LineComment","text":" when(c1.getByteSize()).thenReturn(2000L);","lineNumber":30,"isOrphan":true},{"type":"LineComment","text":" when(c1.equals(any())).thenReturn(false);","lineNumber":31,"isOrphan":true},{"type":"LineComment","text":" when(c1.equals(c1)).thenReturn(true);","lineNumber":32,"isOrphan":true},{"type":"LineComment","text":" when(c2.getId()).thenReturn(2L);","lineNumber":33,"isOrphan":true},{"type":"LineComment","text":" when(c2.getByteSize()).thenReturn(3000L);","lineNumber":34,"isOrphan":true},{"type":"LineComment","text":" when(c2.equals(any())).thenReturn(false);","lineNumber":35,"isOrphan":true},{"type":"LineComment","text":" when(c2.equals(c2)).thenReturn(true);","lineNumber":36,"isOrphan":true},{"type":"LineComment","text":" when(c3.getId()).thenReturn(3L);","lineNumber":37,"isOrphan":true},{"type":"LineComment","text":" when(c3.getByteSize()).thenReturn(4000L);","lineNumber":38,"isOrphan":true},{"type":"LineComment","text":" when(c3.equals(any())).thenReturn(false);","lineNumber":39,"isOrphan":true},{"type":"LineComment","text":" when(c3.equals(c3)).thenReturn(true);","lineNumber":40,"isOrphan":false}],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AbstractCacheWrapper","fullyQualifiedName":"tools.descartes.teastore.image.cache.AbstractCacheWrapper","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void removeEntryByCachingStrategy()","name":"removeEntryByCachingStrategy","type":"void","javadoc":null},{"fullQualified":"protected ICacheEntry<StoreImage> createEntry(StoreImage data)","name":"createEntry","type":"ICacheEntry<StoreImage>","javadoc":null}],"allConstructors":[{"identifier":"public AbstractCacheWrapper(ArrayList<ICacheEntry<StoreImage>> entries, IDataStorage<StoreImage> cachedStorage, long maxCacheSize, Predicate<StoreImage> cachingRule)","javadocComment":null}]},{"name":"DummyData","fullyQualifiedName":"tools.descartes.teastore.image.cache.DummyData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public long getByteSize()","name":"getByteSize","type":"long","javadoc":null},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public DummyData(long id, long byteSize)","javadocComment":null}]},{"name":"DummyEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.DummyEntry","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void wasUsed()","name":"wasUsed","type":"void","javadoc":null},{"fullQualified":"public long getByteSize()","name":"getByteSize","type":"long","javadoc":null},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":null},{"fullQualified":"public StoreImage getData()","name":"getData","type":"StoreImage","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public DummyEntry(StoreImage data)","javadocComment":null}]},{"name":"AbstractEntryWrapper","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.AbstractEntryWrapper","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void wasUsed()","name":"wasUsed","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public AbstractEntryWrapper(StoreImage data)","javadocComment":null}]},{"name":"TestAbstractEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.TestAbstractEntry","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testConstructor()","name":"testConstructor","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNull()","name":"testConstructorNull","type":"void","javadoc":null},{"fullQualified":"public void testUseCount()","name":"testUseCount","type":"void","javadoc":null},{"fullQualified":"public void testGetData()","name":"testGetData","type":"void","javadoc":null},{"fullQualified":"public void testGetByteSize()","name":"testGetByteSize","type":"void","javadoc":null},{"fullQualified":"public void testGetID()","name":"testGetID","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestCountedEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.TestCountedEntry","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testConstructor()","name":"testConstructor","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNull()","name":"testConstructorNull","type":"void","javadoc":null},{"fullQualified":"public void testUseCount()","name":"testUseCount","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestSimpleEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.TestSimpleEntry","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testConstructor()","name":"testConstructor","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNull()","name":"testConstructorNull","type":"void","javadoc":null},{"fullQualified":"public void testUseCount()","name":"testUseCount","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestTimedEntry","fullyQualifiedName":"tools.descartes.teastore.image.cache.entry.TestTimedEntry","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testConstructor()","name":"testConstructor","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNull()","name":"testConstructorNull","type":"void","javadoc":null},{"fullQualified":"public void testTime()","name":"testTime","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestCacheAll","fullyQualifiedName":"tools.descartes.teastore.image.cache.rules.TestCacheAll","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testRule()","name":"testRule","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestAbstractCache","fullyQualifiedName":"tools.descartes.teastore.image.cache.TestAbstractCache","isInterface":false,"codeComments":[{"type":"LineComment","text":" Test not caching items larger than the max cache size (should not modify","lineNumber":402,"isOrphan":true},{"type":"LineComment","text":" Standard caching behavior","lineNumber":375,"isOrphan":false},{"type":"LineComment","text":" Caching duplicate","lineNumber":389,"isOrphan":false},{"type":"LineComment","text":" Test cache that denies all entries","lineNumber":394,"isOrphan":false},{"type":"LineComment","text":" already cached data)","lineNumber":403,"isOrphan":false}],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testConstructor()","name":"testConstructor","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageNull()","name":"testConstructorStorageNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorCollectionNull()","name":"testConstructorCollectionNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorPredicateNull()","name":"testConstructorPredicateNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorZeroSize()","name":"testConstructorZeroSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNegativeSize()","name":"testConstructorNegativeSize","type":"void","javadoc":null},{"fullQualified":"public void testGetMaxCacheSize()","name":"testGetMaxCacheSize","type":"void","javadoc":null},{"fullQualified":"public void testGetCurrentCacheSize()","name":"testGetCurrentCacheSize","type":"void","javadoc":null},{"fullQualified":"public void testGetFreeSpace()","name":"testGetFreeSpace","type":"void","javadoc":null},{"fullQualified":"public void testHasStorageFor()","name":"testHasStorageFor","type":"void","javadoc":null},{"fullQualified":"public void testUncacheData()","name":"testUncacheData","type":"void","javadoc":null},{"fullQualified":"public void testDataIsCachable()","name":"testDataIsCachable","type":"void","javadoc":null},{"fullQualified":"public void testDataIsInCache()","name":"testDataIsInCache","type":"void","javadoc":null},{"fullQualified":"public void testClearCache()","name":"testClearCache","type":"void","javadoc":null},{"fullQualified":"public void testSetMaxCacheSize()","name":"testSetMaxCacheSize","type":"void","javadoc":null},{"fullQualified":"public void testDataExists()","name":"testDataExists","type":"void","javadoc":null},{"fullQualified":"public void testLoadData()","name":"testLoadData","type":"void","javadoc":null},{"fullQualified":"public void testSaveData()","name":"testSaveData","type":"void","javadoc":null},{"fullQualified":"public void testDataIsStorable()","name":"testDataIsStorable","type":"void","javadoc":null},{"fullQualified":"public void testDeleteData()","name":"testDeleteData","type":"void","javadoc":null},{"fullQualified":"public void testCacheData()","name":"testCacheData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestFirstInFirstOut","fullyQualifiedName":"tools.descartes.teastore.image.cache.TestFirstInFirstOut","isInterface":false,"codeComments":[{"type":"LineComment","text":" Standard caching behavior","lineNumber":55,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testConstructorSimple()","name":"testConstructorSimple","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSize()","name":"testConstructorSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSizePredicate()","name":"testConstructorSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageSizePredicate()","name":"testConstructorStorageSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageNull()","name":"testConstructorStorageNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorPredicateNull()","name":"testConstructorPredicateNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorZeroSize()","name":"testConstructorZeroSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNegativeSize()","name":"testConstructorNegativeSize","type":"void","javadoc":null},{"fullQualified":"public void testCacheData()","name":"testCacheData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestLastInFirstOut","fullyQualifiedName":"tools.descartes.teastore.image.cache.TestLastInFirstOut","isInterface":false,"codeComments":[{"type":"LineComment","text":" Standard caching behavior","lineNumber":55,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testConstructorSimple()","name":"testConstructorSimple","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSize()","name":"testConstructorSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSizePredicate()","name":"testConstructorSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageSizePredicate()","name":"testConstructorStorageSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageNull()","name":"testConstructorStorageNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorPredicateNull()","name":"testConstructorPredicateNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorZeroSize()","name":"testConstructorZeroSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNegativeSize()","name":"testConstructorNegativeSize","type":"void","javadoc":null},{"fullQualified":"public void testCacheData()","name":"testCacheData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestLeastFrequentlyUsed","fullyQualifiedName":"tools.descartes.teastore.image.cache.TestLeastFrequentlyUsed","isInterface":false,"codeComments":[{"type":"LineComment","text":" Standard caching behavior","lineNumber":55,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testConstructorSimple()","name":"testConstructorSimple","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSize()","name":"testConstructorSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSizePredicate()","name":"testConstructorSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageSizePredicate()","name":"testConstructorStorageSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageNull()","name":"testConstructorStorageNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorPredicateNull()","name":"testConstructorPredicateNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorZeroSize()","name":"testConstructorZeroSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNegativeSize()","name":"testConstructorNegativeSize","type":"void","javadoc":null},{"fullQualified":"public void testCacheData()","name":"testCacheData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestLeastRecentlyUsed","fullyQualifiedName":"tools.descartes.teastore.image.cache.TestLeastRecentlyUsed","isInterface":false,"codeComments":[{"type":"LineComment","text":" Standard caching behavior","lineNumber":55,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testConstructorSimple()","name":"testConstructorSimple","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSize()","name":"testConstructorSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSizePredicate()","name":"testConstructorSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageSizePredicate()","name":"testConstructorStorageSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageNull()","name":"testConstructorStorageNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorPredicateNull()","name":"testConstructorPredicateNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorZeroSize()","name":"testConstructorZeroSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNegativeSize()","name":"testConstructorNegativeSize","type":"void","javadoc":null},{"fullQualified":"public void testCacheData()","name":"testCacheData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestMostRecentlyUsed","fullyQualifiedName":"tools.descartes.teastore.image.cache.TestMostRecentlyUsed","isInterface":false,"codeComments":[{"type":"LineComment","text":" Standard caching behavior","lineNumber":55,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testConstructorSimple()","name":"testConstructorSimple","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSize()","name":"testConstructorSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSizePredicate()","name":"testConstructorSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageSizePredicate()","name":"testConstructorStorageSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageNull()","name":"testConstructorStorageNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorPredicateNull()","name":"testConstructorPredicateNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorZeroSize()","name":"testConstructorZeroSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNegativeSize()","name":"testConstructorNegativeSize","type":"void","javadoc":null},{"fullQualified":"public void testCacheData()","name":"testCacheData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestRandomReplacement","fullyQualifiedName":"tools.descartes.teastore.image.cache.TestRandomReplacement","isInterface":false,"codeComments":[{"type":"LineComment","text":" Standard caching behavior","lineNumber":67,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testConstructorSimple()","name":"testConstructorSimple","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSize()","name":"testConstructorSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorSizePredicate()","name":"testConstructorSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageSizePredicate()","name":"testConstructorStorageSizePredicate","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageSizePredicateSeed()","name":"testConstructorStorageSizePredicateSeed","type":"void","javadoc":null},{"fullQualified":"public void testConstructorStorageNull()","name":"testConstructorStorageNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorPredicateNull()","name":"testConstructorPredicateNull","type":"void","javadoc":null},{"fullQualified":"public void testConstructorZeroSize()","name":"testConstructorZeroSize","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNegativeSize()","name":"testConstructorNegativeSize","type":"void","javadoc":null},{"fullQualified":"public void testCacheData()","name":"testCacheData","type":"void","javadoc":null},{"fullQualified":"private void determineReplacement(ArrayList<DummyData> cacheValues, Random rand, DummyData data)","name":"determineReplacement","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestStoreAll","fullyQualifiedName":"tools.descartes.teastore.image.storage.rules.TestStoreAll","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testRule()","name":"testRule","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestStoreLargeImages","fullyQualifiedName":"tools.descartes.teastore.image.storage.rules.TestStoreLargeImages","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testRule()","name":"testRule","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestDriveStorage","fullyQualifiedName":"tools.descartes.teastore.image.storage.TestDriveStorage","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"TestNoStorage","fullyQualifiedName":"tools.descartes.teastore.image.storage.TestNoStorage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testDataExists()","name":"testDataExists","type":"void","javadoc":null},{"fullQualified":"public void testLoadData()","name":"testLoadData","type":"void","javadoc":null},{"fullQualified":"public void testSaveData()","name":"testSaveData","type":"void","javadoc":null},{"fullQualified":"public void testDataIsStorable()","name":"testDataIsStorable","type":"void","javadoc":null},{"fullQualified":"public void testDeleteData()","name":"testDeleteData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestImageDB","fullyQualifiedName":"tools.descartes.teastore.image.TestImageDB","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testConstructor()","name":"testConstructor","type":"void","javadoc":null},{"fullQualified":"public void testConstructorNull()","name":"testConstructorNull","type":"void","javadoc":null},{"fullQualified":"public void testHasImageID()","name":"testHasImageID","type":"void","javadoc":null},{"fullQualified":"public void testHasImageIDNull()","name":"testHasImageIDNull","type":"void","javadoc":null},{"fullQualified":"public void testSetImageMappingAndGetImageID()","name":"testSetImageMappingAndGetImageID","type":"void","javadoc":null},{"fullQualified":"public void testGetImageIDNull()","name":"testGetImageIDNull","type":"void","javadoc":null},{"fullQualified":"public void testGetImageSize()","name":"testGetImageSize","type":"void","javadoc":null},{"fullQualified":"public void testSetImageMappingKeyNull()","name":"testSetImageMappingKeyNull","type":"void","javadoc":null},{"fullQualified":"public void testSetImageMappingNameNull()","name":"testSetImageMappingNameNull","type":"void","javadoc":null},{"fullQualified":"public void testSetImageMappingProductSizeNull()","name":"testSetImageMappingProductSizeNull","type":"void","javadoc":null},{"fullQualified":"public void testSetImageMappingNameSizeNull()","name":"testSetImageMappingNameSizeNull","type":"void","javadoc":null},{"fullQualified":"public void testSetImageMappingKeySizeNull()","name":"testSetImageMappingKeySizeNull","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestImageDBKey","fullyQualifiedName":"tools.descartes.teastore.image.TestImageDBKey","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testConstructor()","name":"testConstructor","type":"void","javadoc":null},{"fullQualified":"public void testIsProductKey()","name":"testIsProductKey","type":"void","javadoc":null},{"fullQualified":"public void testGetProductID()","name":"testGetProductID","type":"void","javadoc":null},{"fullQualified":"public void testGetWebUIName()","name":"testGetWebUIName","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestImageProvider","fullyQualifiedName":"tools.descartes.teastore.image.TestImageProvider","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"TestImageScaler","fullyQualifiedName":"tools.descartes.teastore.image.TestImageScaler","isInterface":false,"codeComments":[{"type":"LineComment","text":" We can only test that it scales correctly, it is not really feasible to test","lineNumber":60,"isOrphan":true},{"type":"LineComment","text":" for the correct content.","lineNumber":61,"isOrphan":false}],"allMethods":[{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testScale()","name":"testScale","type":"void","javadoc":null},{"fullQualified":"public void testScaleImageSizeNull()","name":"testScaleImageSizeNull","type":"void","javadoc":null},{"fullQualified":"public void testScaleFactorZero()","name":"testScaleFactorZero","type":"void","javadoc":null},{"fullQualified":"public void testScaleFactorBelowZero()","name":"testScaleFactorBelowZero","type":"void","javadoc":null},{"fullQualified":"public void testScaleFactorTwoZero()","name":"testScaleFactorTwoZero","type":"void","javadoc":null},{"fullQualified":"public void testScaleFactorTwoSingleBelowZero()","name":"testScaleFactorTwoSingleBelowZero","type":"void","javadoc":null},{"fullQualified":"public void testScaleFactorTwoBelowZero()","name":"testScaleFactorTwoBelowZero","type":"void","javadoc":null},{"fullQualified":"public void testScalePixelZero()","name":"testScalePixelZero","type":"void","javadoc":null},{"fullQualified":"public void testScalePixelBelowOne()","name":"testScalePixelBelowOne","type":"void","javadoc":null},{"fullQualified":"public void testScalePixelTwoZero()","name":"testScalePixelTwoZero","type":"void","javadoc":null},{"fullQualified":"public void testScalePixelTwoSIngleBelowZero()","name":"testScalePixelTwoSIngleBelowZero","type":"void","javadoc":null},{"fullQualified":"public void testScalePixelTwoBelowOne()","name":"testScalePixelTwoBelowOne","type":"void","javadoc":null},{"fullQualified":"public void testScaleImageNull()","name":"testScaleImageNull","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TestStoreImage","fullyQualifiedName":"tools.descartes.teastore.image.TestStoreImage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"private BufferedImage convertToImage(byte[] data)","name":"convertToImage","type":"BufferedImage","javadoc":null},{"fullQualified":"public void initialize()","name":"initialize","type":"void","javadoc":null},{"fullQualified":"public void testConstructor()","name":"testConstructor","type":"void","javadoc":null},{"fullQualified":"public void testByteArrayConstructorNull()","name":"testByteArrayConstructorNull","type":"void","javadoc":null},{"fullQualified":"public void testImageConstructorNull()","name":"testImageConstructorNull","type":"void","javadoc":null},{"fullQualified":"public void testByteArrayConstructorSizeNull()","name":"testByteArrayConstructorSizeNull","type":"void","javadoc":null},{"fullQualified":"public void testImageConstructorSizeNull()","name":"testImageConstructorSizeNull","type":"void","javadoc":null},{"fullQualified":"public void testCopyConstructorNull()","name":"testCopyConstructorNull","type":"void","javadoc":null},{"fullQualified":"public void testGetID()","name":"testGetID","type":"void","javadoc":null},{"fullQualified":"public void testGetImage()","name":"testGetImage","type":"void","javadoc":null},{"fullQualified":"public void testGetSize()","name":"testGetSize","type":"void","javadoc":null},{"fullQualified":"public void testGetByteSize()","name":"testGetByteSize","type":"void","javadoc":null},{"fullQualified":"public void testGetBase64()","name":"testGetBase64","type":"void","javadoc":null},{"fullQualified":"public void testGetByteArray()","name":"testGetByteArray","type":"void","javadoc":null},{"fullQualified":"public void testToString()","name":"testToString","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InitialDataGenerationDaemon","fullyQualifiedName":"tools.descartes.teastore.persistence.daemons.InitialDataGenerationDaemon","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Default constructor.\r\n   ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at destruction.\r\n   ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at initialization.\r\n   ","lineNumber":59,"isOrphan":false}],"allMethods":[{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":"\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at destruction.\r\n   "},{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":"\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at initialization.\r\n   "},{"fullQualified":"private void waitForDatabase()","name":"waitForDatabase","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public InitialDataGenerationDaemon()","javadocComment":"\r\n   * Default constructor.\r\n   "}]},{"name":"CategoryRepository","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.CategoryRepository","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Singleton for the CategoryRepository.\r\n\t ","lineNumber":28,"isOrphan":false},{"type":"LineComment","text":"Private constructor.","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":88,"isOrphan":false}],"allMethods":[{"fullQualified":"public long createEntity(Category entity)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public boolean updateEntity(long id, Category entity)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected long getId(PersistenceCategory v)","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected Class<PersistenceCategory> getEntityClass()","name":"getEntityClass","type":"Class<PersistenceCategory>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"private CategoryRepository()","javadocComment":null}]},{"name":"LocalDateAttributeConverter","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.converters.LocalDateAttributeConverter","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Converts LocalDate to a supported format.\r\n\t * @param locDate The date to convert.\r\n\t * @return The date in a supported format.\r\n\t ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Converts database format to LocalDate.\r\n\t * @param sqlDate The date to convert.\r\n\t * @return The date as LocalDate.\r\n\t ","lineNumber":43,"isOrphan":false}],"allMethods":[{"fullQualified":"public Date convertToDatabaseColumn(LocalDate locDate)","name":"convertToDatabaseColumn","type":"Date","javadoc":"\r\n\t * Converts LocalDate to a supported format.\r\n\t * @param locDate The date to convert.\r\n\t * @return The date in a supported format.\r\n\t "},{"fullQualified":"public LocalDate convertToEntityAttribute(Date sqlDate)","name":"convertToEntityAttribute","type":"LocalDate","javadoc":"\r\n\t * Converts database format to LocalDate.\r\n\t * @param sqlDate The date to convert.\r\n\t * @return The date as LocalDate.\r\n\t "}],"allConstructors":[]},{"name":"LocalDateTimeAttributeConverter","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.converters.LocalDateTimeAttributeConverter","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Converts LocalDateTime to a supported format.\r\n\t * @param locDateTime The date time to convert.\r\n\t * @return The date time in a supported format.\r\n\t ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Converts database format to LocalDateTime.\r\n\t * @param sqlTimestamp The date time to convert.\r\n\t * @return The date as LocalDateTime.\r\n\t ","lineNumber":44,"isOrphan":false}],"allMethods":[{"fullQualified":"public Timestamp convertToDatabaseColumn(LocalDateTime locDateTime)","name":"convertToDatabaseColumn","type":"Timestamp","javadoc":"\r\n\t * Converts LocalDateTime to a supported format.\r\n\t * @param locDateTime The date time to convert.\r\n\t * @return The date time in a supported format.\r\n\t "},{"fullQualified":"public LocalDateTime convertToEntityAttribute(Timestamp sqlTimestamp)","name":"convertToEntityAttribute","type":"LocalDateTime","javadoc":"\r\n\t * Converts database format to LocalDateTime.\r\n\t * @param sqlTimestamp The date time to convert.\r\n\t * @return The date as LocalDateTime.\r\n\t "}],"allConstructors":[]},{"name":"OrderItemRepository","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.OrderItemRepository","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Singleton for the ProductRepository.\r\n\t ","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":"Private constructor.","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets all order items for the given productId.\r\n\t * @param productId The id of the product ordered.\r\n\t * @param start The index of the first orderItem to return. Negative value to start at the beginning.\r\n\t * @param limit The maximum number of orderItem to return. Negative value to return all.\r\n\t * @return List of order items with the specified product.\r\n\t ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets all order items in the specified order.\r\n\t * @param orderId The id of the order.\r\n\t * @param start The index of the first orderItem to return. Negative value to start at the beginning.\r\n\t * @param limit The maximum number of orderItem to return. Negative value to return all.\r\n\t * @return List of order items in the specified order.\r\n\t ","lineNumber":121,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":151,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":159,"isOrphan":false}],"allMethods":[{"fullQualified":"public long createEntity(OrderItem entity)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public boolean updateEntity(long id, OrderItem entity)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<PersistenceOrderItem> getAllEntitiesWithProduct(long productId, int start, int limit)","name":"getAllEntitiesWithProduct","type":"List<PersistenceOrderItem>","javadoc":"\r\n\t * Gets all order items for the given productId.\r\n\t * @param productId The id of the product ordered.\r\n\t * @param start The index of the first orderItem to return. Negative value to start at the beginning.\r\n\t * @param limit The maximum number of orderItem to return. Negative value to return all.\r\n\t * @return List of order items with the specified product.\r\n\t "},{"fullQualified":"public List<PersistenceOrderItem> getAllEntitiesWithOrder(long orderId, int start, int limit)","name":"getAllEntitiesWithOrder","type":"List<PersistenceOrderItem>","javadoc":"\r\n\t * Gets all order items in the specified order.\r\n\t * @param orderId The id of the order.\r\n\t * @param start The index of the first orderItem to return. Negative value to start at the beginning.\r\n\t * @param limit The maximum number of orderItem to return. Negative value to return all.\r\n\t * @return List of order items in the specified order.\r\n\t "},{"fullQualified":"protected long getId(PersistenceOrderItem v)","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected Class<PersistenceOrderItem> getEntityClass()","name":"getEntityClass","type":"Class<PersistenceOrderItem>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"private OrderItemRepository()","javadocComment":null}]},{"name":"OrderRepository","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.OrderRepository","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Singleton for the ProductRepository.\r\n\t ","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":"Private constructor.","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets all Orders for the user with the specified userId.\r\n\t * @param userId The id of the ordering user.\r\n\t * @param start The index of the first order to return. Negative value to start at the beginning.\r\n\t * @param limit The maximum number of order to return. Negative value to return all.\r\n\t * @return List of orders with the specified user.\r\n\t ","lineNumber":101,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":131,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":139,"isOrphan":false}],"allMethods":[{"fullQualified":"public long createEntity(Order entity)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public boolean updateEntity(long id, Order entity)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<PersistenceOrder> getAllEntitiesWithUser(long userId, int start, int limit)","name":"getAllEntitiesWithUser","type":"List<PersistenceOrder>","javadoc":"\r\n\t * Gets all Orders for the user with the specified userId.\r\n\t * @param userId The id of the ordering user.\r\n\t * @param start The index of the first order to return. Negative value to start at the beginning.\r\n\t * @param limit The maximum number of order to return. Negative value to return all.\r\n\t * @return List of orders with the specified user.\r\n\t "},{"fullQualified":"protected long getId(PersistenceOrder v)","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected Class<PersistenceOrder> getEntityClass()","name":"getEntityClass","type":"Class<PersistenceOrder>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"private OrderRepository()","javadocComment":null}]},{"name":"PersistenceCategory","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.PersistenceCategory","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Creates a new and empty category.\r\n\t ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clear products from cache to update relationships.\r\n\t ","lineNumber":59,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":76,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":84,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get all products in this category.\r\n\t * @return All products in the category.\r\n\t ","lineNumber":116,"isOrphan":false}],"allMethods":[{"fullQualified":"private void clearCaches()","name":"clearCaches","type":"void","javadoc":"\r\n\t * Clear products from cache to update relationships.\r\n\t "},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getDescription()","name":"getDescription","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setDescription(String description)","name":"setDescription","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<PersistenceProduct> getProducts()","name":"getProducts","type":"List<PersistenceProduct>","javadoc":"\r\n\t * Get all products in this category.\r\n\t * @return All products in the category.\r\n\t "}],"allConstructors":[{"identifier":" PersistenceCategory()","javadocComment":"\r\n\t * Creates a new and empty category.\r\n\t "}]},{"name":"PersistenceOrder","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.PersistenceOrder","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Create a new and empty order.\r\n\t ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Delete orders and order items.\r\n\t ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clear users and order items from cache post remove.\r\n\t ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":99,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":107,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":115,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Unsupported operation in persistence.\r\n\t * @param userId unsupported parameter.\r\n\t ","lineNumber":123,"isOrphan":false},{"type":"LineComment","text":"unsupported operation","lineNumber":129,"isOrphan":true},{"type":"JavadocComment","text":"\r\n\t * Get the order's time.\r\n\t * @return The time.\r\n\t ","lineNumber":132,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Sets the order's time.\r\n\t * @param orderTime The time to set.\r\n\t ","lineNumber":140,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":148,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":156,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":166,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":174,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":182,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":190,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":198,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":206,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":214,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":222,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":230,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":238,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":246,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":254,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the credit card expiry date.\r\n\t * @return The date.\r\n\t ","lineNumber":262,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Set the credit card expiry date.\r\n\t * @param creditCardExpiryLocalDate the date to set.\r\n\t ","lineNumber":270,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":278,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":286,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the order items for the order.\r\n\t * @return The order items.\r\n\t ","lineNumber":296,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Set the order items.\r\n\t * @param orderItems The order items.\r\n\t ","lineNumber":304,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the ordering user.\r\n\t * @return The user.\r\n\t ","lineNumber":312,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Set the ordering user.\r\n\t * @param user The user.\r\n\t ","lineNumber":320,"isOrphan":false}],"allMethods":[{"fullQualified":"private void deleteOrders()","name":"deleteOrders","type":"void","javadoc":"\r\n\t * Delete orders and order items.\r\n\t "},{"fullQualified":"private void clearCaches()","name":"clearCaches","type":"void","javadoc":"\r\n\t * Clear users and order items from cache post remove.\r\n\t "},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public long getUserId()","name":"getUserId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setUserId(long userId)","name":"setUserId","type":"void","javadoc":"\r\n\t * Unsupported operation in persistence.\r\n\t * @param userId unsupported parameter.\r\n\t "},{"fullQualified":"public LocalDateTime getOrderTime()","name":"getOrderTime","type":"LocalDateTime","javadoc":"\r\n\t * Get the order's time.\r\n\t * @return The time.\r\n\t "},{"fullQualified":"public void setOrderTime(LocalDateTime orderTime)","name":"setOrderTime","type":"void","javadoc":"\r\n\t * Sets the order's time.\r\n\t * @param orderTime The time to set.\r\n\t "},{"fullQualified":"public String getTime()","name":"getTime","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setTime(String time)","name":"setTime","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public long getTotalPriceInCents()","name":"getTotalPriceInCents","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setTotalPriceInCents(long totalPriceInCents)","name":"setTotalPriceInCents","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getAddressName()","name":"getAddressName","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setAddressName(String addressName)","name":"setAddressName","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getAddress1()","name":"getAddress1","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setAddress1(String address1)","name":"setAddress1","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getAddress2()","name":"getAddress2","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setAddress2(String address2)","name":"setAddress2","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getCreditCardCompany()","name":"getCreditCardCompany","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setCreditCardCompany(String creditCardCompany)","name":"setCreditCardCompany","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getCreditCardNumber()","name":"getCreditCardNumber","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setCreditCardNumber(String creditCardNumber)","name":"setCreditCardNumber","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public LocalDate getCreditCardExpiryLocalDate()","name":"getCreditCardExpiryLocalDate","type":"LocalDate","javadoc":"\r\n\t * Get the credit card expiry date.\r\n\t * @return The date.\r\n\t "},{"fullQualified":"public void setCreditCardExpiryLocalDate(LocalDate creditCardExpiryLocalDate)","name":"setCreditCardExpiryLocalDate","type":"void","javadoc":"\r\n\t * Set the credit card expiry date.\r\n\t * @param creditCardExpiryLocalDate the date to set.\r\n\t "},{"fullQualified":"public String getCreditCardExpiryDate()","name":"getCreditCardExpiryDate","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setCreditCardExpiryDate(String creditCardExpiryDate)","name":"setCreditCardExpiryDate","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<PersistenceOrderItem> getOrderItems()","name":"getOrderItems","type":"List<PersistenceOrderItem>","javadoc":"\r\n\t * Get the order items for the order.\r\n\t * @return The order items.\r\n\t "},{"fullQualified":"public void setOrderItems(List<PersistenceOrderItem> orderItems)","name":"setOrderItems","type":"void","javadoc":"\r\n\t * Set the order items.\r\n\t * @param orderItems The order items.\r\n\t "},{"fullQualified":"public PersistenceUser getUser()","name":"getUser","type":"PersistenceUser","javadoc":"\r\n\t * Get the ordering user.\r\n\t * @return The user.\r\n\t "},{"fullQualified":"public void setUser(PersistenceUser user)","name":"setUser","type":"void","javadoc":"\r\n\t * Set the ordering user.\r\n\t * @param user The user.\r\n\t "}],"allConstructors":[{"identifier":" PersistenceOrder()","javadocComment":"\r\n\t * Create a new and empty order.\r\n\t "}]},{"name":"PersistenceOrderItem","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.PersistenceOrderItem","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Create a new and empty order item.\r\n\t ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clear products and orders from cache post remove.\r\n\t ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":71,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":87,"isOrphan":false},{"type":"LineComment","text":"unsupported","lineNumber":92,"isOrphan":true},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":95,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":103,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":111,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":119,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets the product.\r\n\t * @return the product to get.\r\n\t ","lineNumber":127,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Sets the product.\r\n\t * @param product the product to set.\r\n\t ","lineNumber":135,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":143,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Unsupported operation.\r\n\t * @param orderId unsupported parameter.\r\n\t ","lineNumber":151,"isOrphan":false},{"type":"LineComment","text":"unsupported operation","lineNumber":156,"isOrphan":true},{"type":"JavadocComment","text":"\r\n\t * Gets the order.\r\n\t * @return The order to get.\r\n\t ","lineNumber":159,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Sets the order.\r\n\t * @param order the order to set.\r\n\t ","lineNumber":167,"isOrphan":false}],"allMethods":[{"fullQualified":"private void clearCaches()","name":"clearCaches","type":"void","javadoc":"\r\n\t * Clear products and orders from cache post remove.\r\n\t "},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public long getProductId()","name":"getProductId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setProductId(long productId)","name":"setProductId","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public int getQuantity()","name":"getQuantity","type":"int","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setQuantity(int quantity)","name":"setQuantity","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public long getUnitPriceInCents()","name":"getUnitPriceInCents","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setUnitPriceInCents(long unitPriceInCents)","name":"setUnitPriceInCents","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public PersistenceProduct getProduct()","name":"getProduct","type":"PersistenceProduct","javadoc":"\r\n\t * Gets the product.\r\n\t * @return the product to get.\r\n\t "},{"fullQualified":" void setProduct(PersistenceProduct product)","name":"setProduct","type":"void","javadoc":"\r\n\t * Sets the product.\r\n\t * @param product the product to set.\r\n\t "},{"fullQualified":"public long getOrderId()","name":"getOrderId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setOrderId(long orderId)","name":"setOrderId","type":"void","javadoc":"\r\n\t * Unsupported operation.\r\n\t * @param orderId unsupported parameter.\r\n\t "},{"fullQualified":"public PersistenceOrder getOrder()","name":"getOrder","type":"PersistenceOrder","javadoc":"\r\n\t * Gets the order.\r\n\t * @return The order to get.\r\n\t "},{"fullQualified":" void setOrder(PersistenceOrder order)","name":"setOrder","type":"void","javadoc":"\r\n\t * Sets the order.\r\n\t * @param order the order to set.\r\n\t "}],"allConstructors":[{"identifier":" PersistenceOrderItem()","javadocComment":"\r\n\t * Create a new and empty order item.\r\n\t "}]},{"name":"PersistenceProduct","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.PersistenceProduct","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Clear categories and order items from cache post remove.\r\n\t ","lineNumber":56,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Create a new and empty product.\r\n\t ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":81,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Unsupported operation. Does nothing.\r\n\t * @param categoryId Unsupported parameter.\r\n\t ","lineNumber":97,"isOrphan":false},{"type":"LineComment","text":" unsupported operation","lineNumber":103,"isOrphan":true},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":106,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":114,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":122,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":130,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":138,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":146,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":154,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":161,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the orderItems\r\n\t ","lineNumber":168,"isOrphan":false}],"allMethods":[{"fullQualified":"private void clearCaches()","name":"clearCaches","type":"void","javadoc":"\r\n\t * Clear categories and order items from cache post remove.\r\n\t "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public long getCategoryId()","name":"getCategoryId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setCategoryId(long categoryId)","name":"setCategoryId","type":"void","javadoc":"\r\n\t * Unsupported operation. Does nothing.\r\n\t * @param categoryId Unsupported parameter.\r\n\t "},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getDescription()","name":"getDescription","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setDescription(String description)","name":"setDescription","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public long getListPriceInCents()","name":"getListPriceInCents","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setListPriceInCents(long listPriceInCents)","name":"setListPriceInCents","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public PersistenceCategory getCategory()","name":"getCategory","type":"PersistenceCategory","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setCategory(PersistenceCategory category)","name":"setCategory","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<PersistenceOrderItem> getOrderItems()","name":"getOrderItems","type":"List<PersistenceOrderItem>","javadoc":"\r\n\t * @return the orderItems\r\n\t "}],"allConstructors":[{"identifier":" PersistenceProduct()","javadocComment":"\r\n\t * Create a new and empty product.\r\n\t "}]},{"name":"PersistenceUser","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.PersistenceUser","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Delete orders and order items.\r\n\t ","lineNumber":52,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clear users and order items from cache post remove.\r\n\t ","lineNumber":70,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Create a new and empty user.\r\n\t ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":87,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":95,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":103,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":111,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":119,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":127,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":135,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":143,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":151,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":159,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the user's orders.\r\n\t * @return the orders.\r\n\t ","lineNumber":167,"isOrphan":false}],"allMethods":[{"fullQualified":"private void deleteOrders()","name":"deleteOrders","type":"void","javadoc":"\r\n\t * Delete orders and order items.\r\n\t "},{"fullQualified":"private void clearCaches()","name":"clearCaches","type":"void","javadoc":"\r\n\t * Clear users and order items from cache post remove.\r\n\t "},{"fullQualified":"public long getId()","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setId(long id)","name":"setId","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getUserName()","name":"getUserName","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setUserName(String userName)","name":"setUserName","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getPassword()","name":"getPassword","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setPassword(String password)","name":"setPassword","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getRealName()","name":"getRealName","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setRealName(String realName)","name":"setRealName","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<PersistenceOrder> getOrders()","name":"getOrders","type":"List<PersistenceOrder>","javadoc":"\r\n\t * Get the user's orders.\r\n\t * @return the orders.\r\n\t "}],"allConstructors":[{"identifier":" PersistenceUser()","javadocComment":"\r\n\t * Create a new and empty user.\r\n\t "}]},{"name":"ProductRepository","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.ProductRepository","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Singleton for the ProductRepository.\r\n\t ","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":"Private constructor.","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets all Products in the Category of the given categoryId.\r\n\t * @param categoryId The id of the Category containing the Products.\r\n\t * @param start The index of the first Product to return. Negative value to start at the beginning.\r\n\t * @param limit The maximum number of Products to return. Negative value to return all.\r\n\t * @return List of Products with the specified Category.\r\n\t ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets the count of all Products in the Category of the given categoryId.\r\n\t * @param categoryId The id of the Category containing the Products.\r\n\t * @return Count of Products with the specified Category.\r\n\t ","lineNumber":122,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":150,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":158,"isOrphan":false}],"allMethods":[{"fullQualified":"public long createEntity(Product entity)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public boolean updateEntity(long id, Product entity)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<PersistenceProduct> getAllEntities(long categoryId, int start, int limit)","name":"getAllEntities","type":"List<PersistenceProduct>","javadoc":"\r\n\t * Gets all Products in the Category of the given categoryId.\r\n\t * @param categoryId The id of the Category containing the Products.\r\n\t * @param start The index of the first Product to return. Negative value to start at the beginning.\r\n\t * @param limit The maximum number of Products to return. Negative value to return all.\r\n\t * @return List of Products with the specified Category.\r\n\t "},{"fullQualified":"public long getProductCount(long categoryId)","name":"getProductCount","type":"long","javadoc":"\r\n\t * Gets the count of all Products in the Category of the given categoryId.\r\n\t * @param categoryId The id of the Category containing the Products.\r\n\t * @return Count of Products with the specified Category.\r\n\t "},{"fullQualified":"protected long getId(PersistenceProduct v)","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected Class<PersistenceProduct> getEntityClass()","name":"getEntityClass","type":"Class<PersistenceProduct>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"private ProductRepository()","javadocComment":null}]},{"name":"UserRepository","fullyQualifiedName":"tools.descartes.teastore.persistence.domain.UserRepository","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Singleton for the ProductRepository.\r\n\t ","lineNumber":31,"isOrphan":false},{"type":"LineComment","text":"Private constructor.","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":99,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Return the user with the name.\r\n\t * @param userName The user name.\r\n\t * @return User or null if the user doesn't exist.\r\n\t ","lineNumber":107,"isOrphan":false}],"allMethods":[{"fullQualified":"public long createEntity(User entity)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public boolean updateEntity(long id, User entity)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected long getId(PersistenceUser v)","name":"getId","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected Class<PersistenceUser> getEntityClass()","name":"getEntityClass","type":"Class<PersistenceUser>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public PersistenceUser getUserByName(String userName)","name":"getUserByName","type":"PersistenceUser","javadoc":"\r\n\t * Return the user with the name.\r\n\t * @param userName The user name.\r\n\t * @return User or null if the user doesn't exist.\r\n\t "}],"allConstructors":[{"identifier":"private UserRepository()","javadocComment":null}]},{"name":"AbstractPersistenceRepository","fullyQualifiedName":"tools.descartes.teastore.persistence.repository.AbstractPersistenceRepository","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Gets the ID of a persistence entity.\r\n\t * @param p The persistence entity for which the ID is to be retreived.\r\n\t * @return The id of persistence entity p.\r\n\t ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the Java Class of the persistence entity objects for this repository.\r\n\t * @return The Java Class of the persistence entity objects.\r\n\t ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the entity manager factory of the persistence context.\r\n\t * @return The entity manager factory.\r\n\t ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Creates a new entity manager and returns it.\r\n\t * Don't forget to close!\r\n\t * @return A new entity manager.\r\n\t ","lineNumber":56,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Create a new persistence entity from an interface entity\r\n\t * (usually received via REST).\r\n\t * @param entity The entity template for the entity to create.\r\n\t * @return The new ID of the newly created entity.\r\n\t ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Updates the entity with the values from the provided interface\r\n\t * entity (usually received via REST).\r\n\t * @param id The id of the entity to update (ignore the id in the passed entity).\r\n\t * @param entity The values of the entity to update. Ignore the id of the entity.\r\n\t * \t\tYou may also choose to ignore additional values, if you do not support updating them.\r\n\t * @return True, if update succeded. False otherwise.\r\n\t ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Retrieve the entity with the given ID.\r\n\t * @param id ID of the entity to retrieve.\r\n\t * @return The entity. Null, if none was found.\r\n\t ","lineNumber":83,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get all entities of the generic types of entities managed in this repository.\r\n\t * @return All entities in a list.\r\n\t ","lineNumber":99,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get all entities of the generic types of entities managed in this repository.\r\n\t * Starts with the \"start\" entity and returns at maximum \"limit\" entities.\r\n\t * @param start The index of the entity to start with. Set to negative value to start at the beginning.\r\n\t * @param limit The maximum number of entites to return. Set to negative value to return all.\r\n\t * @return List of entities.\r\n\t ","lineNumber":107,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Removes the entity with the id from database.\r\n\t * @param id The id of the entity to remove.\r\n\t * @return True, if delete succeded. False, if it failed (entity with id not found).\r\n\t ","lineNumber":136,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns the query result for a query with a start and limit parameter.\r\n\t * Negative starts and limits are ignored.\r\n\t * @param em The currently open entity manager.\r\n\t * @param query The query. Parameters must all be bound.\r\n\t * @param start The start index. Negative values are ignored.\r\n\t * @param limit The limit. Negative values are ignored.\r\n\t * @return The query result.\r\n\t ","lineNumber":158,"isOrphan":false}],"allMethods":[{"fullQualified":"protected abstract long getId(P p)","name":"getId","type":"long","javadoc":"\r\n\t * Gets the ID of a persistence entity.\r\n\t * @param p The persistence entity for which the ID is to be retreived.\r\n\t * @return The id of persistence entity p.\r\n\t "},{"fullQualified":"protected abstract Class<P> getEntityClass()","name":"getEntityClass","type":"Class<P>","javadoc":"\r\n\t * Get the Java Class of the persistence entity objects for this repository.\r\n\t * @return The Java Class of the persistence entity objects.\r\n\t "},{"fullQualified":"public EntityManagerFactory getEMF()","name":"getEMF","type":"EntityManagerFactory","javadoc":"\r\n\t * Get the entity manager factory of the persistence context.\r\n\t * @return The entity manager factory.\r\n\t "},{"fullQualified":"protected EntityManager getEM()","name":"getEM","type":"EntityManager","javadoc":"\r\n\t * Creates a new entity manager and returns it.\r\n\t * Don't forget to close!\r\n\t * @return A new entity manager.\r\n\t "},{"fullQualified":"public abstract long createEntity(E entity)","name":"createEntity","type":"long","javadoc":"\r\n\t * Create a new persistence entity from an interface entity\r\n\t * (usually received via REST).\r\n\t * @param entity The entity template for the entity to create.\r\n\t * @return The new ID of the newly created entity.\r\n\t "},{"fullQualified":"public abstract boolean updateEntity(long id, E entity)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * Updates the entity with the values from the provided interface\r\n\t * entity (usually received via REST).\r\n\t * @param id The id of the entity to update (ignore the id in the passed entity).\r\n\t * @param entity The values of the entity to update. Ignore the id of the entity.\r\n\t * \t\tYou may also choose to ignore additional values, if you do not support updating them.\r\n\t * @return True, if update succeded. False otherwise.\r\n\t "},{"fullQualified":"public P getEntity(long id)","name":"getEntity","type":"P","javadoc":"\r\n\t * Retrieve the entity with the given ID.\r\n\t * @param id ID of the entity to retrieve.\r\n\t * @return The entity. Null, if none was found.\r\n\t "},{"fullQualified":"public List<P> getAllEntities()","name":"getAllEntities","type":"List<P>","javadoc":"\r\n\t * Get all entities of the generic types of entities managed in this repository.\r\n\t * @return All entities in a list.\r\n\t "},{"fullQualified":"public List<P> getAllEntities(int start, int limit)","name":"getAllEntities","type":"List<P>","javadoc":"\r\n\t * Get all entities of the generic types of entities managed in this repository.\r\n\t * Starts with the \"start\" entity and returns at maximum \"limit\" entities.\r\n\t * @param start The index of the entity to start with. Set to negative value to start at the beginning.\r\n\t * @param limit The maximum number of entites to return. Set to negative value to return all.\r\n\t * @return List of entities.\r\n\t "},{"fullQualified":"public boolean removeEntity(long id)","name":"removeEntity","type":"boolean","javadoc":"\r\n\t * Removes the entity with the id from database.\r\n\t * @param id The id of the entity to remove.\r\n\t * @return True, if delete succeded. False, if it failed (entity with id not found).\r\n\t "},{"fullQualified":"protected List<P> resultsWithStartAndLimit(EntityManager em, TypedQuery<P> query, int start, int limit)","name":"resultsWithStartAndLimit","type":"List<P>","javadoc":"\r\n\t * Returns the query result for a query with a start and limit parameter.\r\n\t * Negative starts and limits are ignored.\r\n\t * @param em The currently open entity manager.\r\n\t * @param query The query. Parameters must all be bound.\r\n\t * @param start The start index. Negative values are ignored.\r\n\t * @param limit The limit. Negative values are ignored.\r\n\t * @return The query result.\r\n\t "}],"allConstructors":[]},{"name":"CacheManager","fullyQualifiedName":"tools.descartes.teastore.persistence.repository.CacheManager","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * The cache manager singleton.\r\n\t ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clears the entire cache in all persistence services,\r\n\t * including this one.\r\n\t ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clears the cache for the entity class in all\r\n\t * persistence services, including this one.\r\n\t * @param entityClass The class to clear.\r\n\t ","lineNumber":59,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clears the cache in all remote persistence services\r\n\t * (all, except the calling one).\r\n\t * \r\n\t * Example usage scenario: Update on entity is automatically\r\n\t * cached in local cache but remains unknown to remote services.\r\n\t * @param entityClass The class to clear.\r\n\t * @return List of all responses. Contain the class names or \"null\" if errors occured.\r\n\t ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clear only the local Cache for the entity class in question.\r\n\t * @param entityClass The class to clear.\r\n\t ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clear only the entire local Cache for all classes.\r\n\t ","lineNumber":97,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Reset the local and all remote EMFs.\r\n\t * @return List of all responses. Contain the \"clearedEMF\", or \"null\" if errors occured.\r\n\t ","lineNumber":121,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Reset all remote EMFs.\r\n\t * @return List of all responses. Contain the \"clearedEMF\", or \"null\" if errors occured.\r\n\t ","lineNumber":130,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Reset the local EMF.\r\n\t ","lineNumber":145,"isOrphan":false}],"allMethods":[{"fullQualified":"public void clearAllCaches()","name":"clearAllCaches","type":"void","javadoc":"\r\n\t * Clears the entire cache in all persistence services,\r\n\t * including this one.\r\n\t "},{"fullQualified":"public void clearCache(Class<?> entityClass)","name":"clearCache","type":"void","javadoc":"\r\n\t * Clears the cache for the entity class in all\r\n\t * persistence services, including this one.\r\n\t * @param entityClass The class to clear.\r\n\t "},{"fullQualified":"public List<String> clearRemoteCache(Class<?> entityClass)","name":"clearRemoteCache","type":"List<String>","javadoc":"\r\n\t * Clears the cache in all remote persistence services\r\n\t * (all, except the calling one).\r\n\t * \r\n\t * Example usage scenario: Update on entity is automatically\r\n\t * cached in local cache but remains unknown to remote services.\r\n\t * @param entityClass The class to clear.\r\n\t * @return List of all responses. Contain the class names or \"null\" if errors occured.\r\n\t "},{"fullQualified":"public void clearLocalCacheOnly(Class<?> entityClass)","name":"clearLocalCacheOnly","type":"void","javadoc":"\r\n\t * Clear only the local Cache for the entity class in question.\r\n\t * @param entityClass The class to clear.\r\n\t "},{"fullQualified":"public void clearLocalCacheOnly()","name":"clearLocalCacheOnly","type":"void","javadoc":"\r\n\t * Clear only the entire local Cache for all classes.\r\n\t "},{"fullQualified":"private String clearRemoteCacheREST(RESTClient<String> client, Class<?> entityClass)","name":"clearRemoteCacheREST","type":"String","javadoc":null},{"fullQualified":"public List<String> resetAllEMFs()","name":"resetAllEMFs","type":"List<String>","javadoc":"\r\n\t * Reset the local and all remote EMFs.\r\n\t * @return List of all responses. Contain the \"clearedEMF\", or \"null\" if errors occured.\r\n\t "},{"fullQualified":"public List<String> resetRemoteEMFs()","name":"resetRemoteEMFs","type":"List<String>","javadoc":"\r\n\t * Reset all remote EMFs.\r\n\t * @return List of all responses. Contain the \"clearedEMF\", or \"null\" if errors occured.\r\n\t "},{"fullQualified":"public void resetLocalEMF()","name":"resetLocalEMF","type":"void","javadoc":"\r\n\t * Reset the local EMF.\r\n\t "},{"fullQualified":"private String resetRemoteEMF(RESTClient<String> client)","name":"resetRemoteEMF","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private CacheManager()","javadocComment":null}]},{"name":"DatabaseManagementEntity","fullyQualifiedName":"tools.descartes.teastore.persistence.repository.DatabaseManagementEntity","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Create a new management entity.\r\n\t ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the id.\r\n\t * @return the id\r\n\t ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * False if the database is currently being generated.\r\n\t * True, otherwise.\r\n\t * @return Database generation status.\r\n\t ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Specify if the database has finished generating.\r\n\t * False if the database is currently being generated, true otherwise.\r\n\t * @param finishedGenerating Database generation status.\r\n\t ","lineNumber":58,"isOrphan":false}],"allMethods":[{"fullQualified":" long getId()","name":"getId","type":"long","javadoc":"\r\n\t * Get the id.\r\n\t * @return the id\r\n\t "},{"fullQualified":"public boolean isFinishedGenerating()","name":"isFinishedGenerating","type":"boolean","javadoc":"\r\n\t * False if the database is currently being generated.\r\n\t * True, otherwise.\r\n\t * @return Database generation status.\r\n\t "},{"fullQualified":"public void setFinishedGenerating(boolean finishedGenerating)","name":"setFinishedGenerating","type":"void","javadoc":"\r\n\t * Specify if the database has finished generating.\r\n\t * False if the database is currently being generated, true otherwise.\r\n\t * @param finishedGenerating Database generation status.\r\n\t "}],"allConstructors":[{"identifier":" DatabaseManagementEntity()","javadocComment":"\r\n\t * Create a new management entity.\r\n\t "}]},{"name":"DataGenerator","fullyQualifiedName":"tools.descartes.teastore.persistence.repository.DataGenerator","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Status code for maintenance mode.\r\n\t ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Default category count for small database.\r\n\t ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Default product count per category for small database.\r\n\t ","lineNumber":64,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Default user count for small database.\r\n\t ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Default max order per user for small database.\r\n\t ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Default category count for tiny database.\r\n\t ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Default product count per category for tiny database.\r\n\t ","lineNumber":81,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Default user count for tiny database.\r\n\t ","lineNumber":85,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Default max order per user for tiny database.\r\n\t ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * The data generator singleton.\r\n\t ","lineNumber":161,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Checks if the database is empty.\r\n\t *\r\n\t * @return True if the database is empty.\r\n\t ","lineNumber":172,"isOrphan":false},{"type":"LineComment","text":" every other entity requires a valid category or user","lineNumber":178,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Generates data for the database. Uses a fixed random seed.\r\n\t *\r\n\t * @param categories\r\n\t *            Number of categories.\r\n\t * @param productsPerCategory\r\n\t *            Number of products per category.\r\n\t * @param users\r\n\t *            Number of users. Password is always \"password\".\r\n\t * @param maxOrdersPerUser\r\n\t *            Maximum order per user.\r\n\t ","lineNumber":183,"isOrphan":false},{"type":"LineComment","text":"Order and preferred category must have a valid id!","lineNumber":304,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Drops database and recreates all tables.<br/>\r\n\t * Attention: Does not reset foreign persistence contexts.\r\n\t * Best practice is to call CacheManager.MANAGER.resetAllEMFs() after dropping and then recreating the DB.\r\n\t ","lineNumber":325,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns true if the database has finished generating.\r\n\t * False if it is currently generating.\r\n\t * @return False if the database is generating.\r\n\t ","lineNumber":364,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns if the current persistence is in maintenance mode.\r\n\t * Will return 503 on pretty much every external call in this mode.\r\n\t * @return True if in maintenance, false otherwise.\r\n\t ","lineNumber":390,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Put the current persistence into maintenance mode.\r\n\t * Will return 503 on pretty much every external call in this mode.\r\n\t * @param maintenanceMode The maintenance flag.\r\n\t ","lineNumber":399,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Puts all persistences into maintenance mode.\r\n\t * Will return 503 on pretty much every external call once in this mode.\r\n\t * @param maintenanceMode The maintenance flag.\r\n\t ","lineNumber":408,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean isDatabaseEmpty()","name":"isDatabaseEmpty","type":"boolean","javadoc":"\r\n\t * Checks if the database is empty.\r\n\t *\r\n\t * @return True if the database is empty.\r\n\t "},{"fullQualified":"public void generateDatabaseContent(int categories, int productsPerCategory, int users, int maxOrdersPerUser)","name":"generateDatabaseContent","type":"void","javadoc":"\r\n\t * Generates data for the database. Uses a fixed random seed.\r\n\t *\r\n\t * @param categories\r\n\t *            Number of categories.\r\n\t * @param productsPerCategory\r\n\t *            Number of products per category.\r\n\t * @param users\r\n\t *            Number of users. Password is always \"password\".\r\n\t * @param maxOrdersPerUser\r\n\t *            Maximum order per user.\r\n\t "},{"fullQualified":"private void generateCategories(int categories)","name":"generateCategories","type":"void","javadoc":null},{"fullQualified":"private void generateProducts(int productsPerCategory)","name":"generateProducts","type":"void","javadoc":null},{"fullQualified":"private void generateUsers(int users)","name":"generateUsers","type":"void","javadoc":null},{"fullQualified":"private void generateOrders(int maxOrdersPerUser, int productsPerCategory)","name":"generateOrders","type":"void","javadoc":null},{"fullQualified":"private OrderItem generateOrderItem(Order order, Category preferred, int productsPerCategory)","name":"generateOrderItem","type":"OrderItem","javadoc":null},{"fullQualified":"private String fourDigits()","name":"fourDigits","type":"String","javadoc":null},{"fullQualified":"public void dropAndCreateTables()","name":"dropAndCreateTables","type":"void","javadoc":"\r\n\t * Drops database and recreates all tables.<br/>\r\n\t * Attention: Does not reset foreign persistence contexts.\r\n\t * Best practice is to call CacheManager.MANAGER.resetAllEMFs() after dropping and then recreating the DB.\r\n\t "},{"fullQualified":"private void setGenerationFinishedFlag(boolean flag)","name":"setGenerationFinishedFlag","type":"void","javadoc":null},{"fullQualified":"public boolean getGenerationFinishedFlag()","name":"getGenerationFinishedFlag","type":"boolean","javadoc":"\r\n\t * Returns true if the database has finished generating.\r\n\t * False if it is currently generating.\r\n\t * @return False if the database is generating.\r\n\t "},{"fullQualified":"public boolean isMaintenanceMode()","name":"isMaintenanceMode","type":"boolean","javadoc":"\r\n\t * Returns if the current persistence is in maintenance mode.\r\n\t * Will return 503 on pretty much every external call in this mode.\r\n\t * @return True if in maintenance, false otherwise.\r\n\t "},{"fullQualified":"public synchronized void setMaintenanceModeInternal(boolean maintenanceMode)","name":"setMaintenanceModeInternal","type":"void","javadoc":"\r\n\t * Put the current persistence into maintenance mode.\r\n\t * Will return 503 on pretty much every external call in this mode.\r\n\t * @param maintenanceMode The maintenance flag.\r\n\t "},{"fullQualified":"public void setMaintenanceModeGlobal(boolean maintenanceMode)","name":"setMaintenanceModeGlobal","type":"void","javadoc":"\r\n\t * Puts all persistences into maintenance mode.\r\n\t * Will return 503 on pretty much every external call once in this mode.\r\n\t * @param maintenanceMode The maintenance flag.\r\n\t "},{"fullQualified":"private Response setMaintenanceModeExternal(RESTClient<String> client, final Boolean maintenanceMode)","name":"setMaintenanceModeExternal","type":"Response","javadoc":null}],"allConstructors":[{"identifier":"private DataGenerator()","javadocComment":null}]},{"name":"EMFManager","fullyQualifiedName":"tools.descartes.teastore.persistence.repository.EMFManager","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * (Re-)configure the entity manager factory using a set of persistence properties.\r\n\t * Use to change database/user at run-time.\r\n\t * Properties are kept, even if the database is reset.\r\n\t * @param persistenceProperties The persistence properties.\r\n\t ","lineNumber":56,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the entity manager factory.\r\n\t * @return The entity manager factory.\r\n\t ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Closes and deletes EMF to be reinitialized later.\r\n\t ","lineNumber":84,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Create a persistence property map to configure the EMFManager to use an in-memory database\r\n\t * instead of the usual MySQL/MariaDB database.\r\n\t * @return The configuration. Pass this to {@link #configureEMFWithProperties(HashMap)}.\r\n\t ","lineNumber":143,"isOrphan":false}],"allMethods":[{"fullQualified":" static void configureEMFWithProperties(HashMap<String, String> persistenceProperties)","name":"configureEMFWithProperties","type":"void","javadoc":"\r\n\t * (Re-)configure the entity manager factory using a set of persistence properties.\r\n\t * Use to change database/user at run-time.\r\n\t * Properties are kept, even if the database is reset.\r\n\t * @param persistenceProperties The persistence properties.\r\n\t "},{"fullQualified":" static synchronized EntityManagerFactory getEMF()","name":"getEMF","type":"EntityManagerFactory","javadoc":"\r\n\t * Get the entity manager factory.\r\n\t * @return The entity manager factory.\r\n\t "},{"fullQualified":" static void clearEMF()","name":"clearEMF","type":"void","javadoc":"\r\n\t * Closes and deletes EMF to be reinitialized later.\r\n\t "},{"fullQualified":"private static HashMap<String, String> createPersistencePropertiesFromJavaEnv()","name":"createPersistencePropertiesFromJavaEnv","type":"HashMap<String,String>","javadoc":null},{"fullQualified":" static HashMap<String, String> createPersistencePropertieForInMemoryDB()","name":"createPersistencePropertieForInMemoryDB","type":"HashMap<String,String>","javadoc":"\r\n\t * Create a persistence property map to configure the EMFManager to use an in-memory database\r\n\t * instead of the usual MySQL/MariaDB database.\r\n\t * @return The configuration. Pass this to {@link #configureEMFWithProperties(HashMap)}.\r\n\t "}],"allConstructors":[{"identifier":"private EMFManager()","javadocComment":null}]},{"name":"CacheManagerEndpoint","fullyQualifiedName":"tools.descartes.teastore.persistence.rest.CacheManagerEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Clears the cache for the class.\r\n\t * @param className fully qualified class name.\r\n\t * @return Status Code 200 and cleared class name if clear succeeded, 404 if it didn't.\r\n\t ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clears the entire cache.\r\n\t * @return Status Code 200 and \"cleared\" text if clear succeeded, 404 if it didn't.\r\n\t ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Closes and resets the EMF.\r\n\t * @return Status Code 200 and \"clearedEMF\" text if reset succeeded, 404 if it didn't.\r\n\t ","lineNumber":64,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response clearClassCache(@PathParam(\"class\") final String className)","name":"clearClassCache","type":"Response","javadoc":"\r\n\t * Clears the cache for the class.\r\n\t * @param className fully qualified class name.\r\n\t * @return Status Code 200 and cleared class name if clear succeeded, 404 if it didn't.\r\n\t "},{"fullQualified":"public Response clearAllCaches()","name":"clearAllCaches","type":"Response","javadoc":"\r\n\t * Clears the entire cache.\r\n\t * @return Status Code 200 and \"cleared\" text if clear succeeded, 404 if it didn't.\r\n\t "},{"fullQualified":"public Response clearEMF()","name":"clearEMF","type":"Response","javadoc":"\r\n\t * Closes and resets the EMF.\r\n\t * @return Status Code 200 and \"clearedEMF\" text if reset succeeded, 404 if it didn't.\r\n\t "}],"allConstructors":[]},{"name":"CategoryEndpoint","fullyQualifiedName":"tools.descartes.teastore.persistence.rest.CategoryEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":77,"isOrphan":false}],"allMethods":[{"fullQualified":"protected long createEntity(final Category category)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected Category findEntityById(final long id)","name":"findEntityById","type":"Category","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected List<Category> listAllEntities(final int startIndex, final int maxResultCount)","name":"listAllEntities","type":"List<Category>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean updateEntity(long id, Category category)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean deleteEntity(long id)","name":"deleteEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[]},{"name":"DatabaseGenerationEndpoint","fullyQualifiedName":"tools.descartes.teastore.persistence.rest.DatabaseGenerationEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Drop database and create a new one.\r\n\t * @param categories Number of new categories.\r\n\t * @param products Number of new products per category.\r\n\t * @param users Number of new users.\r\n\t * @param orders Number of max orders per user.\r\n\t * @return Status OK. Returns {@value DataGenerator.MAINTENANCE_STATUS_CODE}\r\n\t * if in maintenance mode.\r\n\t ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns the is finished flag for database generation.\r\n\t * Also returns false if the persistence provider is in maintenance mode.\r\n\t * @return True, if generation is finished; false, if in progress.\r\n\t ","lineNumber":99,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Disables or enables the maintenance mode.\r\n\t * Persistence providers in maintenance mode return 503 on almost anything.\r\n\t * @param maintenanceMode Send true to enable, false to disable.\r\n\t * @return 404 if message body was missing. 200, otherwise.\r\n\t ","lineNumber":114,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns the is maintenance flag. Only to be used by other persistence providers.\r\n\t * @return True, if in maintenance; false, otherwise.\r\n\t ","lineNumber":130,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response generateDataBase(@QueryParam(\"categories\") final Integer categories, @QueryParam(\"products\") final Integer products, @QueryParam(\"users\") final Integer users, @QueryParam(\"orders\") final Integer orders)","name":"generateDataBase","type":"Response","javadoc":"\r\n\t * Drop database and create a new one.\r\n\t * @param categories Number of new categories.\r\n\t * @param products Number of new products per category.\r\n\t * @param users Number of new users.\r\n\t * @param orders Number of max orders per user.\r\n\t * @return Status OK. Returns {@value DataGenerator.MAINTENANCE_STATUS_CODE}\r\n\t * if in maintenance mode.\r\n\t "},{"fullQualified":"private int parseQuery(Integer param, int defaultValue)","name":"parseQuery","type":"int","javadoc":null},{"fullQualified":"public Response isFinshed()","name":"isFinshed","type":"Response","javadoc":"\r\n\t * Returns the is finished flag for database generation.\r\n\t * Also returns false if the persistence provider is in maintenance mode.\r\n\t * @return True, if generation is finished; false, if in progress.\r\n\t "},{"fullQualified":"public Response setMaintenanceMode(final Boolean maintenanceMode)","name":"setMaintenanceMode","type":"Response","javadoc":"\r\n\t * Disables or enables the maintenance mode.\r\n\t * Persistence providers in maintenance mode return 503 on almost anything.\r\n\t * @param maintenanceMode Send true to enable, false to disable.\r\n\t * @return 404 if message body was missing. 200, otherwise.\r\n\t "},{"fullQualified":"public Response isMaintenance()","name":"isMaintenance","type":"Response","javadoc":"\r\n\t * Returns the is maintenance flag. Only to be used by other persistence providers.\r\n\t * @return True, if in maintenance; false, otherwise.\r\n\t "}],"allConstructors":[]},{"name":"OrderEndpoint","fullyQualifiedName":"tools.descartes.teastore.persistence.rest.OrderEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns all order items with the given product Id (all order items for that product).\r\n\t * @param userId The id of the product.\r\n\t * @param startPosition The index (NOT ID) of the first order item with the product to return.\r\n\t * @param maxResult The max number of order items to return.\r\n\t * @return list of order items with the product.\r\n\t ","lineNumber":91,"isOrphan":false}],"allMethods":[{"fullQualified":"protected long createEntity(final Order order)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected Order findEntityById(final long id)","name":"findEntityById","type":"Order","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected List<Order> listAllEntities(final int startIndex, final int maxResultCount)","name":"listAllEntities","type":"List<Order>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean updateEntity(long id, Order order)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean deleteEntity(long id)","name":"deleteEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<Order> listAllForUser(@PathParam(\"user\") final Long userId, @QueryParam(\"start\") final Integer startPosition, @QueryParam(\"max\") final Integer maxResult)","name":"listAllForUser","type":"List<Order>","javadoc":"\r\n\t * Returns all order items with the given product Id (all order items for that product).\r\n\t * @param userId The id of the product.\r\n\t * @param startPosition The index (NOT ID) of the first order item with the product to return.\r\n\t * @param maxResult The max number of order items to return.\r\n\t * @return list of order items with the product.\r\n\t "}],"allConstructors":[]},{"name":"OrderItemEndpoint","fullyQualifiedName":"tools.descartes.teastore.persistence.rest.OrderItemEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns all order items with the given product Id (all order items for that product).\r\n\t * @param productId The id of the product.\r\n\t * @param startPosition The index (NOT ID) of the first order item with the product to return.\r\n\t * @param maxResult The max number of order items to return.\r\n\t * @return list of order items with the product.\r\n\t ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns all order items with the given order Id (all order items for that order).\r\n\t * @param orderId The id of the product.\r\n\t * @param startPosition The index (NOT ID) of the first order item with the product to return.\r\n\t * @param maxResult The max number of order items to return.\r\n\t * @return list of order items with the product.\r\n\t ","lineNumber":114,"isOrphan":false}],"allMethods":[{"fullQualified":"protected long createEntity(final OrderItem orderItem)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected OrderItem findEntityById(final long id)","name":"findEntityById","type":"OrderItem","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected List<OrderItem> listAllEntities(final int startIndex, final int maxResultCount)","name":"listAllEntities","type":"List<OrderItem>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean updateEntity(long id, OrderItem orderItem)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean deleteEntity(long id)","name":"deleteEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<OrderItem> listAllForProduct(@PathParam(\"product\") final Long productId, @QueryParam(\"start\") final Integer startPosition, @QueryParam(\"max\") final Integer maxResult)","name":"listAllForProduct","type":"List<OrderItem>","javadoc":"\r\n\t * Returns all order items with the given product Id (all order items for that product).\r\n\t * @param productId The id of the product.\r\n\t * @param startPosition The index (NOT ID) of the first order item with the product to return.\r\n\t * @param maxResult The max number of order items to return.\r\n\t * @return list of order items with the product.\r\n\t "},{"fullQualified":"public List<OrderItem> listAllForOrder(@PathParam(\"order\") final Long orderId, @QueryParam(\"start\") final Integer startPosition, @QueryParam(\"max\") final Integer maxResult)","name":"listAllForOrder","type":"List<OrderItem>","javadoc":"\r\n\t * Returns all order items with the given order Id (all order items for that order).\r\n\t * @param orderId The id of the product.\r\n\t * @param startPosition The index (NOT ID) of the first order item with the product to return.\r\n\t * @param maxResult The max number of order items to return.\r\n\t * @return list of order items with the product.\r\n\t "}],"allConstructors":[]},{"name":"ProductEndpoint","fullyQualifiedName":"tools.descartes.teastore.persistence.rest.ProductEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":61,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":81,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns all products with the given category Id (all products in that category).\r\n\t * @param categoryId The id of the Category.\r\n\t * @param startPosition The index (NOT ID) of the first product in the category to return.\r\n\t * @param maxResult The max number of products to return.\r\n\t * @return list of products in the category.\r\n\t ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns the count of produts with the given category Id (products in that category).\r\n\t * @param categoryId The id of the Category.\r\n\t * @return list of products in the category.\r\n\t ","lineNumber":115,"isOrphan":false}],"allMethods":[{"fullQualified":"protected long createEntity(final Product product)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected Product findEntityById(final long id)","name":"findEntityById","type":"Product","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected List<Product> listAllEntities(final int startIndex, final int maxResultCount)","name":"listAllEntities","type":"List<Product>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean updateEntity(long id, Product product)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean deleteEntity(long id)","name":"deleteEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public List<Product> listAllForCategory(@PathParam(\"category\") final Long categoryId, @QueryParam(\"start\") final Integer startPosition, @QueryParam(\"max\") final Integer maxResult)","name":"listAllForCategory","type":"List<Product>","javadoc":"\r\n\t * Returns all products with the given category Id (all products in that category).\r\n\t * @param categoryId The id of the Category.\r\n\t * @param startPosition The index (NOT ID) of the first product in the category to return.\r\n\t * @param maxResult The max number of products to return.\r\n\t * @return list of products in the category.\r\n\t "},{"fullQualified":"public Response countForCategory(@PathParam(\"category\") final Long categoryId)","name":"countForCategory","type":"Response","javadoc":"\r\n\t * Returns the count of produts with the given category Id (products in that category).\r\n\t * @param categoryId The id of the Category.\r\n\t * @return list of products in the category.\r\n\t "}],"allConstructors":[]},{"name":"UserEndpoint","fullyQualifiedName":"tools.descartes.teastore.persistence.rest.UserEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" SQL errors, especially for duplicate user names","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":56,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":88,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Retreive user with the provided name.\r\n\t * \r\n\t * @param name\r\n\t *            name of the entity to find.\r\n\t * @return A Response containing the entity.\r\n\t ","lineNumber":99,"isOrphan":false}],"allMethods":[{"fullQualified":"protected long createEntity(final User category)","name":"createEntity","type":"long","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected User findEntityById(final long id)","name":"findEntityById","type":"User","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected List<User> listAllEntities(final int startIndex, final int maxResultCount)","name":"listAllEntities","type":"List<User>","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean updateEntity(long id, User category)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected boolean deleteEntity(long id)","name":"deleteEntity","type":"boolean","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"public Response findById(@PathParam(\"name\") final String name)","name":"findById","type":"Response","javadoc":"\r\n\t * Retreive user with the provided name.\r\n\t * \r\n\t * @param name\r\n\t *            name of the entity to find.\r\n\t * @return A Response containing the entity.\r\n\t "}],"allConstructors":[]},{"name":"IndexServlet","fullyQualifiedName":"tools.descartes.teastore.persistence.servlet.IndexServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n     * @see HttpServlet#HttpServlet()\r\n     ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\r\n\t * @param request The request.\r\n\t * @param response The response.\r\n\t * @throws ServletException In case of servlet Exception.\r\n\t * @throws IOException In case of IOException.\r\n\t ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\r\n\t * @param request The request.\r\n\t * @param response The response.\r\n\t * @throws ServletException In case of servlet Exception.\r\n\t * @throws IOException In case of IOException.\r\n\t ","lineNumber":53,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException","name":"doGet","type":"void","javadoc":"\r\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\r\n\t * @param request The request.\r\n\t * @param response The response.\r\n\t * @throws ServletException In case of servlet Exception.\r\n\t * @throws IOException In case of IOException.\r\n\t "},{"fullQualified":"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException","name":"doPost","type":"void","javadoc":"\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\r\n\t * @param request The request.\r\n\t * @param response The response.\r\n\t * @throws ServletException In case of servlet Exception.\r\n\t * @throws IOException In case of IOException.\r\n\t "}],"allConstructors":[{"identifier":"public IndexServlet()","javadocComment":"\r\n     * @see HttpServlet#HttpServlet()\r\n     "}]},{"name":"DataGeneratorTest","fullyQualifiedName":"tools.descartes.teastore.persistence.DataGeneratorTest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Setup the test.\r\n\t * @throws Throwable On failure.\r\n\t ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Run the test.\r\n\t ","lineNumber":52,"isOrphan":false},{"type":"LineComment","text":"get initial repo sizes","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":"generate data","lineNumber":61,"isOrphan":false},{"type":"LineComment","text":"assertions","lineNumber":64,"isOrphan":false},{"type":"LineComment","text":"Re-create database","lineNumber":80,"isOrphan":false}],"allMethods":[{"fullQualified":"public void setup() throws Throwable","name":"setup","type":"void","javadoc":"\r\n\t * Setup the test.\r\n\t * @throws Throwable On failure.\r\n\t "},{"fullQualified":"public void testRepos()","name":"testRepos","type":"void","javadoc":"\r\n\t * Run the test.\r\n\t "}],"allConstructors":[]},{"name":"RegistrationDaemon","fullyQualifiedName":"tools.descartes.teastore.persistence.RegistrationDaemon","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n     * Default constructor. \r\n     ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n     * @param event The servlet context event at destruction.\r\n     ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n     * @param event The servlet context event at initialization.\r\n     ","lineNumber":51,"isOrphan":false}],"allMethods":[{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":"\r\n     * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n     * @param event The servlet context event at destruction.\r\n     "},{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":"\r\n     * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n     * @param event The servlet context event at initialization.\r\n     "}],"allConstructors":[{"identifier":"public RegistrationDaemon()","javadocComment":"\r\n     * Default constructor. \r\n     "}]},{"name":"EMFManagerInitializer","fullyQualifiedName":"tools.descartes.teastore.persistence.repository.EMFManagerInitializer","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Initialize the testing entity manager factory.\r\n\t ","lineNumber":24,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void initializeEMF()","name":"initializeEMF","type":"void","javadoc":"\r\n\t * Initialize the testing entity manager factory.\r\n\t "},{"fullQualified":"private static HashMap<String, String> createPersistencePropertiesForTesting()","name":"createPersistencePropertiesForTesting","type":"HashMap<String,String>","javadoc":null}],"allConstructors":[{"identifier":"private EMFManagerInitializer()","javadocComment":null}]},{"name":"RepositoryTest","fullyQualifiedName":"tools.descartes.teastore.persistence.RepositoryTest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Setup the test.\r\n\t * @throws Throwable Throws uncaught throwables for test to fail.\r\n\t ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Run the test.\r\n\t ","lineNumber":65,"isOrphan":false},{"type":"LineComment","text":"get initial repo sizes","lineNumber":70,"isOrphan":false},{"type":"LineComment","text":"create two users","lineNumber":77,"isOrphan":false},{"type":"LineComment","text":"create two categories","lineNumber":91,"isOrphan":false},{"type":"LineComment","text":"list categories","lineNumber":102,"isOrphan":false},{"type":"LineComment","text":"get and update category","lineNumber":105,"isOrphan":false},{"type":"LineComment","text":"Create two products in cat1","lineNumber":114,"isOrphan":false},{"type":"LineComment","text":"create an invalid product","lineNumber":126,"isOrphan":false},{"type":"LineComment","text":"get and update product","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":"get all products","lineNumber":143,"isOrphan":false},{"type":"LineComment","text":"create three orders","lineNumber":146,"isOrphan":false},{"type":"LineComment","text":"get and update user; get all users","lineNumber":161,"isOrphan":false},{"type":"LineComment","text":"create five order items","lineNumber":169,"isOrphan":false},{"type":"LineComment","text":"update and get order item","lineNumber":192,"isOrphan":false},{"type":"LineComment","text":"delete order 3, should delete order item 5","lineNumber":200,"isOrphan":false},{"type":"LineComment","text":"delete user two, should delete order 2 and its order item (order item 4)","lineNumber":203,"isOrphan":false},{"type":"LineComment","text":"delete order item","lineNumber":208,"isOrphan":false},{"type":"LineComment","text":"get order items with and without product specification","lineNumber":211,"isOrphan":false},{"type":"LineComment","text":"get orders and users","lineNumber":216,"isOrphan":false},{"type":"LineComment","text":"get and update order","lineNumber":219,"isOrphan":false},{"type":"LineComment","text":"delete product","lineNumber":228,"isOrphan":false},{"type":"LineComment","text":"order item for product should also have been deleted","lineNumber":231,"isOrphan":false},{"type":"LineComment","text":"Get Products with Category","lineNumber":234,"isOrphan":false},{"type":"LineComment","text":"delete category with product","lineNumber":240,"isOrphan":false},{"type":"LineComment","text":"product for category should also have been deleted","lineNumber":243,"isOrphan":false},{"type":"LineComment","text":"order item for product in category should also have been deleted","lineNumber":245,"isOrphan":false}],"allMethods":[{"fullQualified":"public void setup() throws Throwable","name":"setup","type":"void","javadoc":"\r\n\t * Setup the test.\r\n\t * @throws Throwable Throws uncaught throwables for test to fail.\r\n\t "},{"fullQualified":"public void testRepos()","name":"testRepos","type":"void","javadoc":"\r\n\t * Run the test.\r\n\t "}],"allConstructors":[]},{"name":"AbstractRecommender","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.AbstractRecommender","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Defines the maximum number of recommendations different implementations\r\n\t * should return. Is NOT mandatory for any of the algorithms.\r\n\t ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * This represents the matrix assigning each user a frequency for each product\r\n\t * ID. The frequency resembles the number of times, a user has bought that item.\r\n\t ","lineNumber":52,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * This set maps a userId to a set, containing the corresponding OrderItemSets,\r\n\t * i.e. all orders that were done by the user.\r\n\t ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * This is an enumeration of all available products seen during the training\r\n\t * phase.\r\n\t ","lineNumber":64,"isOrphan":false},{"type":"LineComment","text":" first create order mapping unorderized","lineNumber":74,"isOrphan":false},{"type":"LineComment","text":" see, if we already have our item","lineNumber":83,"isOrphan":false},{"type":"LineComment","text":" if not known yet -> add","lineNumber":85,"isOrphan":false},{"type":"LineComment","text":" now map each id with the corresponding order","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Triggers implementing classes if they want to execute a pre-processing step\r\n\t * during {@link AbstractRecommender#train(List, List)}.\r\n\t ","lineNumber":109,"isOrphan":false},{"type":"LineComment","text":" do nothing","lineNumber":114,"isOrphan":true},{"type":"LineComment","text":" if input is empty return empty list","lineNumber":124,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Filters the given ranking of recommendations and deletes items that already\r\n\t * are in the cart. Furthermore caps the recommendations and only uses the\r\n\t * {@link AbstractRecommender#MAX_NUMBER_OF_RECOMMENDATIONS} highest rated\r\n\t * recommendations.\r\n\t * \r\n\t * @param priorityList\r\n\t *            The unfiltered ranking assigning each recommended product ID a\r\n\t *            score or an importance. Does not need to be sorted.\r\n\t * @param currentItems\r\n\t *            The list of item IDs that must NOT be contained in the returned\r\n\t *            list.\r\n\t * @return A sorted list of recommendations with a size not greater than\r\n\t *         {@link AbstractRecommender#MAX_NUMBER_OF_RECOMMENDATIONS}\r\n\t ","lineNumber":134,"isOrphan":false},{"type":"LineComment","text":" transforming the map into a treemap (for efficient access)","lineNumber":168,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Has to be implemented by subclasses in order to perform actual\r\n\t * recommendation.\r\n\t * \r\n\t * @param userid\r\n\t *            The id of the {@link User} to recommend for. May be null.\r\n\t * @param currentItems\r\n\t *            A list containing all ids of {@link OrderItem}s.\r\n\t * @return List of all IDs of the {@link Product} entities that are recommended\r\n\t *         to add to the cart. Does not contain any {@link Product} that is\r\n\t *         already part of the given list of {@link OrderItem}s. Might be empty.\r\n\t ","lineNumber":181,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the userBuyingMatrix\r\n\t ","lineNumber":204,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param userBuyingMatrix\r\n\t *            the userBuyingMatrix to set\r\n\t ","lineNumber":211,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the totalProducts\r\n\t ","lineNumber":219,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param totalProducts\r\n\t *            the totalProducts to set\r\n\t ","lineNumber":226,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the userItemSets\r\n\t ","lineNumber":234,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param userItemSets\r\n\t *            the userItemSets to set\r\n\t ","lineNumber":241,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Transforms the list of orders into one matrix containing all user-IDs and\r\n\t * their number of buys (i.e., their rating) of all product-IDs. A\r\n\t * quantity/rating of a user is null, if the user did not buy that item. If the\r\n\t * user bought one item at least once, the contained value (rating) is the\r\n\t * number of times, he bought one given item.\r\n\t * \r\n\t * @param useritemsets\r\n\t *            A map assigning each user-ID all its OrderItemSets\r\n\t * @return A Map representing a matrix of each user-ID assigning each item-ID\r\n\t *         its number of buys (as double value)\r\n\t ","lineNumber":249,"isOrphan":false},{"type":"LineComment","text":" for each user","lineNumber":263,"isOrphan":false},{"type":"LineComment","text":" create a new line for this user-ID","lineNumber":265,"isOrphan":false},{"type":"LineComment","text":" for all orders of that user","lineNumber":267,"isOrphan":false},{"type":"LineComment","text":" for all orderitems of that orderset","lineNumber":269,"isOrphan":false},{"type":"LineComment","text":" if key was not known before -> first occurence","lineNumber":271,"isOrphan":false},{"type":"LineComment","text":" if key was known before -> increase counter","lineNumber":275,"isOrphan":false},{"type":"LineComment","text":" add this user-ID to the matrix","lineNumber":280,"isOrphan":false}],"allMethods":[{"fullQualified":"public void train(List<OrderItem> orderItems, List<Order> orders)","name":"train","type":"void","javadoc":null},{"fullQualified":"protected void executePreprocessing()","name":"executePreprocessing","type":"void","javadoc":"\r\n\t * Triggers implementing classes if they want to execute a pre-processing step\r\n\t * during {@link AbstractRecommender#train(List, List)}.\r\n\t "},{"fullQualified":"public List<Long> recommendProducts(Long userid, List<OrderItem> currentItems) throws UnsupportedOperationException","name":"recommendProducts","type":"List<Long>","javadoc":null},{"fullQualified":"protected List<Long> filterRecommendations(Map<Long, Double> priorityList, List<Long> currentItems)","name":"filterRecommendations","type":"List<Long>","javadoc":"\r\n\t * Filters the given ranking of recommendations and deletes items that already\r\n\t * are in the cart. Furthermore caps the recommendations and only uses the\r\n\t * {@link AbstractRecommender#MAX_NUMBER_OF_RECOMMENDATIONS} highest rated\r\n\t * recommendations.\r\n\t * \r\n\t * @param priorityList\r\n\t *            The unfiltered ranking assigning each recommended product ID a\r\n\t *            score or an importance. Does not need to be sorted.\r\n\t * @param currentItems\r\n\t *            The list of item IDs that must NOT be contained in the returned\r\n\t *            list.\r\n\t * @return A sorted list of recommendations with a size not greater than\r\n\t *         {@link AbstractRecommender#MAX_NUMBER_OF_RECOMMENDATIONS}\r\n\t "},{"fullQualified":"private TreeMap<Double, List<Long>> createRanking(Map<Long, Double> map)","name":"createRanking","type":"TreeMap<Double,List<Long>>","javadoc":null},{"fullQualified":"protected abstract List<Long> execute(Long userid, List<Long> currentItems)","name":"execute","type":"List<Long>","javadoc":"\r\n\t * Has to be implemented by subclasses in order to perform actual\r\n\t * recommendation.\r\n\t * \r\n\t * @param userid\r\n\t *            The id of the {@link User} to recommend for. May be null.\r\n\t * @param currentItems\r\n\t *            A list containing all ids of {@link OrderItem}s.\r\n\t * @return List of all IDs of the {@link Product} entities that are recommended\r\n\t *         to add to the cart. Does not contain any {@link Product} that is\r\n\t *         already part of the given list of {@link OrderItem}s. Might be empty.\r\n\t "},{"fullQualified":"private Order findOrder(List<Order> orders, long orderid)","name":"findOrder","type":"Order","javadoc":null},{"fullQualified":"public Map<Long, Map<Long, Double>> getUserBuyingMatrix()","name":"getUserBuyingMatrix","type":"Map<Long,Map<Long,Double>>","javadoc":"\r\n\t * @return the userBuyingMatrix\r\n\t "},{"fullQualified":"public void setUserBuyingMatrix(Map<Long, Map<Long, Double>> userBuyingMatrix)","name":"setUserBuyingMatrix","type":"void","javadoc":"\r\n\t * @param userBuyingMatrix\r\n\t *            the userBuyingMatrix to set\r\n\t "},{"fullQualified":"public Set<Long> getTotalProducts()","name":"getTotalProducts","type":"Set<Long>","javadoc":"\r\n\t * @return the totalProducts\r\n\t "},{"fullQualified":"public void setTotalProducts(Set<Long> totalProducts)","name":"setTotalProducts","type":"void","javadoc":"\r\n\t * @param totalProducts\r\n\t *            the totalProducts to set\r\n\t "},{"fullQualified":"public Map<Long, Set<OrderItemSet>> getUserItemSets()","name":"getUserItemSets","type":"Map<Long,Set<OrderItemSet>>","javadoc":"\r\n\t * @return the userItemSets\r\n\t "},{"fullQualified":"public void setUserItemSets(Map<Long, Set<OrderItemSet>> userItemSets)","name":"setUserItemSets","type":"void","javadoc":"\r\n\t * @param userItemSets\r\n\t *            the userItemSets to set\r\n\t "},{"fullQualified":"private static Map<Long, Map<Long, Double>> createUserBuyingMatrix(Map<Long, Set<OrderItemSet>> useritemsets)","name":"createUserBuyingMatrix","type":"Map<Long,Map<Long,Double>>","javadoc":"\r\n\t * Transforms the list of orders into one matrix containing all user-IDs and\r\n\t * their number of buys (i.e., their rating) of all product-IDs. A\r\n\t * quantity/rating of a user is null, if the user did not buy that item. If the\r\n\t * user bought one item at least once, the contained value (rating) is the\r\n\t * number of times, he bought one given item.\r\n\t * \r\n\t * @param useritemsets\r\n\t *            A map assigning each user-ID all its OrderItemSets\r\n\t * @return A Map representing a matrix of each user-ID assigning each item-ID\r\n\t *         its number of buys (as double value)\r\n\t "}],"allConstructors":[]},{"name":"PreprocessedSlopeOneRecommender","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.impl.cf.PreprocessedSlopeOneRecommender","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Represents a matrix, assigning each user a calculated score for each item.\r\n\t * This score can be used to recommend items.\r\n\t ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the predictedRatings\r\n\t ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param predictedRatings\r\n\t *            the predictedRatings to set\r\n\t ","lineNumber":41,"isOrphan":false},{"type":"LineComment","text":" improve performance by preprocessing and storing userids","lineNumber":51,"isOrphan":false},{"type":"LineComment","text":" Moving the matrix calculation to the preprocessing to optimize runtime","lineNumber":59,"isOrphan":true},{"type":"LineComment","text":" behavior","lineNumber":60,"isOrphan":false},{"type":"LineComment","text":" for all known users","lineNumber":62,"isOrphan":false}],"allMethods":[{"fullQualified":"public Map<Long, Map<Long, Double>> getPredictedRatings()","name":"getPredictedRatings","type":"Map<Long,Map<Long,Double>>","javadoc":"\r\n\t * @return the predictedRatings\r\n\t "},{"fullQualified":"public void setPredictedRatings(Map<Long, Map<Long, Double>> predictedRatings)","name":"setPredictedRatings","type":"void","javadoc":"\r\n\t * @param predictedRatings\r\n\t *            the predictedRatings to set\r\n\t "},{"fullQualified":"protected Map<Long, Double> getUserVector(Long userid)","name":"getUserVector","type":"Map<Long,Double>","javadoc":null},{"fullQualified":"protected void executePreprocessing()","name":"executePreprocessing","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SlopeOneRecommender","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.impl.cf.SlopeOneRecommender","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Represents a matrix, assigning each itemid an average difference (in\r\n\t * rating/buying) to any other itemid.\r\n\t ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Represents a matrix, counting the frequencies of each combination (i.e. users\r\n\t * rating/buying both items).\r\n\t ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the differences\r\n\t ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param differences\r\n\t *            the differences to set\r\n\t ","lineNumber":52,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the frequencies\r\n\t ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param frequencies\r\n\t *            the frequencies to set\r\n\t ","lineNumber":67,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommender#\r\n\t * execute(java.util.List)\r\n\t ","lineNumber":75,"isOrphan":false},{"type":"LineComment","text":" this user has not bought anything yet, so we do not have any information","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Generates one row of the matrix for the given user. (Predicts the user score\r\n\t * for each product ID.)\r\n\t * \r\n\t * @param userid\r\n\t *            The user to predict for\r\n\t * @return A Map assigning each product ID a (predicted) score (for the given\r\n\t *         user)\r\n\t ","lineNumber":97,"isOrphan":false},{"type":"LineComment","text":" This could be further optimized by moving this part into the pre-processing","lineNumber":107,"isOrphan":true},{"type":"LineComment","text":" step, but we want to have nicer performance behavior","lineNumber":108,"isOrphan":false},{"type":"LineComment","text":" this exception can be thrown if we have not enough information","lineNumber":114,"isOrphan":false},{"type":"LineComment","text":" if we find that the user actually bought this item before, we can return this","lineNumber":125,"isOrphan":true},{"type":"LineComment","text":" value","lineNumber":126,"isOrphan":true},{"type":"LineComment","text":" (considering it is his rating, we can directly return this rating)","lineNumber":127,"isOrphan":false},{"type":"LineComment","text":" if not, we can calculate the (expected) rating for that user based on item i","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":" normalize","lineNumber":137,"isOrphan":false},{"type":"LineComment","text":" The buying matrix is considered to be the rating","lineNumber":143,"isOrphan":true},{"type":"LineComment","text":" i.e. the more buys, the higher the rating","lineNumber":144,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Based on the available data, calculate the relationships between the items\r\n\t * and number of occurrences. Fill the difference and frequencies matrix.\r\n\t * \r\n\t * @param data\r\n\t *            The user rating matrix\r\n\t ","lineNumber":148,"isOrphan":false},{"type":"LineComment","text":" now, transform the differences matrix into real differences (not just the sum","lineNumber":191,"isOrphan":true},{"type":"LineComment","text":" if not present -> create","lineNumber":158,"isOrphan":false},{"type":"LineComment","text":" for all other ratings of that user","lineNumber":163,"isOrphan":false},{"type":"LineComment","text":" count is != null, if the key is actually found","lineNumber":168,"isOrphan":true},{"type":"LineComment","text":" if so, we use the known count value as count, otherwise the count until now","lineNumber":169,"isOrphan":true},{"type":"LineComment","text":" is 0","lineNumber":170,"isOrphan":false},{"type":"LineComment","text":" diff is != null, if the key is actually found","lineNumber":177,"isOrphan":true},{"type":"LineComment","text":" if so, we use the known difference value as currDiff, otherwise the diff","lineNumber":178,"isOrphan":true},{"type":"LineComment","text":" until now is 0.0","lineNumber":179,"isOrphan":false},{"type":"LineComment","text":" get the diff value of this user","lineNumber":183,"isOrphan":false},{"type":"LineComment","text":" of all found differences)","lineNumber":192,"isOrphan":false},{"type":"LineComment","text":" for all matrix entries divide the differences by the sum of occurences","lineNumber":195,"isOrphan":false}],"allMethods":[{"fullQualified":"public Map<Long, Map<Long, Double>> getDifferences()","name":"getDifferences","type":"Map<Long,Map<Long,Double>>","javadoc":"\r\n\t * @return the differences\r\n\t "},{"fullQualified":"public void setDifferences(Map<Long, Map<Long, Double>> differences)","name":"setDifferences","type":"void","javadoc":"\r\n\t * @param differences\r\n\t *            the differences to set\r\n\t "},{"fullQualified":"public Map<Long, Map<Long, Integer>> getFrequencies()","name":"getFrequencies","type":"Map<Long,Map<Long,Integer>>","javadoc":"\r\n\t * @return the frequencies\r\n\t "},{"fullQualified":"public void setFrequencies(Map<Long, Map<Long, Integer>> frequencies)","name":"setFrequencies","type":"void","javadoc":"\r\n\t * @param frequencies\r\n\t *            the frequencies to set\r\n\t "},{"fullQualified":"protected List<Long> execute(Long userid, List<Long> currentItems)","name":"execute","type":"List<Long>","javadoc":null},{"fullQualified":"protected Map<Long, Double> getUserVector(Long userid)","name":"getUserVector","type":"Map<Long,Double>","javadoc":"\r\n\t * Generates one row of the matrix for the given user. (Predicts the user score\r\n\t * for each product ID.)\r\n\t * \r\n\t * @param userid\r\n\t *            The user to predict for\r\n\t * @return A Map assigning each product ID a (predicted) score (for the given\r\n\t *         user)\r\n\t "},{"fullQualified":"private double calculateScoreForItem(long userid, long itemid)","name":"calculateScoreForItem","type":"double","javadoc":null},{"fullQualified":"protected void executePreprocessing()","name":"executePreprocessing","type":"void","javadoc":null},{"fullQualified":"private void buildDifferencesMatrices(Map<Long, Map<Long, Double>> userRatingMatrix)","name":"buildDifferencesMatrices","type":"void","javadoc":"\r\n\t * Based on the available data, calculate the relationships between the items\r\n\t * and number of occurrences. Fill the difference and frequencies matrix.\r\n\t * \r\n\t * @param data\r\n\t *            The user rating matrix\r\n\t "}],"allConstructors":[]},{"name":"DummyRecommender","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.impl.DummyRecommender","isInterface":false,"codeComments":[{"type":"BlockComment","text":" (non-Javadoc)\r\n\t * @see tools.descartes.teastore.recommender.algorithm.AbstractRecommender#execute(java.util.List)\r\n\t ","lineNumber":29,"isOrphan":false}],"allMethods":[{"fullQualified":"protected List<Long> execute(Long userid, List<Long> currentItems)","name":"execute","type":"List<Long>","javadoc":null}],"allConstructors":[]},{"name":"OrderBasedRecommender","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.impl.orderbased.OrderBasedRecommender","isInterface":false,"codeComments":[{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommender#\r\n\t * execute( java.util.List)\r\n\t ","lineNumber":33,"isOrphan":false},{"type":"LineComment","text":" Map with all product IDs and how often they have been bought in the same cart","lineNumber":42,"isOrphan":true},{"type":"LineComment","text":" the count list contains all items in the current cart","lineNumber":55,"isOrphan":true},{"type":"LineComment","text":" with one of the items in the current cart","lineNumber":43,"isOrphan":false},{"type":"LineComment","text":" treat all products in the current cart equally, and sum all the occurrences","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" however, this is fine, as it is filtered","lineNumber":56,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Adds the counts of the given product to the given count list.\r\n\t * \r\n\t * @param counts\r\n\t *            The count list, assinging each product id, how often it was bought\r\n\t *            with the given product.\r\n\t * @param product\r\n\t *            The product id of the specific product.\r\n\t ","lineNumber":60,"isOrphan":false},{"type":"LineComment","text":" ignore which user bought which set","lineNumber":71,"isOrphan":false},{"type":"LineComment","text":" look through all orders bought","lineNumber":73,"isOrphan":false},{"type":"LineComment","text":" we count all order of the set (including the product we are currently looking","lineNumber":76,"isOrphan":true},{"type":"LineComment","text":" at)","lineNumber":77,"isOrphan":false},{"type":"LineComment","text":" we do not count the NUMBER of items, just if the item occurred in the order","lineNumber":79,"isOrphan":false}],"allMethods":[{"fullQualified":"protected List<Long> execute(Long userid, List<Long> currentItems)","name":"execute","type":"List<Long>","javadoc":null},{"fullQualified":"private void addAllCountsOfProduct(HashMap<Long, Double> counts, Long product)","name":"addAllCountsOfProduct","type":"void","javadoc":"\r\n\t * Adds the counts of the given product to the given count list.\r\n\t * \r\n\t * @param counts\r\n\t *            The count list, assinging each product id, how often it was bought\r\n\t *            with the given product.\r\n\t * @param product\r\n\t *            The product id of the specific product.\r\n\t "}],"allConstructors":[]},{"name":"PopularityBasedRecommender","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.impl.pop.PopularityBasedRecommender","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Map with all product IDs and their corresponding total purchase counts.\r\n\t ","lineNumber":31,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommender#\r\n\t * execute( java.util.List)\r\n\t ","lineNumber":36,"isOrphan":false},{"type":"LineComment","text":" assigns each product a quantity","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" calculate product frequencies","lineNumber":52,"isOrphan":false}],"allMethods":[{"fullQualified":"protected List<Long> execute(Long userid, List<Long> currentItems)","name":"execute","type":"List<Long>","javadoc":null},{"fullQualified":"protected void executePreprocessing()","name":"executePreprocessing","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UseFallBackException","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.impl.UseFallBackException","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @param string\r\n\t *            The error message.\r\n\t ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * \r\n\t ","lineNumber":34,"isOrphan":false}],"allMethods":[],"allConstructors":[{"identifier":"public UseFallBackException(String string)","javadocComment":"\r\n\t * @param string\r\n\t *            The error message.\r\n\t "}]},{"name":"IRecommender","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.IRecommender","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Trains this recommender with the given list of historical {@link OrderItems}s\r\n\t * and {@link Order}s. This list is used as knowledge basis for the recommending\r\n\t * in {@link IRecommender#recommendProducts(List)}.<br>\r\n\t * The mapping of the different {@link OrderItem}s to their corresponding\r\n\t * {@link Order}s is done via {@link OrderItem#getOrderId()}.<br>\r\n\t * Calling this method twice will trigger a retraining.\r\n\t * \r\n\t * @param orderItems\r\n\t *            A list of {@link OrderItem}s that were placed by users.\r\n\t * @param orders\r\n\t *            A list of {@link Order}s that were placed by users.\r\n\t ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Return a list of all {@link Product}s, which are recommended for the given\r\n\t * {@link User} buying the given list of {@link OrderItem}s. <br>\r\n\t * {@link IRecommender#train(List)} must be called before any recommendations\r\n\t * can be executed.\r\n\t * \r\n\t * @param currentItems\r\n\t *            A list containing all {@link OrderItem}s in the current cart.\r\n\t *            Might be empty.\r\n\t * @param userid\r\n\t *            The id of the {@link User} to recommend for. May be null.\r\n\t * @return List of all IDs of the {@link Product} entities that are recommended\r\n\t *         to add to the cart. Does not contain any {@link Product} that is\r\n\t *         already part of the given list of {@link OrderItem}s. Might be empty.\r\n\t * \r\n\t * @throws UnsupportedOperationException\r\n\t *             If this instance is not ready to recommend, i.e.,\r\n\t *             {@link IRecommender#train(List)} has not been invoked or\r\n\t *             terminated yet.\r\n\t ","lineNumber":46,"isOrphan":false}],"allMethods":[{"fullQualified":"public void train(List<OrderItem> orderItems, List<Order> orders)","name":"train","type":"void","javadoc":"\r\n\t * Trains this recommender with the given list of historical {@link OrderItems}s\r\n\t * and {@link Order}s. This list is used as knowledge basis for the recommending\r\n\t * in {@link IRecommender#recommendProducts(List)}.<br>\r\n\t * The mapping of the different {@link OrderItem}s to their corresponding\r\n\t * {@link Order}s is done via {@link OrderItem#getOrderId()}.<br>\r\n\t * Calling this method twice will trigger a retraining.\r\n\t * \r\n\t * @param orderItems\r\n\t *            A list of {@link OrderItem}s that were placed by users.\r\n\t * @param orders\r\n\t *            A list of {@link Order}s that were placed by users.\r\n\t "},{"fullQualified":"public List<Long> recommendProducts(Long userid, List<OrderItem> currentItems) throws UnsupportedOperationException","name":"recommendProducts","type":"List<Long>","javadoc":"\r\n\t * Return a list of all {@link Product}s, which are recommended for the given\r\n\t * {@link User} buying the given list of {@link OrderItem}s. <br>\r\n\t * {@link IRecommender#train(List)} must be called before any recommendations\r\n\t * can be executed.\r\n\t * \r\n\t * @param currentItems\r\n\t *            A list containing all {@link OrderItem}s in the current cart.\r\n\t *            Might be empty.\r\n\t * @param userid\r\n\t *            The id of the {@link User} to recommend for. May be null.\r\n\t * @return List of all IDs of the {@link Product} entities that are recommended\r\n\t *         to add to the cart. Does not contain any {@link Product} that is\r\n\t *         already part of the given list of {@link OrderItem}s. Might be empty.\r\n\t * \r\n\t * @throws UnsupportedOperationException\r\n\t *             If this instance is not ready to recommend, i.e.,\r\n\t *             {@link IRecommender#train(List)} has not been invoked or\r\n\t *             terminated yet.\r\n\t "}],"allConstructors":[]},{"name":"OrderItemSet","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.OrderItemSet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Standard constructor.\r\n\t ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * The user that made this order.\r\n\t ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * The orderId that the Items were bought in.\r\n\t ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * The productIds that were bought together with the given quantity.\r\n\t ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the orderset\r\n\t ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param orderset\r\n\t *            the orderset to set\r\n\t ","lineNumber":62,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the orderId\r\n\t ","lineNumber":70,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param orderId\r\n\t *            the orderId to set\r\n\t ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the userId\r\n\t ","lineNumber":85,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param userId the userId to set\r\n\t ","lineNumber":92,"isOrphan":false}],"allMethods":[{"fullQualified":"public Map<Long, Integer> getOrderset()","name":"getOrderset","type":"Map<Long,Integer>","javadoc":"\r\n\t * @return the orderset\r\n\t "},{"fullQualified":"public void setOrderset(Map<Long, Integer> orderset)","name":"setOrderset","type":"void","javadoc":"\r\n\t * @param orderset\r\n\t *            the orderset to set\r\n\t "},{"fullQualified":"public long getOrderId()","name":"getOrderId","type":"long","javadoc":"\r\n\t * @return the orderId\r\n\t "},{"fullQualified":"public void setOrderId(long orderId)","name":"setOrderId","type":"void","javadoc":"\r\n\t * @param orderId\r\n\t *            the orderId to set\r\n\t "},{"fullQualified":"public long getUserId()","name":"getUserId","type":"long","javadoc":"\r\n\t * @return the userId\r\n\t "},{"fullQualified":"public void setUserId(long userId)","name":"setUserId","type":"void","javadoc":"\r\n\t * @param userId the userId to set\r\n\t "}],"allConstructors":[{"identifier":"public OrderItemSet()","javadocComment":"\r\n\t * Standard constructor.\r\n\t "}]},{"name":"RecommenderSelector","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.RecommenderSelector","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * This map lists all currently available recommending approaches and assigns\r\n\t * them their \"name\" for the environment variable.\r\n\t ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * The default recommender to choose, if no other recommender was set.\r\n\t ","lineNumber":56,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Private Constructor.\r\n\t ","lineNumber":69,"isOrphan":false},{"type":"LineComment","text":" if a specific algorithm is set, we can use that algorithm","lineNumber":76,"isOrphan":false},{"type":"LineComment","text":" if creating a new instance fails","lineNumber":85,"isOrphan":false},{"type":"LineComment","text":" if nothing was set","lineNumber":90,"isOrphan":false},{"type":"LineComment","text":" also the default algorithm could fail","lineNumber":95,"isOrphan":false},{"type":"LineComment","text":" a UseFallBackException is usually ignored (as it is conceptual and might","lineNumber":109,"isOrphan":true},{"type":"LineComment","text":" occur quite often)","lineNumber":110,"isOrphan":false},{"type":"LineComment","text":" if algorithm is not yet trained, we throw the error","lineNumber":115,"isOrphan":false},{"type":"LineComment","text":" any other exception is just reported","lineNumber":120,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns the instance of this Singleton or creates a new one, if this is the\r\n\t * first call of this method.\r\n\t * \r\n\t * @return The instance of this class.\r\n\t ","lineNumber":127,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.IRecommender#train(java.util.List,\r\n\t * java.util.List)\r\n\t ","lineNumber":140,"isOrphan":false}],"allMethods":[{"fullQualified":"public List<Long> recommendProducts(Long userid, List<OrderItem> currentItems) throws UnsupportedOperationException","name":"recommendProducts","type":"List<Long>","javadoc":null},{"fullQualified":"public static synchronized RecommenderSelector getInstance()","name":"getInstance","type":"RecommenderSelector","javadoc":"\r\n\t * Returns the instance of this Singleton or creates a new one, if this is the\r\n\t * first call of this method.\r\n\t * \r\n\t * @return The instance of this class.\r\n\t "},{"fullQualified":"public void train(List<OrderItem> orderItems, List<Order> orders)","name":"train","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private RecommenderSelector()","javadocComment":"\r\n\t * Private Constructor.\r\n\t "}]},{"name":"RecommendEndpoint","fullyQualifiedName":"tools.descartes.teastore.recommender.rest.RecommendEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Return a list of all {@link Product}s, that are recommended for the given\r\n\t * {@link User} buying the given list of {@link OrderItem}s. <br>\r\n\t * \r\n\t * The returning list does not contain any {@link Product} that is already part\r\n\t * of the given list of {@link OrderItem}s. It might be empty, however.\r\n\t * \r\n\t * @param currentItems\r\n\t *            A list, containing all {@link OrderItem}s in the current cart.\r\n\t *            Might be empty.\r\n\t * @param uid\r\n\t *            The id of the {@link User} to recommend for. May be null.\r\n\t * @return List of {@link Long} objects, containing all {@link Product} IDs that\r\n\t *         are recommended to add to the cart, or an INTERNALSERVERERROR, if the\r\n\t *         recommendation failed.\r\n\t ","lineNumber":41,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response recommend(List<OrderItem> currentItems, @QueryParam(\"uid\") final Long uid)","name":"recommend","type":"Response","javadoc":"\r\n\t * Return a list of all {@link Product}s, that are recommended for the given\r\n\t * {@link User} buying the given list of {@link OrderItem}s. <br>\r\n\t * \r\n\t * The returning list does not contain any {@link Product} that is already part\r\n\t * of the given list of {@link OrderItem}s. It might be empty, however.\r\n\t * \r\n\t * @param currentItems\r\n\t *            A list, containing all {@link OrderItem}s in the current cart.\r\n\t *            Might be empty.\r\n\t * @param uid\r\n\t *            The id of the {@link User} to recommend for. May be null.\r\n\t * @return List of {@link Long} objects, containing all {@link Product} IDs that\r\n\t *         are recommended to add to the cart, or an INTERNALSERVERERROR, if the\r\n\t *         recommendation failed.\r\n\t "}],"allConstructors":[]},{"name":"RecommendSingleEndpoint","fullyQualifiedName":"tools.descartes.teastore.recommender.rest.RecommendSingleEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Return a list of all {@link Product}s, that are recommended for the given\r\n\t * {@link User} buying the given {@link OrderItem}. <br>\r\n\t * \r\n\t * The returning list does not contain the {@link Product} of the respective\r\n\t * {@link OrderItem}. It might be empty, however.\r\n\t * \r\n\t * @param item\r\n\t *            An {@link OrderItem} to use as recommender. Must not be null.\r\n\t * @param uid\r\n\t *            The id of the {@link User} to recommend for. May be null.\r\n\t * @return List of {@link Long} objects, containing all {@link Product} IDs that\r\n\t *         are recommended to add to the cart, or an INTERNALSERVERERROR, if the\r\n\t *         recommendation failed.\r\n\t ","lineNumber":42,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response recommend(OrderItem item, @QueryParam(\"uid\") final Long uid)","name":"recommend","type":"Response","javadoc":"\r\n\t * Return a list of all {@link Product}s, that are recommended for the given\r\n\t * {@link User} buying the given {@link OrderItem}. <br>\r\n\t * \r\n\t * The returning list does not contain the {@link Product} of the respective\r\n\t * {@link OrderItem}. It might be empty, however.\r\n\t * \r\n\t * @param item\r\n\t *            An {@link OrderItem} to use as recommender. Must not be null.\r\n\t * @param uid\r\n\t *            The id of the {@link User} to recommend for. May be null.\r\n\t * @return List of {@link Long} objects, containing all {@link Product} IDs that\r\n\t *         are recommended to add to the cart, or an INTERNALSERVERERROR, if the\r\n\t *         recommendation failed.\r\n\t "}],"allConstructors":[]},{"name":"TrainEndpoint","fullyQualifiedName":"tools.descartes.teastore.recommender.rest.TrainEndpoint","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Triggers the training of the recommendation algorithm. It retrieves all data\r\n\t * {@link OrderItem}s and all {@link Order}s from the database entity and is\r\n\t * therefore both very network and computation time intensive. <br>\r\n\t * This method must be called before the {@link RecommendEndpoint} is usable, as\r\n\t * the {@link IRecommender} will throw an\r\n\t * {@link UnsupportedOperationException}.<br>\r\n\t * Calling this method a second time initiates a new training process from scratch.\r\n\t *\r\n\t * @return Returns a {@link Response} with\r\n\t *         {@link jakarta.servlet.http.HttpServletResponse#SC_OK} or with\r\n\t *         {@link jakarta.servlet.http.HttpServletResponse#SC_INTERNAL_SERVER_ERROR},\r\n\t *         if the operation failed.\r\n\t ","lineNumber":36,"isOrphan":false},{"type":"LineComment","text":" set ready to true anyway to avoid being stuck","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns the last time stamp, which was considered at the training of this\r\n\t * instance.\r\n\t *\r\n\t * @return Returns a {@link Response} with\r\n\t *         {@link jakarta.servlet.http.HttpServletResponse#SC_OK} containing the\r\n\t *         maximum considered time as String or with\r\n\t *         {@link jakarta.servlet.http.HttpServletResponse#SC_INTERNAL_SERVER_ERROR},\r\n\t *         if the operation failed.\r\n\t ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * This methods checks, if the service is ready to serve recommendation\r\n\t * requests, i.e., if the algorithm has finished training and no retraining process\r\n\t * is running. However, this does not imply that issuing a recommendation will\r\n\t * fail, if this method returns false. For example, if a retraining is issued,\r\n\t * the old trained instance might still answer issued requests until the new\r\n\t * instance is fully trained. However, performance behavior is probably\r\n\t * influenced.\r\n\t *\r\n\t * @return True, if recommender is ready; false, if not.\r\n\t ","lineNumber":88,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response train()","name":"train","type":"Response","javadoc":"\r\n\t * Triggers the training of the recommendation algorithm. It retrieves all data\r\n\t * {@link OrderItem}s and all {@link Order}s from the database entity and is\r\n\t * therefore both very network and computation time intensive. <br>\r\n\t * This method must be called before the {@link RecommendEndpoint} is usable, as\r\n\t * the {@link IRecommender} will throw an\r\n\t * {@link UnsupportedOperationException}.<br>\r\n\t * Calling this method a second time initiates a new training process from scratch.\r\n\t *\r\n\t * @return Returns a {@link Response} with\r\n\t *         {@link jakarta.servlet.http.HttpServletResponse#SC_OK} or with\r\n\t *         {@link jakarta.servlet.http.HttpServletResponse#SC_INTERNAL_SERVER_ERROR},\r\n\t *         if the operation failed.\r\n\t "},{"fullQualified":"public Response getTimeStamp()","name":"getTimeStamp","type":"Response","javadoc":"\r\n\t * Returns the last time stamp, which was considered at the training of this\r\n\t * instance.\r\n\t *\r\n\t * @return Returns a {@link Response} with\r\n\t *         {@link jakarta.servlet.http.HttpServletResponse#SC_OK} containing the\r\n\t *         maximum considered time as String or with\r\n\t *         {@link jakarta.servlet.http.HttpServletResponse#SC_INTERNAL_SERVER_ERROR},\r\n\t *         if the operation failed.\r\n\t "},{"fullQualified":"public Response isReady()","name":"isReady","type":"Response","javadoc":"\r\n\t * This methods checks, if the service is ready to serve recommendation\r\n\t * requests, i.e., if the algorithm has finished training and no retraining process\r\n\t * is running. However, this does not imply that issuing a recommendation will\r\n\t * fail, if this method returns false. For example, if a retraining is issued,\r\n\t * the old trained instance might still answer issued requests until the new\r\n\t * instance is fully trained. However, performance behavior is probably\r\n\t * influenced.\r\n\t *\r\n\t * @return True, if recommender is ready; false, if not.\r\n\t "}],"allConstructors":[]},{"name":"IndexServlet","fullyQualifiedName":"tools.descartes.teastore.recommender.servlet.IndexServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse\r\n\t *      response)\r\n\t * @param request\r\n\t *            The request.\r\n\t * @param response\r\n\t *            The response.\r\n\t * @throws ServletException\r\n\t *             In case of servlet Exception.\r\n\t * @throws IOException\r\n\t *             In case of IOException.\r\n\t ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse\r\n\t *      response)\r\n\t * @param request\r\n\t *            The request.\r\n\t * @param response\r\n\t *            The response.\r\n\t * @throws ServletException\r\n\t *             In case of servlet Exception.\r\n\t * @throws IOException\r\n\t *             In case of IOException.\r\n\t ","lineNumber":59,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException","name":"doGet","type":"void","javadoc":"\r\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse\r\n\t *      response)\r\n\t * @param request\r\n\t *            The request.\r\n\t * @param response\r\n\t *            The response.\r\n\t * @throws ServletException\r\n\t *             In case of servlet Exception.\r\n\t * @throws IOException\r\n\t *             In case of IOException.\r\n\t "},{"fullQualified":"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException","name":"doPost","type":"void","javadoc":"\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse\r\n\t *      response)\r\n\t * @param request\r\n\t *            The request.\r\n\t * @param response\r\n\t *            The response.\r\n\t * @throws ServletException\r\n\t *             In case of servlet Exception.\r\n\t * @throws IOException\r\n\t *             In case of IOException.\r\n\t "}],"allConstructors":[{"identifier":"public IndexServlet()","javadocComment":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t "}]},{"name":"RecommenderStartup","fullyQualifiedName":"tools.descartes.teastore.recommender.servlet.RecommenderStartup","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Also set this accordingly in RegistryClientStartup.\r\n\t ","lineNumber":44,"isOrphan":true},{"type":"JavadocComment","text":"\r\n\t * Empty constructor.\r\n\t ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n\t * @param event\r\n\t *            The servlet context event at destruction.\r\n\t ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n\t * @param event\r\n\t *            The servlet context event at initialization.\r\n\t ","lineNumber":64,"isOrphan":false},{"type":"LineComment","text":" if a looptime is specified, a retraining daemon is started","lineNumber":79,"isOrphan":false}],"allMethods":[{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":"\r\n\t * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n\t * @param event\r\n\t *            The servlet context event at destruction.\r\n\t "},{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":"\r\n\t * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n\t * @param event\r\n\t *            The servlet context event at initialization.\r\n\t "}],"allConstructors":[{"identifier":"public RecommenderStartup()","javadocComment":"\r\n\t * Empty constructor.\r\n\t "}]},{"name":"RetrainDaemon","fullyQualifiedName":"tools.descartes.teastore.recommender.servlet.RetrainDaemon","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * The time between retraining in milliseconds.\r\n\t ","lineNumber":27,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Constructor.\r\n\t * \r\n\t * @param looptime\r\n\t *            The time between retraining in milliseconds\r\n\t ","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":" set as daemon thread","lineNumber":40,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see java.lang.Runnable#run()\r\n\t ","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" repeat until stopped","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":" wait for the persistance service and then retrain","lineNumber":60,"isOrphan":false}],"allMethods":[{"fullQualified":"public void run()","name":"run","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public RetrainDaemon(long looptime)","javadocComment":"\r\n\t * Constructor.\r\n\t * \r\n\t * @param looptime\r\n\t *            The time between retraining in milliseconds\r\n\t "}]},{"name":"TrainingSynchronizer","fullyQualifiedName":"tools.descartes.teastore.recommender.servlet.TrainingSynchronizer","isInterface":false,"codeComments":[{"type":"LineComment","text":" Longest wait period before querying the persistence again if it is finished","lineNumber":56,"isOrphan":true},{"type":"JavadocComment","text":"\r\n\t * This value signals that the maximum training time is not known.\r\n\t ","lineNumber":51,"isOrphan":false},{"type":"LineComment","text":" creating entries","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":" Wait time in ms before checking again for an existing persistence service","lineNumber":59,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the isReady\r\n\t ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param isReady\r\n\t *            the isReady to set\r\n\t ","lineNumber":74,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns the instance for this singleton.\r\n\t *\r\n\t * @return An instance of {@link TrainingSynchronizer}\r\n\t ","lineNumber":86,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * The maximum considered time in milliseconds. DEFAULT_MAX_TIME_VALUE signals\r\n\t * no entry, e.g. all orders are used for training.\r\n\t ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the maxTime\r\n\t ","lineNumber":106,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param maxTime\r\n\t *            the maxTime to set\r\n\t ","lineNumber":113,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param maxTime\r\n\t *            the maxTime to set\r\n\t ","lineNumber":121,"isOrphan":false},{"type":"LineComment","text":" We have to wait for the database that all entries are created before","lineNumber":130,"isOrphan":true},{"type":"LineComment","text":" generating images (which queries persistence). Yes we want to wait forever in","lineNumber":131,"isOrphan":true},{"type":"LineComment","text":" case the persistence is","lineNumber":132,"isOrphan":true},{"type":"LineComment","text":" not answering.","lineNumber":133,"isOrphan":false},{"type":"LineComment","text":" continue waiting as usual","lineNumber":146,"isOrphan":true},{"type":"JavadocComment","text":"\r\n\t * Connects via REST to the database and retrieves all {@link OrderItem}s and\r\n\t * all {@link Order}s. Then, it triggers the training of the recommender.\r\n\t *\r\n\t * @return The number of elements retrieved from the database or -1 if the\r\n\t *         process failed.\r\n\t ","lineNumber":167,"isOrphan":false},{"type":"LineComment","text":" retrieve","lineNumber":182,"isOrphan":false},{"type":"LineComment","text":" set ready anyway to avoid deadlocks","lineNumber":188,"isOrphan":false},{"type":"LineComment","text":" set ready anyway to avoid deadlocks","lineNumber":198,"isOrphan":false},{"type":"LineComment","text":" filter lists","lineNumber":203,"isOrphan":false},{"type":"LineComment","text":" train instance","lineNumber":205,"isOrphan":false},{"type":"LineComment","text":" since we are not registered ourselves, we can multicast to all services","lineNumber":213,"isOrphan":false},{"type":"LineComment","text":" only consider if status was fine","lineNumber":222,"isOrphan":false},{"type":"LineComment","text":" release connection by buffering entity","lineNumber":230,"isOrphan":false},{"type":"LineComment","text":" we are the only known service","lineNumber":236,"isOrphan":true},{"type":"LineComment","text":" therefore we find max and set it","lineNumber":237,"isOrphan":false},{"type":"LineComment","text":" filter orderItems and orders and ignore newer entries.","lineNumber":246,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean isReady()","name":"isReady","type":"boolean","javadoc":"\r\n\t * @return the isReady\r\n\t "},{"fullQualified":"public void setReady(boolean isReady)","name":"setReady","type":"void","javadoc":"\r\n\t * @param isReady\r\n\t *            the isReady to set\r\n\t "},{"fullQualified":"public static synchronized TrainingSynchronizer getInstance()","name":"getInstance","type":"TrainingSynchronizer","javadoc":"\r\n\t * Returns the instance for this singleton.\r\n\t *\r\n\t * @return An instance of {@link TrainingSynchronizer}\r\n\t "},{"fullQualified":"public long getMaxTime()","name":"getMaxTime","type":"long","javadoc":"\r\n\t * @return the maxTime\r\n\t "},{"fullQualified":"public void setMaxTime(String maxTime)","name":"setMaxTime","type":"void","javadoc":"\r\n\t * @param maxTime\r\n\t *            the maxTime to set\r\n\t "},{"fullQualified":"public void setMaxTime(long maxTime)","name":"setMaxTime","type":"void","javadoc":"\r\n\t * @param maxTime\r\n\t *            the maxTime to set\r\n\t "},{"fullQualified":"private void waitForPersistence()","name":"waitForPersistence","type":"void","javadoc":null},{"fullQualified":"public long retrieveDataAndRetrain()","name":"retrieveDataAndRetrain","type":"long","javadoc":"\r\n\t * Connects via REST to the database and retrieves all {@link OrderItem}s and\r\n\t * all {@link Order}s. Then, it triggers the training of the recommender.\r\n\t *\r\n\t * @return The number of elements retrieved from the database or -1 if the\r\n\t *         process failed.\r\n\t "},{"fullQualified":"private void filterLists(List<OrderItem> orderItems, List<Order> orders)","name":"filterLists","type":"void","javadoc":null},{"fullQualified":"private void filterForMaxtimeStamp(List<OrderItem> orderItems, List<Order> orders)","name":"filterForMaxtimeStamp","type":"void","javadoc":null},{"fullQualified":"private long toMillis(String date)","name":"toMillis","type":"long","javadoc":null}],"allConstructors":[{"identifier":"private TrainingSynchronizer()","javadocComment":null}]},{"name":"AbstractRecommenderFunctionalityTest","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.AbstractRecommenderFunctionalityTest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Tests the common functions which should usually be the same for all abstract\r\n\t * recommender implementations.\r\n\t ","lineNumber":30,"isOrphan":false},{"type":"LineComment","text":" train","lineNumber":36,"isOrphan":false},{"type":"LineComment","text":" user100","lineNumber":41,"isOrphan":false},{"type":"LineComment","text":" user101","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" user103","lineNumber":52,"isOrphan":false},{"type":"LineComment","text":" user104","lineNumber":58,"isOrphan":false},{"type":"LineComment","text":" user105","lineNumber":62,"isOrphan":false},{"type":"LineComment","text":" user106","lineNumber":69,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testAbstractFunctions()","name":"testAbstractFunctions","type":"void","javadoc":"\r\n\t * Tests the common functions which should usually be the same for all abstract\r\n\t * recommender implementations.\r\n\t "}],"allConstructors":[]},{"name":"AbstractRecommenderTest","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Run the setup.\r\n\t * \r\n\t * trainOrders = [{10, user100}, {11, user101}, {12, user103}, {13, user104},\r\n\t * {14, user101}, {15, user101}, {16, user105}, {17, user106}] <br>\r\n\t * orderItems: 10 = {1, 2, 3}; 11 = {2^5,4^2}; 12 = {1, 3, 4}; 13 = {2^2}; 14 =\r\n\t * {2^2}; 15 = {2}; 16 = {2, 3, 4, 5}; 17 = {3};\r\n\t ","lineNumber":48,"isOrphan":false},{"type":"LineComment","text":" create users","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" train orders","lineNumber":112,"isOrphan":false},{"type":"LineComment","text":" train items","lineNumber":155,"isOrphan":false},{"type":"LineComment","text":" recommend Single","lineNumber":254,"isOrphan":false},{"type":"LineComment","text":" recommend Multi","lineNumber":260,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Iniialize the algo.\r\n\t ","lineNumber":273,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Test for interface conformity.\r\n\t ","lineNumber":278,"isOrphan":false},{"type":"LineComment","text":" expected","lineNumber":287,"isOrphan":true},{"type":"LineComment","text":" compare type","lineNumber":292,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Test the results.\r\n\t ","lineNumber":303,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Test the results of the single recommender interface.\r\n\t ","lineNumber":313,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Test the results of the multi recommender interface.\r\n\t ","lineNumber":318,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the trainOrderItems\r\n\t ","lineNumber":323,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param trainOrderItems\r\n\t *            the trainOrderItems to set\r\n\t ","lineNumber":330,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the trainOrders\r\n\t ","lineNumber":338,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param trainOrders\r\n\t *            the trainOrders to set\r\n\t ","lineNumber":345,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the recommendSingle\r\n\t ","lineNumber":353,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param recommendSingle\r\n\t *            the recommendSingle to set\r\n\t ","lineNumber":360,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the recommendMulti\r\n\t ","lineNumber":368,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param recommendMulti\r\n\t *            the recommendMulti to set\r\n\t ","lineNumber":375,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the algo\r\n\t ","lineNumber":383,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param algo\r\n\t *            the algo to set\r\n\t ","lineNumber":390,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @return the allUsers\r\n\t ","lineNumber":398,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @param allUsers\r\n\t *            the allUsers to set\r\n\t ","lineNumber":405,"isOrphan":false}],"allMethods":[{"fullQualified":"public void setup()","name":"setup","type":"void","javadoc":"\r\n\t * Run the setup.\r\n\t * \r\n\t * trainOrders = [{10, user100}, {11, user101}, {12, user103}, {13, user104},\r\n\t * {14, user101}, {15, user101}, {16, user105}, {17, user106}] <br>\r\n\t * orderItems: 10 = {1, 2, 3}; 11 = {2^5,4^2}; 12 = {1, 3, 4}; 13 = {2^2}; 14 =\r\n\t * {2^2}; 15 = {2}; 16 = {2, 3, 4, 5}; 17 = {3};\r\n\t "},{"fullQualified":"protected abstract void setupAlgo()","name":"setupAlgo","type":"void","javadoc":"\r\n\t * Iniialize the algo.\r\n\t "},{"fullQualified":"public void testInterface()","name":"testInterface","type":"void","javadoc":"\r\n\t * Test for interface conformity.\r\n\t "},{"fullQualified":"public void testResults()","name":"testResults","type":"void","javadoc":"\r\n\t * Test the results.\r\n\t "},{"fullQualified":"public abstract void testSingleResults()","name":"testSingleResults","type":"void","javadoc":"\r\n\t * Test the results of the single recommender interface.\r\n\t "},{"fullQualified":"public abstract void testMultiResults()","name":"testMultiResults","type":"void","javadoc":"\r\n\t * Test the results of the multi recommender interface.\r\n\t "},{"fullQualified":"public List<OrderItem> getTrainOrderItems()","name":"getTrainOrderItems","type":"List<OrderItem>","javadoc":"\r\n\t * @return the trainOrderItems\r\n\t "},{"fullQualified":"public void setTrainOrderItems(List<OrderItem> trainOrderItems)","name":"setTrainOrderItems","type":"void","javadoc":"\r\n\t * @param trainOrderItems\r\n\t *            the trainOrderItems to set\r\n\t "},{"fullQualified":"public List<Order> getTrainOrders()","name":"getTrainOrders","type":"List<Order>","javadoc":"\r\n\t * @return the trainOrders\r\n\t "},{"fullQualified":"public void setTrainOrders(List<Order> trainOrders)","name":"setTrainOrders","type":"void","javadoc":"\r\n\t * @param trainOrders\r\n\t *            the trainOrders to set\r\n\t "},{"fullQualified":"public List<OrderItem> getRecommendSingle()","name":"getRecommendSingle","type":"List<OrderItem>","javadoc":"\r\n\t * @return the recommendSingle\r\n\t "},{"fullQualified":"public void setRecommendSingle(List<OrderItem> recommendSingle)","name":"setRecommendSingle","type":"void","javadoc":"\r\n\t * @param recommendSingle\r\n\t *            the recommendSingle to set\r\n\t "},{"fullQualified":"public List<OrderItem> getRecommendMulti()","name":"getRecommendMulti","type":"List<OrderItem>","javadoc":"\r\n\t * @return the recommendMulti\r\n\t "},{"fullQualified":"public void setRecommendMulti(List<OrderItem> recommendMulti)","name":"setRecommendMulti","type":"void","javadoc":"\r\n\t * @param recommendMulti\r\n\t *            the recommendMulti to set\r\n\t "},{"fullQualified":"public AbstractRecommender getAlgo()","name":"getAlgo","type":"AbstractRecommender","javadoc":"\r\n\t * @return the algo\r\n\t "},{"fullQualified":"public void setAlgo(AbstractRecommender algo)","name":"setAlgo","type":"void","javadoc":"\r\n\t * @param algo\r\n\t *            the algo to set\r\n\t "},{"fullQualified":"public List<User> getAllUsers()","name":"getAllUsers","type":"List<User>","javadoc":"\r\n\t * @return the allUsers\r\n\t "},{"fullQualified":"public void setAllUsers(List<User> allUsers)","name":"setAllUsers","type":"void","javadoc":"\r\n\t * @param allUsers\r\n\t *            the allUsers to set\r\n\t "}],"allConstructors":[]},{"name":"DummyRecommenderTest","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.DummyRecommenderTest","isInterface":false,"codeComments":[{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * setupAlgo()\r\n\t ","lineNumber":31,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * testResults()\r\n\t ","lineNumber":44,"isOrphan":false},{"type":"LineComment","text":" compare","lineNumber":53,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * testResults()\r\n\t ","lineNumber":60,"isOrphan":false},{"type":"LineComment","text":" compare","lineNumber":69,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void setupAlgo()","name":"setupAlgo","type":"void","javadoc":null},{"fullQualified":"public void testSingleResults()","name":"testSingleResults","type":"void","javadoc":null},{"fullQualified":"public void testMultiResults()","name":"testMultiResults","type":"void","javadoc":null}],"allConstructors":[]},{"name":"OrderBasedRecommenderTest","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.OrderBasedRecommenderTest","isInterface":false,"codeComments":[{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * setupAlgo()\r\n\t ","lineNumber":33,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * testResults()\r\n\t ","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" test single","lineNumber":54,"isOrphan":false},{"type":"LineComment","text":" test single with different order","lineNumber":56,"isOrphan":false},{"type":"LineComment","text":" test single with null user","lineNumber":58,"isOrphan":false},{"type":"LineComment","text":" try other item with id 1","lineNumber":61,"isOrphan":false},{"type":"LineComment","text":" Result should contain 2 or 4 on position 2","lineNumber":72,"isOrphan":false},{"type":"LineComment","text":" expected","lineNumber":87,"isOrphan":true},{"type":"LineComment","text":" Result should contain 3 or 4 on position 1","lineNumber":96,"isOrphan":false},{"type":"LineComment","text":" Result should contain 5 or 1 on position 3","lineNumber":104,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * testResults()\r\n\t ","lineNumber":111,"isOrphan":false},{"type":"LineComment","text":" test multi","lineNumber":120,"isOrphan":false},{"type":"LineComment","text":" test multi with different user","lineNumber":122,"isOrphan":false},{"type":"LineComment","text":" test multi with null user","lineNumber":125,"isOrphan":false},{"type":"LineComment","text":" test multi with different user","lineNumber":128,"isOrphan":false},{"type":"LineComment","text":" test multi with different user","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":" test multi with different user","lineNumber":134,"isOrphan":false},{"type":"LineComment","text":" Result should contain 2 or 4 on position 1","lineNumber":144,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void setupAlgo()","name":"setupAlgo","type":"void","javadoc":null},{"fullQualified":"public void testSingleResults()","name":"testSingleResults","type":"void","javadoc":null},{"fullQualified":"private void evaluateForItemNo2(List<Long> result)","name":"evaluateForItemNo2","type":"void","javadoc":null},{"fullQualified":"public void testMultiResults()","name":"testMultiResults","type":"void","javadoc":null},{"fullQualified":"private void evaluateForItemNo356(List<Long> result)","name":"evaluateForItemNo356","type":"void","javadoc":null}],"allConstructors":[]},{"name":"PopularityBasedRecommenderTest","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.PopularityBasedRecommenderTest","isInterface":false,"codeComments":[{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * setupAlgo()\r\n\t ","lineNumber":29,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * testResults()\r\n\t ","lineNumber":41,"isOrphan":false},{"type":"LineComment","text":" test single","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" test single with different user","lineNumber":58,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * testResults()\r\n\t ","lineNumber":67,"isOrphan":false},{"type":"LineComment","text":" test multi","lineNumber":76,"isOrphan":false},{"type":"LineComment","text":" test multi with different user","lineNumber":83,"isOrphan":false},{"type":"LineComment","text":" test multi with different user","lineNumber":90,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void setupAlgo()","name":"setupAlgo","type":"void","javadoc":null},{"fullQualified":"public void testSingleResults()","name":"testSingleResults","type":"void","javadoc":null},{"fullQualified":"public void testMultiResults()","name":"testMultiResults","type":"void","javadoc":null}],"allConstructors":[]},{"name":"PreprocessedSlopeOneRecommenderTest","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.PreprocessedSlopeOneRecommenderTest","isInterface":false,"codeComments":[{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * setupAlgo()\r\n\t ","lineNumber":31,"isOrphan":false},{"type":"LineComment","text":" user 100 {1=1.0, 2=1.0, 3=1.0, 4=2.2, 5=-1.0}","lineNumber":58,"isOrphan":false},{"type":"LineComment","text":" user 101 {1=5.0, 2=8.0, 3=5.0, 4=2.0, 5=5.0}","lineNumber":66,"isOrphan":false},{"type":"LineComment","text":" user 103 {1=1.0, 2=-0.2, 3=1.0, 4=1.0, 5=-1.0}","lineNumber":74,"isOrphan":false},{"type":"LineComment","text":" user 104 {1=2.0, 2=2.0, 3=2.0, 4=5.0, 5=2.0}","lineNumber":82,"isOrphan":false},{"type":"LineComment","text":" user 105 {1=-1.0, 2=1.0, 3=1.0, 4=1.0, 5=1.0}","lineNumber":90,"isOrphan":false},{"type":"LineComment","text":" user 106 {1=1.0, 2=1.0, 3=1.0, 4=1.0, 5=1.0}","lineNumber":98,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void setupAlgo()","name":"setupAlgo","type":"void","javadoc":null},{"fullQualified":"public void testSingleResults()","name":"testSingleResults","type":"void","javadoc":null},{"fullQualified":"public void testMultiResults()","name":"testMultiResults","type":"void","javadoc":null},{"fullQualified":"private void checkUserPredictionMatrix()","name":"checkUserPredictionMatrix","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SlopeOneRecommenderTest","fullyQualifiedName":"tools.descartes.teastore.recommender.algorithm.SlopeOneRecommenderTest","isInterface":false,"codeComments":[{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * setupAlgo()\r\n\t ","lineNumber":35,"isOrphan":false},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * testResults()\r\n\t ","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" check resulting matrices","lineNumber":56,"isOrphan":false},{"type":"LineComment","text":" test single","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" Result should contain 3 or 1 on position 1","lineNumber":66,"isOrphan":false},{"type":"LineComment","text":" test single with different user","lineNumber":73,"isOrphan":false},{"type":"LineComment","text":" expected","lineNumber":78,"isOrphan":true},{"type":"LineComment","text":" test single with null user","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" expected","lineNumber":85,"isOrphan":true},{"type":"BlockComment","text":"\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * tools.descartes.teastore.recommender.algorithm.AbstractRecommenderTest#\r\n\t * testResults()\r\n\t ","lineNumber":89,"isOrphan":false},{"type":"LineComment","text":" check that matrices did not change","lineNumber":98,"isOrphan":false},{"type":"LineComment","text":" test multi","lineNumber":101,"isOrphan":false},{"type":"LineComment","text":" Result should contain 2 or 1 on position 1","lineNumber":108,"isOrphan":false},{"type":"LineComment","text":" test multi with different user","lineNumber":114,"isOrphan":false},{"type":"LineComment","text":" expected","lineNumber":119,"isOrphan":true},{"type":"LineComment","text":" test multi with null user","lineNumber":122,"isOrphan":false},{"type":"LineComment","text":" expected","lineNumber":127,"isOrphan":true},{"type":"LineComment","text":" test multi with different user","lineNumber":130,"isOrphan":false},{"type":"LineComment","text":" Result should contain 2 or 1 on position 1","lineNumber":137,"isOrphan":false},{"type":"LineComment","text":" test multi with different user","lineNumber":143,"isOrphan":false},{"type":"LineComment","text":" Result should contain 2 or 1 on position 1","lineNumber":149,"isOrphan":false},{"type":"LineComment","text":" test multi with different user","lineNumber":156,"isOrphan":false},{"type":"LineComment","text":" check that matrices still not changed","lineNumber":163,"isOrphan":false},{"type":"LineComment","text":" item 1","lineNumber":171,"isOrphan":false},{"type":"LineComment","text":" item 2","lineNumber":178,"isOrphan":false},{"type":"LineComment","text":" item 3","lineNumber":186,"isOrphan":false},{"type":"LineComment","text":" item 4","lineNumber":194,"isOrphan":false},{"type":"LineComment","text":" item 5","lineNumber":202,"isOrphan":false},{"type":"LineComment","text":" item 1","lineNumber":216,"isOrphan":false},{"type":"LineComment","text":" item 2","lineNumber":223,"isOrphan":false},{"type":"LineComment","text":" item 3","lineNumber":231,"isOrphan":false},{"type":"LineComment","text":" item 4","lineNumber":239,"isOrphan":false},{"type":"LineComment","text":" item 5","lineNumber":247,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void setupAlgo()","name":"setupAlgo","type":"void","javadoc":null},{"fullQualified":"public void testSingleResults()","name":"testSingleResults","type":"void","javadoc":null},{"fullQualified":"public void testMultiResults()","name":"testMultiResults","type":"void","javadoc":null},{"fullQualified":"private void checkDiffMatrix()","name":"checkDiffMatrix","type":"void","javadoc":null},{"fullQualified":"private void checkFreqMatrix()","name":"checkFreqMatrix","type":"void","javadoc":null}],"allConstructors":[]},{"name":"HeartbeatInfo","fullyQualifiedName":"tools.descartes.teastore.registry.rest.HeartbeatInfo","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Contructor for the heartbeat info.\r\n\t ","lineNumber":12,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Registers new heartbeat.\r\n\t ","lineNumber":19,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Checks if the service is still considered alive.\r\n\t * Extensionpoint for more complex mechanisms.\r\n\t * @return true if alive\r\n\t ","lineNumber":26,"isOrphan":false}],"allMethods":[{"fullQualified":"public void newHeartbeat()","name":"newHeartbeat","type":"void","javadoc":"\r\n\t * Registers new heartbeat.\r\n\t "},{"fullQualified":"public boolean isAlive()","name":"isAlive","type":"boolean","javadoc":"\r\n\t * Checks if the service is still considered alive.\r\n\t * Extensionpoint for more complex mechanisms.\r\n\t * @return true if alive\r\n\t "}],"allConstructors":[{"identifier":"public HeartbeatInfo()","javadocComment":"\r\n\t * Contructor for the heartbeat info.\r\n\t "}]},{"name":"Registry","fullyQualifiedName":"tools.descartes.teastore.registry.rest.Registry","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Getter for singleton registry.\r\n   * \r\n   * @return registry singleton\r\n   ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns all locations for a service.\r\n   * \r\n   * @param name\r\n   *          Name of the service\r\n   * @return List over all locations\r\n   ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Unregisters a service instance from the registry.\r\n   * \r\n   * @param name\r\n   *          name of the service\r\n   * @param location\r\n   *          instance location\r\n   * @return boolean success indicator\r\n   ","lineNumber":94,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Registers a service instance from the registry.\r\n   * \r\n   * @param name\r\n   *          name of the service\r\n   * @param location\r\n   *          instance location\r\n   * @return boolean success indicator\r\n   ","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * removes service instances from the registry based on heartbeat.\r\n   ","lineNumber":152,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Registry getRegistryInstance()","name":"getRegistryInstance","type":"Registry","javadoc":"\r\n   * Getter for singleton registry.\r\n   * \r\n   * @return registry singleton\r\n   "},{"fullQualified":"public List<String> getLocations(String name)","name":"getLocations","type":"List<String>","javadoc":"\r\n   * Returns all locations for a service.\r\n   * \r\n   * @param name\r\n   *          Name of the service\r\n   * @return List over all locations\r\n   "},{"fullQualified":"private void updateHeartbeatMap(String name, String location)","name":"updateHeartbeatMap","type":"void","javadoc":null},{"fullQualified":"public boolean unregister(String name, String location)","name":"unregister","type":"boolean","javadoc":"\r\n   * Unregisters a service instance from the registry.\r\n   * \r\n   * @param name\r\n   *          name of the service\r\n   * @param location\r\n   *          instance location\r\n   * @return boolean success indicator\r\n   "},{"fullQualified":"public boolean register(String name, String location)","name":"register","type":"boolean","javadoc":"\r\n   * Registers a service instance from the registry.\r\n   * \r\n   * @param name\r\n   *          name of the service\r\n   * @param location\r\n   *          instance location\r\n   * @return boolean success indicator\r\n   "},{"fullQualified":"public void heartBeatCleanup()","name":"heartBeatCleanup","type":"void","javadoc":"\r\n   * removes service instances from the registry based on heartbeat.\r\n   "}],"allConstructors":[{"identifier":"private Registry()","javadocComment":null}]},{"name":"RegistryREST","fullyQualifiedName":"tools.descartes.teastore.registry.rest.RegistryREST","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Register a service at a location.\r\n\t * @param name Service name\r\n\t * @param location service location\r\n\t * @return boolean success indicator\r\n\t ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Unregister a service at a location.\r\n\t * @param name Service name\r\n\t * @param location service location\r\n\t * @return boolean success indicator\r\n\t ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get list of all instances of a service.\r\n\t * @param name service name\r\n\t * @return list of all instance\r\n\t ","lineNumber":67,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response register(@PathParam(\"name\") final String name, @PathParam(\"location\") final String location)","name":"register","type":"Response","javadoc":"\r\n\t * Register a service at a location.\r\n\t * @param name Service name\r\n\t * @param location service location\r\n\t * @return boolean success indicator\r\n\t "},{"fullQualified":"public Response unregister(@PathParam(\"name\") final String name, @PathParam(\"location\") final String location)","name":"unregister","type":"Response","javadoc":"\r\n\t * Unregister a service at a location.\r\n\t * @param name Service name\r\n\t * @param location service location\r\n\t * @return boolean success indicator\r\n\t "},{"fullQualified":"public Response getInstances(@PathParam(\"name\") final String name)","name":"getInstances","type":"Response","javadoc":"\r\n\t * Get list of all instances of a service.\r\n\t * @param name service name\r\n\t * @return list of all instance\r\n\t "}],"allConstructors":[]},{"name":"RegistryStartup","fullyQualifiedName":"tools.descartes.teastore.registry.rest.RegistryStartup","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Also set this accordingly in RegistryClientStartup.\r\n   ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Empty constructor.\r\n   ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param arg0\r\n   *          The servlet context event at destruction.\r\n   ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param arg0\r\n   *          The servlet context event at initialization.\r\n   ","lineNumber":61,"isOrphan":false}],"allMethods":[{"fullQualified":"public void contextDestroyed(ServletContextEvent arg0)","name":"contextDestroyed","type":"void","javadoc":"\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param arg0\r\n   *          The servlet context event at destruction.\r\n   "},{"fullQualified":"public void contextInitialized(ServletContextEvent arg0)","name":"contextInitialized","type":"void","javadoc":"\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param arg0\r\n   *          The servlet context event at initialization.\r\n   "}],"allConstructors":[{"identifier":"public RegistryStartup()","javadocComment":"\r\n   * Empty constructor.\r\n   "}]},{"name":"IndexServlet","fullyQualifiedName":"tools.descartes.teastore.registry.servlet.IndexServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n     * @see HttpServlet#HttpServlet()\r\n     ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\r\n\t * @param request The request.\r\n\t * @param response The response.\r\n\t * @throws ServletException In case of servlet Exception.\r\n\t * @throws IOException In case of IOException.\r\n\t ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\r\n\t * @param request The request.\r\n\t * @param response The response.\r\n\t * @throws ServletException In case of servlet Exception.\r\n\t * @throws IOException In case of IOException.\r\n\t ","lineNumber":53,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException","name":"doGet","type":"void","javadoc":"\r\n\t * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)\r\n\t * @param request The request.\r\n\t * @param response The response.\r\n\t * @throws ServletException In case of servlet Exception.\r\n\t * @throws IOException In case of IOException.\r\n\t "},{"fullQualified":"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException","name":"doPost","type":"void","javadoc":"\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)\r\n\t * @param request The request.\r\n\t * @param response The response.\r\n\t * @throws ServletException In case of servlet Exception.\r\n\t * @throws IOException In case of IOException.\r\n\t "}],"allConstructors":[{"identifier":"public IndexServlet()","javadocComment":"\r\n     * @see HttpServlet#HttpServlet()\r\n     "}]},{"name":"ReadyRest","fullyQualifiedName":"tools.descartes.teastore.webui.rest.ReadyRest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * This methods checks, if the service is ready.\r\n   *\r\n   * @return True, if recommender is ready; false, if not.\r\n   ","lineNumber":32,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response isReady()","name":"isReady","type":"Response","javadoc":"\r\n   * This methods checks, if the service is ready.\r\n   *\r\n   * @return True, if recommender is ready; false, if not.\r\n   "}],"allConstructors":[]},{"name":"AboutUsServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.AboutUsServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * @see HttpServlet#HttpServlet()\r\n   ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":47,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   "}],"allConstructors":[{"identifier":"public AboutUsServlet()","javadocComment":"\r\n   * @see HttpServlet#HttpServlet()\r\n   "}]},{"name":"AbstractUIServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.AbstractUIServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Text for message cookie.\r\n\t ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for error message cookie.\r\n\t ","lineNumber":52,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for successful login. \r\n\t ","lineNumber":56,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for logout.\r\n\t ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for wrong credentials.\r\n\t ","lineNumber":64,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for number products cookie.\r\n\t ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for session blob.\r\n\t ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for confirmed order.\r\n\t ","lineNumber":76,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for updated cart.\r\n\t ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for added product.\r\n\t ","lineNumber":84,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Text for removed product.\r\n\t ","lineNumber":88,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Try to read the SessionBlob from the cookie. If no SessioBlob exist, a new\r\n\t * SessionBlob is created. If the SessionBlob is corrupted, an\r\n\t * IlligalStateException is thrown.\r\n\t * \r\n\t * @param request servlet request\r\n\t * @return SessionBlob\r\n\t ","lineNumber":93,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Saves the SessionBlob as Cookie. Throws an IllegalStateException if the\r\n\t * SessionBlob is corrupted.\r\n\t * \r\n\t * @param blob session blob\r\n\t * @param response servlet response\r\n\t ","lineNumber":120,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Destroys the SessionBlob. Throws an IllegalStateException if the SessionBlob\r\n\t * is corrupted.\r\n\t * \r\n\t * @param blob session blob\r\n\t * @param response servlet response\r\n\t ","lineNumber":137,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Redirects to the target and creates an Cookie.\r\n\t * \r\n\t * @param target webtarget\r\n\t * @param response servlet response\r\n\t * @param cookiename name of cookie\r\n\t * @param value cookie value\r\n\t * @throws IOException cookie exception\r\n\t ","lineNumber":155,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Redirects to the target.\r\n\t * \r\n\t * @param target webtarget\r\n\t * @param response servlet response\r\n\t * @throws IOException redirect exception\r\n\t ","lineNumber":174,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Checks if specific cookies exist and save their value as message.\r\n\t * \r\n\t * @param request servlet request\r\n\t * @param response servlet response\r\n\t ","lineNumber":189,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse\r\n   *      response)\r\n\t * @param request servlet request\r\n\t * @param response servlet response\r\n\t * @throws IOException external call exception\r\n\t * @throws ServletException exception servlet exception     \r\n\t ","lineNumber":213,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse\r\n\t *      response)\r\n   * @param request servlet request\r\n   * @param response servlet response\r\n   * @throws IOException external call exception\r\n   * @throws ServletException exception servlet exception    \r\n\t ","lineNumber":235,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Handles a http POST request internally.\r\n\t * \r\n\t * @param request\r\n\t *            The request.\r\n\t * @param response\r\n\t *            The response to write to.\r\n\t * @throws ServletException\r\n\t *             ServletException on error.\r\n\t * @throws IOException\r\n\t *             IOException on error.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             Exception on timeouts and load balancer errors.\r\n\t ","lineNumber":257,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Handles a http GET request internally.\r\n\t * \r\n\t * @param request\r\n\t *            The request.\r\n\t * @param response\r\n\t *            The response to write to.\r\n\t * @throws ServletException\r\n\t *             ServletException on error.\r\n\t * @throws IOException\r\n\t *             IOException on error.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             Exception on timeouts and load balancer errors.\r\n\t ","lineNumber":276,"isOrphan":false}],"allMethods":[{"fullQualified":"protected SessionBlob getSessionBlob(HttpServletRequest request)","name":"getSessionBlob","type":"SessionBlob","javadoc":"\r\n\t * Try to read the SessionBlob from the cookie. If no SessioBlob exist, a new\r\n\t * SessionBlob is created. If the SessionBlob is corrupted, an\r\n\t * IlligalStateException is thrown.\r\n\t * \r\n\t * @param request servlet request\r\n\t * @return SessionBlob\r\n\t "},{"fullQualified":"protected void saveSessionBlob(SessionBlob blob, HttpServletResponse response)","name":"saveSessionBlob","type":"void","javadoc":"\r\n\t * Saves the SessionBlob as Cookie. Throws an IllegalStateException if the\r\n\t * SessionBlob is corrupted.\r\n\t * \r\n\t * @param blob session blob\r\n\t * @param response servlet response\r\n\t "},{"fullQualified":"protected void destroySessionBlob(SessionBlob blob, HttpServletResponse response)","name":"destroySessionBlob","type":"void","javadoc":"\r\n\t * Destroys the SessionBlob. Throws an IllegalStateException if the SessionBlob\r\n\t * is corrupted.\r\n\t * \r\n\t * @param blob session blob\r\n\t * @param response servlet response\r\n\t "},{"fullQualified":"protected void redirect(String target, HttpServletResponse response, String cookiename, String value) throws IOException","name":"redirect","type":"void","javadoc":"\r\n\t * Redirects to the target and creates an Cookie.\r\n\t * \r\n\t * @param target webtarget\r\n\t * @param response servlet response\r\n\t * @param cookiename name of cookie\r\n\t * @param value cookie value\r\n\t * @throws IOException cookie exception\r\n\t "},{"fullQualified":"protected void redirect(String target, HttpServletResponse response) throws IOException","name":"redirect","type":"void","javadoc":"\r\n\t * Redirects to the target.\r\n\t * \r\n\t * @param target webtarget\r\n\t * @param response servlet response\r\n\t * @throws IOException redirect exception\r\n\t "},{"fullQualified":"protected void checkforCookie(HttpServletRequest request, HttpServletResponse response)","name":"checkforCookie","type":"void","javadoc":"\r\n\t * Checks if specific cookies exist and save their value as message.\r\n\t * \r\n\t * @param request servlet request\r\n\t * @param response servlet response\r\n\t "},{"fullQualified":"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException","name":"doGet","type":"void","javadoc":"\r\n   * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse\r\n   *      response)\r\n\t * @param request servlet request\r\n\t * @param response servlet response\r\n\t * @throws IOException external call exception\r\n\t * @throws ServletException exception servlet exception     \r\n\t "},{"fullQualified":"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException","name":"doPost","type":"void","javadoc":"\r\n\t * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse\r\n\t *      response)\r\n   * @param request servlet request\r\n   * @param response servlet response\r\n   * @throws IOException external call exception\r\n   * @throws ServletException exception servlet exception    \r\n\t "},{"fullQualified":"protected void handlePOSTRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handlePOSTRequest","type":"void","javadoc":"\r\n\t * Handles a http POST request internally.\r\n\t * \r\n\t * @param request\r\n\t *            The request.\r\n\t * @param response\r\n\t *            The response to write to.\r\n\t * @throws ServletException\r\n\t *             ServletException on error.\r\n\t * @throws IOException\r\n\t *             IOException on error.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             Exception on timeouts and load balancer errors.\r\n\t "},{"fullQualified":"protected abstract void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n\t * Handles a http GET request internally.\r\n\t * \r\n\t * @param request\r\n\t *            The request.\r\n\t * @param response\r\n\t *            The response to write to.\r\n\t * @throws ServletException\r\n\t *             ServletException on error.\r\n\t * @throws IOException\r\n\t *             IOException on error.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             Exception on timeouts and load balancer errors.\r\n\t "},{"fullQualified":"private void serveTimoutResponse(HttpServletRequest request, HttpServletResponse response, Service service) throws ServletException, IOException","name":"serveTimoutResponse","type":"void","javadoc":null},{"fullQualified":"private void serveExceptionResponse(HttpServletRequest request, HttpServletResponse response, Exception e) throws ServletException, IOException","name":"serveExceptionResponse","type":"void","javadoc":null},{"fullQualified":"private void serveNotFoundException(HttpServletRequest request, HttpServletResponse response, Exception e) throws ServletException, IOException","name":"serveNotFoundException","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CartActionServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.CartActionServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Handles the confirm order action. Saves the order into the sessionBlob\r\n\t * \r\n\t * @param request\r\n\t * @param response\r\n\t * @throws IOException\r\n\t ","lineNumber":94,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Extracts the user information from the input fields.\r\n\t * \r\n\t * @param request\r\n\t * @return String[] with user infos.\r\n\t * \r\n\t ","lineNumber":122,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Updates the items in the cart.\r\n\t * \r\n\t * @param request\r\n\t * @param orderItems\r\n\t * @param response\r\n\t ","lineNumber":144,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"private void confirmOrder(HttpServletRequest request, HttpServletResponse response) throws IOException","name":"confirmOrder","type":"void","javadoc":"\r\n\t * Handles the confirm order action. Saves the order into the sessionBlob\r\n\t * \r\n\t * @param request\r\n\t * @param response\r\n\t * @throws IOException\r\n\t "},{"fullQualified":"private String[] extractOrderInformation(HttpServletRequest request)","name":"extractOrderInformation","type":"String[]","javadoc":"\r\n\t * Extracts the user information from the input fields.\r\n\t * \r\n\t * @param request\r\n\t * @return String[] with user infos.\r\n\t * \r\n\t "},{"fullQualified":"private void updateOrder(HttpServletRequest request, List<OrderItem> orderItems, HttpServletResponse response)","name":"updateOrder","type":"void","javadoc":"\r\n\t * Updates the items in the cart.\r\n\t * \r\n\t * @param request\r\n\t * @param orderItems\r\n\t * @param response\r\n\t "}],"allConstructors":[{"identifier":"public CartActionServlet()","javadocComment":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t "}]},{"name":"CartServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.CartServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * @see HttpServlet#HttpServlet()\r\n   ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":57,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   "}],"allConstructors":[{"identifier":"public CartServlet()","javadocComment":"\r\n   * @see HttpServlet#HttpServlet()\r\n   "}]},{"name":"CategoryServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.CategoryServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * @see HttpServlet#HttpServlet()\r\n   ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":120,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Creates the entries for the pagination.\r\n   * @param products\r\n   * @param page\r\n   * @param numberProducts\r\n   * @return Arraylist<String> pagination\r\n   ","lineNumber":137,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   "},{"fullQualified":"protected void handlePOSTRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handlePOSTRequest","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   "},{"fullQualified":"private ArrayList<String> createNavigation(int products, int page, int numberProducts)","name":"createNavigation","type":"ArrayList<String>","javadoc":"\r\n   * Creates the entries for the pagination.\r\n   * @param products\r\n   * @param page\r\n   * @param numberProducts\r\n   * @return Arraylist<String> pagination\r\n   "}],"allConstructors":[{"identifier":"public CategoryServlet()","javadocComment":"\r\n   * @see HttpServlet#HttpServlet()\r\n   "}]},{"name":"DataBaseActionServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.DataBaseActionServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":"buffer entity to release connections","lineNumber":73,"isOrphan":false},{"type":"LineComment","text":" Regenerate images","lineNumber":79,"isOrphan":false},{"type":"LineComment","text":" Retrain recommender","lineNumber":83,"isOrphan":false},{"type":"LineComment","text":"buffer entity to release connections","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Extracts the information from the input fields.\r\n\t * \r\n\t * @param request\r\n\t * @return String[] with the info for the database generation\r\n\t ","lineNumber":99,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"private String[] extractOrderInformation(HttpServletRequest request)","name":"extractOrderInformation","type":"String[]","javadoc":"\r\n\t * Extracts the information from the input fields.\r\n\t * \r\n\t * @param request\r\n\t * @return String[] with the info for the database generation\r\n\t "}],"allConstructors":[{"identifier":"public DataBaseActionServlet()","javadocComment":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t "}]},{"name":"DataBaseServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.DataBaseServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":44,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"public DataBaseServlet()","javadocComment":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t "}]},{"name":"ELHelperUtils","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.elhelper.ELHelperUtils","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * The helper singleton to pass to EL.\r\n\t ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Formats date.\r\n\t * @param isoFormattedDate string containing date\r\n\t * @return pretty formatted date\r\n\t ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Format price.\r\n\t * @param price price to be formatted\r\n\t * @return formatted price\r\n\t ","lineNumber":49,"isOrphan":false}],"allMethods":[{"fullQualified":"public String formatToPrettyDate(String isoFormattedDate)","name":"formatToPrettyDate","type":"String","javadoc":"\r\n\t * Formats date.\r\n\t * @param isoFormattedDate string containing date\r\n\t * @return pretty formatted date\r\n\t "},{"fullQualified":"public String formatPriceInCents(long price)","name":"formatPriceInCents","type":"String","javadoc":"\r\n\t * Format price.\r\n\t * @param price price to be formatted\r\n\t * @return formatted price\r\n\t "}],"allConstructors":[{"identifier":"private ELHelperUtils()","javadocComment":null}]},{"name":"ErrorServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.ErrorServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":48,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"public ErrorServlet()","javadocComment":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t "}]},{"name":"IndexServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.IndexServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":48,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"public IndexServlet()","javadocComment":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t "}]},{"name":"LoginActionServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.LoginActionServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":54,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected void handlePOSTRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handlePOSTRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"public LoginActionServlet()","javadocComment":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t "}]},{"name":"LoginServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.LoginServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":47,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"public LoginServlet()","javadocComment":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t "}]},{"name":"OrderServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.OrderServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t ","lineNumber":62,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "},{"fullQualified":"protected void handlePOSTRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handlePOSTRequest","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t "}],"allConstructors":[{"identifier":"public OrderServlet()","javadocComment":"\r\n\t * @see HttpServlet#HttpServlet()\r\n\t "}]},{"name":"ProductServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.ProductServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * @see HttpServlet#HttpServlet()\r\n   ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":55,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   "}],"allConstructors":[{"identifier":"public ProductServlet()","javadocComment":"\r\n   * @see HttpServlet#HttpServlet()\r\n   "}]},{"name":"ProfileServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.ProfileServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * @see HttpServlet#HttpServlet()\r\n   ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":52,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   "}],"allConstructors":[{"identifier":"public ProfileServlet()","javadocComment":"\r\n   * @see HttpServlet#HttpServlet()\r\n   "}]},{"name":"StatusServlet","fullyQualifiedName":"tools.descartes.teastore.webui.servlet.StatusServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * @see HttpServlet#HttpServlet()\r\n   ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks if Database is created.\r\n   *\r\n   * @return status\r\n   ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks if ImageProvider is ready.\r\n   *\r\n   * @return status\r\n   ","lineNumber":104,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks if Recommender has finished training.\r\n   *\r\n   * @return status\r\n   ","lineNumber":123,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void handleGETRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, LoadBalancerTimeoutException","name":"handleGETRequest","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   "},{"fullQualified":"private boolean isDatabaseFinished()","name":"isDatabaseFinished","type":"boolean","javadoc":"\r\n   * Checks if Database is created.\r\n   *\r\n   * @return status\r\n   "},{"fullQualified":"private boolean isImageFinished()","name":"isImageFinished","type":"boolean","javadoc":"\r\n   * Checks if ImageProvider is ready.\r\n   *\r\n   * @return status\r\n   "},{"fullQualified":"private boolean isRecommenderFinished()","name":"isRecommenderFinished","type":"boolean","javadoc":"\r\n   * Checks if Recommender has finished training.\r\n   *\r\n   * @return status\r\n   "}],"allConstructors":[{"identifier":"public StatusServlet()","javadocComment":"\r\n   * @see HttpServlet#HttpServlet()\r\n   "}]},{"name":"WebuiStartup","fullyQualifiedName":"tools.descartes.teastore.webui.startup.WebuiStartup","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Empty constructor.\r\n\t ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n     * @param event The servlet context event at destruction.\r\n     ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n     * @param event The servlet context event at initialization.\r\n     ","lineNumber":48,"isOrphan":false}],"allMethods":[{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":"\r\n     * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n     * @param event The servlet context event at destruction.\r\n     "},{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":"\r\n     * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n     * @param event The servlet context event at initialization.\r\n     "}],"allConstructors":[{"identifier":"public WebuiStartup()","javadocComment":"\r\n\t * Empty constructor.\r\n\t "}]},{"name":"Configurator","fullyQualifiedName":"tools.descartes.teastore.dockermemoryconfigurator.Configurator","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Runs the configurator.\r\n   * \r\n   * @param args\r\n   *          Percentage of total memory to be used for heap as the only\r\n   *          parameter.\r\n   ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Reads the total memory from /proc/meminfo.\r\n   * \r\n   * @return 0 on error.\r\n   ","lineNumber":64,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Reads the cgroup memory from /sys/fs/cgroup/memory/memory.limit_in_bytes and\r\n   * converts to KiB.\r\n   * \r\n   * @return 0 on error.\r\n   ","lineNumber":95,"isOrphan":false},{"type":"LineComment","text":" use double, number may be too large","lineNumber":109,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":"\r\n   * Runs the configurator.\r\n   * \r\n   * @param args\r\n   *          Percentage of total memory to be used for heap as the only\r\n   *          parameter.\r\n   "},{"fullQualified":"private static long readPercentage(String[] args)","name":"readPercentage","type":"long","javadoc":null},{"fullQualified":"private static long readTotalMemoryInKB()","name":"readTotalMemoryInKB","type":"long","javadoc":"\r\n   * Reads the total memory from /proc/meminfo.\r\n   * \r\n   * @return 0 on error.\r\n   "},{"fullQualified":"private static long readCGroupMemoryInKB()","name":"readCGroupMemoryInKB","type":"long","javadoc":"\r\n   * Reads the cgroup memory from /sys/fs/cgroup/memory/memory.limit_in_bytes and\r\n   * converts to KiB.\r\n   * \r\n   * @return 0 on error.\r\n   "},{"fullQualified":"private static void writeSetEnvFile(long heapkb)","name":"writeSetEnvFile","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private Configurator()","javadocComment":null}]},{"name":"AbstractOperationExecutionWithParameterAspect","fullyQualifiedName":"tools.descartes.teastore.kieker.probes.AbstractOperationExecutionWithParameterAspect","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * The pointcut for the monitored operations. Inheriting classes should extend\r\n   * the pointcut in order to find the correct executions of the methods (e.g. all\r\n   * methods or only methods with specific annotations).\r\n   ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * actual pointcut.\r\n   * @param thisJoinPoint joinpoint\r\n   * @return result of joinpoint\r\n   * @throws Throwable possible errors\r\n   ","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" NOCS","lineNumber":54,"isOrphan":true},{"type":"LineComment","text":" (Throwable)","lineNumber":55,"isOrphan":false},{"type":"LineComment","text":" collect data","lineNumber":63,"isOrphan":false},{"type":"LineComment","text":" this is executionOrderIndex-th execution in this trace","lineNumber":67,"isOrphan":false},{"type":"LineComment","text":" this is the height in the dynamic call tree of this execution","lineNumber":68,"isOrphan":false},{"type":"LineComment","text":" traceId, -1 if entry point","lineNumber":69,"isOrphan":false},{"type":"LineComment","text":" next operation is ess + 1","lineNumber":74,"isOrphan":false},{"type":"LineComment","text":" ess > 1","lineNumber":79,"isOrphan":false},{"type":"LineComment","text":" ess >= 0","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" measure before","lineNumber":86,"isOrphan":false},{"type":"LineComment","text":" execution of the called method","lineNumber":88,"isOrphan":false},{"type":"LineComment","text":" get parameters","lineNumber":95,"isOrphan":true},{"type":"LineComment","text":" measure after","lineNumber":93,"isOrphan":false},{"type":"LineComment","text":" cleanup","lineNumber":106,"isOrphan":false},{"type":"LineComment","text":" next operation is ess","lineNumber":112,"isOrphan":false},{"type":"JavadocComment","text":" extension over the original routine. ","lineNumber":121,"isOrphan":false},{"type":"LineComment","text":" get return type","lineNumber":135,"isOrphan":false},{"type":"LineComment","text":" return type is void","lineNumber":140,"isOrphan":false},{"type":"LineComment","text":" we have a return type","lineNumber":144,"isOrphan":false},{"type":"LineComment","text":" log collection size","lineNumber":159,"isOrphan":false},{"type":"LineComment","text":" all others are just to string","lineNumber":171,"isOrphan":false}],"allMethods":[{"fullQualified":"public abstract void monitoredOperation()","name":"monitoredOperation","type":"void","javadoc":"\r\n   * The pointcut for the monitored operations. Inheriting classes should extend\r\n   * the pointcut in order to find the correct executions of the methods (e.g. all\r\n   * methods or only methods with specific annotations).\r\n   "},{"fullQualified":"public Object operation(final ProceedingJoinPoint thisJoinPoint) throws Throwable","name":"operation","type":"Object","javadoc":"\r\n   * actual pointcut.\r\n   * @param thisJoinPoint joinpoint\r\n   * @return result of joinpoint\r\n   * @throws Throwable possible errors\r\n   "},{"fullQualified":"private void logWithParameter(final ProceedingJoinPoint thisJoinPoint, String signature, String sessionId, long traceId, long tin, long tout, String hostname, int eoi, int ess, Object retval)","name":"logWithParameter","type":"void","javadoc":null},{"fullQualified":"private String parseObjectToString(Object argument)","name":"parseObjectToString","type":"String","javadoc":null},{"fullQualified":"private void logWithoutParameters(final ProceedingJoinPoint thisJoinPoint, String signature, String sessionId, long traceId, long tin, long tout, String hostname, int eoi, int ess, Object retval)","name":"logWithoutParameters","type":"void","javadoc":null}],"allConstructors":[]},{"name":"IPayloadCharacterization","fullyQualifiedName":"tools.descartes.teastore.kieker.probes.records.IPayloadCharacterization","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Getter for parameter types.\r\n   * @return parameter types\r\n   ","lineNumber":14,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for parameter values.\r\n   * @return parameter values\r\n   ","lineNumber":20,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Getter for return type.\r\n\t * @return return type\r\n\t ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Getter for return value.\r\n\t * @return return value\r\n\t ","lineNumber":32,"isOrphan":false}],"allMethods":[{"fullQualified":"public String[] getParameterTypes()","name":"getParameterTypes","type":"String[]","javadoc":"\r\n   * Getter for parameter types.\r\n   * @return parameter types\r\n   "},{"fullQualified":"public String[] getParameterValues()","name":"getParameterValues","type":"String[]","javadoc":"\r\n   * Getter for parameter values.\r\n   * @return parameter values\r\n   "},{"fullQualified":"public String getReturnType()","name":"getReturnType","type":"String","javadoc":"\r\n\t * Getter for return type.\r\n\t * @return return type\r\n\t "},{"fullQualified":"public String getReturnValue()","name":"getReturnValue","type":"String","javadoc":"\r\n\t * Getter for return value.\r\n\t * @return return value\r\n\t "}],"allConstructors":[]},{"name":"OperationExecutionWithParametersRecord","fullyQualifiedName":"tools.descartes.teastore.kieker.probes.records.OperationExecutionWithParametersRecord","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" Descriptive definition of the serialization size of the record. ","lineNumber":22,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.operationSignature","lineNumber":23,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.sessionId","lineNumber":24,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.traceId","lineNumber":25,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.tin","lineNumber":26,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.tout","lineNumber":27,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.hostname","lineNumber":28,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.eoi","lineNumber":29,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.ess","lineNumber":30,"isOrphan":false},{"type":"LineComment","text":" IPayloadCharacterization.parameterTypes","lineNumber":31,"isOrphan":false},{"type":"LineComment","text":" IPayloadCharacterization.parameterValues","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":" IPayloadCharacterization.returnType","lineNumber":33,"isOrphan":false},{"type":"LineComment","text":" IPayloadCharacterization.returnVal","lineNumber":34,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.operationSignature","lineNumber":36,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.sessionId","lineNumber":37,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.traceId","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.tin","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.tout","lineNumber":40,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.hostname","lineNumber":41,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.eoi","lineNumber":42,"isOrphan":false},{"type":"LineComment","text":" OperationExecutionRecord.ess","lineNumber":43,"isOrphan":false},{"type":"LineComment","text":" IPayloadCharacterization.parameterTypes","lineNumber":44,"isOrphan":false},{"type":"LineComment","text":" IPayloadCharacterization.parameterValues","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" IPayloadCharacterization.returnType","lineNumber":46,"isOrphan":false},{"type":"LineComment","text":" IPayloadCharacterization.returnVal","lineNumber":47,"isOrphan":false},{"type":"JavadocComment","text":" property name array. ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":" property declarations. ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Creates a new instance of this class using the given parameters.\r\n   *\r\n   * @param operationSignature string representation of operation signature\r\n   * @param sessionId sessionid\r\n   * @param traceId traceid\r\n   * @param tin time in\r\n   * @param tout time out\r\n   * @param hostname hostname\r\n   * @param eoi eoi\r\n   * @param ess ess\r\n   * @param parameterTypes array of parameter types\r\n   * @param parameterValues array of parameter values\r\n   * @param returnType return type\r\n   * @param returnValue return value\r\n   ","lineNumber":61,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Constructor.\r\n   * @param deserializer\r\n   *          The deserializer to use\r\n   ","lineNumber":88,"isOrphan":false},{"type":"LineComment","text":" load array sizes","lineNumber":95,"isOrphan":false},{"type":"LineComment","text":" load array sizes","lineNumber":101,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":112,"isOrphan":false},{"type":"LineComment","text":" store array sizes","lineNumber":118,"isOrphan":false},{"type":"LineComment","text":" store array sizes","lineNumber":124,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":135,"isOrphan":false},{"type":"LineComment","text":" NOPMD","lineNumber":140,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":143,"isOrphan":false},{"type":"LineComment","text":" NOPMD","lineNumber":148,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":151,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   ","lineNumber":159,"isOrphan":false},{"type":"LineComment","text":" get array length","lineNumber":208,"isOrphan":false},{"type":"LineComment","text":" get array length","lineNumber":218,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for parameter types.\r\n   * @return parameter types\r\n   ","lineNumber":231,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for parameter values.\r\n   * @return parameter values\r\n   ","lineNumber":239,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for return type.\r\n   * @return return type\r\n   ","lineNumber":247,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for return value.\r\n   * @return return value\r\n   ","lineNumber":255,"isOrphan":false}],"allMethods":[{"fullQualified":"public void serialize(final IValueSerializer serializer) throws BufferOverflowException","name":"serialize","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   "},{"fullQualified":"public Class<?>[] getValueTypes()","name":"getValueTypes","type":"Class<?>[]","javadoc":"\r\n   * {@inheritDoc}\r\n   "},{"fullQualified":"public String[] getValueNames()","name":"getValueNames","type":"String[]","javadoc":"\r\n   * {@inheritDoc}\r\n   "},{"fullQualified":"public int getSize()","name":"getSize","type":"int","javadoc":"\r\n   * {@inheritDoc}\r\n   "},{"fullQualified":"public boolean equals(final Object obj)","name":"equals","type":"boolean","javadoc":"\r\n   * {@inheritDoc}\r\n   "},{"fullQualified":"public final String[] getParameterTypes()","name":"getParameterTypes","type":"String[]","javadoc":"\r\n   * Getter for parameter types.\r\n   * @return parameter types\r\n   "},{"fullQualified":"public final String[] getParameterValues()","name":"getParameterValues","type":"String[]","javadoc":"\r\n   * Getter for parameter values.\r\n   * @return parameter values\r\n   "},{"fullQualified":"public String getReturnType()","name":"getReturnType","type":"String","javadoc":"\r\n   * Getter for return type.\r\n   * @return return type\r\n   "},{"fullQualified":"public String getReturnValue()","name":"getReturnValue","type":"String","javadoc":"\r\n   * Getter for return value.\r\n   * @return return value\r\n   "}],"allConstructors":[{"identifier":"public OperationExecutionWithParametersRecord(final String operationSignature, final String sessionId, final long traceId, final long tin, final long tout, final String hostname, final int eoi, final int ess, final String[] parameterTypes, final String[] parameterValues, final String returnType, final String returnValue)","javadocComment":"\r\n   * Creates a new instance of this class using the given parameters.\r\n   *\r\n   * @param operationSignature string representation of operation signature\r\n   * @param sessionId sessionid\r\n   * @param traceId traceid\r\n   * @param tin time in\r\n   * @param tout time out\r\n   * @param hostname hostname\r\n   * @param eoi eoi\r\n   * @param ess ess\r\n   * @param parameterTypes array of parameter types\r\n   * @param parameterValues array of parameter values\r\n   * @param returnType return type\r\n   * @param returnValue return value\r\n   "},{"identifier":"public OperationExecutionWithParametersRecord(final IValueDeserializer deserializer)","javadocComment":"\r\n   * Constructor.\r\n   * @param deserializer\r\n   *          The deserializer to use\r\n   "}]},{"name":"DisplayLogs","fullyQualifiedName":"tools.descartes.teastore.kieker.rabbitmq.DisplayLogs","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   * \r\n   * @throws IOException\r\n   ","lineNumber":22,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException","name":"doGet","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   * \r\n   * @throws IOException\r\n   "}],"allConstructors":[]},{"name":"FileWriterDaemon","fullyQualifiedName":"tools.descartes.teastore.kieker.rabbitmq.FileWriterDaemon","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void run()","name":"run","type":"void","javadoc":null}],"allConstructors":[]},{"name":"IndexServlet","fullyQualifiedName":"tools.descartes.teastore.kieker.rabbitmq.IndexServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * {@inheritDoc}\r\n   * \r\n   * @throws IOException\r\n   ","lineNumber":20,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException","name":"doGet","type":"void","javadoc":"\r\n   * {@inheritDoc}\r\n   * \r\n   * @throws IOException\r\n   "}],"allConstructors":[]},{"name":"LogConsumer","fullyQualifiedName":"tools.descartes.teastore.kieker.rabbitmq.LogConsumer","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Name of kieker input port used.\r\n   ","lineNumber":17,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Constructor that delegates to AbstractFilterPlugin.\r\n\t * @param configuration configuration\r\n\t * @param projectContext copntext\r\n\t ","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * process new monitoring record.\r\n\t * @param record record.\r\n\t ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Getter for configuration.\r\n\t * @return configuration\r\n\t ","lineNumber":49,"isOrphan":false}],"allMethods":[{"fullQualified":"public void newMonitoringRecord(final Object record)","name":"newMonitoringRecord","type":"void","javadoc":"\r\n\t * process new monitoring record.\r\n\t * @param record record.\r\n\t "},{"fullQualified":"public Configuration getCurrentConfiguration()","name":"getCurrentConfiguration","type":"Configuration","javadoc":"\r\n\t * Getter for configuration.\r\n\t * @return configuration\r\n\t "}],"allConstructors":[{"identifier":"public LogConsumer(final Configuration configuration, final IProjectContext projectContext)","javadocComment":"\r\n\t * Constructor that delegates to AbstractFilterPlugin.\r\n\t * @param configuration configuration\r\n\t * @param projectContext copntext\r\n\t "}]},{"name":"LogReaderDaemon","fullyQualifiedName":"tools.descartes.teastore.kieker.rabbitmq.LogReaderDaemon","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void run()","name":"run","type":"void","javadoc":null}],"allConstructors":[]},{"name":"LogReaderStartup","fullyQualifiedName":"tools.descartes.teastore.kieker.rabbitmq.LogReaderStartup","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Also set this accordingly in RegistryClientStartup.\r\n   ","lineNumber":37,"isOrphan":true},{"type":"JavadocComment","text":"\r\n   * Empty constructor.\r\n   ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at destruction.\r\n   ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * stops the filewriter.\r\n   ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at initialization.\r\n   ","lineNumber":75,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Starts the filewriter.\r\n   ","lineNumber":87,"isOrphan":false}],"allMethods":[{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":"\r\n   * @see ServletContextListener#contextDestroyed(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at destruction.\r\n   "},{"fullQualified":"public static void stopFileWriter()","name":"stopFileWriter","type":"void","javadoc":"\r\n   * stops the filewriter.\r\n   "},{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":"\r\n   * @see ServletContextListener#contextInitialized(ServletContextEvent)\r\n   * @param event\r\n   *          The servlet context event at initialization.\r\n   "},{"fullQualified":"public static void startFileWriter()","name":"startFileWriter","type":"void","javadoc":"\r\n   * Starts the filewriter.\r\n   "}],"allConstructors":[{"identifier":"public LogReaderStartup()","javadocComment":"\r\n   * Empty constructor.\r\n   "}]},{"name":"MemoryLogStorage","fullyQualifiedName":"tools.descartes.teastore.kieker.rabbitmq.MemoryLogStorage","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Hide default constructor.\r\n   ","lineNumber":16,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Stores a new record.\r\n   * @param record record that should be stored\r\n   ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get current records.\r\n\t * @return queue containing current records\r\n\t ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Clears memory storage.\r\n\t ","lineNumber":39,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void storeRecord(IMonitoringRecord record)","name":"storeRecord","type":"void","javadoc":"\r\n   * Stores a new record.\r\n   * @param record record that should be stored\r\n   "},{"fullQualified":"public static Queue<IMonitoringRecord> getRecords()","name":"getRecords","type":"Queue<IMonitoringRecord>","javadoc":"\r\n\t * Get current records.\r\n\t * @return queue containing current records\r\n\t "},{"fullQualified":"public static void clearMemoryStorage()","name":"clearMemoryStorage","type":"void","javadoc":"\r\n\t * Clears memory storage.\r\n\t "}],"allConstructors":[{"identifier":"private MemoryLogStorage()","javadocComment":"\r\n   * Hide default constructor.\r\n   "}]},{"name":"Reset","fullyQualifiedName":"tools.descartes.teastore.kieker.rabbitmq.Reset","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * {@inheritDoc}\r\n\t * \r\n\t * @throws IOException\r\n\t ","lineNumber":19,"isOrphan":false},{"type":"LineComment","text":" some JVMs return null for empty dirs","lineNumber":36,"isOrphan":false},{"type":"LineComment","text":" some JVMs return null for empty dirs","lineNumber":51,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException","name":"doGet","type":"void","javadoc":"\r\n\t * {@inheritDoc}\r\n\t * \r\n\t * @throws IOException\r\n\t "},{"fullQualified":"private void deleteFolder(File folder, String prefix)","name":"deleteFolder","type":"void","javadoc":null},{"fullQualified":"private void deleteFolder(File folder)","name":"deleteFolder","type":"void","javadoc":null}],"allConstructors":[]},{"name":"EndpointClientCollection","fullyQualifiedName":"tools.descartes.teastore.registryclient.loadbalancers.EndpointClientCollection","isInterface":false,"codeComments":[{"type":"LineComment","text":"\tpublic <R> R loadBalanceRESTOperation(Function<AbstractRESTClient<T>, R> operation) {","lineNumber":96,"isOrphan":true},{"type":"LineComment","text":"\t\treturn LoadBalancerCommand.<R>builder()","lineNumber":97,"isOrphan":true},{"type":"LineComment","text":"                .withLoadBalancer(loadBalancer)","lineNumber":98,"isOrphan":true},{"type":"LineComment","text":"                .withRetryHandler(retryHandler)","lineNumber":99,"isOrphan":true},{"type":"LineComment","text":"                .build()","lineNumber":100,"isOrphan":true},{"type":"LineComment","text":"                .submit(server -> Observable.just(operation.apply(clients.get(server))))","lineNumber":101,"isOrphan":true},{"type":"LineComment","text":"                .toBlocking().first();","lineNumber":102,"isOrphan":true},{"type":"LineComment","text":"\t}","lineNumber":103,"isOrphan":true},{"type":"LineComment","text":"load balancer for each endpoint has REST clients for each server","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Create a new endpoint client collection.\r\n\t * @param targetService The service to address.\r\n\t * @param endpointURI The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass The class of the entities to pass around.\r\n\t ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Checks for updates in the list of relevant servers.\r\n\t * Rebuilds the load balancer if server list changed.\r\n\t * @param newServers The newly received list from the registry.\r\n\t ","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":"don't do anything if nothing changed","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the endpoint URI.\r\n\t * @return The REST enpoint URI (e.g., \"products\").\r\n\t ","lineNumber":64,"isOrphan":false},{"type":"LineComment","text":"remove outdated clients","lineNumber":73,"isOrphan":false},{"type":"LineComment","text":"add new clients","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets the rest client for a server. Returns null if it doesnt exist.\r\n\t * @param server The server for which to get the client.\r\n\t * @return The server.\r\n\t ","lineNumber":87,"isOrphan":false}],"allMethods":[{"fullQualified":" void updateServers(Collection<Server> newServers)","name":"updateServers","type":"void","javadoc":"\r\n\t * Checks for updates in the list of relevant servers.\r\n\t * Rebuilds the load balancer if server list changed.\r\n\t * @param newServers The newly received list from the registry.\r\n\t "},{"fullQualified":"public String getEndpointURI()","name":"getEndpointURI","type":"String","javadoc":"\r\n\t * Get the endpoint URI.\r\n\t * @return The REST enpoint URI (e.g., \"products\").\r\n\t "},{"fullQualified":"private void updateClients(Collection<Server> newServers)","name":"updateClients","type":"void","javadoc":null},{"fullQualified":" RESTClient<T> getRESTClient(Server server)","name":"getRESTClient","type":"RESTClient<T>","javadoc":"\r\n\t * Gets the rest client for a server. Returns null if it doesnt exist.\r\n\t * @param server The server for which to get the client.\r\n\t * @return The server.\r\n\t "}],"allConstructors":[{"identifier":" EndpointClientCollection(Service targetService, String endpointURI, final Class<T> entityClass)","javadocComment":"\r\n\t * Create a new endpoint client collection.\r\n\t * @param targetService The service to address.\r\n\t * @param endpointURI The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass The class of the entities to pass around.\r\n\t "}]},{"name":"LoadBalancerTimeoutException","fullyQualifiedName":"tools.descartes.teastore.registryclient.loadbalancers.LoadBalancerTimeoutException","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Creates a new LoadBalancerTimoutException.\r\n\t * @param message The the timeout message.\r\n\t * @param targetService The service for which the load balancer failed.\r\n\t ","lineNumber":29,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns the service for which the timeout occurred.\r\n\t * @return The service for which the timeout occurred.\r\n\t ","lineNumber":39,"isOrphan":false}],"allMethods":[{"fullQualified":"public Service getTargetService()","name":"getTargetService","type":"Service","javadoc":"\r\n\t * Returns the service for which the timeout occurred.\r\n\t * @return The service for which the timeout occurred.\r\n\t "}],"allConstructors":[{"identifier":"public LoadBalancerTimeoutException(String message, Service targetService)","javadocComment":"\r\n\t * Creates a new LoadBalancerTimoutException.\r\n\t * @param message The the timeout message.\r\n\t * @param targetService The service for which the load balancer failed.\r\n\t "}]},{"name":"LoadBalancerUpdaterDaemon","fullyQualifiedName":"tools.descartes.teastore.registryclient.loadbalancers.LoadBalancerUpdaterDaemon","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Run the daemon.\r\n\t ","lineNumber":24,"isOrphan":false}],"allMethods":[{"fullQualified":"public void run()","name":"run","type":"void","javadoc":"\r\n\t * Run the daemon.\r\n\t "}],"allConstructors":[]},{"name":"ServiceLoadBalancer","fullyQualifiedName":"tools.descartes.teastore.registryclient.loadbalancers.ServiceLoadBalancer","isInterface":false,"codeComments":[{"type":"LineComment","text":"Loadbalancers for each service name","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":"clients for each endpoint (for a fixed service)","lineNumber":56,"isOrphan":false},{"type":"LineComment","text":" retry handler that does not retry on same server, but on a different server","lineNumber":62,"isOrphan":false},{"type":"LineComment","text":"private constructor","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * Initializes load balancers for the target services.\r\n     * Queries target service instances from the registry.\r\n     * @param targetServices The services to pre-initialize.\r\n     ","lineNumber":72,"isOrphan":false},{"type":"LineComment","text":"initialize before logging in case the compiler optimizes it away when log-level info is not set","lineNumber":79,"isOrphan":false},{"type":"LineComment","text":"log the state to prevent the compiler from optimizing the initialization away","lineNumber":81,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets the load balancer for a service. Initializes it with a list of know servers,\r\n\t * if the service is not known exists.\r\n\t * @param targetService The service for which to get the balancer\r\n\t * @param knownServers The list of know servers.\r\n\t * @return The load balancer.\r\n\t ","lineNumber":98,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Update all load balancers for a service. Triggers Registry client to ask registry for updates.\r\n\t ","lineNumber":128,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Update all load balancers for a service with servers. Triggers Registry client to ask registry for updates.\r\n\t * @param targetService The service for which to update.\r\n\t ","lineNumber":135,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Update all load balancers for a service. Call if server list has changed.\r\n\t * @param newServers New servers with which to update the load balancers.\r\n\t * @param targetService The service for which to update.\r\n\t ","lineNumber":144,"isOrphan":false},{"type":"LineComment","text":"return if nothing changed","lineNumber":164,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * Load balances a REST operation. Automatically creates the needed load balancers, clients, etc. if needed.\r\n     * @param targetService The service to load balance.\r\n     * @param endpointURI The endpoint URI (e.g., \"products\").\r\n     * @param entityClass The class of entities to send/receive.\r\n     * @param operation The operation to load balance as Java8 lambda.\r\n     * \t\t\t\tE.g.: \"client -> CRUDOperations.getEntity(client, id)\".\r\n     * @param <R> The expected return type.\r\n     * @param <T> The entity type of the entity to send/receive.\r\n     * @throws LoadBalancerTimeoutException On receiving the 408 status code\r\n     * and on repeated load balancer socket timeouts.\r\n\t * @throws NotFoundException On receiving the 404 status code.\r\n     * @return Returns the return value of the load balanced operation.\r\n     ","lineNumber":184,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * Sends a multicast to all known instances of the service.\r\n     * Does not repeat failed sends.\r\n     * @param targetService The service to send to.\r\n     * @param endpointURI The endpoint URI (e.g., \"cache\").\r\n     * @param entityClass The class of entities to send/receive.\r\n     * @param operation The operation to load balance as Java8 lambda.\r\n     * \t\t\t\tE.g.: \"client -> CRUDOperations.getEntity(client, id)\".\r\n     * @param <R> The expected return type.\r\n     * @param <T> The entity type of the entity to send/receive.\r\n     * @return List of all responses. Contains null for each unreachable server.\r\n     ","lineNumber":249,"isOrphan":false},{"type":"JavadocComment","text":"\r\n     * Sends a multicast to all known instances of this service, except for the\r\n     * one actually sending (this instance).\r\n     * Does not repeat failed sends.\r\n     * @param endpointURI The endpoint URI (e.g., \"cache\").\r\n     * @param entityClass The class of entities to send/receive.\r\n     * @param operation The operation to load balance as Java8 lambda.\r\n     * \t\t\t\tE.g.: \"client -> CRUDOperations.getEntity(client, id)\".\r\n     * @param <R> The expected return type.\r\n     * @param <T> The entity type of the entity to send/receive.\r\n     * @return List of all responses. Contains null for each unreachable server.\r\n     ","lineNumber":267,"isOrphan":false},{"type":"LineComment","text":"exception can be null","lineNumber":286,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void preInitializeServiceLoadBalancers(Service... targetServices)","name":"preInitializeServiceLoadBalancers","type":"void","javadoc":"\r\n     * Initializes load balancers for the target services.\r\n     * Queries target service instances from the registry.\r\n     * @param targetServices The services to pre-initialize.\r\n     "},{"fullQualified":"private static ServiceLoadBalancer getServiceLoadBalancer(Service targetService)","name":"getServiceLoadBalancer","type":"ServiceLoadBalancer","javadoc":null},{"fullQualified":" static ServiceLoadBalancer getServiceLoadBalancer(Service targetService, List<Server> knownServers)","name":"getServiceLoadBalancer","type":"ServiceLoadBalancer","javadoc":"\r\n\t * Gets the load balancer for a service. Initializes it with a list of know servers,\r\n\t * if the service is not known exists.\r\n\t * @param targetService The service for which to get the balancer\r\n\t * @param knownServers The list of know servers.\r\n\t * @return The load balancer.\r\n\t "},{"fullQualified":"private EndpointClientCollection<T> getEndpointClientCollection(String endpointURI, Class<T> entityClass)","name":"getEndpointClientCollection","type":"EndpointClientCollection<T>","javadoc":null},{"fullQualified":" static void updateLoadBalancersForKnownServicesUsingRegistry()","name":"updateLoadBalancersForKnownServicesUsingRegistry","type":"void","javadoc":"\r\n\t * Update all load balancers for a service. Triggers Registry client to ask registry for updates.\r\n\t "},{"fullQualified":"private static void updateLoadBalancersForServiceUsingRegistry(Service targetService)","name":"updateLoadBalancersForServiceUsingRegistry","type":"void","javadoc":"\r\n\t * Update all load balancers for a service with servers. Triggers Registry client to ask registry for updates.\r\n\t * @param targetService The service for which to update.\r\n\t "},{"fullQualified":" static void updateLoadBalancersForService(Service targetService, List<Server> newServers)","name":"updateLoadBalancersForService","type":"void","javadoc":"\r\n\t * Update all load balancers for a service. Call if server list has changed.\r\n\t * @param newServers New servers with which to update the load balancers.\r\n\t * @param targetService The service for which to update.\r\n\t "},{"fullQualified":"private void updateLoadBalancer(List<Server> newServers)","name":"updateLoadBalancer","type":"void","javadoc":null},{"fullQualified":"public static R loadBalanceRESTOperation(Service targetService, String endpointURI, Class<T> entityClass, Function<RESTClient<T>, R> operation) throws NotFoundException, LoadBalancerTimeoutException","name":"loadBalanceRESTOperation","type":"R","javadoc":"\r\n     * Load balances a REST operation. Automatically creates the needed load balancers, clients, etc. if needed.\r\n     * @param targetService The service to load balance.\r\n     * @param endpointURI The endpoint URI (e.g., \"products\").\r\n     * @param entityClass The class of entities to send/receive.\r\n     * @param operation The operation to load balance as Java8 lambda.\r\n     * \t\t\t\tE.g.: \"client -> CRUDOperations.getEntity(client, id)\".\r\n     * @param <R> The expected return type.\r\n     * @param <T> The entity type of the entity to send/receive.\r\n     * @throws LoadBalancerTimeoutException On receiving the 408 status code\r\n     * and on repeated load balancer socket timeouts.\r\n\t * @throws NotFoundException On receiving the 404 status code.\r\n     * @return Returns the return value of the load balanced operation.\r\n     "},{"fullQualified":"private R loadBalanceRESTOperation(String endpointURI, Class<T> entityClass, Function<RESTClient<T>, R> operation) throws NotFoundException, LoadBalancerTimeoutException","name":"loadBalanceRESTOperation","type":"R","javadoc":null},{"fullQualified":"public static List<R> multicastRESTOperation(Service targetService, String endpointURI, Class<T> entityClass, Function<RESTClient<T>, R> operation)","name":"multicastRESTOperation","type":"List<R>","javadoc":"\r\n     * Sends a multicast to all known instances of the service.\r\n     * Does not repeat failed sends.\r\n     * @param targetService The service to send to.\r\n     * @param endpointURI The endpoint URI (e.g., \"cache\").\r\n     * @param entityClass The class of entities to send/receive.\r\n     * @param operation The operation to load balance as Java8 lambda.\r\n     * \t\t\t\tE.g.: \"client -> CRUDOperations.getEntity(client, id)\".\r\n     * @param <R> The expected return type.\r\n     * @param <T> The entity type of the entity to send/receive.\r\n     * @return List of all responses. Contains null for each unreachable server.\r\n     "},{"fullQualified":"public static List<R> multicastRESTToOtherServiceInstances(String endpointURI, Class<T> entityClass, Function<RESTClient<T>, R> operation)","name":"multicastRESTToOtherServiceInstances","type":"List<R>","javadoc":"\r\n     * Sends a multicast to all known instances of this service, except for the\r\n     * one actually sending (this instance).\r\n     * Does not repeat failed sends.\r\n     * @param endpointURI The endpoint URI (e.g., \"cache\").\r\n     * @param entityClass The class of entities to send/receive.\r\n     * @param operation The operation to load balance as Java8 lambda.\r\n     * \t\t\t\tE.g.: \"client -> CRUDOperations.getEntity(client, id)\".\r\n     * @param <R> The expected return type.\r\n     * @param <T> The entity type of the entity to send/receive.\r\n     * @return List of all responses. Contains null for each unreachable server.\r\n     "},{"fullQualified":"private List<R> multicastRESTOperation(String endpointURI, Class<T> entityClass, Function<RESTClient<T>, R> operation, Server exception)","name":"multicastRESTOperation","type":"List<R>","javadoc":null}],"allConstructors":[{"identifier":"private ServiceLoadBalancer(final Service targetService)","javadocComment":null}]},{"name":"ServiceLoadBalancerResult","fullyQualifiedName":"tools.descartes.teastore.registryclient.loadbalancers.ServiceLoadBalancerResult","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Create a load balancer result by performing a REST operation.\r\n\t * @param client The rest client to perform the operation with (determined by load balancer).\r\n\t * @param operation The operation to perform (passed from the user).\r\n\t * @param <T> REST client type.\r\n\t * @param <R> Entity type.\r\n\t * @throws TimeoutException On receiving the 408 status code.\r\n\t * @throws NotFoundException On receiving the 404 status code.\r\n\t * @return The result. Entity is always null on failure.\r\n\t ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the status code for the returned response.\r\n\t * @return The status code.\r\n\t ","lineNumber":61,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Set the status code for the returned response.\r\n\t * @param statusCode The status code.\r\n\t ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the entity from the returned response.\r\n\t * @return The entity.\r\n\t ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Set the entity from the returned response.\r\n\t * @param entity The entity.\r\n\t ","lineNumber":85,"isOrphan":false}],"allMethods":[{"fullQualified":" static ServiceLoadBalancerResult<R> fromRESTOperation(RESTClient<T> client, Function<RESTClient<T>, R> operation) throws NotFoundException, TimeoutException","name":"fromRESTOperation","type":"ServiceLoadBalancerResult<R>","javadoc":"\r\n\t * Create a load balancer result by performing a REST operation.\r\n\t * @param client The rest client to perform the operation with (determined by load balancer).\r\n\t * @param operation The operation to perform (passed from the user).\r\n\t * @param <T> REST client type.\r\n\t * @param <R> Entity type.\r\n\t * @throws TimeoutException On receiving the 408 status code.\r\n\t * @throws NotFoundException On receiving the 404 status code.\r\n\t * @return The result. Entity is always null on failure.\r\n\t "},{"fullQualified":"public int getStatusCode()","name":"getStatusCode","type":"int","javadoc":"\r\n\t * Get the status code for the returned response.\r\n\t * @return The status code.\r\n\t "},{"fullQualified":"private void setStatusCode(int statusCode)","name":"setStatusCode","type":"void","javadoc":"\r\n\t * Set the status code for the returned response.\r\n\t * @param statusCode The status code.\r\n\t "},{"fullQualified":"public R getEntity()","name":"getEntity","type":"R","javadoc":"\r\n\t * Get the entity from the returned response.\r\n\t * @return The entity.\r\n\t "},{"fullQualified":"private void setEntity(R entity)","name":"setEntity","type":"void","javadoc":"\r\n\t * Set the entity from the returned response.\r\n\t * @param entity The entity.\r\n\t "}],"allConstructors":[{"identifier":"private ServiceLoadBalancerResult()","javadocComment":null}]},{"name":"RegistryClient","fullyQualifiedName":"tools.descartes.teastore.registryclient.RegistryClient","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * The registry client.\r\n   ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Constructor.\r\n   ","lineNumber":74,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter.\r\n   *\r\n   * @return registry client\r\n   ","lineNumber":112,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Handles full registration.\r\n   *\r\n   * @param contextPath\r\n   *          contextPath private String getContextPath(ServletContextEvent event)\r\n   *          { return event.getServletContext().getContextPath(); }\r\n   ","lineNumber":121,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Handles full unregistration.\r\n   *\r\n   * @param contextPath\r\n   *          contextPath private String getContextPath(ServletContextEvent event)\r\n   *          { return event.getServletContext().getContextPath(); }\r\n   ","lineNumber":149,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Calls the StartupCallback after the service is available.\r\n   *\r\n   * @param requestedService\r\n   *          service to check for\r\n   * @param myService\r\n   *          The Service enum for the waiting service (the service calling this).\r\n   * @param callback\r\n   *          StartupCallback to call\r\n   ","lineNumber":165,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get all servers for a service in the {@link Service} enum from the registry.\r\n   *\r\n   * @param targetService\r\n   *          The service for which to get the servers.\r\n   * @return List of servers.\r\n   ","lineNumber":182,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the server for this service. Returns null if the service is not\r\n   * registered yet.\r\n   *\r\n   * @return The server for this service. Null, if not registered.\r\n   ","lineNumber":211,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Get the service of this application. Returns null if the service is not\r\n   * registered yet.\r\n   *\r\n   * @return The service for this application. Null, if not registered.\r\n   ","lineNumber":221,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Register a new server for a service in the registry.\r\n   *\r\n   * @param service\r\n   *          The service for which to register.\r\n   * @param server\r\n   *          The server address.\r\n   * @return True, if registration succeeded.\r\n   ","lineNumber":231,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Unregister a server for a service in the registry.\r\n   *\r\n   * @param service\r\n   *          The service for which to unregister.\r\n   * @param server\r\n   *          The server address to remove.\r\n   * @return True, if unregistration succeeded.\r\n   ","lineNumber":253,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Protected for testing.\r\n   *\r\n   * @param serviceName\r\n   *          name of service\r\n   * @return cleaned service name\r\n   ","lineNumber":313,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Protected for test.\r\n   *\r\n   * @return scheduler\r\n   ","lineNumber":324,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Protected for test.\r\n   *\r\n   * @return scheduler\r\n   ","lineNumber":333,"isOrphan":false}],"allMethods":[{"fullQualified":"public static RegistryClient getClient()","name":"getClient","type":"RegistryClient","javadoc":"\r\n   * Getter.\r\n   *\r\n   * @return registry client\r\n   "},{"fullQualified":"public void unregister(String contextPath)","name":"unregister","type":"void","javadoc":"\r\n   * Handles full registration.\r\n   *\r\n   * @param contextPath\r\n   *          contextPath private String getContextPath(ServletContextEvent event)\r\n   *          { return event.getServletContext().getContextPath(); }\r\n   "},{"fullQualified":"public void register(String contextPath)","name":"register","type":"void","javadoc":"\r\n   * Handles full unregistration.\r\n   *\r\n   * @param contextPath\r\n   *          contextPath private String getContextPath(ServletContextEvent event)\r\n   *          { return event.getServletContext().getContextPath(); }\r\n   "},{"fullQualified":"public void runAfterServiceIsAvailable(Service requestedService, StartupCallback callback, Service myService)","name":"runAfterServiceIsAvailable","type":"void","javadoc":"\r\n   * Calls the StartupCallback after the service is available.\r\n   *\r\n   * @param requestedService\r\n   *          service to check for\r\n   * @param myService\r\n   *          The Service enum for the waiting service (the service calling this).\r\n   * @param callback\r\n   *          StartupCallback to call\r\n   "},{"fullQualified":"public List<Server> getServersForService(Service targetService)","name":"getServersForService","type":"List<Server>","javadoc":"\r\n   * Get all servers for a service in the {@link Service} enum from the registry.\r\n   *\r\n   * @param targetService\r\n   *          The service for which to get the servers.\r\n   * @return List of servers.\r\n   "},{"fullQualified":"public Server getMyServiceInstanceServer()","name":"getMyServiceInstanceServer","type":"Server","javadoc":"\r\n   * Get the server for this service. Returns null if the service is not\r\n   * registered yet.\r\n   *\r\n   * @return The server for this service. Null, if not registered.\r\n   "},{"fullQualified":"public Service getMyService()","name":"getMyService","type":"Service","javadoc":"\r\n   * Get the service of this application. Returns null if the service is not\r\n   * registered yet.\r\n   *\r\n   * @return The service for this application. Null, if not registered.\r\n   "},{"fullQualified":"protected boolean registerOnce(Service service, Server server)","name":"registerOnce","type":"boolean","javadoc":"\r\n   * Register a new server for a service in the registry.\r\n   *\r\n   * @param service\r\n   *          The service for which to register.\r\n   * @param server\r\n   *          The server address.\r\n   * @return True, if registration succeeded.\r\n   "},{"fullQualified":"private boolean unregisterOnce(Service service, Server server)","name":"unregisterOnce","type":"boolean","javadoc":"\r\n   * Unregister a server for a service in the registry.\r\n   *\r\n   * @param service\r\n   *          The service for which to unregister.\r\n   * @param server\r\n   *          The server address to remove.\r\n   * @return True, if unregistration succeeded.\r\n   "},{"fullQualified":"private Client getRESTClient(int timeout)","name":"getRESTClient","type":"Client","javadoc":null},{"fullQualified":"private Service getService(String serviceName)","name":"getService","type":"Service","javadoc":null},{"fullQualified":"private Server getServer()","name":"getServer","type":"Server","javadoc":null},{"fullQualified":"private String getHostName()","name":"getHostName","type":"String","javadoc":null},{"fullQualified":"private int getPort()","name":"getPort","type":"int","javadoc":null},{"fullQualified":"protected String cleanupServiceName(String serviceName)","name":"cleanupServiceName","type":"String","javadoc":"\r\n   * Protected for testing.\r\n   *\r\n   * @param serviceName\r\n   *          name of service\r\n   * @return cleaned service name\r\n   "},{"fullQualified":"protected ScheduledExecutorService getHeartbeatScheduler()","name":"getHeartbeatScheduler","type":"ScheduledExecutorService","javadoc":"\r\n   * Protected for test.\r\n   *\r\n   * @return scheduler\r\n   "},{"fullQualified":"protected ScheduledExecutorService getLoadBalancerUpdateScheduler()","name":"getLoadBalancerUpdateScheduler","type":"ScheduledExecutorService","javadoc":"\r\n   * Protected for test.\r\n   *\r\n   * @return scheduler\r\n   "}],"allConstructors":[{"identifier":"protected RegistryClient()","javadocComment":"\r\n   * Constructor.\r\n   "}]},{"name":"RegistryClientHeartbeatDaemon","fullyQualifiedName":"tools.descartes.teastore.registryclient.RegistryClientHeartbeatDaemon","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Constructor.\r\n\t * @param service Service enum\r\n\t * @param server Service location\r\n\t ","lineNumber":27,"isOrphan":false}],"allMethods":[{"fullQualified":"public void run()","name":"run","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public RegistryClientHeartbeatDaemon(Service service, Server server)","javadocComment":"\r\n\t * Constructor.\r\n\t * @param service Service enum\r\n\t * @param server Service location\r\n\t "}]},{"name":"CharResponseWrapper","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.CharResponseWrapper","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Returns string content.\r\n   * \r\n   * @return string\r\n   ","lineNumber":21,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Constructor using a response.\r\n   * \r\n   * @param response\r\n   *          response to wrap\r\n   ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for print writer.\r\n   * \r\n   * @return print writer\r\n   ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Getter for output stream.\r\n   * \r\n   * @return ServletOutputStream\r\n   ","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" This is the magic to prevent closing stream, create a \"virtual\" stream that","lineNumber":57,"isOrphan":true},{"type":"LineComment","text":" does nothing..","lineNumber":58,"isOrphan":false}],"allMethods":[{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":"\r\n   * Returns string content.\r\n   * \r\n   * @return string\r\n   "},{"fullQualified":"public PrintWriter getWriter()","name":"getWriter","type":"PrintWriter","javadoc":"\r\n   * Getter for print writer.\r\n   * \r\n   * @return print writer\r\n   "},{"fullQualified":"public ServletOutputStream getOutputStream() throws IOException","name":"getOutputStream","type":"ServletOutputStream","javadoc":"\r\n   * Getter for output stream.\r\n   * \r\n   * @return ServletOutputStream\r\n   "}],"allConstructors":[{"identifier":"public CharResponseWrapper(HttpServletResponse response)","javadocComment":"\r\n   * Constructor using a response.\r\n   * \r\n   * @param response\r\n   *          response to wrap\r\n   "}]},{"name":"HttpWrapper","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.HttpWrapper","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Hide default constructor.\r\n   ","lineNumber":29,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Wrap webtarget.\r\n   *\r\n   * @param target webtarget to wrap\r\n   * @return wrapped wentarget\r\n   ","lineNumber":36,"isOrphan":false},{"type":"LineComment","text":" this is executionOrderIndex-th execution in this trace","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" this is the height in the dynamic call tree of this execution","lineNumber":48,"isOrphan":false},{"type":"LineComment","text":" traceId, -1 if entry point","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" entrypoint = true;","lineNumber":52,"isOrphan":false},{"type":"LineComment","text":" next operation is ess + 1","lineNumber":55,"isOrphan":false},{"type":"LineComment","text":" entrypoint = false;","lineNumber":60,"isOrphan":false},{"type":"LineComment","text":" CTRLINST.terminateMonitoring();","lineNumber":66,"isOrphan":true},{"type":"LineComment","text":" Get request header","lineNumber":69,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Builder wrap(WebTarget target)","name":"wrap","type":"Builder","javadoc":"\r\n   * Wrap webtarget.\r\n   *\r\n   * @param target webtarget to wrap\r\n   * @return wrapped wentarget\r\n   "}],"allConstructors":[{"identifier":"private HttpWrapper()","javadocComment":"\r\n   * Hide default constructor.\r\n   "}]},{"name":"LoadBalancedCRUDOperations","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.LoadBalancedCRUDOperations","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Sends an Entity to be created \"as new\" by the receiving service.\r\n\t * \r\n\t * @param entity\r\n\t *            The new entity to create. ID may remain unset, it will be ignored\r\n\t *            by target service.\r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return The new ID of the created entity. Target service creates a new ID,\r\n\t *         any passed ID is ignored. Returns -1L if creation failed. Returns 0\r\n\t *         if creation worked, but ID remains unkown.\r\n\t ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Sends an Entity to be updated using the values of the provided entity. Note\r\n\t * that not all values may be used by the receiving service. The values used\r\n\t * depend on which changes are allowed in the domain model.\r\n\t * \r\n\t * @param id\r\n\t *            The id of the entity to update. Ids stored within the entity are\r\n\t *            ignored.\r\n\t * @param entity\r\n\t *            The entity to be updated. Entity is matched using its ID.\r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return True, if update succeeded. False, otherwise.\r\n\t ","lineNumber":66,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Deletes the entity at the target id.\r\n\t * \r\n\t * @param id\r\n\t *            The ID of the entity to delete.\r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return True, if deletion succeeded; false otherwise.\r\n\t ","lineNumber":97,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns the entity with the specified id. Returns null if it does not exist.\r\n\t * \r\n\t * @param id\r\n\t *            Id of the entity to find.\r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return The entity; null if it does not exist.\r\n\t ","lineNumber":123,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns a list of Entities of the relevant type.\r\n\t * \r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param propertyName\r\n\t *            name of filter property\r\n\t * @param propertyValue\r\n\t *            value of filter property\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return List of entities; empty list if non were found.\r\n\t ","lineNumber":149,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns a list of Entities of the relevant type.\r\n\t * \r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param startIndex\r\n\t *            The index of the first entity to return (index, not ID!). -1, if\r\n\t *            you don't want to set an index.\r\n\t * @param limit\r\n\t *            Maximum amount of entities to return. -1, for no max.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return List of entities; empty list if non were found.\r\n\t ","lineNumber":177,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Returns a list of Entities of the relevant type after filtering using a path\r\n\t * param query. Example: \"category\", 2, 1, 3 will return 3 items in Category\r\n\t * with ID 2, beginning from item with index 1 (skipping item 0). Note that the\r\n\t * AbstractCRUDEndpoint does not offer this feature by default.\r\n\t * \r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param filterURI\r\n\t *            Name of the objects to filter for. E.g., \"category\".\r\n\t * @param filterId\r\n\t *            Id of the Object to filter for. E.g, 2\r\n\t * @param startIndex\r\n\t *            The index of the first entity to return (index, not ID!). -1, if\r\n\t *            you don't want to set an index.\r\n\t * @param limit\r\n\t *            Maximum amount of entities to return. -1, for no max.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return List of entities; empty list if non were found.\r\n\t ","lineNumber":206,"isOrphan":false}],"allMethods":[{"fullQualified":"public static long sendEntityForCreation(Service service, String endpointURI, Class<T> entityClass, T entity) throws NotFoundException, LoadBalancerTimeoutException","name":"sendEntityForCreation","type":"long","javadoc":"\r\n\t * Sends an Entity to be created \"as new\" by the receiving service.\r\n\t * \r\n\t * @param entity\r\n\t *            The new entity to create. ID may remain unset, it will be ignored\r\n\t *            by target service.\r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return The new ID of the created entity. Target service creates a new ID,\r\n\t *         any passed ID is ignored. Returns -1L if creation failed. Returns 0\r\n\t *         if creation worked, but ID remains unkown.\r\n\t "},{"fullQualified":"public static boolean sendEntityForUpdate(Service service, String endpointURI, Class<T> entityClass, long id, T entity) throws NotFoundException, LoadBalancerTimeoutException","name":"sendEntityForUpdate","type":"boolean","javadoc":"\r\n\t * Sends an Entity to be updated using the values of the provided entity. Note\r\n\t * that not all values may be used by the receiving service. The values used\r\n\t * depend on which changes are allowed in the domain model.\r\n\t * \r\n\t * @param id\r\n\t *            The id of the entity to update. Ids stored within the entity are\r\n\t *            ignored.\r\n\t * @param entity\r\n\t *            The entity to be updated. Entity is matched using its ID.\r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return True, if update succeeded. False, otherwise.\r\n\t "},{"fullQualified":"public static boolean deleteEntity(Service service, String endpointURI, Class<T> entityClass, long id) throws NotFoundException, LoadBalancerTimeoutException","name":"deleteEntity","type":"boolean","javadoc":"\r\n\t * Deletes the entity at the target id.\r\n\t * \r\n\t * @param id\r\n\t *            The ID of the entity to delete.\r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return True, if deletion succeeded; false otherwise.\r\n\t "},{"fullQualified":"public static T getEntity(Service service, String endpointURI, Class<T> entityClass, long id) throws NotFoundException, LoadBalancerTimeoutException","name":"getEntity","type":"T","javadoc":"\r\n\t * Returns the entity with the specified id. Returns null if it does not exist.\r\n\t * \r\n\t * @param id\r\n\t *            Id of the entity to find.\r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return The entity; null if it does not exist.\r\n\t "},{"fullQualified":"public static T getEntityWithProperties(Service service, String endpointURI, Class<T> entityClass, String propertyName, String propertyValue) throws NotFoundException, LoadBalancerTimeoutException","name":"getEntityWithProperties","type":"T","javadoc":"\r\n\t * Returns a list of Entities of the relevant type.\r\n\t * \r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param propertyName\r\n\t *            name of filter property\r\n\t * @param propertyValue\r\n\t *            value of filter property\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return List of entities; empty list if non were found.\r\n\t "},{"fullQualified":"public static List<T> getEntities(Service service, String endpointURI, Class<T> entityClass, int startIndex, int limit) throws NotFoundException, LoadBalancerTimeoutException","name":"getEntities","type":"List<T>","javadoc":"\r\n\t * Returns a list of Entities of the relevant type.\r\n\t * \r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param startIndex\r\n\t *            The index of the first entity to return (index, not ID!). -1, if\r\n\t *            you don't want to set an index.\r\n\t * @param limit\r\n\t *            Maximum amount of entities to return. -1, for no max.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return List of entities; empty list if non were found.\r\n\t "},{"fullQualified":"public static List<T> getEntities(Service service, String endpointURI, Class<T> entityClass, String filterURI, long filterId, int startIndex, int limit) throws NotFoundException, LoadBalancerTimeoutException","name":"getEntities","type":"List<T>","javadoc":"\r\n\t * Returns a list of Entities of the relevant type after filtering using a path\r\n\t * param query. Example: \"category\", 2, 1, 3 will return 3 items in Category\r\n\t * with ID 2, beginning from item with index 1 (skipping item 0). Note that the\r\n\t * AbstractCRUDEndpoint does not offer this feature by default.\r\n\t * \r\n\t * @param service\r\n\t *            The service to load balance.\r\n\t * @param endpointURI\r\n\t *            The endpoint URI (e.g., \"products\").\r\n\t * @param entityClass\r\n\t *            The class of entities to send/receive.\r\n\t * @param filterURI\r\n\t *            Name of the objects to filter for. E.g., \"category\".\r\n\t * @param filterId\r\n\t *            Id of the Object to filter for. E.g, 2\r\n\t * @param startIndex\r\n\t *            The index of the first entity to return (index, not ID!). -1, if\r\n\t *            you don't want to set an index.\r\n\t * @param limit\r\n\t *            Maximum amount of entities to return. -1, for no max.\r\n\t * @param <T>\r\n\t *            Type of entity to handle.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return List of entities; empty list if non were found.\r\n\t "}],"allConstructors":[{"identifier":"private LoadBalancedCRUDOperations()","javadocComment":null}]},{"name":"LoadBalancedImageOperations","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.LoadBalancedImageOperations","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Retrieves image for a product.\r\n\t * \r\n\t * @param product\r\n\t *            product.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return image for product\r\n\t ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets product image.\r\n\t * \r\n\t * @param product\r\n\t *            product.\r\n\t * @param size\r\n\t *            target size\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return image for product with target size\r\n\t ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets preview images for a series of products.\r\n\t * \r\n\t * @param products\r\n\t *            List of products\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return HashMap containing all preview images\r\n\t ","lineNumber":70,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Gets preview images for a series of products with target image size.\r\n\t * \r\n\t * @param products\r\n\t *            list of products\r\n\t * @param size\r\n\t *            target size\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return HashMap containing all preview images\r\n\t ","lineNumber":87,"isOrphan":false},{"type":"LineComment","text":" buffer all entities so that the connections are released to the connection","lineNumber":121,"isOrphan":true},{"type":"LineComment","text":" pool","lineNumber":122,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Retrieves web image.\r\n\t * \r\n\t * @param name\r\n\t *            name of image.\r\n\t * @param size\r\n\t *            target size\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return image\r\n\t ","lineNumber":131,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Retrieves a series of web image.\r\n\t * \r\n\t * @param names\r\n\t *            list of name of image.\r\n\t * @param size\r\n\t *            target size\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return HashMap containing requested images.\r\n\t ","lineNumber":150,"isOrphan":false},{"type":"LineComment","text":" buffer all entities so that the connections are released to the connection","lineNumber":184,"isOrphan":true},{"type":"LineComment","text":" pool","lineNumber":185,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Regenerates images.\r\n\t * \r\n\t * @return List of status codes.\r\n\t ","lineNumber":194,"isOrphan":false},{"type":"LineComment","text":" buffer all entities so that the connections are released to the connection","lineNumber":207,"isOrphan":true},{"type":"LineComment","text":" pool","lineNumber":208,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String getProductImage(Product product) throws NotFoundException, LoadBalancerTimeoutException","name":"getProductImage","type":"String","javadoc":"\r\n\t * Retrieves image for a product.\r\n\t * \r\n\t * @param product\r\n\t *            product.\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return image for product\r\n\t "},{"fullQualified":"public static String getProductImage(Product product, ImageSize size) throws NotFoundException, LoadBalancerTimeoutException","name":"getProductImage","type":"String","javadoc":"\r\n\t * Gets product image.\r\n\t * \r\n\t * @param product\r\n\t *            product.\r\n\t * @param size\r\n\t *            target size\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return image for product with target size\r\n\t "},{"fullQualified":"public static HashMap<Long, String> getProductPreviewImages(List<Product> products) throws NotFoundException, LoadBalancerTimeoutException","name":"getProductPreviewImages","type":"HashMap<Long,String>","javadoc":"\r\n\t * Gets preview images for a series of products.\r\n\t * \r\n\t * @param products\r\n\t *            List of products\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return HashMap containing all preview images\r\n\t "},{"fullQualified":"public static HashMap<Long, String> getProductImages(List<Product> products, ImageSize size) throws NotFoundException, LoadBalancerTimeoutException","name":"getProductImages","type":"HashMap<Long,String>","javadoc":"\r\n\t * Gets preview images for a series of products with target image size.\r\n\t * \r\n\t * @param products\r\n\t *            list of products\r\n\t * @param size\r\n\t *            target size\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return HashMap containing all preview images\r\n\t "},{"fullQualified":"public static String getWebImage(String name, ImageSize size) throws NotFoundException, LoadBalancerTimeoutException","name":"getWebImage","type":"String","javadoc":"\r\n\t * Retrieves web image.\r\n\t * \r\n\t * @param name\r\n\t *            name of image.\r\n\t * @param size\r\n\t *            target size\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return image\r\n\t "},{"fullQualified":"public static HashMap<String, String> getWebImages(List<String> names, ImageSize size) throws NotFoundException, LoadBalancerTimeoutException","name":"getWebImages","type":"HashMap<String,String>","javadoc":"\r\n\t * Retrieves a series of web image.\r\n\t * \r\n\t * @param names\r\n\t *            list of name of image.\r\n\t * @param size\r\n\t *            target size\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return HashMap containing requested images.\r\n\t "},{"fullQualified":"public static List<Integer> regenerateImages()","name":"regenerateImages","type":"List<Integer>","javadoc":"\r\n\t * Regenerates images.\r\n\t * \r\n\t * @return List of status codes.\r\n\t "}],"allConstructors":[{"identifier":"private LoadBalancedImageOperations()","javadocComment":null}]},{"name":"LoadBalancedRecommenderOperations","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.LoadBalancedRecommenderOperations","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Gets recommendations.\r\n\t * \r\n\t * @param order\r\n\t *            list of order items\r\n\t * @param uid userId\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return List of recommended order ids\r\n\t ","lineNumber":30,"isOrphan":false}],"allMethods":[{"fullQualified":"public static List<Long> getRecommendations(List<OrderItem> order, Long uid) throws NotFoundException, LoadBalancerTimeoutException","name":"getRecommendations","type":"List<Long>","javadoc":"\r\n\t * Gets recommendations.\r\n\t * \r\n\t * @param order\r\n\t *            list of order items\r\n\t * @param uid userId\r\n\t * @throws NotFoundException\r\n\t *             If 404 was returned.\r\n\t * @throws LoadBalancerTimeoutException\r\n\t *             On receiving the 408 status code and on repeated load balancer\r\n\t *             socket timeouts.\r\n\t * @return List of recommended order ids\r\n\t "}],"allConstructors":[{"identifier":"private LoadBalancedRecommenderOperations()","javadocComment":null}]},{"name":"LoadBalancedStoreOperations","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.LoadBalancedStoreOperations","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Persists order in database.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param addressName\r\n   *          adress\r\n   * @param address1\r\n   *          adress\r\n   * @param address2\r\n   *          adress\r\n   * @param creditCardCompany\r\n   *          creditcard\r\n   * @param creditCardExpiryDate\r\n   *          creditcard\r\n   * @param creditCardNumber\r\n   *          creditcard\r\n   * @param totalPriceInCents\r\n   *          totalPrice\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return empty SessionBlob\r\n   ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Login if name and pw are correct.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @param name\r\n   *          username\r\n   * @param password\r\n   *          user password\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return SessionBlob with login information if login was successful\r\n   ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Logs user out.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return SessionBlob without user information\r\n   ","lineNumber":96,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Checks if user is logged in.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return true if user is logged in\r\n   ","lineNumber":117,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Adds product to cart. if the item is already in the cart, the quantity is\r\n   * increased.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @param pid\r\n   *          ProductId\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return Sessionblob containing product\r\n   ","lineNumber":139,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Removes product from cart.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          productid\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return Sessionblob without product\r\n   ","lineNumber":163,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Updates quantity of item in cart.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          productid of item\r\n   * @param quantity\r\n   *          target quantity\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return Sessionblob with updated quantity\r\n   ","lineNumber":186,"isOrphan":false}],"allMethods":[{"fullQualified":"public static SessionBlob placeOrder(SessionBlob blob, String addressName, String address1, String address2, String creditCardCompany, String creditCardExpiryDate, long totalPriceInCents, String creditCardNumber) throws NotFoundException, LoadBalancerTimeoutException","name":"placeOrder","type":"SessionBlob","javadoc":"\r\n   * Persists order in database.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param addressName\r\n   *          adress\r\n   * @param address1\r\n   *          adress\r\n   * @param address2\r\n   *          adress\r\n   * @param creditCardCompany\r\n   *          creditcard\r\n   * @param creditCardExpiryDate\r\n   *          creditcard\r\n   * @param creditCardNumber\r\n   *          creditcard\r\n   * @param totalPriceInCents\r\n   *          totalPrice\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return empty SessionBlob\r\n   "},{"fullQualified":"public static SessionBlob login(SessionBlob blob, String name, String password) throws NotFoundException, LoadBalancerTimeoutException","name":"login","type":"SessionBlob","javadoc":"\r\n   * Login if name and pw are correct.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @param name\r\n   *          username\r\n   * @param password\r\n   *          user password\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return SessionBlob with login information if login was successful\r\n   "},{"fullQualified":"public static SessionBlob logout(SessionBlob blob) throws NotFoundException, LoadBalancerTimeoutException","name":"logout","type":"SessionBlob","javadoc":"\r\n   * Logs user out.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return SessionBlob without user information\r\n   "},{"fullQualified":"public static boolean isLoggedIn(SessionBlob blob) throws NotFoundException, LoadBalancerTimeoutException","name":"isLoggedIn","type":"boolean","javadoc":"\r\n   * Checks if user is logged in.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return true if user is logged in\r\n   "},{"fullQualified":"public static SessionBlob addProductToCart(SessionBlob blob, long pid) throws NotFoundException, LoadBalancerTimeoutException","name":"addProductToCart","type":"SessionBlob","javadoc":"\r\n   * Adds product to cart. if the item is already in the cart, the quantity is\r\n   * increased.\r\n   * \r\n   * @param blob\r\n   *          SessionBlob\r\n   * @param pid\r\n   *          ProductId\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return Sessionblob containing product\r\n   "},{"fullQualified":"public static SessionBlob removeProductFromCart(SessionBlob blob, long pid) throws NotFoundException, LoadBalancerTimeoutException","name":"removeProductFromCart","type":"SessionBlob","javadoc":"\r\n   * Removes product from cart.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          productid\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return Sessionblob without product\r\n   "},{"fullQualified":"public static SessionBlob updateQuantity(SessionBlob blob, long pid, int quantity) throws NotFoundException, LoadBalancerTimeoutException","name":"updateQuantity","type":"SessionBlob","javadoc":"\r\n   * Updates quantity of item in cart.\r\n   * \r\n   * @param blob\r\n   *          Sessionblob\r\n   * @param pid\r\n   *          productid of item\r\n   * @param quantity\r\n   *          target quantity\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws LoadBalancerTimeoutException\r\n   *           On receiving the 408 status code and on repeated load balancer\r\n   *           socket timeouts.\r\n   * @return Sessionblob with updated quantity\r\n   "}],"allConstructors":[{"identifier":"private LoadBalancedStoreOperations()","javadocComment":null}]},{"name":"NonBalancedCRUDOperations","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.NonBalancedCRUDOperations","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Sends an Entity to be created \"as new\" by the receiving service.\r\n   * \r\n   * @param entity\r\n   *          The new entity to create. ID may remain unset, it will be ignored by\r\n   *          target service.\r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return The new ID of the created entity. Target service creates a new ID,\r\n   *         any passed ID is ignored. Returns -1L if creation failed. Returns 0\r\n   *         if creation worked, but ID remains unkown.\r\n   ","lineNumber":48,"isOrphan":false},{"type":"LineComment","text":" If resource was created successfully","lineNumber":71,"isOrphan":false},{"type":"LineComment","text":" check if response an Id; if yes: return the id","lineNumber":74,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Sends an Entity to be updated using the values of the provided entity. Note\r\n   * that not all values may be used by the receiving service. The values used\r\n   * depend on which changes are allowed in the domain model.\r\n   * \r\n   * @param id\r\n   *          The id of the entity to update. Ids stored within the entity are\r\n   *          ignored.\r\n   * @param entity\r\n   *          The entity to be updated. Entity is matched using its ID.\r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return True, if update succeeded. False, otherwise.\r\n   ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Deletes the entity at the target id.\r\n   * \r\n   * @param id\r\n   *          The ID of the entity to delete.\r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return True, if deletion succeeded; false otherwise.\r\n   ","lineNumber":130,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns the entity with the specified id. Returns null if it does not exist.\r\n   * \r\n   * @param id\r\n   *          Id of the entity to find.\r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return The entity; null if it does not exist.\r\n   ","lineNumber":164,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns a list of Entities of the relevant type.\r\n   * \r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param startIndex\r\n   *          The index of the first entity to return (index, not ID!). -1, if you\r\n   *          don't want to set an index.\r\n   * @param limit\r\n   *          Maximum amount of entities to return. -1, for no max.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return List of entities; empty list if non were found.\r\n   ","lineNumber":201,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns a list of Entities of the relevant type after filtering using a path\r\n   * param query. Example: \"category\", 2, 1, 3 will return 3 items in Category\r\n   * with ID 2, beginning from item with index 1 (skipping item 0). Note that the\r\n   * AbstractCRUDEndpoint does not offer this feature by default.\r\n   * \r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param filterURI\r\n   *          Name of the objects to filter for. E.g., \"category\".\r\n   * @param filterId\r\n   *          Id of the Object to filter for. E.g, 2\r\n   * @param startIndex\r\n   *          The index of the first entity to return (index, not ID!). -1, if you\r\n   *          don't want to set an index.\r\n   * @param limit\r\n   *          Maximum amount of entities to return. -1, for no max.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return List of entities; empty list if non were found.\r\n   ","lineNumber":250,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns an Entity of the relevant type by using a unique non-primary-key\r\n   * property. Example: Get user with user name. Note that the\r\n   * AbstractCRUDEndpoint does not offer this feature by default.\r\n   * \r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param propertyURI\r\n   *          Name of the property. E.g., \"name\".\r\n   * @param propertyValue\r\n   *          Value of the property, e.g., \"user1\".\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return The entity; null if it does not exist.\r\n   ","lineNumber":304,"isOrphan":false},{"type":"LineComment","text":" This happens if no entity was found","lineNumber":332,"isOrphan":true}],"allMethods":[{"fullQualified":"public static long sendEntityForCreation(RESTClient<T> client, T entity) throws NotFoundException, TimeoutException","name":"sendEntityForCreation","type":"long","javadoc":"\r\n   * Sends an Entity to be created \"as new\" by the receiving service.\r\n   * \r\n   * @param entity\r\n   *          The new entity to create. ID may remain unset, it will be ignored by\r\n   *          target service.\r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return The new ID of the created entity. Target service creates a new ID,\r\n   *         any passed ID is ignored. Returns -1L if creation failed. Returns 0\r\n   *         if creation worked, but ID remains unkown.\r\n   "},{"fullQualified":"public static boolean sendEntityForUpdate(RESTClient<T> client, long id, T entity) throws NotFoundException, TimeoutException","name":"sendEntityForUpdate","type":"boolean","javadoc":"\r\n   * Sends an Entity to be updated using the values of the provided entity. Note\r\n   * that not all values may be used by the receiving service. The values used\r\n   * depend on which changes are allowed in the domain model.\r\n   * \r\n   * @param id\r\n   *          The id of the entity to update. Ids stored within the entity are\r\n   *          ignored.\r\n   * @param entity\r\n   *          The entity to be updated. Entity is matched using its ID.\r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return True, if update succeeded. False, otherwise.\r\n   "},{"fullQualified":"public static boolean deleteEntity(RESTClient<T> client, long id) throws NotFoundException, TimeoutException","name":"deleteEntity","type":"boolean","javadoc":"\r\n   * Deletes the entity at the target id.\r\n   * \r\n   * @param id\r\n   *          The ID of the entity to delete.\r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return True, if deletion succeeded; false otherwise.\r\n   "},{"fullQualified":"public static T getEntity(RESTClient<T> client, long id) throws NotFoundException, TimeoutException","name":"getEntity","type":"T","javadoc":"\r\n   * Returns the entity with the specified id. Returns null if it does not exist.\r\n   * \r\n   * @param id\r\n   *          Id of the entity to find.\r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return The entity; null if it does not exist.\r\n   "},{"fullQualified":"public static List<T> getEntities(RESTClient<T> client, int startIndex, int limit) throws NotFoundException, TimeoutException","name":"getEntities","type":"List<T>","javadoc":"\r\n   * Returns a list of Entities of the relevant type.\r\n   * \r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param startIndex\r\n   *          The index of the first entity to return (index, not ID!). -1, if you\r\n   *          don't want to set an index.\r\n   * @param limit\r\n   *          Maximum amount of entities to return. -1, for no max.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return List of entities; empty list if non were found.\r\n   "},{"fullQualified":"public static List<T> getEntities(RESTClient<T> client, String filterURI, long filterId, int startIndex, int limit) throws NotFoundException, TimeoutException","name":"getEntities","type":"List<T>","javadoc":"\r\n   * Returns a list of Entities of the relevant type after filtering using a path\r\n   * param query. Example: \"category\", 2, 1, 3 will return 3 items in Category\r\n   * with ID 2, beginning from item with index 1 (skipping item 0). Note that the\r\n   * AbstractCRUDEndpoint does not offer this feature by default.\r\n   * \r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param filterURI\r\n   *          Name of the objects to filter for. E.g., \"category\".\r\n   * @param filterId\r\n   *          Id of the Object to filter for. E.g, 2\r\n   * @param startIndex\r\n   *          The index of the first entity to return (index, not ID!). -1, if you\r\n   *          don't want to set an index.\r\n   * @param limit\r\n   *          Maximum amount of entities to return. -1, for no max.\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return List of entities; empty list if non were found.\r\n   "},{"fullQualified":"public static T getEntityWithProperty(RESTClient<T> client, String propertyURI, String propertyValue) throws NotFoundException, TimeoutException","name":"getEntityWithProperty","type":"T","javadoc":"\r\n   * Returns an Entity of the relevant type by using a unique non-primary-key\r\n   * property. Example: Get user with user name. Note that the\r\n   * AbstractCRUDEndpoint does not offer this feature by default.\r\n   * \r\n   * @param client\r\n   *          The REST client to use.\r\n   * @param propertyURI\r\n   *          Name of the property. E.g., \"name\".\r\n   * @param propertyValue\r\n   *          Value of the property, e.g., \"user1\".\r\n   * @param <T>\r\n   *          Type of entity to handle.\r\n   * @throws NotFoundException\r\n   *           If 404 was returned.\r\n   * @throws TimeoutException\r\n   *           If 408 was returned.\r\n   * @return The entity; null if it does not exist.\r\n   "}],"allConstructors":[{"identifier":"private NonBalancedCRUDOperations()","javadocComment":null}]},{"name":"ResponseWrapper","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.ResponseWrapper","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * Hide default constructor.\r\n   ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Hook for monitoring.\r\n   *\r\n   * @param response\r\n   *          response\r\n   * @return response response\r\n   ","lineNumber":35,"isOrphan":false},{"type":"LineComment","text":" eoi with incrementAndRecall","lineNumber":98,"isOrphan":true},{"type":"LineComment","text":" Extract session id","lineNumber":56,"isOrphan":false},{"type":"LineComment","text":" Extract EOI","lineNumber":62,"isOrphan":false},{"type":"LineComment","text":" Extract ESS","lineNumber":71,"isOrphan":false},{"type":"LineComment","text":" Extract trace id","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" EOI of this execution","lineNumber":91,"isOrphan":false},{"type":"LineComment","text":" ESS of this execution","lineNumber":92,"isOrphan":false},{"type":"LineComment","text":" Store thread-local values","lineNumber":95,"isOrphan":false},{"type":"LineComment","text":" this execution has EOI=eoi; next execution will get","lineNumber":97,"isOrphan":false},{"type":"LineComment","text":" this execution has ESS=ess","lineNumber":99,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Response wrap(Response response)","name":"wrap","type":"Response","javadoc":"\r\n   * Hook for monitoring.\r\n   *\r\n   * @param response\r\n   *          response\r\n   * @return response response\r\n   "}],"allConstructors":[{"identifier":"private ResponseWrapper()","javadocComment":"\r\n   * Hide default constructor.\r\n   "}]},{"name":"RestUtil","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.RestUtil","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * hides constructor.\r\n   ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Throw common exceptions.\r\n   * @param responseWithStatus response\r\n   * @throws NotFoundException error 404\r\n   * @throws LoadBalancerTimeoutException timeout error\r\n   ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Read entity or return null-.\r\n\t * @param r external call response\r\n\t * @param entityClass class of object to load\r\n   * @param <T> class of object to be loaded\r\n\t * @return entity or null\r\n\t ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * reads entity, throws potential errors and closes the response.\r\n\t * @param responseWithStatus response \r\n\t * @param entityClass class of object to be loaded\r\n\t * @param <T> class of object to be loaded\r\n\t * @return entity\r\n\t ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Special case for orders.\r\n   * @param r response \r\n   * @return List of orders\r\n   ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Special case for products.\r\n\t * @param r response\r\n\t * @return List of products\r\n\t ","lineNumber":98,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void throwCommonExceptions(Response responseWithStatus) throws NotFoundException, LoadBalancerTimeoutException","name":"throwCommonExceptions","type":"void","javadoc":"\r\n   * Throw common exceptions.\r\n   * @param responseWithStatus response\r\n   * @throws NotFoundException error 404\r\n   * @throws LoadBalancerTimeoutException timeout error\r\n   "},{"fullQualified":"public static T readEntityOrNull(Response r, Class<T> entityClass)","name":"readEntityOrNull","type":"T","javadoc":"\r\n\t * Read entity or return null-.\r\n\t * @param r external call response\r\n\t * @param entityClass class of object to load\r\n   * @param <T> class of object to be loaded\r\n\t * @return entity or null\r\n\t "},{"fullQualified":"public static T readThrowAndOrClose(Response responseWithStatus, Class<T> entityClass)","name":"readThrowAndOrClose","type":"T","javadoc":"\r\n\t * reads entity, throws potential errors and closes the response.\r\n\t * @param responseWithStatus response \r\n\t * @param entityClass class of object to be loaded\r\n\t * @param <T> class of object to be loaded\r\n\t * @return entity\r\n\t "},{"fullQualified":"public static List<Order> readListThrowAndOrCloseOrder(Response r)","name":"readListThrowAndOrCloseOrder","type":"List<Order>","javadoc":"\r\n   * Special case for orders.\r\n   * @param r response \r\n   * @return List of orders\r\n   "},{"fullQualified":"public static List<Product> readListThrowAndOrCloseProduct(Response r)","name":"readListThrowAndOrCloseProduct","type":"List<Product>","javadoc":"\r\n\t * Special case for products.\r\n\t * @param r response\r\n\t * @return List of products\r\n\t "}],"allConstructors":[{"identifier":"private RestUtil()","javadocComment":"\r\n   * hides constructor.\r\n   "}]},{"name":"TrackingFilter","fullyQualifiedName":"tools.descartes.teastore.registryclient.rest.TrackingFilter","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * empty initialization method.\r\n   *\r\n   * @param filterConfig configuration of filter\r\n   * @throws ServletException servletException\r\n   ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Filter method that appends tracking id.\r\n   *\r\n   * @param request  request\r\n   * @param response response\r\n   * @param chain    filter chain\r\n   * @throws IOException      ioException\r\n   * @throws ServletException servletException\r\n   ","lineNumber":51,"isOrphan":false},{"type":"LineComment","text":" LOG.info(\"Will continue without sending back reponse header\");","lineNumber":83,"isOrphan":false},{"type":"LineComment","text":" next operation is ess + 1","lineNumber":86,"isOrphan":false},{"type":"LineComment","text":" Extract session id","lineNumber":95,"isOrphan":false},{"type":"LineComment","text":" Extract EOI","lineNumber":101,"isOrphan":false},{"type":"LineComment","text":" Extract ESS","lineNumber":110,"isOrphan":false},{"type":"LineComment","text":" Extract trace id","lineNumber":119,"isOrphan":false},{"type":"LineComment","text":" EOI of this execution","lineNumber":130,"isOrphan":false},{"type":"LineComment","text":" ESS of this execution","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":" Store thread-local values","lineNumber":134,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Teardown method.\r\n   ","lineNumber":158,"isOrphan":false}],"allMethods":[{"fullQualified":"public void init(FilterConfig filterConfig) throws ServletException","name":"init","type":"void","javadoc":"\r\n   * empty initialization method.\r\n   *\r\n   * @param filterConfig configuration of filter\r\n   * @throws ServletException servletException\r\n   "},{"fullQualified":"public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException","name":"doFilter","type":"void","javadoc":"\r\n   * Filter method that appends tracking id.\r\n   *\r\n   * @param request  request\r\n   * @param response response\r\n   * @param chain    filter chain\r\n   * @throws IOException      ioException\r\n   * @throws ServletException servletException\r\n   "},{"fullQualified":"public void destroy()","name":"destroy","type":"void","javadoc":"\r\n   * Teardown method.\r\n   "}],"allConstructors":[]},{"name":"StartupCallback","fullyQualifiedName":"tools.descartes.teastore.registryclient.StartupCallback","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * This function is called to trigger callback.\r\n\t ","lineNumber":22,"isOrphan":false}],"allMethods":[{"fullQualified":"public void callback()","name":"callback","type":"void","javadoc":"\r\n\t * This function is called to trigger callback.\r\n\t "}],"allConstructors":[]},{"name":"StartupCallbackTask","fullyQualifiedName":"tools.descartes.teastore.registryclient.StartupCallbackTask","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Constructor.\r\n\t * @param requestedService service\r\n\t * @param callback callback object\r\n\t * @param myService service\r\n\t ","lineNumber":22,"isOrphan":false}],"allMethods":[{"fullQualified":"public void run()","name":"run","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public StartupCallbackTask(Service requestedService, StartupCallback callback, Service myService)","javadocComment":"\r\n\t * Constructor.\r\n\t * @param requestedService service\r\n\t * @param callback callback object\r\n\t * @param myService service\r\n\t "}]},{"name":"Tracing","fullyQualifiedName":"tools.descartes.teastore.registryclient.tracing.Tracing","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n   * This function is used to create an Tracer instance to be used as the\r\n   * GlobalTracer.\r\n   *\r\n   * @param service is usually the name of the service\r\n   * @return Tracer intended to be used as GlobalTracer\r\n   ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * This function is used to inject the current span context into the request to\r\n   * be made.\r\n   *\r\n   * @param requestBuilder The requestBuilder object that gets injected\r\n   ","lineNumber":47,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Overloaded function used to extract span information out of an\r\n   * HttpServletRequest instance.\r\n   *\r\n   * @param request is the HttpServletRequest isntance with the potential span\r\n   *                informations\r\n   * @return Scope containing the extracted span marked as active. Can be used\r\n   *         with try-with-resource construct\r\n   ","lineNumber":61,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Overloaded function used to extract span information out of an HttpHeaders\r\n   * instance.\r\n   *\r\n   * @param httpHeaders is the HttpHeaders instance with the potential span\r\n   *                    informations\r\n   * @return Scope containing the extracted span marked as active. Can be used\r\n   *         with try-with-resource construct\r\n   ","lineNumber":78,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Helper method to extract and build the active span out of Map containing the\r\n   * processed headers.\r\n   *\r\n   * @param headers is the Map of the processed headers\r\n   * @return Scope containing the extracted span marked as active. Can be used\r\n   *         with try-with-resource construct\r\n   ","lineNumber":95,"isOrphan":false},{"type":"JavadocComment","text":"\r\n   * Returns a TextMap Adapter for Invocation.Builder instance.\r\n   *\r\n   * @param builder is the construct where the span information should be injected\r\n   *                to\r\n   * @return the TextMap adapter which can be used for injection\r\n   ","lineNumber":117,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Tracer init(String service)","name":"init","type":"Tracer","javadoc":"\r\n   * This function is used to create an Tracer instance to be used as the\r\n   * GlobalTracer.\r\n   *\r\n   * @param service is usually the name of the service\r\n   * @return Tracer intended to be used as GlobalTracer\r\n   "},{"fullQualified":"public static void inject(Invocation.Builder requestBuilder)","name":"inject","type":"void","javadoc":"\r\n   * This function is used to inject the current span context into the request to\r\n   * be made.\r\n   *\r\n   * @param requestBuilder The requestBuilder object that gets injected\r\n   "},{"fullQualified":"public static Scope extractCurrentSpan(HttpServletRequest request)","name":"extractCurrentSpan","type":"Scope","javadoc":"\r\n   * Overloaded function used to extract span information out of an\r\n   * HttpServletRequest instance.\r\n   *\r\n   * @param request is the HttpServletRequest isntance with the potential span\r\n   *                informations\r\n   * @return Scope containing the extracted span marked as active. Can be used\r\n   *         with try-with-resource construct\r\n   "},{"fullQualified":"public static Scope extractCurrentSpan(HttpHeaders httpHeaders)","name":"extractCurrentSpan","type":"Scope","javadoc":"\r\n   * Overloaded function used to extract span information out of an HttpHeaders\r\n   * instance.\r\n   *\r\n   * @param httpHeaders is the HttpHeaders instance with the potential span\r\n   *                    informations\r\n   * @return Scope containing the extracted span marked as active. Can be used\r\n   *         with try-with-resource construct\r\n   "},{"fullQualified":"private static Scope buildSpanFromHeaders(Map<String, String> headers)","name":"buildSpanFromHeaders","type":"Scope","javadoc":"\r\n   * Helper method to extract and build the active span out of Map containing the\r\n   * processed headers.\r\n   *\r\n   * @param headers is the Map of the processed headers\r\n   * @return Scope containing the extracted span marked as active. Can be used\r\n   *         with try-with-resource construct\r\n   "},{"fullQualified":"public static TextMap requestBuilderCarrier(final Invocation.Builder builder)","name":"requestBuilderCarrier","type":"TextMap","javadoc":"\r\n   * Returns a TextMap Adapter for Invocation.Builder instance.\r\n   *\r\n   * @param builder is the construct where the span information should be injected\r\n   *                to\r\n   * @return the TextMap adapter which can be used for injection\r\n   "}],"allConstructors":[{"identifier":"private Tracing()","javadocComment":null}]},{"name":"AbstractCRUDEndpoint","fullyQualifiedName":"tools.descartes.teastore.registryclient.util.AbstractCRUDEndpoint","isInterface":false,"codeComments":[{"type":"LineComment","text":"This is overwritten by inheritance","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Create a new entity by copying the passed entity. Any passed IDs are always ignored.\r\n\t * A new ID will be created.\r\n\t * @param entity Template for the new entity.\r\n\t * @return A new entity with the initial values of the passed template.\r\n\t ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Create a new entity (usually by passing this on to persistence).\r\n\t * Copy the values of all Attributes of entity to the new Entity, EXEPT the ID.\r\n\t * Create a new ID, write it to the new entity and return it.\r\n\t * @param entity Entity to copy and create as new with a new ID.\r\n\t * @return The new ID. Also write this new ID to the new entity.\r\n\t ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Retreive and entity with the provided ID.\r\n\t * @param id ID of the entity to find.\r\n\t * @return A Response containing the entity.\r\n\t ","lineNumber":64,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Find the entity with the given ID and return it. Return null if none was found.\r\n\t * @param id The ID of the Entity to find.\r\n\t * @return The retreived Entity. null, if no entity was found.\r\n\t ","lineNumber":82,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Return a list of all entities starting at the startIndex_th entity.\r\n\t * Return maxResultCount entities or fewer if fewer exist.\r\n\t * Negative or 0 startIndexes should result in the startIndex being ignored.\r\n\t * @param startPosition The index to start. Negative or null startIndex starts returning at the beginning.\r\n\t * @param maxResult Max amount of entities to return. Negative or null maxResultCount: return all.\r\n\t * @return List of all entities within the provided range. Returns an empty list for no matches\r\n\t ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Return a list of all entities starting at the startIndex_th entity.\r\n\t * Return maxResultCount entities or fewer if fewer exist.\r\n\t * Negative or 0 startIndexes should result in the startIndex being ignored.\r\n\t * Negative maxResultCounts should result in all results from startIndex being returned.\r\n\t * @param startIndex The index to start. Negative startIndex starts returning at the beginning.\r\n\t * @param maxResultCount Max amount of entities to return. Negative maxResultCount: return all.\r\n\t * @return List of all entities within the provided range. Return an empty list for no matches.\r\n\t ","lineNumber":104,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Update the entity with ID id with the attributes of the passed entity.\r\n\t * You are free to choose for which attributes you allow updates and which attributes to ignore.\r\n\t * Will always ignore the ID in the passed entity and use the separate ID instead.\r\n\t * @param id The id of the entity to update.\r\n\t * @param entity The values of the entity to update.\r\n\t * @return Status Code 200 if update succeeded, 404 if it didn't.\r\n\t ","lineNumber":115,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Update the entity with ID id with the attributes of the passed entity.\r\n\t * You are free to choose for which attributes you allow updates and which attributes to ignore.\r\n\t * Note the the ID passed in the entity itself must ALWAYS be ignored.\r\n\t * @param id The id of the entity to update.\r\n\t * @param entity The values of the entity to update.\r\n\t * @return True, if a matching entity was found and updated. False, if the update failed.\r\n\t ","lineNumber":137,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Delete the entity with ID id.\r\n\t * @param id The id of the entity to delete.\r\n\t * @return Status Code 200 if delete succeeded, 404 if it didn't.\r\n\t ","lineNumber":147,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Delete the entity with ID id.\r\n\t * @param id The id of the entity to delete.\r\n\t * @return True, if a matching entity was found and deleted. False, if no entity was found or if no delte occured.\r\n\t ","lineNumber":163,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Parses an int query param and catches errors. Returns -1 on errors or missing params.\r\n\t * @param queryArg The query param to parse.\r\n\t * @return -1 on errors. The query param otherwise.\r\n\t ","lineNumber":170,"isOrphan":false}],"allMethods":[{"fullQualified":"public Response create(final T entity)","name":"create","type":"Response","javadoc":"\r\n\t * Create a new entity by copying the passed entity. Any passed IDs are always ignored.\r\n\t * A new ID will be created.\r\n\t * @param entity Template for the new entity.\r\n\t * @return A new entity with the initial values of the passed template.\r\n\t "},{"fullQualified":"protected abstract long createEntity(final T entity)","name":"createEntity","type":"long","javadoc":"\r\n\t * Create a new entity (usually by passing this on to persistence).\r\n\t * Copy the values of all Attributes of entity to the new Entity, EXEPT the ID.\r\n\t * Create a new ID, write it to the new entity and return it.\r\n\t * @param entity Entity to copy and create as new with a new ID.\r\n\t * @return The new ID. Also write this new ID to the new entity.\r\n\t "},{"fullQualified":"public Response findById(@PathParam(\"id\") final Long id)","name":"findById","type":"Response","javadoc":"\r\n\t * Retreive and entity with the provided ID.\r\n\t * @param id ID of the entity to find.\r\n\t * @return A Response containing the entity.\r\n\t "},{"fullQualified":"protected abstract T findEntityById(final long id)","name":"findEntityById","type":"T","javadoc":"\r\n\t * Find the entity with the given ID and return it. Return null if none was found.\r\n\t * @param id The ID of the Entity to find.\r\n\t * @return The retreived Entity. null, if no entity was found.\r\n\t "},{"fullQualified":"public List<T> listAll(@QueryParam(\"start\") final Integer startPosition, @QueryParam(\"max\") final Integer maxResult)","name":"listAll","type":"List<T>","javadoc":"\r\n\t * Return a list of all entities starting at the startIndex_th entity.\r\n\t * Return maxResultCount entities or fewer if fewer exist.\r\n\t * Negative or 0 startIndexes should result in the startIndex being ignored.\r\n\t * @param startPosition The index to start. Negative or null startIndex starts returning at the beginning.\r\n\t * @param maxResult Max amount of entities to return. Negative or null maxResultCount: return all.\r\n\t * @return List of all entities within the provided range. Returns an empty list for no matches\r\n\t "},{"fullQualified":"protected abstract List<T> listAllEntities(final int startIndex, final int maxResultCount)","name":"listAllEntities","type":"List<T>","javadoc":"\r\n\t * Return a list of all entities starting at the startIndex_th entity.\r\n\t * Return maxResultCount entities or fewer if fewer exist.\r\n\t * Negative or 0 startIndexes should result in the startIndex being ignored.\r\n\t * Negative maxResultCounts should result in all results from startIndex being returned.\r\n\t * @param startIndex The index to start. Negative startIndex starts returning at the beginning.\r\n\t * @param maxResultCount Max amount of entities to return. Negative maxResultCount: return all.\r\n\t * @return List of all entities within the provided range. Return an empty list for no matches.\r\n\t "},{"fullQualified":"public Response update(@PathParam(\"id\") Long id, final T entity)","name":"update","type":"Response","javadoc":"\r\n\t * Update the entity with ID id with the attributes of the passed entity.\r\n\t * You are free to choose for which attributes you allow updates and which attributes to ignore.\r\n\t * Will always ignore the ID in the passed entity and use the separate ID instead.\r\n\t * @param id The id of the entity to update.\r\n\t * @param entity The values of the entity to update.\r\n\t * @return Status Code 200 if update succeeded, 404 if it didn't.\r\n\t "},{"fullQualified":"protected abstract boolean updateEntity(long id, final T entity)","name":"updateEntity","type":"boolean","javadoc":"\r\n\t * Update the entity with ID id with the attributes of the passed entity.\r\n\t * You are free to choose for which attributes you allow updates and which attributes to ignore.\r\n\t * Note the the ID passed in the entity itself must ALWAYS be ignored.\r\n\t * @param id The id of the entity to update.\r\n\t * @param entity The values of the entity to update.\r\n\t * @return True, if a matching entity was found and updated. False, if the update failed.\r\n\t "},{"fullQualified":"public Response deleteById(@PathParam(\"id\") final Long id)","name":"deleteById","type":"Response","javadoc":"\r\n\t * Delete the entity with ID id.\r\n\t * @param id The id of the entity to delete.\r\n\t * @return Status Code 200 if delete succeeded, 404 if it didn't.\r\n\t "},{"fullQualified":"protected abstract boolean deleteEntity(long id)","name":"deleteEntity","type":"boolean","javadoc":"\r\n\t * Delete the entity with ID id.\r\n\t * @param id The id of the entity to delete.\r\n\t * @return True, if a matching entity was found and deleted. False, if no entity was found or if no delte occured.\r\n\t "},{"fullQualified":"protected int parseIntQueryParam(Integer queryArg)","name":"parseIntQueryParam","type":"int","javadoc":"\r\n\t * Parses an int query param and catches errors. Returns -1 on errors or missing params.\r\n\t * @param queryArg The query param to parse.\r\n\t * @return -1 on errors. The query param otherwise.\r\n\t "}],"allConstructors":[]},{"name":"NotFoundException","fullyQualifiedName":"tools.descartes.teastore.registryclient.util.NotFoundException","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * The corresponding HTTP error code.\r\n\t ","lineNumber":25,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Creates a new NotFoundException.\r\n\t ","lineNumber":32,"isOrphan":false}],"allMethods":[],"allConstructors":[{"identifier":"public NotFoundException()","javadocComment":"\r\n\t * Creates a new NotFoundException.\r\n\t "}]},{"name":"RESTClient","fullyQualifiedName":"tools.descartes.teastore.registryclient.util.RESTClient","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * Default and max size for connection pools. We estimate a good size by using the available processor count.\r\n\t ","lineNumber":43,"isOrphan":true},{"type":"JavadocComment","text":"\r\n\t * Default REST application path.\r\n\t ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Creates a new REST Client for an entity of Type T. The client interacts with a Server providing\r\n\t * CRUD functionalities\r\n\t * @param hostURL The url of the host. Common Pattern: \"http://[hostname]:[port]/servicename/\"\r\n\t * @param application The name of the rest application, usually {@link #DEFAULT_REST_APPLICATION} \"rest\" (no \"/\"!)\r\n\t * @param endpoint The name of the rest endpoint, typically the all lower case name of the entity in a plural form.\r\n\t * E.g., \"products\" for the entity \"Product\" (no \"/\"!)\r\n\t * @param entityClass Classtype of the Entitiy to send/receive. Note that the use of this Class type is\r\n\t * \t\t\topen for interpretation by the inheriting REST clients.\r\n\t ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Sets the global read timeout for all REST clients of this service.\r\n\t * @param readTimeout The read timeout in ms.\r\n\t ","lineNumber":149,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Sets the global connect timeout for all REST clients of this service.\r\n\t * @param connectTimeout The read timeout in ms.\r\n\t ","lineNumber":157,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Generic type of return lists.\r\n\t * @return Generic List type.\r\n\t ","lineNumber":165,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Class of entities to handle in REST Client.\r\n\t * @return Entity class.\r\n\t ","lineNumber":173,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * The service to use.\r\n\t * @return The web service.\r\n\t ","lineNumber":181,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Get the web target for sending requests directly to the endpoint.\r\n\t * @return The web target for the endpoint.\r\n\t ","lineNumber":189,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * URI of the REST Endpoint within the application.\r\n\t * @return The enpoint URI.\r\n\t ","lineNumber":197,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * URI of the rest application (usually \"rest\").\r\n\t * @return The application URI.\r\n\t ","lineNumber":205,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void setGlobalReadTimeout(int readTimeout)","name":"setGlobalReadTimeout","type":"void","javadoc":"\r\n\t * Sets the global read timeout for all REST clients of this service.\r\n\t * @param readTimeout The read timeout in ms.\r\n\t "},{"fullQualified":"public static void setGlobalConnectTimeout(int connectTimeout)","name":"setGlobalConnectTimeout","type":"void","javadoc":"\r\n\t * Sets the global connect timeout for all REST clients of this service.\r\n\t * @param connectTimeout The read timeout in ms.\r\n\t "},{"fullQualified":"public GenericType<List<T>> getGenericListType()","name":"getGenericListType","type":"GenericType<List<T>>","javadoc":"\r\n\t * Generic type of return lists.\r\n\t * @return Generic List type.\r\n\t "},{"fullQualified":"public Class<T> getEntityClass()","name":"getEntityClass","type":"Class<T>","javadoc":"\r\n\t * Class of entities to handle in REST Client.\r\n\t * @return Entity class.\r\n\t "},{"fullQualified":"public WebTarget getService()","name":"getService","type":"WebTarget","javadoc":"\r\n\t * The service to use.\r\n\t * @return The web service.\r\n\t "},{"fullQualified":"public WebTarget getEndpointTarget()","name":"getEndpointTarget","type":"WebTarget","javadoc":"\r\n\t * Get the web target for sending requests directly to the endpoint.\r\n\t * @return The web target for the endpoint.\r\n\t "},{"fullQualified":"public String getEndpointURI()","name":"getEndpointURI","type":"String","javadoc":"\r\n\t * URI of the REST Endpoint within the application.\r\n\t * @return The enpoint URI.\r\n\t "},{"fullQualified":"public String getApplicationURI()","name":"getApplicationURI","type":"String","javadoc":"\r\n\t * URI of the rest application (usually \"rest\").\r\n\t * @return The application URI.\r\n\t "}],"allConstructors":[{"identifier":"public RESTClient(String hostURL, String application, String endpoint, final Class<T> entityClass)","javadocComment":"\r\n\t * Creates a new REST Client for an entity of Type T. The client interacts with a Server providing\r\n\t * CRUD functionalities\r\n\t * @param hostURL The url of the host. Common Pattern: \"http://[hostname]:[port]/servicename/\"\r\n\t * @param application The name of the rest application, usually {@link #DEFAULT_REST_APPLICATION} \"rest\" (no \"/\"!)\r\n\t * @param endpoint The name of the rest endpoint, typically the all lower case name of the entity in a plural form.\r\n\t * E.g., \"products\" for the entity \"Product\" (no \"/\"!)\r\n\t * @param entityClass Classtype of the Entitiy to send/receive. Note that the use of this Class type is\r\n\t * \t\t\topen for interpretation by the inheriting REST clients.\r\n\t "}]},{"name":"TimeoutException","fullyQualifiedName":"tools.descartes.teastore.registryclient.util.TimeoutException","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\r\n\t * The corresponding HTTP error code.\r\n\t ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\r\n\t * Creates a new NotFoundException.\r\n\t ","lineNumber":32,"isOrphan":false}],"allMethods":[],"allConstructors":[{"identifier":"public TimeoutException()","javadocComment":"\r\n\t * Creates a new NotFoundException.\r\n\t "}]}]}