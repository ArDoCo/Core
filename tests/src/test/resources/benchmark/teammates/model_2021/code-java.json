{"id":"f2f18b8d-48f8-31c6-8062-1e1b456d88f6","classesAndInterfaces":[{"name":"DatastoreClient","fullyQualifiedName":"teammates.client.connector.DatastoreClient","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the Objectify instance.\n     ","lineNumber":19,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Performs the entire operation routine: setting up connection to the back-end,\n     * performing the operation itself, and tearing down the connection.\n     ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Performs the remote operation to the back-end.\n     ","lineNumber":54,"isOrphan":false}],"allMethods":[{"fullQualified":"protected Objectify ofy()","name":"ofy","type":"Objectify","javadoc":"\n     * Gets the Objectify instance.\n     "},{"fullQualified":"protected void doOperationRemotely()","name":"doOperationRemotely","type":"void","javadoc":"\n     * Performs the entire operation routine: setting up connection to the back-end,\n     * performing the operation itself, and tearing down the connection.\n     "},{"fullQualified":"protected abstract void doOperation()","name":"doOperation","type":"void","javadoc":"\n     * Performs the remote operation to the back-end.\n     "}],"allConstructors":[]},{"name":"DataBundleRegenerator","fullyQualifiedName":"teammates.client.scripts.DataBundleRegenerator","isInterface":false,"codeComments":[{"type":"LineComment","text":" script-like, not meant to be instantiated","lineNumber":26,"isOrphan":true}],"allMethods":[{"fullQualified":"private static void regenerateDataBundleJson(File folder) throws IOException","name":"regenerateDataBundleJson","type":"void","javadoc":null},{"fullQualified":"private static void regenerateAllDataBundleJson() throws IOException","name":"regenerateAllDataBundleJson","type":"void","javadoc":null},{"fullQualified":"private static void regenerateSessionTemplateJson() throws IOException","name":"regenerateSessionTemplateJson","type":"void","javadoc":null},{"fullQualified":"private static void regenerateGenericJson(File file) throws IOException","name":"regenerateGenericJson","type":"void","javadoc":null},{"fullQualified":"private static void saveFile(String filePath, String content) throws IOException","name":"saveFile","type":"void","javadoc":null},{"fullQualified":"private static void regenerateWebsiteDataJson() throws IOException","name":"regenerateWebsiteDataJson","type":"void","javadoc":null},{"fullQualified":"public static void main(String[] args) throws IOException","name":"main","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private DataBundleRegenerator()","javadocComment":null}]},{"name":"DataMigrationEntitiesBaseScript","fullyQualifiedName":"teammates.client.scripts.DataMigrationEntitiesBaseScript","isInterface":false,"codeComments":[{"type":"LineComment","text":" 100 is the optimal batch size as there won't be too much time interval","lineNumber":43,"isOrphan":true},{"type":"LineComment","text":" between read and save (if transaction is not used)","lineNumber":44,"isOrphan":true},{"type":"LineComment","text":" cannot set number greater than 300","lineNumber":45,"isOrphan":true},{"type":"LineComment","text":" the folder where the cursor position and console output is saved as a file","lineNumber":40,"isOrphan":false},{"type":"LineComment","text":" see https://stackoverflow.com/questions/41499505/objectify-queries-setting-limit-above-300-does-not-work","lineNumber":46,"isOrphan":false},{"type":"LineComment","text":" Creates the folder that will contain the stored log.","lineNumber":49,"isOrphan":false},{"type":"LineComment","text":" buffer of entities to save","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the query for the entities that need data migration.\n     ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\n     * If true, the script will not perform actual data migration.\n     ","lineNumber":74,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether data migration is needed.\n     *\n     * <p>Causation: this method might be called in multiple threads if using transaction.</p>\n     ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Migrates the entity.\n     *\n     * <p>Causation: this method might be called in multiple threads if using transaction.</p>\n     ","lineNumber":86,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Determines whether the migration should be done in a transaction.\n     *\n     * <p>Transaction is useful for data consistency. However, there are some limitations on operations\n     * inside a transaction. In addition, the performance of the script will also be affected.\n     *\n     * @see <a href=\"https://cloud.google.com/datastore/docs/concepts/cloud-datastore-transactions#what_can_be_done_in_a_transaction\">What can be done in a transaction</a>\n     ","lineNumber":93,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Migrates the entity without transaction for better performance.\n     ","lineNumber":105,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Migrates the entity and counts the statistics.\n     ","lineNumber":112,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Migrates the entity in a transaction to ensure data consistency.\n     ","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":" the read place a \"lock\" on the object to migrate","lineNumber":136,"isOrphan":false},{"type":"LineComment","text":" even transaction is enabled, there is no need to use transaction in preview mode","lineNumber":141,"isOrphan":false},{"type":"LineComment","text":" migrate","lineNumber":178,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Stores the entity to save in a buffer and saves it later.\n     ","lineNumber":206,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Flushes the saving buffer by issuing Datastore save request.\n     ","lineNumber":216,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Saves the cursor position to a file so it can be used in the next run.\n     ","lineNumber":227,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Reads the cursor position from the saved file.\n     *\n     * @return cursor if the file can be properly decoded.\n     ","lineNumber":239,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the cursor position file.\n     ","lineNumber":254,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs a line and persists it to the disk.\n     ","lineNumber":261,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs an error and persists it to the disk.\n     ","lineNumber":277,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if {@code text} contains at least one of the {@code strings} or if {@code strings} is empty.\n     * If {@code text} is null, false is returned.\n     ","lineNumber":286,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the {@code string} has evidence of having been sanitized.\n     * A string is considered sanitized if it does not contain any of the chars '<', '>', '/', '\\\"', '\\'',\n     * and contains at least one of their sanitized equivalents or the sanitized equivalent of '&'.\n     *\n     * <p>Eg. \"No special characters\", \"{@code <p>&quot;with quotes&quot;</p>}\" are considered to be not sanitized.<br>\n     *     \"{@code &lt;p&gt; a p tag &lt;&#x2f;p&gt;}\" is considered to be sanitized.\n     * </p>\n     ","lineNumber":302,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the desanitized {@code string} if it is sanitized, otherwise returns the unchanged string.\n     ","lineNumber":317,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Recovers a html-sanitized string using {@link #sanitizeForHtml}\n     * to original encoding for appropriate display.<br>\n     * It restores encoding for < > \\ / ' &  <br>\n     * The method should only be used once on sanitized html\n     *\n     * @return recovered string\n     ","lineNumber":324,"isOrphan":false}],"allMethods":[{"fullQualified":"protected abstract Query<T> getFilterQuery()","name":"getFilterQuery","type":"Query<T>","javadoc":"\n     * Gets the query for the entities that need data migration.\n     "},{"fullQualified":"protected abstract boolean isPreview()","name":"isPreview","type":"boolean","javadoc":"\n     * If true, the script will not perform actual data migration.\n     "},{"fullQualified":"protected abstract boolean isMigrationNeeded(T entity)","name":"isMigrationNeeded","type":"boolean","javadoc":"\n     * Checks whether data migration is needed.\n     *\n     * <p>Causation: this method might be called in multiple threads if using transaction.</p>\n     "},{"fullQualified":"protected abstract void migrateEntity(T entity) throws Exception","name":"migrateEntity","type":"void","javadoc":"\n     * Migrates the entity.\n     *\n     * <p>Causation: this method might be called in multiple threads if using transaction.</p>\n     "},{"fullQualified":"protected boolean shouldUseTransaction()","name":"shouldUseTransaction","type":"boolean","javadoc":"\n     * Determines whether the migration should be done in a transaction.\n     *\n     * <p>Transaction is useful for data consistency. However, there are some limitations on operations\n     * inside a transaction. In addition, the performance of the script will also be affected.\n     *\n     * @see <a href=\"https://cloud.google.com/datastore/docs/concepts/cloud-datastore-transactions#what_can_be_done_in_a_transaction\">What can be done in a transaction</a>\n     "},{"fullQualified":"private void migrateWithoutTrx(T entity)","name":"migrateWithoutTrx","type":"void","javadoc":"\n     * Migrates the entity without transaction for better performance.\n     "},{"fullQualified":"private void doMigration(T entity)","name":"doMigration","type":"void","javadoc":"\n     * Migrates the entity and counts the statistics.\n     "},{"fullQualified":"private void migrateWithTrx(Key<T> entityKey)","name":"migrateWithTrx","type":"void","javadoc":"\n     * Migrates the entity in a transaction to ensure data consistency.\n     "},{"fullQualified":"protected void doOperation()","name":"doOperation","type":"void","javadoc":null},{"fullQualified":"protected void saveEntityDeferred(T entity)","name":"saveEntityDeferred","type":"void","javadoc":"\n     * Stores the entity to save in a buffer and saves it later.\n     "},{"fullQualified":"private void flushEntitiesSavingBuffer()","name":"flushEntitiesSavingBuffer","type":"void","javadoc":"\n     * Flushes the saving buffer by issuing Datastore save request.\n     "},{"fullQualified":"private void savePositionOfCursorToFile(Cursor cursor)","name":"savePositionOfCursorToFile","type":"void","javadoc":"\n     * Saves the cursor position to a file so it can be used in the next run.\n     "},{"fullQualified":"private Optional<Cursor> readPositionOfCursorFromFile()","name":"readPositionOfCursorFromFile","type":"Optional<Cursor>","javadoc":"\n     * Reads the cursor position from the saved file.\n     *\n     * @return cursor if the file can be properly decoded.\n     "},{"fullQualified":"private void deleteCursorPositionFile()","name":"deleteCursorPositionFile","type":"void","javadoc":"\n     * Deletes the cursor position file.\n     "},{"fullQualified":"protected void log(String logLine)","name":"log","type":"void","javadoc":"\n     * Logs a line and persists it to the disk.\n     "},{"fullQualified":"protected void logError(String logLine)","name":"logError","type":"void","javadoc":"\n     * Logs an error and persists it to the disk.\n     "},{"fullQualified":"private static boolean isTextContainingAny(String text, List<String> strings)","name":"isTextContainingAny","type":"boolean","javadoc":"\n     * Returns true if {@code text} contains at least one of the {@code strings} or if {@code strings} is empty.\n     * If {@code text} is null, false is returned.\n     "},{"fullQualified":" static boolean isSanitizedHtml(String string)","name":"isSanitizedHtml","type":"boolean","javadoc":"\n     * Returns true if the {@code string} has evidence of having been sanitized.\n     * A string is considered sanitized if it does not contain any of the chars '<', '>', '/', '\\\"', '\\'',\n     * and contains at least one of their sanitized equivalents or the sanitized equivalent of '&'.\n     *\n     * <p>Eg. \"No special characters\", \"{@code <p>&quot;with quotes&quot;</p>}\" are considered to be not sanitized.<br>\n     *     \"{@code &lt;p&gt; a p tag &lt;&#x2f;p&gt;}\" is considered to be sanitized.\n     * </p>\n     "},{"fullQualified":" static String desanitizeIfHtmlSanitized(String string)","name":"desanitizeIfHtmlSanitized","type":"String","javadoc":"\n     * Returns the desanitized {@code string} if it is sanitized, otherwise returns the unchanged string.\n     "},{"fullQualified":"private static String desanitizeFromHtml(String sanitizedString)","name":"desanitizeFromHtml","type":"String","javadoc":"\n     * Recovers a html-sanitized string using {@link #sanitizeForHtml}\n     * to original encoding for appropriate display.<br>\n     * It restores encoding for < > \\ / ' &  <br>\n     * The method should only be used once on sanitized html\n     *\n     * @return recovered string\n     "}],"allConstructors":[{"identifier":"public DataMigrationEntitiesBaseScript()","javadocComment":null}]},{"name":"DataMigrationForConstSumForceUnevenDistribution","fullyQualifiedName":"teammates.client.scripts.DataMigrationForConstSumForceUnevenDistribution","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<FeedbackQuestion> getFilterQuery()","name":"getFilterQuery","type":"Query<FeedbackQuestion>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(FeedbackQuestion question)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(FeedbackQuestion question)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForFeedbackSessionMismatchedTimezone","fullyQualifiedName":"teammates.client.scripts.DataMigrationForFeedbackSessionMismatchedTimezone","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<FeedbackSession> getFilterQuery()","name":"getFilterQuery","type":"Query<FeedbackSession>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(FeedbackSession session)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(FeedbackSession session)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForInstructorFeedbackResponseComments","fullyQualifiedName":"teammates.client.scripts.DataMigrationForInstructorFeedbackResponseComments","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<FeedbackResponseComment> getFilterQuery()","name":"getFilterQuery","type":"Query<FeedbackResponseComment>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(FeedbackResponseComment comment)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(FeedbackResponseComment comment)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForInstructorNullIsArchivedField","fullyQualifiedName":"teammates.client.scripts.DataMigrationForInstructorNullIsArchivedField","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<Instructor> getFilterQuery()","name":"getFilterQuery","type":"Query<Instructor>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(Instructor instructor)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(Instructor instructor)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForNullCommentGiverType","fullyQualifiedName":"teammates.client.scripts.DataMigrationForNullCommentGiverType","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<FeedbackResponseComment> getFilterQuery()","name":"getFilterQuery","type":"Query<FeedbackResponseComment>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(FeedbackResponseComment comment)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(FeedbackResponseComment comment)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForSampleGoogleIdInStudentAttributes","fullyQualifiedName":"teammates.client.scripts.DataMigrationForSampleGoogleIdInStudentAttributes","isInterface":false,"codeComments":[{"type":"LineComment","text":" Uncomment the google ID to be removed as necessary","lineNumber":22,"isOrphan":true},{"type":"LineComment","text":" sampleGoogleId = \"benny.c.tmms.sampleData\";","lineNumber":23,"isOrphan":true},{"type":"LineComment","text":" sampleGoogleId = \"charlie.d.tmms.sampleData\";","lineNumber":24,"isOrphan":true},{"type":"LineComment","text":" sampleGoogleId = \"danny.e.tmms.sampleData\";","lineNumber":25,"isOrphan":true},{"type":"LineComment","text":" sampleGoogleId = \"emma.f.tmms.sampleData\";","lineNumber":26,"isOrphan":true},{"type":"LineComment","text":" sampleGoogleId = \"francis.g.tmms.sampleData\";","lineNumber":27,"isOrphan":true},{"type":"LineComment","text":" sampleGoogleId = \"gene.h.tmms.sampleData\";","lineNumber":28,"isOrphan":true},{"type":"LineComment","text":" sampleGoogleId = \"teammates.demo.instructor\";","lineNumber":29,"isOrphan":true}],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<CourseStudent> getFilterQuery()","name":"getFilterQuery","type":"Query<CourseStudent>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(CourseStudent student)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(CourseStudent student)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForSanitizedDataInCourseAttributes","fullyQualifiedName":"teammates.client.scripts.DataMigrationForSanitizedDataInCourseAttributes","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<Course> getFilterQuery()","name":"getFilterQuery","type":"Query<Course>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(Course course)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(Course course)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public DataMigrationForSanitizedDataInCourseAttributes()","javadocComment":null}]},{"name":"DataMigrationForSanitizedDataInInstructorAttributes","fullyQualifiedName":"teammates.client.scripts.DataMigrationForSanitizedDataInInstructorAttributes","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<Instructor> getFilterQuery()","name":"getFilterQuery","type":"Query<Instructor>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(Instructor instructor)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(Instructor instructor)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public DataMigrationForSanitizedDataInInstructorAttributes()","javadocComment":null}]},{"name":"DataMigrationForSanitizedDataInStudentAttributes","fullyQualifiedName":"teammates.client.scripts.DataMigrationForSanitizedDataInStudentAttributes","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<CourseStudent> getFilterQuery()","name":"getFilterQuery","type":"Query<CourseStudent>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(CourseStudent student)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(CourseStudent student)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public DataMigrationForSanitizedDataInStudentAttributes()","javadocComment":null}]},{"name":"DataMigrationForSanitizedInstructorName","fullyQualifiedName":"teammates.client.scripts.DataMigrationForSanitizedInstructorName","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<Instructor> getFilterQuery()","name":"getFilterQuery","type":"Query<Instructor>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(Instructor instructor)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(Instructor instructor)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public DataMigrationForSanitizedInstructorName()","javadocComment":null}]},{"name":"DataMigrationForStudentsAndTeamsRecipientType","fullyQualifiedName":"teammates.client.scripts.DataMigrationForStudentsAndTeamsRecipientType","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<FeedbackQuestion> getFilterQuery()","name":"getFilterQuery","type":"Query<FeedbackQuestion>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(FeedbackQuestion question)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(FeedbackQuestion question)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForTeamNameInResponseGiver","fullyQualifiedName":"teammates.client.scripts.DataMigrationForTeamNameInResponseGiver","isInterface":false,"codeComments":[{"type":"LineComment","text":" Version 1: question has createdAt field","lineNumber":41,"isOrphan":true},{"type":"LineComment","text":" Instant earliestDate = TimeHelper.parseInstant(\"2015-11-30T16:00:00.00Z\");","lineNumber":42,"isOrphan":true},{"type":"LineComment","text":" return ofy().load().type(FeedbackQuestion.class)","lineNumber":43,"isOrphan":true},{"type":"LineComment","text":"         .filter(\"createdAt <=\", earliestDate)","lineNumber":44,"isOrphan":true},{"type":"LineComment","text":"         .order(\"-createdAt\");","lineNumber":45,"isOrphan":true},{"type":"LineComment","text":" Version 2: question does not have createdAt field","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" Version 1: question has createdAt field","lineNumber":59,"isOrphan":true},{"type":"LineComment","text":" return question.getGiverType() == FeedbackParticipantType.TEAMS;","lineNumber":60,"isOrphan":true},{"type":"LineComment","text":" Version 2: question does not have createdAt field","lineNumber":62,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args) throws IOException","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<FeedbackQuestion> getFilterQuery()","name":"getFilterQuery","type":"Query<FeedbackQuestion>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(FeedbackQuestion question)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(FeedbackQuestion question) throws EntityDoesNotExistException, InvalidParametersException, EntityAlreadyExistsException","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForTextQuestionDetailsFormat","fullyQualifiedName":"teammates.client.scripts.DataMigrationForTextQuestionDetailsFormat","isInterface":false,"codeComments":[{"type":"LineComment","text":" Old non-JSON format will encounter exception when GSON tries to parse it.","lineNumber":39,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args) throws IOException","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<FeedbackQuestion> getFilterQuery()","name":"getFilterQuery","type":"Query<FeedbackQuestion>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(FeedbackQuestion question)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(FeedbackQuestion question)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForTextQuestionRecommendedLength","fullyQualifiedName":"teammates.client.scripts.DataMigrationForTextQuestionRecommendedLength","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<FeedbackQuestion> getFilterQuery()","name":"getFilterQuery","type":"Query<FeedbackQuestion>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(FeedbackQuestion question)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(FeedbackQuestion question)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForUnencryptedKeyForInstructors","fullyQualifiedName":"teammates.client.scripts.DataMigrationForUnencryptedKeyForInstructors","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<Instructor> getFilterQuery()","name":"getFilterQuery","type":"Query<Instructor>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(Instructor instructor)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(Instructor instructor)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataMigrationForUnencryptedKeyForStudents","fullyQualifiedName":"teammates.client.scripts.DataMigrationForUnencryptedKeyForStudents","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<CourseStudent> getFilterQuery()","name":"getFilterQuery","type":"Query<CourseStudent>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(CourseStudent student)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(CourseStudent student)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GenerateUsageStatisticsObjects","fullyQualifiedName":"teammates.client.scripts.GenerateUsageStatisticsObjects","isInterface":false,"codeComments":[{"type":"LineComment","text":" Enough number of statistics for one whole month","lineNumber":19,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected void doOperation()","name":"doOperation","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GoogleIdMigrationBaseScript","fullyQualifiedName":"teammates.client.scripts.GoogleIdMigrationBaseScript","isInterface":false,"codeComments":[{"type":"LineComment","text":" update students and instructors","lineNumber":75,"isOrphan":true},{"type":"LineComment","text":" recreate account and student profile","lineNumber":94,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Checks whether the googleId of the {@code account} is needed to be migrated or not.\n     ","lineNumber":121,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates a new googleId based on the {@code oldAccount}.\n     ","lineNumber":126,"isOrphan":false}],"allMethods":[{"fullQualified":"protected Query<Account> getFilterQuery()","name":"getFilterQuery","type":"Query<Account>","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(Account account)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(Account oldAccount) throws Exception","name":"migrateEntity","type":"void","javadoc":null},{"fullQualified":"protected abstract boolean isMigrationOfGoogleIdNeeded(Account account)","name":"isMigrationOfGoogleIdNeeded","type":"boolean","javadoc":"\n     * Checks whether the googleId of the {@code account} is needed to be migrated or not.\n     "},{"fullQualified":"protected abstract String generateNewGoogleId(Account oldAccount)","name":"generateNewGoogleId","type":"String","javadoc":"\n     * Generates a new googleId based on the {@code oldAccount}.\n     "}],"allConstructors":[]},{"name":"IndexFeedbackSessionFields","fullyQualifiedName":"teammates.client.scripts.IndexFeedbackSessionFields","isInterface":false,"codeComments":[{"type":"LineComment","text":" Save without any update; this will build the previously non-existing indexes","lineNumber":33,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<FeedbackSession> getFilterQuery()","name":"getFilterQuery","type":"Query<FeedbackSession>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(FeedbackSession session)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(FeedbackSession session)","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ListActiveInstructors","fullyQualifiedName":"teammates.client.scripts.ListActiveInstructors","isInterface":false,"codeComments":[{"type":"LineComment","text":"2010/01/01","lineNumber":18,"isOrphan":false},{"type":"LineComment","text":"2021/02/01","lineNumber":22,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void doOperation()","name":"doOperation","type":"void","javadoc":null},{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null}],"allConstructors":[]},{"name":"MockCourseWithLargeResponseScript","fullyQualifiedName":"teammates.client.scripts.MockCourseWithLargeResponseScript","isInterface":false,"codeComments":[{"type":"LineComment","text":" For each student, the number of responses depends on:","lineNumber":37,"isOrphan":true},{"type":"LineComment","text":" Change the following params for different course setup","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":" number_of_students / number_of_teams * (per team feedback strategy)","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" Change the course ID to be recognizable","lineNumber":42,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void doOperation()","name":"doOperation","type":"void","javadoc":null},{"fullQualified":"private static Map<String, AccountAttributes> generateAccounts()","name":"generateAccounts","type":"Map<String,AccountAttributes>","javadoc":null},{"fullQualified":"private static Map<String, CourseAttributes> generateCourses()","name":"generateCourses","type":"Map<String,CourseAttributes>","javadoc":null},{"fullQualified":"private static Map<String, InstructorAttributes> generateInstructors()","name":"generateInstructors","type":"Map<String,InstructorAttributes>","javadoc":null},{"fullQualified":"private static Map<String, StudentAttributes> generateStudents()","name":"generateStudents","type":"Map<String,StudentAttributes>","javadoc":null},{"fullQualified":"private static Map<String, FeedbackSessionAttributes> generateFeedbackSessions()","name":"generateFeedbackSessions","type":"Map<String,FeedbackSessionAttributes>","javadoc":null},{"fullQualified":"private static Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions()","name":"generateFeedbackQuestions","type":"Map<String,FeedbackQuestionAttributes>","javadoc":null},{"fullQualified":"private static Map<String, FeedbackResponseAttributes> generateFeedbackResponses()","name":"generateFeedbackResponses","type":"Map<String,FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private static DataBundle generateDataBundle()","name":"generateDataBundle","type":"DataBundle","javadoc":null},{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private MockCourseWithLargeResponseScript()","javadocComment":null}]},{"name":"PopulateCourseSearchDocuments","fullyQualifiedName":"teammates.client.scripts.PopulateCourseSearchDocuments","isInterface":false,"codeComments":[{"type":"LineComment","text":" To change the boundary of the createdAt timestamp, uncomment the next line and insert the appropriate timestamp.","lineNumber":40,"isOrphan":true},{"type":"LineComment","text":" createdAtUpperBound = TimeHelper.parseInstant(\"2021-06-30T16:00:00.00Z\");","lineNumber":41,"isOrphan":true},{"type":"LineComment","text":" createdAtLowerBound = TimeHelper.parseInstant(\"2020-12-31T16:00:00.00Z\");","lineNumber":42,"isOrphan":false},{"type":"LineComment","text":" For final loop, migrate instructors","lineNumber":79,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected Query<Course> getFilterQuery()","name":"getFilterQuery","type":"Query<Course>","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected boolean isMigrationNeeded(Course course)","name":"isMigrationNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected void migrateEntity(Course course) throws Exception","name":"migrateEntity","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public PopulateCourseSearchDocuments()","javadocComment":null}]},{"name":"SingleAccountGoogleIdMigrationScript","fullyQualifiedName":"teammates.client.scripts.SingleAccountGoogleIdMigrationScript","isInterface":false,"codeComments":[{"type":"LineComment","text":" if the user uses his own email address to register Google Services, the googleId is his own email address","lineNumber":13,"isOrphan":true},{"type":"LineComment","text":" if the user registers a Google Account (e.g. 'alice@gmail.com'),","lineNumber":14,"isOrphan":true},{"type":"LineComment","text":" the googleId is the string before '@gmail.com' (e.g. 'alice')","lineNumber":15,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null},{"fullQualified":"protected boolean isPreview()","name":"isPreview","type":"boolean","javadoc":null},{"fullQualified":"protected Query<Account> getFilterQuery()","name":"getFilterQuery","type":"Query<Account>","javadoc":null},{"fullQualified":"protected boolean isMigrationOfGoogleIdNeeded(Account account)","name":"isMigrationOfGoogleIdNeeded","type":"boolean","javadoc":null},{"fullQualified":"protected String generateNewGoogleId(Account oldAccount)","name":"generateNewGoogleId","type":"String","javadoc":null}],"allConstructors":[]},{"name":"CursorIterator","fullyQualifiedName":"teammates.client.scripts.statistics.CursorIterator","isInterface":false,"codeComments":[{"type":"LineComment","text":" cannot set number greater than 300","lineNumber":18,"isOrphan":true},{"type":"LineComment","text":" see https://stackoverflow.com/questions/41499505/objectify-queries-setting-limit-above-300-does-not-work","lineNumber":19,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns an {@link Iterable} which iterates all the matched entities of the {@code query}.\n     ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Fetches entities in batches and puts them into the buffer.\n     ","lineNumber":40,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Iterable<T> iterate(Query<T> query)","name":"iterate","type":"Iterable<T>","javadoc":"\n     * Returns an {@link Iterable} which iterates all the matched entities of the {@code query}.\n     "},{"fullQualified":"private void batchFetching()","name":"batchFetching","type":"void","javadoc":"\n     * Fetches entities in batches and puts them into the buffer.\n     "},{"fullQualified":"public boolean hasNext()","name":"hasNext","type":"boolean","javadoc":null},{"fullQualified":"public T next()","name":"next","type":"T","javadoc":null}],"allConstructors":[{"identifier":" CursorIterator(Query<T> query)","javadocComment":null}]},{"name":"InstantAdapter","fullyQualifiedName":"teammates.client.scripts.statistics.FileStore.InstantAdapter","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonElement serialize(Instant instant, Type type, JsonSerializationContext context)","name":"serialize","type":"JsonElement","javadoc":null},{"fullQualified":"public Instant deserialize(JsonElement element, Type type, JsonDeserializationContext context)","name":"deserialize","type":"Instant","javadoc":null}],"allConstructors":[]},{"name":"CheckedFunction","fullyQualifiedName":"teammates.client.scripts.statistics.FileStore.CheckedFunction","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\n         * Applies this function to the given argument.\n         *\n         * @param t the function argument\n         * @return the function result\n         ","lineNumber":166,"isOrphan":false}],"allMethods":[{"fullQualified":" R apply(T t) throws Exception","name":"apply","type":"R","javadoc":"\n         * Applies this function to the given argument.\n         *\n         * @param t the function argument\n         * @return the function result\n         "}],"allConstructors":[]},{"name":"FileStore","fullyQualifiedName":"teammates.client.scripts.statistics.FileStore","isInterface":false,"codeComments":[{"type":"LineComment","text":" Creates the folder that will contain the stored data.","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" utility class","lineNumber":54,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Decrypts and parses the statistics bundle that is saved in the disk.\n     ","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":" parse metadata","lineNumber":61,"isOrphan":false},{"type":"LineComment","text":" parse institutesStats","lineNumber":70,"isOrphan":false},{"type":"LineComment","text":" construct bundle","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Encrypts and persists the statistics bundle to the disk.\n     ","lineNumber":87,"isOrphan":false},{"type":"LineComment","text":" save metadata","lineNumber":91,"isOrphan":false},{"type":"LineComment","text":" save institutesStats","lineNumber":95,"isOrphan":false},{"type":"JavadocComment","text":"\n     * An adapter for Gson to serialize {@link Instant} type.\n     ","lineNumber":135,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents a function that accepts one argument and produces a result.\n     *\n     * <p>Exception can be thrown from the function body.\n     *\n     * @param <T> the type of the input to the function\n     * @param <R> the type of the result of the function\n     ","lineNumber":155,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Applies this function to the given argument.\n         *\n         * @param t the function argument\n         * @return the function result\n         ","lineNumber":166,"isOrphan":false}],"allMethods":[{"fullQualified":"public static StatisticsBundle getStatisticsBundleFromFileIfPossible() throws Exception","name":"getStatisticsBundleFromFileIfPossible","type":"StatisticsBundle","javadoc":"\n     * Decrypts and parses the statistics bundle that is saved in the disk.\n     "},{"fullQualified":"public static void saveStatisticsBundleToFile(StatisticsBundle statisticsBundle) throws Exception","name":"saveStatisticsBundleToFile","type":"void","javadoc":"\n     * Encrypts and persists the statistics bundle to the disk.\n     "},{"fullQualified":"private static void saveEncryptedJsonToFile(String fileName, T object, Type typeOfObject) throws Exception","name":"saveEncryptedJsonToFile","type":"void","javadoc":null},{"fullQualified":"private static T parseEncryptedJsonFile(String fileName, CheckedFunction<JsonReader, T> parser) throws Exception","name":"parseEncryptedJsonFile","type":"T","javadoc":null},{"fullQualified":"private static Gson getSerializer()","name":"getSerializer","type":"Gson","javadoc":null}],"allConstructors":[{"identifier":"private FileStore()","javadocComment":null}]},{"name":"InstituteStats","fullyQualifiedName":"teammates.client.scripts.statistics.StatisticsBundle.InstituteStats","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public int getStudentTotal()","name":"getStudentTotal","type":"int","javadoc":null},{"fullQualified":"public int getInstructorTotal()","name":"getInstructorTotal","type":"int","javadoc":null}],"allConstructors":[]},{"name":"InstitutesStatsMetadata","fullyQualifiedName":"teammates.client.scripts.statistics.StatisticsBundle.InstitutesStatsMetadata","isInterface":false,"codeComments":[{"type":"LineComment","text":" time when TEAMMATES project begins","lineNumber":155,"isOrphan":false}],"allMethods":[],"allConstructors":[{"identifier":"public InstitutesStatsMetadata()","javadocComment":null}]},{"name":"StatisticsBundle","fullyQualifiedName":"teammates.client.scripts.statistics.StatisticsBundle","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the stats for a certain institute.\n     *\n     * @return a empty stats if institute is not found in the bundle.\n     ","lineNumber":21,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Adds a student {@code email} to the stats associated with the {@code institute}.\n     *\n     * <p>If the institute or email is from test data, ignore.\n     *\n     * <p>If the student email is already in the stats of the institute, ignore.\n     ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Adds a instructor {@code email} to the stats associated with the {@code institute}.\n     *\n     * <p>If the institute or email is from test data, ignore.\n     *\n     * <p>If the instructor email is already in the stats of the institute, ignore.\n     ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Determines if the {@code institute} or {@code email} is of the form of test data.\n     *\n     * <p>See 'src/test/resources/data' for more information.\n     ","lineNumber":62,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of institute stats sorted by the number of students inside institute.\n     ","lineNumber":74,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets number of unique students emails in the bundle.\n     ","lineNumber":83,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets number of unique instructor emails in the bundle.\n     ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Stats that indicates the number of unique (uniqueness is determined by email)\n     * students and instructors in the institute.\n     ","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Metadata for the bundle.\n     ","lineNumber":148,"isOrphan":false},{"type":"LineComment","text":" time when TEAMMATES project begins","lineNumber":155,"isOrphan":false}],"allMethods":[{"fullQualified":"private InstituteStats getInstituteStats(String institute)","name":"getInstituteStats","type":"InstituteStats","javadoc":"\n     * Gets the stats for a certain institute.\n     *\n     * @return a empty stats if institute is not found in the bundle.\n     "},{"fullQualified":"public void addStudentEmailToInstitute(String institute, String email)","name":"addStudentEmailToInstitute","type":"void","javadoc":"\n     * Adds a student {@code email} to the stats associated with the {@code institute}.\n     *\n     * <p>If the institute or email is from test data, ignore.\n     *\n     * <p>If the student email is already in the stats of the institute, ignore.\n     "},{"fullQualified":"public void addInstructorEmailToInstitute(String institute, String email)","name":"addInstructorEmailToInstitute","type":"void","javadoc":"\n     * Adds a instructor {@code email} to the stats associated with the {@code institute}.\n     *\n     * <p>If the institute or email is from test data, ignore.\n     *\n     * <p>If the instructor email is already in the stats of the institute, ignore.\n     "},{"fullQualified":"private boolean isTestingData(String institute, String email)","name":"isTestingData","type":"boolean","javadoc":"\n     * Determines if the {@code institute} or {@code email} is of the form of test data.\n     *\n     * <p>See 'src/test/resources/data' for more information.\n     "},{"fullQualified":"public List<InstituteStats> getInstituteStatsSortByTotalStudentsDescending()","name":"getInstituteStatsSortByTotalStudentsDescending","type":"List<InstituteStats>","javadoc":"\n     * Gets a list of institute stats sorted by the number of students inside institute.\n     "},{"fullQualified":"public int getNumOfUniqueStudentEmails()","name":"getNumOfUniqueStudentEmails","type":"int","javadoc":"\n     * Gets number of unique students emails in the bundle.\n     "},{"fullQualified":"public int getNumOfUniqueInstructorEmails()","name":"getNumOfUniqueInstructorEmails","type":"int","javadoc":"\n     * Gets number of unique instructor emails in the bundle.\n     "},{"fullQualified":"public Instant getStatsSince()","name":"getStatsSince","type":"Instant","javadoc":null},{"fullQualified":"public void setStatsSince(Instant time)","name":"setStatsSince","type":"void","javadoc":null},{"fullQualified":"public void setInstitutesStatsMetadata(InstitutesStatsMetadata institutesStatsMetadata)","name":"setInstitutesStatsMetadata","type":"void","javadoc":null},{"fullQualified":"public InstitutesStatsMetadata getInstitutesStatsMetadata()","name":"getInstitutesStatsMetadata","type":"InstitutesStatsMetadata","javadoc":null},{"fullQualified":"public void setInstitutesStats(Map<String, InstituteStats> institutesStats)","name":"setInstitutesStats","type":"void","javadoc":null},{"fullQualified":"public Map<String, InstituteStats> getInstitutesStats()","name":"getInstitutesStats","type":"Map<String,InstituteStats>","javadoc":null}],"allConstructors":[]},{"name":"StatisticsPerInstitute","fullyQualifiedName":"teammates.client.scripts.statistics.StatisticsPerInstitute","isInterface":false,"codeComments":[{"type":"LineComment","text":" generate stats incrementally","lineNumber":44,"isOrphan":false},{"type":"LineComment","text":" construct queries","lineNumber":52,"isOrphan":false},{"type":"LineComment","text":" generate institute stats by scanning student entities","lineNumber":62,"isOrphan":false},{"type":"LineComment","text":" generate institute stats by scanning account (instructor) entities","lineNumber":73,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args) throws Exception","name":"main","type":"void","javadoc":null},{"fullQualified":"private String getCourseInstitute(String courseId)","name":"getCourseInstitute","type":"String","javadoc":null},{"fullQualified":"protected void doOperation()","name":"doOperation","type":"void","javadoc":null},{"fullQualified":"private void printStatsPerInstitute()","name":"printStatsPerInstitute","type":"void","javadoc":null},{"fullQualified":"private void printUniqueStudentEmailStatsInWholeSystem()","name":"printUniqueStudentEmailStatsInWholeSystem","type":"void","javadoc":null},{"fullQualified":"private void printUniqueInstructorEmailStatsInWholeSystem()","name":"printUniqueInstructorEmailStatsInWholeSystem","type":"void","javadoc":null},{"fullQualified":"private void printQueryRangeMessage(Instant queryEntitiesFrom, Instant queryEntitiesTo)","name":"printQueryRangeMessage","type":"void","javadoc":null},{"fullQualified":"private void saveCheckpointOfData(Instant queryEntitiesFrom, Instant queryEntitiesTo)","name":"saveCheckpointOfData","type":"void","javadoc":null}],"allConstructors":[{"identifier":" StatisticsPerInstitute() throws Exception","javadocComment":null}]},{"name":"TeamEvalResultCalculations","fullyQualifiedName":"teammates.client.scripts.TeamEvalResultCalculations","isInterface":false,"codeComments":[{"type":"LineComment","text":" script-like, not meant to be instantiated","lineNumber":14,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.ON:SingleSpaceSeparator","lineNumber":46,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.OFF:SingleSpaceSeparator vertical alignment of values for readability","lineNumber":31,"isOrphan":false}],"allMethods":[{"fullQualified":"private static void showCalculationSteps(int[][] input)","name":"showCalculationSteps","type":"void","javadoc":null},{"fullQualified":"public static void main(String[] args)","name":"main","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private TeamEvalResultCalculations()","javadocComment":null}]},{"name":"BackDoor","fullyQualifiedName":"teammates.client.util.BackDoor","isInterface":false,"codeComments":[{"type":"LineComment","text":" Utility class","lineNumber":13,"isOrphan":true}],"allMethods":[{"fullQualified":"public static BackDoor getInstance()","name":"getInstance","type":"BackDoor","javadoc":null},{"fullQualified":"protected String getAppUrl()","name":"getAppUrl","type":"String","javadoc":null},{"fullQualified":"protected String getBackdoorKey()","name":"getBackdoorKey","type":"String","javadoc":null},{"fullQualified":"protected String getCsrfKey()","name":"getCsrfKey","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private BackDoor()","javadocComment":null}]},{"name":"ClientProperties","fullyQualifiedName":"teammates.client.util.ClientProperties","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" The value of \"client.target.url\" in client.properties file. ","lineNumber":14,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"client.api.url\" in client.properties file. ","lineNumber":17,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"client.backdoor.key\" in client.properties file. ","lineNumber":20,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"client.csrf.key\" in client.properties file. ","lineNumber":23,"isOrphan":false},{"type":"LineComment","text":" access static fields directly","lineNumber":44,"isOrphan":true}],"allMethods":[{"fullQualified":"public static boolean isTargetUrlDevServer()","name":"isTargetUrlDevServer","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"private ClientProperties()","javadocComment":null}]},{"name":"LoopHelper","fullyQualifiedName":"teammates.client.util.LoopHelper","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * The number of iterations between every printing.\n     ","lineNumber":8,"isOrphan":false},{"type":"JavadocComment","text":"\n     * The message which will be printed regularly.\n     ","lineNumber":13,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Constructs a {@link LoopHelper} object which prints {@code message} for every {@code printCycle} iterations.\n     ","lineNumber":20,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Increments count and prints the count and message on system output when count is a multiple of printCycle.\n     ","lineNumber":29,"isOrphan":false}],"allMethods":[{"fullQualified":"public void recordLoop()","name":"recordLoop","type":"void","javadoc":"\n     * Increments count and prints the count and message on system output when count is a multiple of printCycle.\n     "},{"fullQualified":"public int getCount()","name":"getCount","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public LoopHelper(int printCycle, String message)","javadocComment":"\n     * Constructs a {@link LoopHelper} object which prints {@code message} for every {@code printCycle} iterations.\n     "}]},{"name":"AdminAccountsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.AdminAccountsPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" student entities should be deleted","lineNumber":70,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AdminHomePageE2ETest","fullyQualifiedName":"teammates.e2e.cases.AdminHomePageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AdminNotificationsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.AdminNotificationsPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Only validates that the notifications are present in the notifications table instead of checking every row","lineNumber":38,"isOrphan":true},{"type":"LineComment","text":" Checks that notification is in the database first","lineNumber":65,"isOrphan":true},{"type":"LineComment","text":" This is because the page will display all notifications in the database, which is not predictable","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" Replace placeholder ID with actual ID of created notification","lineNumber":60,"isOrphan":false},{"type":"LineComment","text":" so that newNotification is updated with the created time before checking table row","lineNumber":66,"isOrphan":false},{"type":"LineComment","text":" verify that notification is present in database by reloading","lineNumber":82,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AdminSearchPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.AdminSearchPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private String getExpectedStudentDetails(StudentAttributes student)","name":"getExpectedStudentDetails","type":"String","javadoc":null},{"fullQualified":"private String getExpectedStudentHomePageLink(StudentAttributes student)","name":"getExpectedStudentHomePageLink","type":"String","javadoc":null},{"fullQualified":"private String getExpectedStudentManageAccountLink(StudentAttributes student)","name":"getExpectedStudentManageAccountLink","type":"String","javadoc":null},{"fullQualified":"private int getExpectedNumExpandedRows(StudentAttributes student)","name":"getExpectedNumExpandedRows","type":"int","javadoc":null},{"fullQualified":"private String getExpectedInstructorHomePageLink(InstructorAttributes instructor)","name":"getExpectedInstructorHomePageLink","type":"String","javadoc":null},{"fullQualified":"private String getExpectedInstructorManageAccountLink(InstructorAttributes instructor)","name":"getExpectedInstructorManageAccountLink","type":"String","javadoc":null}],"allConstructors":[]},{"name":"AdminSessionsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.AdminSessionsPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" To guarantee that there will always be some \"ongoing sessions\" listed,","lineNumber":42,"isOrphan":true},{"type":"LineComment","text":" the test data is injected with date/time values relative to the time where the test takes place","lineNumber":43,"isOrphan":true},{"type":"LineComment","text":" Open and awaiting session should be displayed with the appropriate status","lineNumber":114,"isOrphan":true},{"type":"LineComment","text":" Future session should not be displayed yet","lineNumber":115,"isOrphan":true},{"type":"LineComment","text":" This time, only future session should be displayed","lineNumber":130,"isOrphan":true},{"type":"LineComment","text":" The previous open and awaiting session would have closed by this date","lineNumber":131,"isOrphan":true}],"allMethods":[{"fullQualified":"private String formatDateTime(Instant instant, String timeZone)","name":"formatDateTime","type":"String","javadoc":null},{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AutomatedSessionRemindersE2ETest","fullyQualifiedName":"teammates.e2e.cases.AutomatedSessionRemindersE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" When running the test against a production server, email alerts will be sent","lineNumber":23,"isOrphan":true},{"type":"LineComment","text":" to the specified email address","lineNumber":24,"isOrphan":true},{"type":"LineComment","text":" The tester should manually check the email box after running the test suite","lineNumber":25,"isOrphan":true},{"type":"LineComment","text":" TODO check if we can automate this checking process","lineNumber":26,"isOrphan":true},{"type":"LineComment","text":" Published time for one feedback session already set to some time in the past.","lineNumber":49,"isOrphan":true},{"type":"LineComment","text":" Set closing time of one feedback session to tomorrow","lineNumber":37,"isOrphan":false},{"type":"LineComment","text":" Set closing time of one feedback session to 30 mins ago","lineNumber":41,"isOrphan":false},{"type":"LineComment","text":" Set opening time for one feedback session to yesterday","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" this test does not require any browser","lineNumber":56,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void prepareBrowser()","name":"prepareBrowser","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void testFeedbackSessionOpeningSoonReminders()","name":"testFeedbackSessionOpeningSoonReminders","type":"void","javadoc":null},{"fullQualified":"private void testFeedbackSessionOpeningReminders()","name":"testFeedbackSessionOpeningReminders","type":"void","javadoc":null},{"fullQualified":"private void testFeedbackSessionClosingReminders()","name":"testFeedbackSessionClosingReminders","type":"void","javadoc":null},{"fullQualified":"private void testFeedbackSessionClosedReminders()","name":"testFeedbackSessionClosedReminders","type":"void","javadoc":null},{"fullQualified":"private void testFeedbackSessionPublishedReminders()","name":"testFeedbackSessionPublishedReminders","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BaseE2ETestCase","fullyQualifiedName":"teammates.e2e.cases.BaseE2ETestCase","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Prepares the browser used for the current test.\n     ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Prepares the test data used for the current test.\n     ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Contains all the tests for the page.\n     *\n     * <p>This approach is chosen so that setup and teardown are only needed once per test page,\n     * thereby saving time. While it necessitates failed tests to be restarted from the beginning,\n     * test failures are rare and thus not causing significant overhead.\n     ","lineNumber":70,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter.\n     * The base URL will be the value of test.app.frontend.url in test.properties.\n     * {@code relativeUrl} must start with a \"/\".\n     ","lineNumber":97,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter.\n     * The base URL will be the value of test.app.backend.url in test.properties.\n     * {@code relativeUrl} must start with a \"/\".\n     ","lineNumber":106,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs in to a page using the given credentials.\n     ","lineNumber":115,"isOrphan":false},{"type":"LineComment","text":" When not using dev server, Google blocks log in by automation.","lineNumber":119,"isOrphan":true},{"type":"LineComment","text":" To work around that, we inject the user cookie directly into the browser session.","lineNumber":120,"isOrphan":false},{"type":"LineComment","text":" In order for the cookie injection to work, we need to be in the domain.","lineNumber":122,"isOrphan":true},{"type":"LineComment","text":" Use the home page to minimize the page load time.","lineNumber":123,"isOrphan":false},{"type":"LineComment","text":" This will be redirected to the dev server login page.","lineNumber":132,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs in to a page using admin credentials.\n     ","lineNumber":141,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Equivalent to clicking the 'logout' link in the top menu of the page.\n     ","lineNumber":148,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes file with fileName from the downloads folder.\n     ","lineNumber":161,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies downloaded file has correct fileName and contains expected content.\n     ","lineNumber":169,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Visits the URL and gets the page object representation of the visited web page in the browser.\n     ","lineNumber":193,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that email with subject is found in inbox.\n     * Email used must be an authentic gmail account.\n     ","lineNumber":201,"isOrphan":false},{"type":"LineComment","text":" BACKDOOR.getStudentProfile(studentProfileAttributes.googleId);","lineNumber":240,"isOrphan":false}],"allMethods":[{"fullQualified":"public void baseClassSetup()","name":"baseClassSetup","type":"void","javadoc":null},{"fullQualified":"protected void prepareBrowser()","name":"prepareBrowser","type":"void","javadoc":"\n     * Prepares the browser used for the current test.\n     "},{"fullQualified":"protected abstract void prepareTestData()","name":"prepareTestData","type":"void","javadoc":"\n     * Prepares the test data used for the current test.\n     "},{"fullQualified":"protected abstract void testAll()","name":"testAll","type":"void","javadoc":"\n     * Contains all the tests for the page.\n     *\n     * <p>This approach is chosen so that setup and teardown are only needed once per test page,\n     * thereby saving time. While it necessitates failed tests to be restarted from the beginning,\n     * test failures are rare and thus not causing significant overhead.\n     "},{"fullQualified":"protected String getTestDataFolder()","name":"getTestDataFolder","type":"String","javadoc":null},{"fullQualified":"public void baseClassTearDown(ITestContext context)","name":"baseClassTearDown","type":"void","javadoc":null},{"fullQualified":"protected static AppUrl createFrontendUrl(String relativeUrl)","name":"createFrontendUrl","type":"AppUrl","javadoc":"\n     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter.\n     * The base URL will be the value of test.app.frontend.url in test.properties.\n     * {@code relativeUrl} must start with a \"/\".\n     "},{"fullQualified":"protected static AppUrl createBackendUrl(String relativeUrl)","name":"createBackendUrl","type":"AppUrl","javadoc":"\n     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter.\n     * The base URL will be the value of test.app.backend.url in test.properties.\n     * {@code relativeUrl} must start with a \"/\".\n     "},{"fullQualified":"protected T loginToPage(AppUrl url, Class<T> typeOfPage, String userId)","name":"loginToPage","type":"T","javadoc":"\n     * Logs in to a page using the given credentials.\n     "},{"fullQualified":"protected T loginAdminToPage(AppUrl url, Class<T> typeOfPage)","name":"loginAdminToPage","type":"T","javadoc":"\n     * Logs in to a page using admin credentials.\n     "},{"fullQualified":"protected void logout()","name":"logout","type":"void","javadoc":"\n     * Equivalent to clicking the 'logout' link in the top menu of the page.\n     "},{"fullQualified":"protected void deleteDownloadsFile(String fileName)","name":"deleteDownloadsFile","type":"void","javadoc":"\n     * Deletes file with fileName from the downloads folder.\n     "},{"fullQualified":"protected void verifyDownloadedFile(String expectedFileName, List<String> expectedContent)","name":"verifyDownloadedFile","type":"void","javadoc":"\n     * Verifies downloaded file has correct fileName and contains expected content.\n     "},{"fullQualified":"protected T getNewPageInstance(AppUrl url, Class<T> typeOfPage)","name":"getNewPageInstance","type":"T","javadoc":"\n     * Visits the URL and gets the page object representation of the visited web page in the browser.\n     "},{"fullQualified":"protected void verifyEmailSent(String email, String subject)","name":"verifyEmailSent","type":"void","javadoc":"\n     * Verifies that email with subject is found in inbox.\n     * Email used must be an authentic gmail account.\n     "},{"fullQualified":" AccountAttributes getAccount(String googleId)","name":"getAccount","type":"AccountAttributes","javadoc":null},{"fullQualified":"protected AccountAttributes getAccount(AccountAttributes account)","name":"getAccount","type":"AccountAttributes","javadoc":null},{"fullQualified":"protected StudentProfileAttributes getStudentProfile(StudentProfileAttributes studentProfileAttributes)","name":"getStudentProfile","type":"StudentProfileAttributes","javadoc":null},{"fullQualified":" CourseAttributes getCourse(String courseId)","name":"getCourse","type":"CourseAttributes","javadoc":null},{"fullQualified":"protected CourseAttributes getCourse(CourseAttributes course)","name":"getCourse","type":"CourseAttributes","javadoc":null},{"fullQualified":" CourseAttributes getArchivedCourse(String instructorId, String courseId)","name":"getArchivedCourse","type":"CourseAttributes","javadoc":null},{"fullQualified":" FeedbackQuestionAttributes getFeedbackQuestion(String courseId, String feedbackSessionName, int qnNumber)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":null},{"fullQualified":"protected FeedbackQuestionAttributes getFeedbackQuestion(FeedbackQuestionAttributes fq)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":null},{"fullQualified":" FeedbackResponseCommentAttributes getFeedbackResponseComment(String feedbackResponseId)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":null},{"fullQualified":"protected FeedbackResponseCommentAttributes getFeedbackResponseComment(FeedbackResponseCommentAttributes frc)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":null},{"fullQualified":" FeedbackResponseAttributes getFeedbackResponse(String feedbackQuestionId, String giver, String recipient)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"protected FeedbackResponseAttributes getFeedbackResponse(FeedbackResponseAttributes fr)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":" FeedbackSessionAttributes getFeedbackSession(String courseId, String feedbackSessionName)","name":"getFeedbackSession","type":"FeedbackSessionAttributes","javadoc":null},{"fullQualified":"protected FeedbackSessionAttributes getFeedbackSession(FeedbackSessionAttributes fs)","name":"getFeedbackSession","type":"FeedbackSessionAttributes","javadoc":null},{"fullQualified":" FeedbackSessionAttributes getSoftDeletedSession(String feedbackSessionName, String instructorId)","name":"getSoftDeletedSession","type":"FeedbackSessionAttributes","javadoc":null},{"fullQualified":" InstructorAttributes getInstructor(String courseId, String instructorEmail)","name":"getInstructor","type":"InstructorAttributes","javadoc":null},{"fullQualified":"protected InstructorAttributes getInstructor(InstructorAttributes instructor)","name":"getInstructor","type":"InstructorAttributes","javadoc":null},{"fullQualified":" String getKeyForInstructor(String courseId, String instructorEmail)","name":"getKeyForInstructor","type":"String","javadoc":null},{"fullQualified":"protected StudentAttributes getStudent(StudentAttributes student)","name":"getStudent","type":"StudentAttributes","javadoc":null},{"fullQualified":" String getKeyForStudent(StudentAttributes student)","name":"getKeyForStudent","type":"String","javadoc":null},{"fullQualified":"protected AccountRequestAttributes getAccountRequest(AccountRequestAttributes accountRequest)","name":"getAccountRequest","type":"AccountRequestAttributes","javadoc":null},{"fullQualified":" NotificationAttributes getNotification(String notificationId)","name":"getNotification","type":"NotificationAttributes","javadoc":null},{"fullQualified":"protected NotificationAttributes getNotification(NotificationAttributes notification)","name":"getNotification","type":"NotificationAttributes","javadoc":null},{"fullQualified":"protected DeadlineExtensionAttributes getDeadlineExtension(DeadlineExtensionAttributes deadlineExtension)","name":"getDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":null},{"fullQualified":"protected boolean doRemoveAndRestoreDataBundle(DataBundle testData)","name":"doRemoveAndRestoreDataBundle","type":"boolean","javadoc":null},{"fullQualified":"protected boolean doPutDocuments(DataBundle testData)","name":"doPutDocuments","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"BaseFeedbackQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.BaseFeedbackQuestionE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" abstract void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":" abstract void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":" InstructorFeedbackEditPage loginToFeedbackEditPage()","name":"loginToFeedbackEditPage","type":"InstructorFeedbackEditPage","javadoc":null},{"fullQualified":" FeedbackSubmitPage loginToFeedbackSubmitPage()","name":"loginToFeedbackSubmitPage","type":"FeedbackSubmitPage","javadoc":null},{"fullQualified":" FeedbackSubmitPage getFeedbackSubmitPage()","name":"getFeedbackSubmitPage","type":"FeedbackSubmitPage","javadoc":null}],"allConstructors":[]},{"name":"FeedbackConstSumOptionQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackConstSumOptionQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":51,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, List<Integer> answers)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackConstSumRecipientQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackConstSumRecipientQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":52,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, StudentAttributes receiver, Integer answer)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackContributionQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackContributionQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":53,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, StudentAttributes receiver, int answer)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackMcqQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackMcqQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":51,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private List<String> getGeneratedStudentOptions()","name":"getGeneratedStudentOptions","type":"List<String>","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, boolean isOther, String answer)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackMsqQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackMsqQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":54,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private List<String> getGeneratedTeams()","name":"getGeneratedTeams","type":"List<String>","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, StudentAttributes receiver, String other, List<String> answers)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackNumScaleQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackNumScaleQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":49,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, StudentAttributes receiver, Double answer)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackRankOptionQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackRankOptionQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":54,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, StudentAttributes receiver, List<Integer> answers)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackRankRecipientQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackRankRecipientQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":54,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, InstructorAttributes receiver, Integer answer)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackResultsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackResultsPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" The actual calculated stats are not verified for this table","lineNumber":493,"isOrphan":true},{"type":"LineComment","text":" Checking the recipient presence in the table is sufficient for E2E purposes","lineNumber":494,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void verifyLoadedQuestions(StudentAttributes currentStudent)","name":"verifyLoadedQuestions","type":"void","javadoc":null},{"fullQualified":"private void verifyLoadedQuestions(InstructorAttributes currentInstructor)","name":"verifyLoadedQuestions","type":"void","javadoc":null},{"fullQualified":"private void verifyResponseDetails(StudentAttributes currentStudent, FeedbackQuestionAttributes question)","name":"verifyResponseDetails","type":"void","javadoc":null},{"fullQualified":"private void verifyResponseDetails(InstructorAttributes currentInstructor, FeedbackQuestionAttributes question)","name":"verifyResponseDetails","type":"void","javadoc":null},{"fullQualified":"private void verifyCommentDetails(int questionNum, FeedbackResponseCommentAttributes comment, StudentAttributes currentStudent)","name":"verifyCommentDetails","type":"void","javadoc":null},{"fullQualified":"private Set<FeedbackQuestionAttributes> getQnsWithResponses(StudentAttributes currentStudent)","name":"getQnsWithResponses","type":"Set<FeedbackQuestionAttributes>","javadoc":null},{"fullQualified":"private Set<FeedbackQuestionAttributes> getQnsWithResponses(InstructorAttributes currentInstructor)","name":"getQnsWithResponses","type":"Set<FeedbackQuestionAttributes>","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> getGivenResponses(StudentAttributes currentStudent, FeedbackQuestionAttributes question)","name":"getGivenResponses","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> getGivenResponses(InstructorAttributes currentInstructor, FeedbackQuestionAttributes question)","name":"getGivenResponses","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> getOtherResponses(StudentAttributes currentStudent, FeedbackQuestionAttributes question)","name":"getOtherResponses","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> getOtherResponses(InstructorAttributes currentInstructor, FeedbackQuestionAttributes question)","name":"getOtherResponses","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private Set<String> getVisibleGivers(StudentAttributes currentStudent, FeedbackQuestionAttributes question)","name":"getVisibleGivers","type":"Set<String>","javadoc":null},{"fullQualified":"private Set<String> getVisibleGivers(InstructorAttributes currentInstructor, FeedbackQuestionAttributes question)","name":"getVisibleGivers","type":"Set<String>","javadoc":null},{"fullQualified":"private Set<String> getVisibleRecipients(StudentAttributes currentStudent, FeedbackQuestionAttributes question)","name":"getVisibleRecipients","type":"Set<String>","javadoc":null},{"fullQualified":"private Set<String> getVisibleRecipients(InstructorAttributes currentInstructor, FeedbackQuestionAttributes question)","name":"getVisibleRecipients","type":"Set<String>","javadoc":null},{"fullQualified":"private Set<String> getRelevantUsers(StudentAttributes giver, List<FeedbackParticipantType> relevantParticipants)","name":"getRelevantUsers","type":"Set<String>","javadoc":null},{"fullQualified":"private Set<String> getRelevantUsersForInstructors(List<FeedbackParticipantType> relevantParticipants)","name":"getRelevantUsersForInstructors","type":"Set<String>","javadoc":null},{"fullQualified":"private Set<StudentAttributes> getOtherTeammates(StudentAttributes currentStudent)","name":"getOtherTeammates","type":"Set<StudentAttributes>","javadoc":null},{"fullQualified":"private Set<StudentAttributes> getOtherStudents(StudentAttributes currentStudent)","name":"getOtherStudents","type":"Set<StudentAttributes>","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> editIdentifiers(StudentAttributes currentStudent, List<FeedbackResponseAttributes> responses)","name":"editIdentifiers","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> editIdentifiers(InstructorAttributes currentInstructor, List<FeedbackResponseAttributes> responses)","name":"editIdentifiers","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private String getIdentifier(StudentAttributes currentStudent, String user)","name":"getIdentifier","type":"String","javadoc":null},{"fullQualified":"private String getIdentifier(InstructorAttributes currentInstructor, String user)","name":"getIdentifier","type":"String","javadoc":null},{"fullQualified":"private String getStudentName(String studentEmail)","name":"getStudentName","type":"String","javadoc":null},{"fullQualified":"private String getInstructorName(String instructorEmail)","name":"getInstructorName","type":"String","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> deepCopyResponses(List<FeedbackResponseAttributes> responses)","name":"deepCopyResponses","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private void verifyExpectedRubricStats()","name":"verifyExpectedRubricStats","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackRubricQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackRubricQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":" add a new choice","lineNumber":73,"isOrphan":false},{"type":"LineComment","text":" edit existing descriptions","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" edit existing subquestion","lineNumber":83,"isOrphan":false},{"type":"LineComment","text":" add a new subquestion","lineNumber":86,"isOrphan":false},{"type":"LineComment","text":" remove assigned weights","lineNumber":89,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, StudentAttributes receiver, List<Integer> answers)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSubmitPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackSubmitPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Question 2 response should not be persisted as only question 1 is submitted","lineNumber":119,"isOrphan":false},{"type":"LineComment","text":" One out of two questions in grace period session should not be visible","lineNumber":187,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private AppUrl getStudentSubmitPageUrl(StudentAttributes student, FeedbackSessionAttributes session)","name":"getStudentSubmitPageUrl","type":"AppUrl","javadoc":null},{"fullQualified":"private List<String> getOtherStudents(StudentAttributes currentStudent)","name":"getOtherStudents","type":"List<String>","javadoc":null},{"fullQualified":"private List<String> getInstructors()","name":"getInstructors","type":"List<String>","javadoc":null},{"fullQualified":"private List<String> getTeammates(StudentAttributes currentStudent)","name":"getTeammates","type":"List<String>","javadoc":null},{"fullQualified":"private List<String> getOtherTeams(StudentAttributes currentStudent)","name":"getOtherTeams","type":"List<String>","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getMcqResponse(String questionId, String recipient, boolean isOther, String answer)","name":"getMcqResponse","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"private FeedbackResponseCommentAttributes getFeedbackResponseComment(String responseId, String comment)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackTextQuestionE2ETest","fullyQualifiedName":"teammates.e2e.cases.FeedbackTextQuestionE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" add new question exactly like loaded question","lineNumber":48,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"protected void testEditPage()","name":"testEditPage","type":"void","javadoc":null},{"fullQualified":"protected void testSubmitPage()","name":"testSubmitPage","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponse(String questionId, InstructorAttributes instructor, String answer)","name":"getResponse","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[]},{"name":"InstructorAuditLogsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorAuditLogsPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorCourseDetailsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorCourseDetailsPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void classSetup()","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void verifyCourseDetails(InstructorCourseDetailsPage detailsPage, CourseAttributes course, InstructorAttributes[] instructors, StudentAttributes[] students)","name":"verifyCourseDetails","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorCourseEditPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorCourseEditPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" log in as instructor with no edit privilege","lineNumber":35,"isOrphan":false},{"type":"LineComment","text":" re-log in as instructor with edit privilege","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" verify in database by reloading","lineNumber":98,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorCourseEnrollPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorCourseEnrollPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" refresh page to confirm enrollment","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" verify students in database","lineNumber":51,"isOrphan":false},{"type":"LineComment","text":" modify team details of existing student","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":" add valid new student","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" add new student with invalid email","lineNumber":62,"isOrphan":false},{"type":"LineComment","text":" student2 included to test modified without change table","lineNumber":66,"isOrphan":false},{"type":"LineComment","text":" verify students in database","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" refresh page to confirm enrollment","lineNumber":87,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private StudentAttributes createCourseStudent(String section, String team, String name, String email, String comments)","name":"createCourseStudent","type":"StudentAttributes","javadoc":null}],"allConstructors":[]},{"name":"InstructorCourseJoinConfirmationPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorCourseJoinConfirmationPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorCoursesPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorCoursesPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" No need to call sortByCreationDate() here because it is the default sort in DESC order","lineNumber":155,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void classSetup()","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void verifyActiveCourseStatistics(InstructorCoursesPage coursesPage, CourseAttributes course)","name":"verifyActiveCourseStatistics","type":"void","javadoc":null},{"fullQualified":"private void verifyCourseArchivedInDatabase(String instructorId, CourseAttributes course)","name":"verifyCourseArchivedInDatabase","type":"void","javadoc":null},{"fullQualified":"private void verifyCourseNotArchivedInDatabase(String instructorId, CourseAttributes course)","name":"verifyCourseNotArchivedInDatabase","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorCourseStudentDetailsEditPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorCourseStudentDetailsEditPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorCourseStudentDetailsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorCourseStudentDetailsPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private AppUrl getStudentDetailsViewPageUrl(String studentEmail)","name":"getStudentDetailsViewPageUrl","type":"AppUrl","javadoc":null}],"allConstructors":[]},{"name":"InstructorFeedbackEditPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorFeedbackEditPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" verify qn 1 has been replaced in database by qn 2","lineNumber":127,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void verifyReorder(FeedbackQuestionAttributes question)","name":"verifyReorder","type":"void","javadoc":null},{"fullQualified":"private FeedbackQuestionAttributes getTemplateQuestion()","name":"getTemplateQuestion","type":"FeedbackQuestionAttributes","javadoc":null}],"allConstructors":[]},{"name":"InstructorFeedbackReportPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorFeedbackReportPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Maps to organise responses","lineNumber":44,"isOrphan":false},{"type":"LineComment","text":" We either test all questions or just use qn2","lineNumber":49,"isOrphan":false},{"type":"LineComment","text":" For testing section filtering","lineNumber":55,"isOrphan":false},{"type":"LineComment","text":" For testing missing responses","lineNumber":61,"isOrphan":false},{"type":"LineComment","text":" For testing comment","lineNumber":66,"isOrphan":false},{"type":"LineComment","text":" -------------------------------------- Prepare responses -------------------------------------- //","lineNumber":96,"isOrphan":false},{"type":"LineComment","text":" not used; run individual test cases instead as the entire test cases take > 5 minutes to run","lineNumber":123,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void classSetup()","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"public void testQuestionView()","name":"testQuestionView","type":"void","javadoc":null},{"fullQualified":"public void testGrqView()","name":"testGrqView","type":"void","javadoc":null},{"fullQualified":"public void testRgqView()","name":"testRgqView","type":"void","javadoc":null},{"fullQualified":"public void testGqrView()","name":"testGqrView","type":"void","javadoc":null},{"fullQualified":"public void testRqgView()","name":"testRqgView","type":"void","javadoc":null},{"fullQualified":"public void testActions()","name":"testActions","type":"void","javadoc":null},{"fullQualified":"private void verifySessionPublishedState(FeedbackSessionAttributes feedbackSession, boolean state)","name":"verifySessionPublishedState","type":"void","javadoc":null},{"fullQualified":"private List<FeedbackQuestionAttributes> getQuestionsByCourse(String courseId)","name":"getQuestionsByCourse","type":"List<FeedbackQuestionAttributes>","javadoc":null},{"fullQualified":"private List<StudentAttributes> getNotRespondedStudents(String courseId)","name":"getNotRespondedStudents","type":"List<StudentAttributes>","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> getResponsesByQuestion(String courseId, int qnNum)","name":"getResponsesByQuestion","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private void sortResponses(List<FeedbackResponseAttributes> responses)","name":"sortResponses","type":"void","javadoc":null},{"fullQualified":"private String getTeamName(FeedbackParticipantType type, String participant, Collection<StudentAttributes> students)","name":"getTeamName","type":"String","javadoc":null},{"fullQualified":"private Map<String, List<FeedbackResponseAttributes>> getResponsesByTeam(FeedbackQuestionAttributes question, boolean isGiver)","name":"getResponsesByTeam","type":"Map<String,List<FeedbackResponseAttributes>>","javadoc":null},{"fullQualified":"private Map<String, List<FeedbackResponseAttributes>> addMissingResponseToMap(Map<String, List<FeedbackResponseAttributes>> map, FeedbackResponseAttributes missingResponse, String key)","name":"addMissingResponseToMap","type":"Map<String,List<FeedbackResponseAttributes>>","javadoc":null},{"fullQualified":"private Map<String, List<FeedbackResponseAttributes>> filterMapBySection(Map<String, List<FeedbackResponseAttributes>> userToResponses, String section)","name":"filterMapBySection","type":"Map<String,List<FeedbackResponseAttributes>>","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> filterResponsesBySection(List<FeedbackResponseAttributes> responses, String section)","name":"filterResponsesBySection","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getMissingResponse(int qnNum, StudentAttributes giver, StudentAttributes recipient)","name":"getMissingResponse","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"private void verifyGqrViewResponses(FeedbackQuestionAttributes question, Map<String, List<FeedbackResponseAttributes>> giverToResponses, boolean isGroupedByTeam)","name":"verifyGqrViewResponses","type":"void","javadoc":null},{"fullQualified":"private void verifyRqgViewResponses(FeedbackQuestionAttributes question, Map<String, List<FeedbackResponseAttributes>> recipientToResponses, boolean isGroupedByTeam)","name":"verifyRqgViewResponses","type":"void","javadoc":null},{"fullQualified":"private void verifyGrqViewResponses(FeedbackQuestionAttributes question, Map<String, List<FeedbackResponseAttributes>> giverToResponses, boolean isGroupedByTeam)","name":"verifyGrqViewResponses","type":"void","javadoc":null},{"fullQualified":"private void verifyRgqViewResponses(FeedbackQuestionAttributes question, Map<String, List<FeedbackResponseAttributes>> recipientToResponses, boolean isGroupedByTeam)","name":"verifyRgqViewResponses","type":"void","javadoc":null},{"fullQualified":"private void verifyRqgViewStats(FeedbackQuestionAttributes question, Map<String, List<FeedbackResponseAttributes>> responses, boolean isGroupedByTeam)","name":"verifyRqgViewStats","type":"void","javadoc":null},{"fullQualified":"private void verifyGqrViewStats(FeedbackQuestionAttributes question, Map<String, List<FeedbackResponseAttributes>> responses, boolean isGroupedByTeam)","name":"verifyGqrViewStats","type":"void","javadoc":null},{"fullQualified":"private void organiseResponses(String courseId)","name":"organiseResponses","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorFeedbackSessionsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorFeedbackSessionsPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void classSetup()","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private String getExpectedResponseRate(FeedbackSessionAttributes session)","name":"getExpectedResponseRate","type":"String","javadoc":null},{"fullQualified":"private void verifySessionPublishedState(FeedbackSessionAttributes feedbackSession, boolean state)","name":"verifySessionPublishedState","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorHomePageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorHomePageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" by default, sessions are sorted by end date in descending order","lineNumber":76,"isOrphan":false},{"type":"LineComment","text":" use course index instead of searching for course in table to test sorted order of courses","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" flip index after sorting","lineNumber":106,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void classSetup()","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private String getExpectedResponseRate(FeedbackSessionAttributes session)","name":"getExpectedResponseRate","type":"String","javadoc":null},{"fullQualified":"private void verifySessionPublishedState(FeedbackSessionAttributes feedbackSession, boolean state)","name":"verifySessionPublishedState","type":"void","javadoc":null},{"fullQualified":"private void verifyCourseArchivedInDatabase(String instructorId, CourseAttributes course)","name":"verifyCourseArchivedInDatabase","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorNotificationsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorNotificationsPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Verify that account's readNotifications attribute is updated","lineNumber":53,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorSearchPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorSearchPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorSessionIndividualExtensionPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorSessionIndividualExtensionPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" table sorted by students with extension by default","lineNumber":82,"isOrphan":true},{"type":"LineComment","text":" alice and charlie","lineNumber":58,"isOrphan":false},{"type":"LineComment","text":" instructor 1","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" alice and charlie","lineNumber":83,"isOrphan":false},{"type":"LineComment","text":" instructor 1","lineNumber":84,"isOrphan":false},{"type":"LineComment","text":" alice and charlie","lineNumber":103,"isOrphan":false},{"type":"LineComment","text":" instructor 1","lineNumber":104,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void verifyUpdatedDeadlinesMap(Map<String, Instant> updatedDeadlines, String... emails)","name":"verifyUpdatedDeadlinesMap","type":"void","javadoc":null},{"fullQualified":"private void verifyDeadlineExtensionsPresentOrAbsent(Map<String, Instant> updatedStudentDeadlines, Map<String, Instant> updatedInstructorDeadlines, Instant extendedDeadline)","name":"verifyDeadlineExtensionsPresentOrAbsent","type":"void","javadoc":null},{"fullQualified":"private InstructorSessionIndividualExtensionPage loginToInstructorSessionIndividualExtensionPage()","name":"loginToInstructorSessionIndividualExtensionPage","type":"InstructorSessionIndividualExtensionPage","javadoc":null}],"allConstructors":[]},{"name":"InstructorStudentListPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorStudentListPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Expand all headers first","lineNumber":48,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorStudentRecordsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.InstructorStudentRecordsPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" TODO add tests for feedback responses","lineNumber":46,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"NotificationBannerE2ETest","fullyQualifiedName":"teammates.e2e.cases.NotificationBannerE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" After user closes a notification banner, it should not appear till user refreshes page","lineNumber":41,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentCourseDetailsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.StudentCourseDetailsPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentCourseJoinConfirmationPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.StudentCourseJoinConfirmationPageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentHomePageE2ETest","fullyQualifiedName":"teammates.e2e.cases.StudentHomePageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private List<String> getAllVisibleCourseIds()","name":"getAllVisibleCourseIds","type":"List<String>","javadoc":null}],"allConstructors":[]},{"name":"StudentNotificationsPageE2ETest","fullyQualifiedName":"teammates.e2e.cases.StudentNotificationsPageE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Verify that account's readNotifications attribute is updated","lineNumber":53,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentProfilePageE2ETest","fullyQualifiedName":"teammates.e2e.cases.StudentProfilePageE2ETest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SystemErrorEmailReportE2ETest","fullyQualifiedName":"teammates.e2e.cases.SystemErrorEmailReportE2ETest","isInterface":false,"codeComments":[{"type":"LineComment","text":" no test data used in this test","lineNumber":17,"isOrphan":true},{"type":"LineComment","text":" this test does not require any browser","lineNumber":22,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void prepareBrowser()","name":"prepareBrowser","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void testAssertionError()","name":"testAssertionError","type":"void","javadoc":null},{"fullQualified":"private void testNullPointerException()","name":"testNullPointerException","type":"void","javadoc":null},{"fullQualified":"private void testDeadlineExceededException()","name":"testDeadlineExceededException","type":"void","javadoc":null},{"fullQualified":"private void testDatastoreException()","name":"testDatastoreException","type":"void","javadoc":null},{"fullQualified":"private void testUnauthorizedAccessException()","name":"testUnauthorizedAccessException","type":"void","javadoc":null},{"fullQualified":"private void testInvalidHttpParameterException()","name":"testInvalidHttpParameterException","type":"void","javadoc":null},{"fullQualified":"private void testEntityNotFoundException()","name":"testEntityNotFoundException","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TimezoneSyncerTest","fullyQualifiedName":"teammates.e2e.cases.TimezoneSyncerTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" no test data used in this test","lineNumber":29,"isOrphan":true},{"type":"LineComment","text":" Show diff when running test in Gradle","lineNumber":48,"isOrphan":false},{"type":"LineComment","text":" find the release day","lineNumber":60,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll()","name":"testAll","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AdminAccountsPage","fullyQualifiedName":"teammates.e2e.pageobjects.AdminAccountsPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyAccountDetails(AccountAttributes account)","name":"verifyAccountDetails","type":"void","javadoc":null},{"fullQualified":"public void clickRemoveInstructorFromCourse(String courseId)","name":"clickRemoveInstructorFromCourse","type":"void","javadoc":null},{"fullQualified":"public void clickRemoveStudentFromCourse(String courseId)","name":"clickRemoveStudentFromCourse","type":"void","javadoc":null},{"fullQualified":"public void clickDeleteAccount()","name":"clickDeleteAccount","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public AdminAccountsPage(Browser browser)","javadocComment":null}]},{"name":"AdminHomePage","fullyQualifiedName":"teammates.e2e.pageobjects.AdminHomePage","isInterface":false,"codeComments":[{"type":"LineComment","text":" Modals are stacked, wait briefly to ensure confirmation modal is shown","lineNumber":94,"isOrphan":false},{"type":"LineComment","text":" Second modal is confirmation modal","lineNumber":96,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void queueInstructorForAdding(String name, String email, String institute)","name":"queueInstructorForAdding","type":"void","javadoc":null},{"fullQualified":"public void queueInstructorForAdding(String instructorDetails)","name":"queueInstructorForAdding","type":"void","javadoc":null},{"fullQualified":"public void addAllInstructors()","name":"addAllInstructors","type":"void","javadoc":null},{"fullQualified":"public String getMessageForInstructor(int i)","name":"getMessageForInstructor","type":"String","javadoc":null},{"fullQualified":"public void clickMoreInfoButtonForRegisteredInstructor(int i)","name":"clickMoreInfoButtonForRegisteredInstructor","type":"void","javadoc":null},{"fullQualified":"public void clickResetAccountRequestLink()","name":"clickResetAccountRequestLink","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public AdminHomePage(Browser browser)","javadocComment":null}]},{"name":"AdminNotificationsPage","fullyQualifiedName":"teammates.e2e.pageobjects.AdminNotificationsPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyNotificationsTableRow(NotificationAttributes notification)","name":"verifyNotificationsTableRow","type":"void","javadoc":null},{"fullQualified":"public void addNotification(NotificationAttributes notification)","name":"addNotification","type":"void","javadoc":null},{"fullQualified":"public void editNotification(NotificationAttributes notification)","name":"editNotification","type":"void","javadoc":null},{"fullQualified":"public void deleteNotification(NotificationAttributes notification)","name":"deleteNotification","type":"void","javadoc":null},{"fullQualified":"public void fillNotificationForm(NotificationAttributes notification)","name":"fillNotificationForm","type":"void","javadoc":null},{"fullQualified":"public String getFirstRowNotificationId()","name":"getFirstRowNotificationId","type":"String","javadoc":null},{"fullQualified":"public void sortNotificationsTableByDescendingCreateTime()","name":"sortNotificationsTableByDescendingCreateTime","type":"void","javadoc":null},{"fullQualified":"private void clickAddNotificationButton()","name":"clickAddNotificationButton","type":"void","javadoc":null},{"fullQualified":"private void clickCreateNotificationButton()","name":"clickCreateNotificationButton","type":"void","javadoc":null},{"fullQualified":"private void clickEditNotificationButton()","name":"clickEditNotificationButton","type":"void","javadoc":null},{"fullQualified":"private void setMessage(String message)","name":"setMessage","type":"void","javadoc":null},{"fullQualified":"private void setNotificationStartDateTime(Instant startInstant)","name":"setNotificationStartDateTime","type":"void","javadoc":null},{"fullQualified":"private void setNotificationEndDateTime(Instant endInstant)","name":"setNotificationEndDateTime","type":"void","javadoc":null},{"fullQualified":"private void setDateTime(WebElement dateBox, WebElement timeBox, Instant startInstant)","name":"setDateTime","type":"void","javadoc":null},{"fullQualified":"private String[] getNotificationTableDisplayDetails(NotificationAttributes notification)","name":"getNotificationTableDisplayDetails","type":"String[]","javadoc":null},{"fullQualified":"private String getTimezone()","name":"getTimezone","type":"String","javadoc":null},{"fullQualified":"private String getInputTimeString(Instant instant)","name":"getInputTimeString","type":"String","javadoc":null},{"fullQualified":"private String getTableDisplayDateString(Instant date)","name":"getTableDisplayDateString","type":"String","javadoc":null},{"fullQualified":"private String getTargetUserText(NotificationTargetUser userType)","name":"getTargetUserText","type":"String","javadoc":null},{"fullQualified":"private String getNotificationStyle(NotificationStyle style)","name":"getNotificationStyle","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public AdminNotificationsPage(Browser browser)","javadocComment":null}]},{"name":"AdminSearchPage","fullyQualifiedName":"teammates.e2e.pageobjects.AdminSearchPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void inputSearchContent(String content)","name":"inputSearchContent","type":"void","javadoc":null},{"fullQualified":"public void clearSearchBox()","name":"clearSearchBox","type":"void","javadoc":null},{"fullQualified":"public void clickSearchButton()","name":"clickSearchButton","type":"void","javadoc":null},{"fullQualified":"public void regenerateStudentKey(StudentAttributes student)","name":"regenerateStudentKey","type":"void","javadoc":null},{"fullQualified":"public void regenerateInstructorKey(InstructorAttributes instructor)","name":"regenerateInstructorKey","type":"void","javadoc":null},{"fullQualified":"public void clickExpandStudentLinks()","name":"clickExpandStudentLinks","type":"void","javadoc":null},{"fullQualified":"public void clickExpandInstructorLinks()","name":"clickExpandInstructorLinks","type":"void","javadoc":null},{"fullQualified":"public void clickExpandAccountRequestLinks()","name":"clickExpandAccountRequestLinks","type":"void","javadoc":null},{"fullQualified":"public void clickCollapseStudentLinks()","name":"clickCollapseStudentLinks","type":"void","javadoc":null},{"fullQualified":"public void clickCollapseInstructorLinks()","name":"clickCollapseInstructorLinks","type":"void","javadoc":null},{"fullQualified":"public void clickCollapseAccountRequestLinks()","name":"clickCollapseAccountRequestLinks","type":"void","javadoc":null},{"fullQualified":"public WebElement getStudentRow(StudentAttributes student)","name":"getStudentRow","type":"WebElement","javadoc":null},{"fullQualified":"public String getStudentDetails(WebElement studentRow)","name":"getStudentDetails","type":"String","javadoc":null},{"fullQualified":"public String getStudentName(WebElement studentRow)","name":"getStudentName","type":"String","javadoc":null},{"fullQualified":"public String getStudentGoogleId(WebElement studentRow)","name":"getStudentGoogleId","type":"String","javadoc":null},{"fullQualified":"public String getStudentHomeLink(WebElement studentRow)","name":"getStudentHomeLink","type":"String","javadoc":null},{"fullQualified":"public String getStudentInstitute(WebElement studentRow)","name":"getStudentInstitute","type":"String","javadoc":null},{"fullQualified":"public String getStudentComments(WebElement studentRow)","name":"getStudentComments","type":"String","javadoc":null},{"fullQualified":"public String getStudentManageAccountLink(WebElement studentRow)","name":"getStudentManageAccountLink","type":"String","javadoc":null},{"fullQualified":"public String getStudentEmail(WebElement studentRow)","name":"getStudentEmail","type":"String","javadoc":null},{"fullQualified":"public String getStudentJoinLink(WebElement studentRow)","name":"getStudentJoinLink","type":"String","javadoc":null},{"fullQualified":"public String getStudentJoinLink(StudentAttributes student)","name":"getStudentJoinLink","type":"String","javadoc":null},{"fullQualified":"public void resetStudentGoogleId(StudentAttributes student)","name":"resetStudentGoogleId","type":"void","javadoc":null},{"fullQualified":"public WebElement getInstructorRow(InstructorAttributes instructor)","name":"getInstructorRow","type":"WebElement","javadoc":null},{"fullQualified":"public String getInstructorCourseId(WebElement instructorRow)","name":"getInstructorCourseId","type":"String","javadoc":null},{"fullQualified":"public String getInstructorName(WebElement instructorRow)","name":"getInstructorName","type":"String","javadoc":null},{"fullQualified":"public String getInstructorGoogleId(WebElement instructorRow)","name":"getInstructorGoogleId","type":"String","javadoc":null},{"fullQualified":"public String getInstructorHomePageLink(WebElement instructorRow)","name":"getInstructorHomePageLink","type":"String","javadoc":null},{"fullQualified":"public String getInstructorInstitute(WebElement instructorRow)","name":"getInstructorInstitute","type":"String","javadoc":null},{"fullQualified":"public String getInstructorManageAccountLink(WebElement instructorRow)","name":"getInstructorManageAccountLink","type":"String","javadoc":null},{"fullQualified":"public String getInstructorEmail(WebElement instructorRow)","name":"getInstructorEmail","type":"String","javadoc":null},{"fullQualified":"public String getInstructorJoinLink(WebElement instructorRow)","name":"getInstructorJoinLink","type":"String","javadoc":null},{"fullQualified":"public String getInstructorJoinLink(InstructorAttributes instructor)","name":"getInstructorJoinLink","type":"String","javadoc":null},{"fullQualified":"public void resetInstructorGoogleId(InstructorAttributes instructor)","name":"resetInstructorGoogleId","type":"void","javadoc":null},{"fullQualified":"public WebElement getAccountRequestRow(AccountRequestAttributes accountRequest)","name":"getAccountRequestRow","type":"WebElement","javadoc":null},{"fullQualified":"public String getAccountRequestName(WebElement accountRequestRow)","name":"getAccountRequestName","type":"String","javadoc":null},{"fullQualified":"public String getAccountRequestEmail(WebElement accountRequestRow)","name":"getAccountRequestEmail","type":"String","javadoc":null},{"fullQualified":"public String getAccountRequestInstitute(WebElement accountRequestRow)","name":"getAccountRequestInstitute","type":"String","javadoc":null},{"fullQualified":"public String getAccountRequestCreatedAt(WebElement accountRequestRow)","name":"getAccountRequestCreatedAt","type":"String","javadoc":null},{"fullQualified":"public String getAccountRequestRegisteredAt(WebElement accountRequestRow)","name":"getAccountRequestRegisteredAt","type":"String","javadoc":null},{"fullQualified":"public String getAccountRequestRegistrationLink(WebElement accountRequestRow)","name":"getAccountRequestRegistrationLink","type":"String","javadoc":null},{"fullQualified":"public void clickDeleteAccountRequestButton(AccountRequestAttributes accountRequest)","name":"clickDeleteAccountRequestButton","type":"void","javadoc":null},{"fullQualified":"public void clickResetAccountRequestButton(AccountRequestAttributes accountRequest)","name":"clickResetAccountRequestButton","type":"void","javadoc":null},{"fullQualified":"public int getNumExpandedRows(WebElement row)","name":"getNumExpandedRows","type":"int","javadoc":null},{"fullQualified":"private String getColumnText(WebElement row, int columnNum)","name":"getColumnText","type":"String","javadoc":null},{"fullQualified":"private String getColumnLink(WebElement row, int columnNum)","name":"getColumnLink","type":"String","javadoc":null},{"fullQualified":"private String getExpandedRowInputValue(WebElement row, String rowHeader)","name":"getExpandedRowInputValue","type":"String","javadoc":null},{"fullQualified":"public void verifyStudentRowContent(StudentAttributes student, CourseAttributes course, String expectedDetails, String expectedManageAccountLink, String expectedHomePageLink)","name":"verifyStudentRowContent","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentExpandedLinks(StudentAttributes student, int expectedNumExpandedRows)","name":"verifyStudentExpandedLinks","type":"void","javadoc":null},{"fullQualified":"public void verifyInstructorRowContent(InstructorAttributes instructor, CourseAttributes course, String expectedManageAccountLink, String expectedHomePageLink)","name":"verifyInstructorRowContent","type":"void","javadoc":null},{"fullQualified":"public void verifyInstructorExpandedLinks(InstructorAttributes instructor)","name":"verifyInstructorExpandedLinks","type":"void","javadoc":null},{"fullQualified":"public void verifyAccountRequestRowContent(AccountRequestAttributes accountRequest)","name":"verifyAccountRequestRowContent","type":"void","javadoc":null},{"fullQualified":"public void verifyAccountRequestExpandedLinks(AccountRequestAttributes accountRequest)","name":"verifyAccountRequestExpandedLinks","type":"void","javadoc":null},{"fullQualified":"public void verifyLinkExpansionButtons(StudentAttributes student, InstructorAttributes instructor, AccountRequestAttributes accountRequest)","name":"verifyLinkExpansionButtons","type":"void","javadoc":null},{"fullQualified":"public void verifyRegenerateStudentKey(StudentAttributes student, String originalJoinLink)","name":"verifyRegenerateStudentKey","type":"void","javadoc":null},{"fullQualified":"public void verifyRegenerateInstructorKey(InstructorAttributes instructor, String originalJoinLink)","name":"verifyRegenerateInstructorKey","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public AdminSearchPage(Browser browser)","javadocComment":null}]},{"name":"AdminSessionsPage","fullyQualifiedName":"teammates.e2e.pageobjects.AdminSessionsPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" Only validate for the preset ongoing sessions","lineNumber":47,"isOrphan":true},{"type":"LineComment","text":" This is because the page will display all ongoing sessions in the database, which is not predictable","lineNumber":48,"isOrphan":true}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"private List<WebElement> getOngoingSessionsRows()","name":"getOngoingSessionsRows","type":"List<WebElement>","javadoc":null},{"fullQualified":"public void verifySessionRows(String[][] sessionsCells, boolean[] expectedSessionShownStatus)","name":"verifySessionRows","type":"void","javadoc":null},{"fullQualified":"public void toggleSessionFilter()","name":"toggleSessionFilter","type":"void","javadoc":null},{"fullQualified":"public void waitForSessionFilterVisibility()","name":"waitForSessionFilterVisibility","type":"void","javadoc":null},{"fullQualified":"public void setFilterStartDate(Instant instant)","name":"setFilterStartDate","type":"void","javadoc":null},{"fullQualified":"public void setFilterEndDate(Instant instant)","name":"setFilterEndDate","type":"void","javadoc":null},{"fullQualified":"public void filterSessions()","name":"filterSessions","type":"void","javadoc":null},{"fullQualified":"private String formatDateTimeForFilter(Instant instant, String timeZone)","name":"formatDateTimeForFilter","type":"String","javadoc":null},{"fullQualified":"public String getSessionsTableTimezone()","name":"getSessionsTableTimezone","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public AdminSessionsPage(Browser browser)","javadocComment":null}]},{"name":"AdminTimezonePage","fullyQualifiedName":"teammates.e2e.pageobjects.AdminTimezonePage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public String getJavaTimezoneOffsets()","name":"getJavaTimezoneOffsets","type":"String","javadoc":null},{"fullQualified":"public String getMomentTimezoneOffsets()","name":"getMomentTimezoneOffsets","type":"String","javadoc":null},{"fullQualified":"public String getJavaTimezoneVersion()","name":"getJavaTimezoneVersion","type":"String","javadoc":null},{"fullQualified":"public String getMomentTimezoneVersion()","name":"getMomentTimezoneVersion","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public AdminTimezonePage(Browser browser)","javadocComment":null}]},{"name":"AppPage","fullyQualifiedName":"teammates.e2e.pageobjects.AppPage","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" Browser instance the page is loaded into. ","lineNumber":74,"isOrphan":false},{"type":"JavadocComment","text":" Use for retrying due to transient UI issues. ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Used by subclasses to create a {@code AppPage} object to wrap around the\n     * given {@code browser} object. Fails if the page content does not match\n     * the page type, as defined by the sub-class.\n     ","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" To minimize test failures due to eventual consistency, we try to","lineNumber":100,"isOrphan":true},{"type":"LineComment","text":" ignore and try again","lineNumber":97,"isOrphan":true},{"type":"LineComment","text":"  reload the page and compare once more.","lineNumber":101,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a new page object representation of the currently open web page in the browser.\n     *\n     * <p>Fails if the new page content does not match content expected in a page of\n     * the type indicated by the parameter {@code typeOfPage}.\n     ","lineNumber":118,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Fails if the new page content does not match content expected in a page of\n     * the type indicated by the parameter {@code newPageType}.\n     ","lineNumber":142,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Waits until the page is fully loaded.\n     ","lineNumber":155,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Waits until the page is fully loaded.\n     *\n     * @param excludeToast Set this to true if toast message's disappearance should not be counted\n     *         as criteria for page load's completion.\n     ","lineNumber":162,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Waits until an element is no longer attached to the DOM or the timeout expires.\n     * @param element the WebElement that expires after {@link TestProperties#TEST_TIMEOUT}\n     * @see org.openqa.selenium.support.ui.FluentWait#until(java.util.function.Function)\n     ","lineNumber":194,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Waits for a confirmation modal to appear and click the confirm button.\n     ","lineNumber":211,"isOrphan":false},{"type":"LineComment","text":" Possible exploration: Change to listening to modal shown event as","lineNumber":222,"isOrphan":true},{"type":"LineComment","text":" this is based on the implementation detail assumption that once modal-backdrop is added the modal is shown","lineNumber":223,"isOrphan":false},{"type":"LineComment","text":" Possible exploration: Change to listening to modal hidden event as","lineNumber":228,"isOrphan":true},{"type":"LineComment","text":" this is based on the implementation detail assumption that once modal-backdrop is removed the modal is hidden","lineNumber":229,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Waits for the element to appear in the page, up to the timeout specified.\n     ","lineNumber":233,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the HTML source of the currently loaded page.\n     ","lineNumber":250,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Simulates the clearing and sending of keys to an element.\n     *\n     * <p><b>Note:</b> This method is not the same as using {@link WebElement#clear} followed by {@link WebElement#sendKeys}.\n     * It avoids double firing of the {@code change} event which may occur when {@link WebElement#clear} is followed by\n     * {@link WebElement#sendKeys}.\n     *\n     * @see AppPage#clearWithoutEvents(WebElement)\n     ","lineNumber":274,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Clears any kind of editable element, but without firing the {@code change} event (unlike {@link WebElement#clear()}).\n     * Avoid using this method if {@link WebElement#clear()} meets the requirements as this method depends on implementation\n     * details.\n     ","lineNumber":294,"isOrphan":false},{"type":"LineComment","text":" This method is a close mirror of HtmlUnitWebElement#clear(), except that events are not handled. Note that","lineNumber":300,"isOrphan":true},{"type":"LineComment","text":" HtmlUnitWebElement is mirrored as opposed to RemoteWebElement (which is used with actual browsers) for convenience","lineNumber":301,"isOrphan":true},{"type":"LineComment","text":" Adapted from ExpectedConditions#stalenessOf which forces a staleness check. This allows a meaningful","lineNumber":305,"isOrphan":true},{"type":"LineComment","text":" and the implementation can differ.","lineNumber":302,"isOrphan":false},{"type":"LineComment","text":" StaleElementReferenceException to be thrown rather than just getting a boolean from ExpectedConditions.","lineNumber":306,"isOrphan":false},{"type":"LineComment","text":" Fail safe in case the implementation of staleness checks is changed","lineNumber":309,"isOrphan":false},{"type":"LineComment","text":" Otherwise we need to do special handling of entering input because `clear` and `sendKeys` work differently.","lineNumber":337,"isOrphan":true},{"type":"LineComment","text":" It is important that a text box element is clickable before we fill it but due to legacy reasons we continue","lineNumber":324,"isOrphan":true},{"type":"LineComment","text":" attempting to fill the text box element even if it's not clickable (which may lead to an unexpected failure","lineNumber":325,"isOrphan":true},{"type":"LineComment","text":" later on)","lineNumber":326,"isOrphan":false},{"type":"LineComment","text":" If the intended value is empty `clear` works well enough for us","lineNumber":331,"isOrphan":false},{"type":"LineComment","text":" See documentation for `clearAndSendKeys` for more details.","lineNumber":338,"isOrphan":false},{"type":"LineComment","text":" blur the element to receive events","lineNumber":341,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get rich text from editor.\n     ","lineNumber":373,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Write rich text to editor.\n     ","lineNumber":383,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Select the option, if it is not already selected.\n     * No action taken if it is already selected.\n     ","lineNumber":392,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Unselect the option, if it is not already unselected.\n     * No action taken if it is already unselected'.\n     ","lineNumber":403,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the text of the option selected in the dropdown.\n     ","lineNumber":414,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Selects option in dropdown based on visible text.\n     ","lineNumber":433,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Selects option in dropdown based on value.\n     ","lineNumber":441,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Asserts that all values in the body of the given table are equal to the expectedTableBodyValues.\n     ","lineNumber":449,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Asserts that all values in the given table row are equal to the expectedRowValues.\n     ","lineNumber":460,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Clicks the element and clicks 'Yes' in the follow up dialog box.\n     * Fails if there is no dialog box.\n     * @return the resulting page.\n     ","lineNumber":483,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns True if the page contains some basic elements expected in a page of the\n     *         specific type. e.g., the top heading.\n     ","lineNumber":494,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns True if there is a corresponding element for the given locator.\n     ","lineNumber":500,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns True if there is a corresponding element for the given id or name.\n     ","lineNumber":507,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the expected condition is evaluated to true immediately.\n     * @see ExpectedConditions\n     ","lineNumber":527,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Clicks a button (can be inside or outside the modal) that dismisses the modal and waits for the modal to be hidden.\n     * The caller must ensure the button is in the modal or a timeout will occur while waiting for the modal to be hidden.\n     * @param dismissModalButton a button that dismisses the modal\n     ","lineNumber":544,"isOrphan":false},{"type":"LineComment","text":" Note: Should first check if the button can actually dismiss the modal otherwise the state will be consistent.","lineNumber":550,"isOrphan":true},{"type":"LineComment","text":" However, it is too difficult to check.","lineNumber":551,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Scrolls element to center and clicks on it.\n     *\n     * <p>As compared to {@link org.openqa.selenium.interactions.Actions#moveToElement(WebElement)}, this method is\n     * more reliable as the element will not get blocked by elements such as the header.\n     *\n     * <p>Furthermore, {@link org.openqa.selenium.interactions.Actions#moveToElement(WebElement)} is currently not\n     * working in Geckodriver.\n     *\n     * <p><b>Note:</b> A \"scroll into view\" Actions primitive is in progress and may allow scrolling element to center.\n     * Tracking issue:\n     * <a href=\"https://github.com/w3c/webdriver/issues/1005\">Missing \"scroll into view\" Actions primitive</a>.\n     *\n     * <p>Also note that there are some other caveats, for example\n     * {@code new Actions(browser.driver).moveToElement(...).click(...).perform()} does not behave consistently across\n     * browsers.\n     * <ul>\n     * <li>In FirefoxDriver, the element is scrolled to and then a click is attempted on the element.\n     * <li>In ChromeDriver, the mouse is scrolled to the element and then a click is attempted on the mouse coordinate,\n     * which means another element can actually be clicked (such as the header or a blocking pop-up).\n     * </ul>\n     *\n     * <p>ChromeDriver also automatically scrolls to an element when clicking an element if it is not in the viewport.\n     ","lineNumber":559,"isOrphan":false},{"type":"LineComment","text":" TODO: migrate to `scrollIntoView` when Geckodriver is adopted","lineNumber":584,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Scrolls element to center.\n     ","lineNumber":589,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Asserts message in toast is equal to the expected message.\n     ","lineNumber":596,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Asserts message in toast is equal to the expected message and contains the expected links.\n     ","lineNumber":603,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Switches to the new browser window just opened.\n     ","lineNumber":629,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Closes current window and switches back to parent window.\n     ","lineNumber":636,"isOrphan":false}],"allMethods":[{"fullQualified":"public static T getNewPageInstance(Browser currentBrowser, Class<T> typeOfPage)","name":"getNewPageInstance","type":"T","javadoc":"\n     * Gets a new page object representation of the currently open web page in the browser.\n     *\n     * <p>Fails if the new page content does not match content expected in a page of\n     * the type indicated by the parameter {@code typeOfPage}.\n     "},{"fullQualified":"public T changePageType(Class<T> newPageType)","name":"changePageType","type":"T","javadoc":"\n     * Fails if the new page content does not match content expected in a page of\n     * the type indicated by the parameter {@code newPageType}.\n     "},{"fullQualified":"public E waitFor(ExpectedCondition<E> expectedCondition)","name":"waitFor","type":"E","javadoc":null},{"fullQualified":"public void waitForPageToLoad()","name":"waitForPageToLoad","type":"void","javadoc":"\n     * Waits until the page is fully loaded.\n     "},{"fullQualified":"public void waitForPageToLoad(boolean excludeToast)","name":"waitForPageToLoad","type":"void","javadoc":"\n     * Waits until the page is fully loaded.\n     *\n     * @param excludeToast Set this to true if toast message's disappearance should not be counted\n     *         as criteria for page load's completion.\n     "},{"fullQualified":"public void waitForElementVisibility(WebElement element)","name":"waitForElementVisibility","type":"void","javadoc":null},{"fullQualified":"public void waitForElementVisibility(By by)","name":"waitForElementVisibility","type":"void","javadoc":null},{"fullQualified":"public void waitForElementToBeClickable(WebElement element)","name":"waitForElementToBeClickable","type":"void","javadoc":null},{"fullQualified":"public static void waitUntilAnimationFinish(Browser browser)","name":"waitUntilAnimationFinish","type":"void","javadoc":null},{"fullQualified":"public void waitUntilAnimationFinish()","name":"waitUntilAnimationFinish","type":"void","javadoc":null},{"fullQualified":"public void waitForElementStaleness(WebElement element)","name":"waitForElementStaleness","type":"void","javadoc":"\n     * Waits until an element is no longer attached to the DOM or the timeout expires.\n     * @param element the WebElement that expires after {@link TestProperties#TEST_TIMEOUT}\n     * @see org.openqa.selenium.support.ui.FluentWait#until(java.util.function.Function)\n     "},{"fullQualified":"public void verifyUnclickable(WebElement element)","name":"verifyUnclickable","type":"void","javadoc":null},{"fullQualified":"public void waitForConfirmationModalAndClickOk()","name":"waitForConfirmationModalAndClickOk","type":"void","javadoc":"\n     * Waits for a confirmation modal to appear and click the confirm button.\n     "},{"fullQualified":"private void waitForModalShown()","name":"waitForModalShown","type":"void","javadoc":null},{"fullQualified":" void waitForModalHidden(WebElement modalBackdrop)","name":"waitForModalHidden","type":"void","javadoc":null},{"fullQualified":"public WebElement waitForElementPresence(By by)","name":"waitForElementPresence","type":"WebElement","javadoc":"\n     * Waits for the element to appear in the page, up to the timeout specified.\n     "},{"fullQualified":"public void reloadPage()","name":"reloadPage","type":"void","javadoc":null},{"fullQualified":"protected Object executeScript(String script, Object... args)","name":"executeScript","type":"Object","javadoc":null},{"fullQualified":"public String getPageSource()","name":"getPageSource","type":"String","javadoc":"\n     * Returns the HTML source of the currently loaded page.\n     "},{"fullQualified":"public String getTitle()","name":"getTitle","type":"String","javadoc":null},{"fullQualified":"public String getPageTitle()","name":"getPageTitle","type":"String","javadoc":null},{"fullQualified":"public void click(By by)","name":"click","type":"void","javadoc":null},{"fullQualified":"protected void click(WebElement element)","name":"click","type":"void","javadoc":null},{"fullQualified":"private void clearAndSendKeys(WebElement element, CharSequence... keysToSend)","name":"clearAndSendKeys","type":"void","javadoc":"\n     * Simulates the clearing and sending of keys to an element.\n     *\n     * <p><b>Note:</b> This method is not the same as using {@link WebElement#clear} followed by {@link WebElement#sendKeys}.\n     * It avoids double firing of the {@code change} event which may occur when {@link WebElement#clear} is followed by\n     * {@link WebElement#sendKeys}.\n     *\n     * @see AppPage#clearWithoutEvents(WebElement)\n     "},{"fullQualified":"private Map<String, Object> clearWithoutEvents(WebElement element)","name":"clearWithoutEvents","type":"Map<String,Object>","javadoc":"\n     * Clears any kind of editable element, but without firing the {@code change} event (unlike {@link WebElement#clear()}).\n     * Avoid using this method if {@link WebElement#clear()} meets the requirements as this method depends on implementation\n     * details.\n     "},{"fullQualified":"protected void fillTextBox(WebElement textBoxElement, String value)","name":"fillTextBox","type":"void","javadoc":null},{"fullQualified":"protected void fillDatePicker(WebElement dateBox, Instant startInstant, String timeZone)","name":"fillDatePicker","type":"void","javadoc":null},{"fullQualified":"protected void fillFileBox(RemoteWebElement fileBoxElement, String fileName)","name":"fillFileBox","type":"void","javadoc":null},{"fullQualified":"protected String getEditorRichText(WebElement editor)","name":"getEditorRichText","type":"String","javadoc":"\n     * Get rich text from editor.\n     "},{"fullQualified":"protected void writeToRichTextEditor(WebElement editor, String text)","name":"writeToRichTextEditor","type":"void","javadoc":"\n     * Write rich text to editor.\n     "},{"fullQualified":"protected void markOptionAsSelected(WebElement option)","name":"markOptionAsSelected","type":"void","javadoc":"\n     * Select the option, if it is not already selected.\n     * No action taken if it is already selected.\n     "},{"fullQualified":"protected void markOptionAsUnselected(WebElement option)","name":"markOptionAsUnselected","type":"void","javadoc":"\n     * Unselect the option, if it is not already unselected.\n     * No action taken if it is already unselected'.\n     "},{"fullQualified":"protected String getSelectedDropdownOptionText(WebElement dropdown)","name":"getSelectedDropdownOptionText","type":"String","javadoc":"\n     * Returns the text of the option selected in the dropdown.\n     "},{"fullQualified":"protected void selectDropdownOptionByText(WebElement dropdown, String text)","name":"selectDropdownOptionByText","type":"void","javadoc":"\n     * Selects option in dropdown based on visible text.\n     "},{"fullQualified":"protected void selectDropdownOptionByValue(WebElement dropdown, String value)","name":"selectDropdownOptionByValue","type":"void","javadoc":"\n     * Selects option in dropdown based on value.\n     "},{"fullQualified":"protected void verifyTableBodyValues(WebElement table, String[][] expectedTableBodyValues)","name":"verifyTableBodyValues","type":"void","javadoc":"\n     * Asserts that all values in the body of the given table are equal to the expectedTableBodyValues.\n     "},{"fullQualified":"protected void verifyTableRowValues(WebElement row, String[] expectedRowValues)","name":"verifyTableRowValues","type":"void","javadoc":"\n     * Asserts that all values in the given table row are equal to the expectedRowValues.\n     "},{"fullQualified":"public void verifyBannerContent(NotificationAttributes expected)","name":"verifyBannerContent","type":"void","javadoc":null},{"fullQualified":"public boolean isBannerVisible()","name":"isBannerVisible","type":"boolean","javadoc":null},{"fullQualified":"public AppPage clickAndConfirm(WebElement elementToClick)","name":"clickAndConfirm","type":"AppPage","javadoc":"\n     * Clicks the element and clicks 'Yes' in the follow up dialog box.\n     * Fails if there is no dialog box.\n     * @return the resulting page.\n     "},{"fullQualified":"protected abstract boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":"\n     * Returns True if the page contains some basic elements expected in a page of the\n     *         specific type. e.g., the top heading.\n     "},{"fullQualified":"public boolean isElementPresent(By by)","name":"isElementPresent","type":"boolean","javadoc":"\n     * Returns True if there is a corresponding element for the given locator.\n     "},{"fullQualified":"public boolean isElementPresent(String elementId)","name":"isElementPresent","type":"boolean","javadoc":"\n     * Returns True if there is a corresponding element for the given id or name.\n     "},{"fullQualified":"public boolean isElementVisible(By by)","name":"isElementVisible","type":"boolean","javadoc":null},{"fullQualified":"private boolean isExpectedCondition(ExpectedCondition<?> expectedCondition)","name":"isExpectedCondition","type":"boolean","javadoc":"\n     * Returns true if the expected condition is evaluated to true immediately.\n     * @see ExpectedConditions\n     "},{"fullQualified":"public void clickDismissModalButtonAndWaitForModalHidden(WebElement dismissModalButton)","name":"clickDismissModalButtonAndWaitForModalHidden","type":"void","javadoc":"\n     * Clicks a button (can be inside or outside the modal) that dismisses the modal and waits for the modal to be hidden.\n     * The caller must ensure the button is in the modal or a timeout will occur while waiting for the modal to be hidden.\n     * @param dismissModalButton a button that dismisses the modal\n     "},{"fullQualified":" void scrollElementToCenterAndClick(WebElement element)","name":"scrollElementToCenterAndClick","type":"void","javadoc":"\n     * Scrolls element to center and clicks on it.\n     *\n     * <p>As compared to {@link org.openqa.selenium.interactions.Actions#moveToElement(WebElement)}, this method is\n     * more reliable as the element will not get blocked by elements such as the header.\n     *\n     * <p>Furthermore, {@link org.openqa.selenium.interactions.Actions#moveToElement(WebElement)} is currently not\n     * working in Geckodriver.\n     *\n     * <p><b>Note:</b> A \"scroll into view\" Actions primitive is in progress and may allow scrolling element to center.\n     * Tracking issue:\n     * <a href=\"https://github.com/w3c/webdriver/issues/1005\">Missing \"scroll into view\" Actions primitive</a>.\n     *\n     * <p>Also note that there are some other caveats, for example\n     * {@code new Actions(browser.driver).moveToElement(...).click(...).perform()} does not behave consistently across\n     * browsers.\n     * <ul>\n     * <li>In FirefoxDriver, the element is scrolled to and then a click is attempted on the element.\n     * <li>In ChromeDriver, the mouse is scrolled to the element and then a click is attempted on the mouse coordinate,\n     * which means another element can actually be clicked (such as the header or a blocking pop-up).\n     * </ul>\n     *\n     * <p>ChromeDriver also automatically scrolls to an element when clicking an element if it is not in the viewport.\n     "},{"fullQualified":" void scrollElementToCenter(WebElement element)","name":"scrollElementToCenter","type":"void","javadoc":"\n     * Scrolls element to center.\n     "},{"fullQualified":"public void verifyStatusMessage(String expectedMessage)","name":"verifyStatusMessage","type":"void","javadoc":"\n     * Asserts message in toast is equal to the expected message.\n     "},{"fullQualified":"public void verifyStatusMessageWithLinks(String expectedMessage, String[] expectedLinks)","name":"verifyStatusMessageWithLinks","type":"void","javadoc":"\n     * Asserts message in toast is equal to the expected message and contains the expected links.\n     "},{"fullQualified":"protected void switchToNewWindow()","name":"switchToNewWindow","type":"void","javadoc":"\n     * Switches to the new browser window just opened.\n     "},{"fullQualified":"public void closeCurrentWindowAndSwitchToParentWindow()","name":"closeCurrentWindowAndSwitchToParentWindow","type":"void","javadoc":"\n     * Closes current window and switches back to parent window.\n     "},{"fullQualified":" String getDisplayGiverName(FeedbackParticipantType type)","name":"getDisplayGiverName","type":"String","javadoc":null},{"fullQualified":" String getDisplayRecipientName(FeedbackParticipantType type)","name":"getDisplayRecipientName","type":"String","javadoc":null},{"fullQualified":" String getDisplayedDateTime(Instant instant, String timeZone, String pattern)","name":"getDisplayedDateTime","type":"String","javadoc":null},{"fullQualified":"private String getFullDateString(Instant instant, String timeZone)","name":"getFullDateString","type":"String","javadoc":null},{"fullQualified":"private String getYearString(Instant instant, String timeZone)","name":"getYearString","type":"String","javadoc":null},{"fullQualified":"private String getMonthString(Instant instant, String timeZone)","name":"getMonthString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public AppPage(Browser browser)","javadocComment":"\n     * Used by subclasses to create a {@code AppPage} object to wrap around the\n     * given {@code browser} object. Fails if the page content does not match\n     * the page type, as defined by the sub-class.\n     "}]},{"name":"Browser","fullyQualifiedName":"teammates.e2e.pageobjects.Browser","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * The {@link WebDriver} object that drives the Browser instance.\n     ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Keeps track of multiple windows opened by the {@link WebDriver}.\n     ","lineNumber":47,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Switches to new browser window for browsing.\n     ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Waits for the page to load. This includes all AJAX requests and Angular animations in the page.\n     *\n     * @param excludeToast Set this to true if toast message's disappearance should not be counted\n     *         as criteria for page load's completion.\n     ","lineNumber":81,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Waits for the page to load by only looking at the page's readyState.\n     ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Closes the current browser window and switches back to the last window used previously.\n     ","lineNumber":110,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Closes the current browser.\n     ","lineNumber":118,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Visits the given URL.\n     ","lineNumber":125,"isOrphan":false},{"type":"LineComment","text":" Recent chromedriver has bug in setting page load timeout, which can potentially cause infinitely long waits","lineNumber":130,"isOrphan":false},{"type":"LineComment","text":" Allow CSV files to be download automatically, without a download popup.","lineNumber":164,"isOrphan":true},{"type":"LineComment","text":" This method is used because Selenium cannot directly interact with the download dialog.","lineNumber":165,"isOrphan":true},{"type":"LineComment","text":" Taken from http://stackoverflow.com/questions/24852709","lineNumber":166,"isOrphan":false}],"allMethods":[{"fullQualified":"public void addCookie(String name, String value, boolean isSecure, boolean isHttpOnly)","name":"addCookie","type":"void","javadoc":null},{"fullQualified":"public void switchToNewWindow()","name":"switchToNewWindow","type":"void","javadoc":"\n     * Switches to new browser window for browsing.\n     "},{"fullQualified":"public void waitForPageLoad(boolean excludeToast)","name":"waitForPageLoad","type":"void","javadoc":"\n     * Waits for the page to load. This includes all AJAX requests and Angular animations in the page.\n     *\n     * @param excludeToast Set this to true if toast message's disappearance should not be counted\n     *         as criteria for page load's completion.\n     "},{"fullQualified":"public void waitForPageReadyState()","name":"waitForPageReadyState","type":"void","javadoc":"\n     * Waits for the page to load by only looking at the page's readyState.\n     "},{"fullQualified":"public void closeCurrentWindowAndSwitchToParentWindow()","name":"closeCurrentWindowAndSwitchToParentWindow","type":"void","javadoc":"\n     * Closes the current browser window and switches back to the last window used previously.\n     "},{"fullQualified":"public void close()","name":"close","type":"void","javadoc":"\n     * Closes the current browser.\n     "},{"fullQualified":"public void goToUrl(String url)","name":"goToUrl","type":"void","javadoc":"\n     * Visits the given URL.\n     "},{"fullQualified":"private WebDriver createWebDriver()","name":"createWebDriver","type":"WebDriver","javadoc":null}],"allConstructors":[{"identifier":"public Browser()","javadocComment":null}]},{"name":"CourseJoinConfirmationPage","fullyQualifiedName":"teammates.e2e.pageobjects.CourseJoinConfirmationPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" This page has no unique indicator as the content depends on whether it follows the happy path or not","lineNumber":22,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyJoiningUser(String googleId)","name":"verifyJoiningUser","type":"void","javadoc":null},{"fullQualified":"public T confirmJoinCourse(Class<T> typeOfPage)","name":"confirmJoinCourse","type":"T","javadoc":null},{"fullQualified":"public void verifyDisplayedMessage(String message)","name":"verifyDisplayedMessage","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public CourseJoinConfirmationPage(Browser browser)","javadocComment":null}]},{"name":"DevServerLoginPage","fullyQualifiedName":"teammates.e2e.pageobjects.DevServerLoginPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void loginAsUser(String username)","name":"loginAsUser","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public DevServerLoginPage(Browser browser)","javadocComment":null}]},{"name":"ErrorReportingModal","fullyQualifiedName":"teammates.e2e.pageobjects.ErrorReportingModal","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyErrorMessage(String message)","name":"verifyErrorMessage","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public ErrorReportingModal(Browser browser)","javadocComment":null}]},{"name":"FeedbackResultsPage","fullyQualifiedName":"teammates.e2e.pageobjects.FeedbackResultsPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" success","lineNumber":102,"isOrphan":true}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyFeedbackSessionDetails(FeedbackSessionAttributes feedbackSession, CourseAttributes course)","name":"verifyFeedbackSessionDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyQuestionDetails(int questionNum, FeedbackQuestionAttributes question)","name":"verifyQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyResponseDetails(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses, List<FeedbackResponseAttributes> otherResponses, Set<String> visibleGivers, Set<String> visibleRecipients)","name":"verifyResponseDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyQuestionNotPresent(int questionNum)","name":"verifyQuestionNotPresent","type":"void","javadoc":null},{"fullQualified":"public void verifyNumScaleStatistics(int questionNum, String[] expectedStats)","name":"verifyNumScaleStatistics","type":"void","javadoc":null},{"fullQualified":"public void verifyRubricStatistics(int questionNum, String[][] expectedStats, String[][] expectedStatsExcludingSelf, String[][] expectedStatsPerRecipient)","name":"verifyRubricStatistics","type":"void","javadoc":null},{"fullQualified":"public void verifyContributionStatistics(int questionNum, String[] expectedStats)","name":"verifyContributionStatistics","type":"void","javadoc":null},{"fullQualified":"public void verifyCommentDetails(int questionNum, String commentGiver, String commentEditor, String commentString)","name":"verifyCommentDetails","type":"void","javadoc":null},{"fullQualified":"private boolean hasDisplayedResponses(FeedbackQuestionAttributes question)","name":"hasDisplayedResponses","type":"boolean","javadoc":null},{"fullQualified":"private void verifyGivenResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> givenResponses)","name":"verifyGivenResponses","type":"void","javadoc":null},{"fullQualified":"private void verifyOtherResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> otherResponses, Set<String> visibleGivers, Set<String> visibleRecipients)","name":"verifyOtherResponses","type":"void","javadoc":null},{"fullQualified":"private Set<String> getRecipients(List<FeedbackResponseAttributes> responses)","name":"getRecipients","type":"Set<String>","javadoc":null},{"fullQualified":"private void verifyResponseForRecipient(FeedbackQuestionAttributes question, String recipient, List<FeedbackResponseAttributes> otherResponses, Set<String> visibleGivers, Set<String> visibleRecipients)","name":"verifyResponseForRecipient","type":"void","javadoc":null},{"fullQualified":"private void verifyAnonymousResponseView(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> expectedResponses, boolean isGiverVisible)","name":"verifyAnonymousResponseView","type":"void","javadoc":null},{"fullQualified":"private boolean isResponseEqual(FeedbackQuestionAttributes question, WebElement responseField, FeedbackResponseAttributes response)","name":"isResponseEqual","type":"boolean","javadoc":null},{"fullQualified":"private boolean isRubricResponseEqual(WebElement responseField, FeedbackResponseAttributes response)","name":"isRubricResponseEqual","type":"boolean","javadoc":null},{"fullQualified":"private boolean isAnonymous(String identifier)","name":"isAnonymous","type":"boolean","javadoc":null},{"fullQualified":"private boolean isAnyAnonymousResponseEqual(FeedbackQuestionAttributes question, WebElement responseView, FeedbackResponseAttributes response)","name":"isAnyAnonymousResponseEqual","type":"boolean","javadoc":null},{"fullQualified":"private String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"private String getCourseName()","name":"getCourseName","type":"String","javadoc":null},{"fullQualified":"private String getCourseInstitute()","name":"getCourseInstitute","type":"String","javadoc":null},{"fullQualified":"private String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"private String getOpeningTime()","name":"getOpeningTime","type":"String","javadoc":null},{"fullQualified":"private String getClosingTime()","name":"getClosingTime","type":"String","javadoc":null},{"fullQualified":"private void assertDateEquals(String actual, Instant instant, String timeZone)","name":"assertDateEquals","type":"void","javadoc":null},{"fullQualified":"private String getDateStringWithAbbr(Instant instant, String timeZone)","name":"getDateStringWithAbbr","type":"String","javadoc":null},{"fullQualified":"private String getDateStringWithOffset(Instant instant, String timeZone)","name":"getDateStringWithOffset","type":"String","javadoc":null},{"fullQualified":"private String getQuestionText(int questionNum)","name":"getQuestionText","type":"String","javadoc":null},{"fullQualified":"private String getMcqAddInfo(FeedbackMcqQuestionDetails questionDetails)","name":"getMcqAddInfo","type":"String","javadoc":null},{"fullQualified":"private String getMsqAddInfo(FeedbackMsqQuestionDetails questionDetails)","name":"getMsqAddInfo","type":"String","javadoc":null},{"fullQualified":"private String appendMultiChoiceInfo(String info, FeedbackParticipantType generateOptionsFor, List<String> choices, boolean isOtherEnabled)","name":"appendMultiChoiceInfo","type":"String","javadoc":null},{"fullQualified":"private String getRubricAddInfo(FeedbackRubricQuestionDetails questionDetails)","name":"getRubricAddInfo","type":"String","javadoc":null},{"fullQualified":"private String getNumScaleAddInfo(FeedbackNumericalScaleQuestionDetails questionDetails)","name":"getNumScaleAddInfo","type":"String","javadoc":null},{"fullQualified":"private String getRankOptionsAddInfo(FeedbackRankOptionsQuestionDetails questionDetails)","name":"getRankOptionsAddInfo","type":"String","javadoc":null},{"fullQualified":"private String getConstSumOptionsAddInfo(FeedbackConstantSumQuestionDetails questionDetails)","name":"getConstSumOptionsAddInfo","type":"String","javadoc":null},{"fullQualified":"private String getConstSumRecipientsAddInfo(FeedbackConstantSumQuestionDetails questionDetails)","name":"getConstSumRecipientsAddInfo","type":"String","javadoc":null},{"fullQualified":"private StringBuilder appendOptions(StringBuilder info, List<String> options)","name":"appendOptions","type":"StringBuilder","javadoc":null},{"fullQualified":"private WebElement getQuestionResponsesSection(int questionNum)","name":"getQuestionResponsesSection","type":"WebElement","javadoc":null},{"fullQualified":"private void showAdditionalInfo(int qnNumber)","name":"showAdditionalInfo","type":"void","javadoc":null},{"fullQualified":"private String getAdditionalInfo(int questionNum)","name":"getAdditionalInfo","type":"String","javadoc":null},{"fullQualified":"private WebElement getGivenResponseField(int questionNum, String receiver)","name":"getGivenResponseField","type":"WebElement","javadoc":null},{"fullQualified":"private int getGivenRecipientIndex(int questionNum, String recipient)","name":"getGivenRecipientIndex","type":"int","javadoc":null},{"fullQualified":"private String getAdditionalInfoString(FeedbackQuestionAttributes question)","name":"getAdditionalInfoString","type":"String","javadoc":null},{"fullQualified":"private String getAnswerString(FeedbackQuestionAttributes question, FeedbackResponseDetails response)","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"private String getRankOptionsAnsString(FeedbackRankOptionsQuestionDetails question, FeedbackRankOptionsResponseDetails responseDetails)","name":"getRankOptionsAnsString","type":"String","javadoc":null},{"fullQualified":"private String getConstSumOptionsAnsString(FeedbackConstantSumQuestionDetails question, FeedbackConstantSumResponseDetails responseDetails)","name":"getConstSumOptionsAnsString","type":"String","javadoc":null},{"fullQualified":"private List<WebElement> getAllResponseViews(int questionNumber)","name":"getAllResponseViews","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getAllResponseFields(WebElement responseView)","name":"getAllResponseFields","type":"List<WebElement>","javadoc":null},{"fullQualified":"private WebElement getNumScaleStatistics(int questionNum)","name":"getNumScaleStatistics","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getRubricExcludeSelfCheckbox(int questionNum)","name":"getRubricExcludeSelfCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getRubricStatistics(int questionNum)","name":"getRubricStatistics","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getRubricPerRecipientStatsPerCriterion(int questionNum)","name":"getRubricPerRecipientStatsPerCriterion","type":"WebElement","javadoc":null},{"fullQualified":"private void sortRubricPerRecipientStatsPerCriterion(int questionNum, int colNum)","name":"sortRubricPerRecipientStatsPerCriterion","type":"void","javadoc":null},{"fullQualified":"private WebElement getRubricPerRecipientStatsOverall(int questionNum)","name":"getRubricPerRecipientStatsOverall","type":"WebElement","javadoc":null},{"fullQualified":"private void sortRubricPerRecipientStatsOverall(int questionNum, int colNum)","name":"sortRubricPerRecipientStatsOverall","type":"void","javadoc":null},{"fullQualified":"private boolean isCommentByResponseGiver(WebElement commentField)","name":"isCommentByResponseGiver","type":"boolean","javadoc":null},{"fullQualified":"private String getCommentGiver(WebElement commentField)","name":"getCommentGiver","type":"String","javadoc":null},{"fullQualified":"private String getCommentEditor(WebElement commentField)","name":"getCommentEditor","type":"String","javadoc":null},{"fullQualified":"private List<WebElement> getCommentFields(int questionNum)","name":"getCommentFields","type":"List<WebElement>","javadoc":null},{"fullQualified":"private WebElement getCommentField(int questionNum, String commentString)","name":"getCommentField","type":"WebElement","javadoc":null},{"fullQualified":"private int getGiverIndex(WebElement response, String giver)","name":"getGiverIndex","type":"int","javadoc":null},{"fullQualified":"private int getRecipientIndex(int questionNum, String recipient)","name":"getRecipientIndex","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackResultsPage(Browser browser)","javadocComment":null}]},{"name":"FeedbackSubmitPage","fullyQualifiedName":"teammates.e2e.pageobjects.FeedbackSubmitPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" Scroll to the question to ensure that the details are fully loaded","lineNumber":583,"isOrphan":false},{"type":"LineComment","text":" For questions with recipient none or self.","lineNumber":705,"isOrphan":false},{"type":"LineComment","text":" For questions with flexible recipient.","lineNumber":710,"isOrphan":false},{"type":"LineComment","text":" continue","lineNumber":723,"isOrphan":true},{"type":"LineComment","text":" we are not likely to set test data exceeding this number","lineNumber":725,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyFeedbackSessionDetails(FeedbackSessionAttributes feedbackSession, CourseAttributes course)","name":"verifyFeedbackSessionDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyNumQuestions(int expected)","name":"verifyNumQuestions","type":"void","javadoc":null},{"fullQualified":"public void verifyQuestionDetails(int qnNumber, FeedbackQuestionAttributes questionAttributes)","name":"verifyQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyLimitedRecipients(int qnNumber, int numRecipients, List<String> recipientNames)","name":"verifyLimitedRecipients","type":"void","javadoc":null},{"fullQualified":"public void verifyRecipients(int qnNumber, List<String> recipientNames, String role)","name":"verifyRecipients","type":"void","javadoc":null},{"fullQualified":"public void verifyWarningMessageForPartialResponse(int[] unansweredQuestions)","name":"verifyWarningMessageForPartialResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyCannotSubmit()","name":"verifyCannotSubmit","type":"void","javadoc":null},{"fullQualified":"public void addComment(int qnNumber, String recipient, String newComment)","name":"addComment","type":"void","javadoc":null},{"fullQualified":"public void editComment(int qnNumber, String recipient, String editedComment)","name":"editComment","type":"void","javadoc":null},{"fullQualified":"public void deleteComment(int qnNumber, String recipient)","name":"deleteComment","type":"void","javadoc":null},{"fullQualified":"public void verifyComment(int qnNumber, String recipient, String expectedComment)","name":"verifyComment","type":"void","javadoc":null},{"fullQualified":"public void verifyNoCommentPresent(int qnNumber, String recipient)","name":"verifyNoCommentPresent","type":"void","javadoc":null},{"fullQualified":"public void verifyTextQuestion(int qnNumber, FeedbackTextQuestionDetails questionDetails)","name":"verifyTextQuestion","type":"void","javadoc":null},{"fullQualified":"public void fillTextResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"fillTextResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyTextResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"verifyTextResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyMcqQuestion(int qnNumber, String recipient, FeedbackMcqQuestionDetails questionDetails)","name":"verifyMcqQuestion","type":"void","javadoc":null},{"fullQualified":"public void verifyGeneratedMcqQuestion(int qnNumber, String recipient, List<String> options)","name":"verifyGeneratedMcqQuestion","type":"void","javadoc":null},{"fullQualified":"public void fillMcqResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"fillMcqResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyMcqResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"verifyMcqResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyMsqQuestion(int qnNumber, String recipient, FeedbackMsqQuestionDetails questionDetails)","name":"verifyMsqQuestion","type":"void","javadoc":null},{"fullQualified":"private void verifyMsqSelectableOptionsMessage(int qnNumber, FeedbackMsqQuestionDetails questionDetails)","name":"verifyMsqSelectableOptionsMessage","type":"void","javadoc":null},{"fullQualified":"public void verifyGeneratedMsqQuestion(int qnNumber, String recipient, FeedbackMsqQuestionDetails questionDetails, List<String> options)","name":"verifyGeneratedMsqQuestion","type":"void","javadoc":null},{"fullQualified":"public void fillMsqResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"fillMsqResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyMsqResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"verifyMsqResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyNumScaleQuestion(int qnNumber, String recipient, FeedbackNumericalScaleQuestionDetails questionDetails)","name":"verifyNumScaleQuestion","type":"void","javadoc":null},{"fullQualified":"public void fillNumScaleResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"fillNumScaleResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyNumScaleResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"verifyNumScaleResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyConstSumQuestion(int qnNumber, String recipient, FeedbackConstantSumQuestionDetails questionDetails)","name":"verifyConstSumQuestion","type":"void","javadoc":null},{"fullQualified":"public void fillConstSumOptionResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"fillConstSumOptionResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyConstSumOptionResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"verifyConstSumOptionResponse","type":"void","javadoc":null},{"fullQualified":"public void fillConstSumRecipientResponse(int qnNumber, List<FeedbackResponseAttributes> responses)","name":"fillConstSumRecipientResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyConstSumRecipientResponse(int qnNumber, List<FeedbackResponseAttributes> responses)","name":"verifyConstSumRecipientResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyContributionQuestion(int qnNumber, FeedbackContributionQuestionDetails questionDetails)","name":"verifyContributionQuestion","type":"void","javadoc":null},{"fullQualified":"public void fillContributionResponse(int qnNumber, List<FeedbackResponseAttributes> responses)","name":"fillContributionResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyContributionResponse(int qnNumber, List<FeedbackResponseAttributes> responses)","name":"verifyContributionResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyRubricQuestion(int qnNumber, String recipient, FeedbackRubricQuestionDetails questionDetails)","name":"verifyRubricQuestion","type":"void","javadoc":null},{"fullQualified":"public void fillRubricResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"fillRubricResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyRubricResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"verifyRubricResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyRankQuestion(int qnNumber, String recipient, FeedbackRankQuestionDetails questionDetails)","name":"verifyRankQuestion","type":"void","javadoc":null},{"fullQualified":"public void fillRankOptionResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"fillRankOptionResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyRankOptionResponse(int qnNumber, String recipient, FeedbackResponseAttributes response)","name":"verifyRankOptionResponse","type":"void","javadoc":null},{"fullQualified":"public void fillRankRecipientResponse(int qnNumber, List<FeedbackResponseAttributes> responses)","name":"fillRankRecipientResponse","type":"void","javadoc":null},{"fullQualified":"public void verifyRankRecipientResponse(int qnNumber, List<FeedbackResponseAttributes> responses)","name":"verifyRankRecipientResponse","type":"void","javadoc":null},{"fullQualified":"private String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"private String getCourseName()","name":"getCourseName","type":"String","javadoc":null},{"fullQualified":"private String getCourseInstitute()","name":"getCourseInstitute","type":"String","javadoc":null},{"fullQualified":"private String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"private String getOpeningTime()","name":"getOpeningTime","type":"String","javadoc":null},{"fullQualified":"private String getClosingTime()","name":"getClosingTime","type":"String","javadoc":null},{"fullQualified":"private String getInstructions()","name":"getInstructions","type":"String","javadoc":null},{"fullQualified":"private void assertDateEquals(String actual, Instant instant, String timeZone)","name":"assertDateEquals","type":"void","javadoc":null},{"fullQualified":"private String getDateStringWithAbbr(Instant instant, String timeZone)","name":"getDateStringWithAbbr","type":"String","javadoc":null},{"fullQualified":"private String getDateStringWithOffset(Instant instant, String timeZone)","name":"getDateStringWithOffset","type":"String","javadoc":null},{"fullQualified":"private WebElement getQuestionForm(int qnNumber)","name":"getQuestionForm","type":"WebElement","javadoc":null},{"fullQualified":"private String getQuestionBrief(int qnNumber)","name":"getQuestionBrief","type":"String","javadoc":null},{"fullQualified":"private void verifyVisibilityList(int qnNumber, FeedbackQuestionAttributes questionAttributes)","name":"verifyVisibilityList","type":"void","javadoc":null},{"fullQualified":"private void verifyVisibilityStringPresent(int qnNumber, String expectedString)","name":"verifyVisibilityStringPresent","type":"void","javadoc":null},{"fullQualified":"private String getVisibilityString(FeedbackQuestionAttributes questionAttributes, FeedbackParticipantType viewerType)","name":"getVisibilityString","type":"String","javadoc":null},{"fullQualified":"private String getViewerString(FeedbackParticipantType viewerType, FeedbackParticipantType recipientType)","name":"getViewerString","type":"String","javadoc":null},{"fullQualified":"private String getRecipientString(FeedbackParticipantType recipientType)","name":"getRecipientString","type":"String","javadoc":null},{"fullQualified":"public void clickSubmitQuestionButton(int qnNumber)","name":"clickSubmitQuestionButton","type":"void","javadoc":null},{"fullQualified":"public void clickSubmitAllQuestionsButton()","name":"clickSubmitAllQuestionsButton","type":"void","javadoc":null},{"fullQualified":"private WebElement getSubmitAllQuestionsButton()","name":"getSubmitAllQuestionsButton","type":"WebElement","javadoc":null},{"fullQualified":"private String getQuestionDescription(int qnNumber)","name":"getQuestionDescription","type":"String","javadoc":null},{"fullQualified":"private WebElement getCommentSection(int qnNumber, String recipient)","name":"getCommentSection","type":"WebElement","javadoc":null},{"fullQualified":"private void writeToCommentEditor(WebElement commentSection, String comment)","name":"writeToCommentEditor","type":"void","javadoc":null},{"fullQualified":"private int getRecipientIndex(int qnNumber, String recipient)","name":"getRecipientIndex","type":"int","javadoc":null},{"fullQualified":"private WebElement getTextResponseEditor(int qnNumber, String recipient)","name":"getTextResponseEditor","type":"WebElement","javadoc":null},{"fullQualified":"private String getResponseLengthText(int qnNumber, String recipient)","name":"getResponseLengthText","type":"String","javadoc":null},{"fullQualified":"private String getDoubleString(Double value)","name":"getDoubleString","type":"String","javadoc":null},{"fullQualified":"private WebElement getMcqSection(int qnNumber, String recipient)","name":"getMcqSection","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMcqOtherOptionRadioBtn(int qnNumber, String recipient)","name":"getMcqOtherOptionRadioBtn","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMcqOtherOptionTextbox(int qnNumber, String recipient)","name":"getMcqOtherOptionTextbox","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getMcqOptions(int qnNumber, String recipient)","name":"getMcqOptions","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getMcqRadioBtns(int qnNumber, String recipient)","name":"getMcqRadioBtns","type":"List<WebElement>","javadoc":null},{"fullQualified":"private WebElement getMsqSection(int qnNumber, String recipient)","name":"getMsqSection","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMsqOtherOptionCheckbox(int qnNumber, String recipient)","name":"getMsqOtherOptionCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMsqOtherOptionTextbox(int qnNumber, String recipient)","name":"getMsqOtherOptionTextbox","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getMsqOptions(int qnNumber, String recipient)","name":"getMsqOptions","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getMsqCheckboxes(int qnNumber, String recipient)","name":"getMsqCheckboxes","type":"List<WebElement>","javadoc":null},{"fullQualified":"private WebElement getNumScaleSection(int qnNumber, String recipient)","name":"getNumScaleSection","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getNumScaleInput(int qnNumber, String recipient)","name":"getNumScaleInput","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getConstSumOptionsSection(int qnNumber, String recipient)","name":"getConstSumOptionsSection","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getConstSumOptions(int qnNumber, String recipient)","name":"getConstSumOptions","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getConstSumInputs(int qnNumber, String recipient)","name":"getConstSumInputs","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getConstSumRecipientInputs(int qnNumber)","name":"getConstSumRecipientInputs","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getContributionDropdowns(int questionNum)","name":"getContributionDropdowns","type":"List<WebElement>","javadoc":null},{"fullQualified":"private String getContributionString(int answer)","name":"getContributionString","type":"String","javadoc":null},{"fullQualified":"private WebElement getRubricSection(int qnNumber, String recipient)","name":"getRubricSection","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getRubricTable(int qnNumber, String recipient)","name":"getRubricTable","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getRubricInputs(int qnNumber, String recipient, int rowNumber)","name":"getRubricInputs","type":"List<WebElement>","javadoc":null},{"fullQualified":"private WebElement getRankOptionsSection(int qnNumber, String recipient)","name":"getRankOptionsSection","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getRankOptions(int questionNum, String recipient)","name":"getRankOptions","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getRankOptionsDropdowns(int questionNum, String recipient)","name":"getRankOptionsDropdowns","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getRankRecipientDropdowns(int questionNum)","name":"getRankRecipientDropdowns","type":"List<WebElement>","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSubmitPage(Browser browser)","javadocComment":null}]},{"name":"HomePage","fullyQualifiedName":"teammates.e2e.pageobjects.HomePage","isInterface":false,"codeComments":[{"type":"LineComment","text":" The load state of this page cannot be determined using Angular testability","lineNumber":19,"isOrphan":true},{"type":"LineComment","text":" as there is a setInterval operation in the page (for the testimonial container),","lineNumber":20,"isOrphan":true},{"type":"LineComment","text":" which causes Angular testability to never stabilize as per their specification.","lineNumber":21,"isOrphan":true},{"type":"LineComment","text":"","lineNumber":22,"isOrphan":true},{"type":"LineComment","text":" Since this page is a static page, we can fall back to the old way of","lineNumber":23,"isOrphan":true},{"type":"LineComment","text":" just checking the document.readyState variable.","lineNumber":24,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void waitForPageToLoad()","name":"waitForPageToLoad","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public HomePage(Browser browser)","javadocComment":null}]},{"name":"IanaTimezonePage","fullyQualifiedName":"teammates.e2e.pageobjects.IanaTimezonePage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public String getVersion()","name":"getVersion","type":"String","javadoc":null},{"fullQualified":"public String getReleaseDate()","name":"getReleaseDate","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public IanaTimezonePage(Browser browser)","javadocComment":null}]},{"name":"InstructorAuditLogsPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorAuditLogsPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void startSearching()","name":"startSearching","type":"void","javadoc":null},{"fullQualified":"public Boolean isLogPresentForSession(String sessionName)","name":"isLogPresentForSession","type":"Boolean","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getStudentName()","name":"getStudentName","type":"String","javadoc":null},{"fullQualified":"public String getLogsFromDate()","name":"getLogsFromDate","type":"String","javadoc":null},{"fullQualified":"public String getLogsToDate()","name":"getLogsToDate","type":"String","javadoc":null},{"fullQualified":"public String getLogsFromTime()","name":"getLogsFromTime","type":"String","javadoc":null},{"fullQualified":"public String getLogsToTime()","name":"getLogsToTime","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public void setStudentName(String studentName)","name":"setStudentName","type":"void","javadoc":null},{"fullQualified":"public void setLogsFromDateTime(Instant instant, String timeZone)","name":"setLogsFromDateTime","type":"void","javadoc":null},{"fullQualified":"public void setLogsToDateTime(Instant instant, String timeZone)","name":"setLogsToDateTime","type":"void","javadoc":null},{"fullQualified":"private String getTimeString(Instant instant, String timeZone)","name":"getTimeString","type":"String","javadoc":null},{"fullQualified":"private void setDateTime(WebElement dateBox, WebElement timeBox, Instant startInstant, String timeZone)","name":"setDateTime","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public InstructorAuditLogsPage(Browser browser)","javadocComment":null}]},{"name":"InstructorCourseDetailsPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorCourseDetailsPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyCourseDetails(CourseAttributes course, InstructorAttributes[] instructors, int numSections, int numTeams, int numStudents)","name":"verifyCourseDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentDetails(StudentAttributes[] students)","name":"verifyStudentDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyNumStudents(int expected)","name":"verifyNumStudents","type":"void","javadoc":null},{"fullQualified":"public void sendInvite(StudentAttributes student)","name":"sendInvite","type":"void","javadoc":null},{"fullQualified":"public void remindAllToJoin()","name":"remindAllToJoin","type":"void","javadoc":null},{"fullQualified":"public void downloadStudentList()","name":"downloadStudentList","type":"void","javadoc":null},{"fullQualified":"public void sortByName()","name":"sortByName","type":"void","javadoc":null},{"fullQualified":"public void sortByStatus()","name":"sortByStatus","type":"void","javadoc":null},{"fullQualified":"public void deleteStudent(StudentAttributes student)","name":"deleteStudent","type":"void","javadoc":null},{"fullQualified":"public void deleteAllStudents()","name":"deleteAllStudents","type":"void","javadoc":null},{"fullQualified":"private String getExpectedInstructorString(InstructorAttributes[] instructors)","name":"getExpectedInstructorString","type":"String","javadoc":null},{"fullQualified":"private WebElement getStudentList()","name":"getStudentList","type":"WebElement","javadoc":null},{"fullQualified":"private String[][] getExpectedStudentValues(StudentAttributes[] students)","name":"getExpectedStudentValues","type":"String[][]","javadoc":null},{"fullQualified":"private WebElement getSendInviteButton(StudentAttributes student)","name":"getSendInviteButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDeleteButton(StudentAttributes student)","name":"getDeleteButton","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getAllStudentRows()","name":"getAllStudentRows","type":"List<WebElement>","javadoc":null},{"fullQualified":"private int getNumStudents()","name":"getNumStudents","type":"int","javadoc":null},{"fullQualified":"private WebElement getStudentRow(StudentAttributes student)","name":"getStudentRow","type":"WebElement","javadoc":null},{"fullQualified":"public InstructorCourseStudentDetailsViewPage clickViewStudent(StudentAttributes student)","name":"clickViewStudent","type":"InstructorCourseStudentDetailsViewPage","javadoc":null},{"fullQualified":"public InstructorCourseStudentDetailsEditPage clickEditStudent(StudentAttributes student)","name":"clickEditStudent","type":"InstructorCourseStudentDetailsEditPage","javadoc":null},{"fullQualified":"public InstructorStudentRecordsPage clickViewAllRecords(StudentAttributes student)","name":"clickViewAllRecords","type":"InstructorStudentRecordsPage","javadoc":null}],"allConstructors":[{"identifier":"public InstructorCourseDetailsPage(Browser browser)","javadocComment":null}]},{"name":"InstructorCourseEditPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorCourseEditPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" Methods for clicking buttons and links","lineNumber":296,"isOrphan":true},{"type":"LineComment","text":" Methods that return WebElements of the page","lineNumber":337,"isOrphan":true},{"type":"LineComment","text":" Methods for indexing","lineNumber":506,"isOrphan":true}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyCourseDetails(CourseAttributes course)","name":"verifyCourseDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyInstructorDetails(InstructorAttributes instructor)","name":"verifyInstructorDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyCustomPrivileges(int instrNum, InstructorPrivileges privileges)","name":"verifyCustomPrivileges","type":"void","javadoc":null},{"fullQualified":"private void verifyCourseLevelPrivileges(int instrNum, InstructorPermissionSet courseLevelPrivileges)","name":"verifyCourseLevelPrivileges","type":"void","javadoc":null},{"fullQualified":"private void verifySectionLevelPrivileges(int instrNum, Map<String, InstructorPermissionSet> sectionLevelPrivileges)","name":"verifySectionLevelPrivileges","type":"void","javadoc":null},{"fullQualified":"private void verifySessionLevelPrivileges(int instrNum, Map<String, Map<String, InstructorPermissionSet>> sessionLevelPrivileges)","name":"verifySessionLevelPrivileges","type":"void","javadoc":null},{"fullQualified":"public void verifyCourseNotEditable()","name":"verifyCourseNotEditable","type":"void","javadoc":null},{"fullQualified":"public void verifyInstructorsNotEditable()","name":"verifyInstructorsNotEditable","type":"void","javadoc":null},{"fullQualified":"public void verifyAddInstructorNotAllowed()","name":"verifyAddInstructorNotAllowed","type":"void","javadoc":null},{"fullQualified":"public void verifyNumInstructorsEquals(int expectedNum)","name":"verifyNumInstructorsEquals","type":"void","javadoc":null},{"fullQualified":"public void editCourse(CourseAttributes newCourse)","name":"editCourse","type":"void","javadoc":null},{"fullQualified":"public void deleteCourse()","name":"deleteCourse","type":"void","javadoc":null},{"fullQualified":"public void addInstructor(InstructorAttributes newInstructor)","name":"addInstructor","type":"void","javadoc":null},{"fullQualified":"public void resendInstructorInvite(InstructorAttributes instructor)","name":"resendInstructorInvite","type":"void","javadoc":null},{"fullQualified":"public void deleteInstructor(InstructorAttributes instructor)","name":"deleteInstructor","type":"void","javadoc":null},{"fullQualified":"public void editInstructor(int instrNum, InstructorAttributes instructor)","name":"editInstructor","type":"void","javadoc":null},{"fullQualified":"public void toggleCustomCourseLevelPrivilege(int instrNum, String privilege)","name":"toggleCustomCourseLevelPrivilege","type":"void","javadoc":null},{"fullQualified":"public void toggleCustomSectionLevelPrivilege(int instrNum, int panelNum, String section, String privilege)","name":"toggleCustomSectionLevelPrivilege","type":"void","javadoc":null},{"fullQualified":"public void toggleCustomSessionLevelPrivilege(int instrNum, int panelNum, String section, String session, String privilege)","name":"toggleCustomSessionLevelPrivilege","type":"void","javadoc":null},{"fullQualified":"private int getNumInstructors()","name":"getNumInstructors","type":"int","javadoc":null},{"fullQualified":"private void clickEditCourseButton()","name":"clickEditCourseButton","type":"void","javadoc":null},{"fullQualified":"private void clickSaveCourseButton()","name":"clickSaveCourseButton","type":"void","javadoc":null},{"fullQualified":"private void selectNewTimeZone(String timeZone)","name":"selectNewTimeZone","type":"void","javadoc":null},{"fullQualified":"private void clickAddNewInstructorButton()","name":"clickAddNewInstructorButton","type":"void","javadoc":null},{"fullQualified":"private void clickEditInstructorButton(int instrNum)","name":"clickEditInstructorButton","type":"void","javadoc":null},{"fullQualified":"private void clickCancelInstructorButton(int instrNum)","name":"clickCancelInstructorButton","type":"void","javadoc":null},{"fullQualified":"private void clickSaveInstructorButton(int instrNum)","name":"clickSaveInstructorButton","type":"void","javadoc":null},{"fullQualified":"private void clickAddSectionPrivilegeLink(int instrNum)","name":"clickAddSectionPrivilegeLink","type":"void","javadoc":null},{"fullQualified":"private void clickAddSessionPrivilegeLink(int instrNum, int panelNum)","name":"clickAddSessionPrivilegeLink","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getCourseName()","name":"getCourseName","type":"String","javadoc":null},{"fullQualified":"public String getCourseInstitute()","name":"getCourseInstitute","type":"String","javadoc":null},{"fullQualified":"public String getTimeZone()","name":"getTimeZone","type":"String","javadoc":null},{"fullQualified":"private WebElement getEditInstructorButton(int instrNum)","name":"getEditInstructorButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getInviteInstructorButton(int instrNum)","name":"getInviteInstructorButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDeleteInstructorButton(int instrNum)","name":"getDeleteInstructorButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getCancelInstructorButton(int instrNum)","name":"getCancelInstructorButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getSaveInstructorButton(int instrNum)","name":"getSaveInstructorButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getNameField(int instrNum)","name":"getNameField","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getEmailField(int instrNum)","name":"getEmailField","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDisplayedToStudentCheckBox(int instrNum)","name":"getDisplayedToStudentCheckBox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDisplayNameField(int instrNum)","name":"getDisplayNameField","type":"WebElement","javadoc":null},{"fullQualified":"public String getInstructorGoogleId(int instrNum)","name":"getInstructorGoogleId","type":"String","javadoc":null},{"fullQualified":"public String getInstructorName(int instrNum)","name":"getInstructorName","type":"String","javadoc":null},{"fullQualified":"public String getInstructorEmail(int instrNum)","name":"getInstructorEmail","type":"String","javadoc":null},{"fullQualified":"public boolean getInstructorDisplayedToStudents(int instrNum)","name":"getInstructorDisplayedToStudents","type":"boolean","javadoc":null},{"fullQualified":"public String getInstructorDisplayName(int instrNum)","name":"getInstructorDisplayName","type":"String","javadoc":null},{"fullQualified":"public String getInstructorRole(int instrNum)","name":"getInstructorRole","type":"String","javadoc":null},{"fullQualified":"private WebElement getAccessLevels(int instrNum)","name":"getAccessLevels","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getAccessLevelsRadioButton(int instrNum, int radioNum)","name":"getAccessLevelsRadioButton","type":"WebElement","javadoc":null},{"fullQualified":"public void selectRoleForInstructor(int instrNum, int roleIndex)","name":"selectRoleForInstructor","type":"void","javadoc":null},{"fullQualified":"private WebElement getCourseLevelPanel(int instrNum)","name":"getCourseLevelPanel","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getCourseLevelPanelCheckBoxes(int instrNum)","name":"getCourseLevelPanelCheckBoxes","type":"List<WebElement>","javadoc":null},{"fullQualified":"private WebElement getCourseLevelPanelCheckBox(int instrNum, int checkboxNum)","name":"getCourseLevelPanelCheckBox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getAddSectionLevelPrivilegesLink(int instrNum)","name":"getAddSectionLevelPrivilegesLink","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getAddSessionLevelPrivilegesLink(int instrNum, int panelNum)","name":"getAddSessionLevelPrivilegesLink","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getSectionSelections(int instrNum, int panelNum)","name":"getSectionSelections","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getSectionLevelPanelBody(int instrNum, int panelNum)","name":"getSectionLevelPanelBody","type":"WebElement","javadoc":null},{"fullQualified":"private int getNumSectionLevelPanels(int instrNum)","name":"getNumSectionLevelPanels","type":"int","javadoc":null},{"fullQualified":"private int getSectionLevelPanelNumWithSectionSelected(int instrNum, String section)","name":"getSectionLevelPanelNumWithSectionSelected","type":"int","javadoc":null},{"fullQualified":"private WebElement getSectionSelectionCheckBox(int instrNum, int panelNum, int sectionNum)","name":"getSectionSelectionCheckBox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getSectionLevelCheckBox(int instrNum, int panelNum, int checkBoxIndex)","name":"getSectionLevelCheckBox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getSessionLevelTable(int instrNum, int panelNum)","name":"getSessionLevelTable","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getSessionLevelTableRow(int instrNum, int panelNum, int sessionIndex)","name":"getSessionLevelTableRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getSessionLevelCheckbox(int instrNum, int panelNum, int sessionIndex, int checkBoxIndex)","name":"getSessionLevelCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private int getRoleIndex(String role)","name":"getRoleIndex","type":"int","javadoc":null},{"fullQualified":"private int getCourseLevelPrivilegeIndex(String privilege)","name":"getCourseLevelPrivilegeIndex","type":"int","javadoc":null},{"fullQualified":"private int getSectionLevelPrivilegeIndex(String privilege)","name":"getSectionLevelPrivilegeIndex","type":"int","javadoc":null},{"fullQualified":"private int getSessionLevelPrivilegeIndex(String privilege)","name":"getSessionLevelPrivilegeIndex","type":"int","javadoc":null},{"fullQualified":"private int getIntrNum(String email)","name":"getIntrNum","type":"int","javadoc":null},{"fullQualified":"private int getSectionIndex(int instrNum, String section)","name":"getSectionIndex","type":"int","javadoc":null},{"fullQualified":"private int getSessionIndex(int instrNum, String session)","name":"getSessionIndex","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public InstructorCourseEditPage(Browser browser)","javadocComment":null}]},{"name":"InstructorCourseEnrollPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorCourseEnrollPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" make last row of spreadsheet visible","lineNumber":82,"isOrphan":false},{"type":"LineComment","text":" reset spreadsheet to original position","lineNumber":92,"isOrphan":false},{"type":"LineComment","text":" number of tables depends on what results are present","lineNumber":113,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyIsCorrectPage(String courseId)","name":"verifyIsCorrectPage","type":"void","javadoc":null},{"fullQualified":"public void clickToggleExistingStudentsHeader()","name":"clickToggleExistingStudentsHeader","type":"void","javadoc":null},{"fullQualified":"public void clickEnrollButton()","name":"clickEnrollButton","type":"void","javadoc":null},{"fullQualified":"public void clickAddButton()","name":"clickAddButton","type":"void","javadoc":null},{"fullQualified":"public void addEnrollSpreadsheetRows(int numRows)","name":"addEnrollSpreadsheetRows","type":"void","javadoc":null},{"fullQualified":"public void verifyNumAddedEnrollSpreadsheetRows(int addedNumRows)","name":"verifyNumAddedEnrollSpreadsheetRows","type":"void","javadoc":null},{"fullQualified":"public void enroll(StudentAttributes[] studentsData)","name":"enroll","type":"void","javadoc":null},{"fullQualified":"public void verifyExistingStudentsTableContains(StudentAttributes[] expectedStudents)","name":"verifyExistingStudentsTableContains","type":"void","javadoc":null},{"fullQualified":"public void verifyResultsPanelContains(StudentAttributes[] expectedNewStudents, StudentAttributes[] expectedModifiedStudents, StudentAttributes[] expectedModifiedWithoutChangeStudents, StudentAttributes[] expectedErrorStudents, StudentAttributes[] expectedUnmodifiedStudents)","name":"verifyResultsPanelContains","type":"void","javadoc":null},{"fullQualified":"private void fillEnrollSpreadsheet(String[][] expectedStudentData)","name":"fillEnrollSpreadsheet","type":"void","javadoc":null},{"fullQualified":"private WebElement getEnrollSpreadsheetFirstCell()","name":"getEnrollSpreadsheetFirstCell","type":"WebElement","javadoc":null},{"fullQualified":"private String[][] getEnrollmentData(StudentAttributes[] studentsData)","name":"getEnrollmentData","type":"String[][]","javadoc":null}],"allConstructors":[{"identifier":"public InstructorCourseEnrollPage(Browser browser)","javadocComment":null}]},{"name":"InstructorCoursesPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorCoursesPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" use verifyTableBodyValues as active courses are sorted","lineNumber":77,"isOrphan":false},{"type":"LineComment","text":" use verifyTableRowValues as archive courses are not sorted","lineNumber":95,"isOrphan":false},{"type":"LineComment","text":" use verifyTableRowValues as deleted courses are not sorted","lineNumber":105,"isOrphan":false},{"type":"LineComment","text":" verify enroll button is disabled","lineNumber":111,"isOrphan":false},{"type":"LineComment","text":" verify delete button is disabled","lineNumber":116,"isOrphan":false},{"type":"LineComment","text":" Do nothing","lineNumber":151,"isOrphan":true}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"private WebElement getActiveCoursesTable()","name":"getActiveCoursesTable","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getArchivedCoursesTable()","name":"getArchivedCoursesTable","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDeletedCoursesTable()","name":"getDeletedCoursesTable","type":"WebElement","javadoc":null},{"fullQualified":"public void verifyActiveCoursesDetails(CourseAttributes[] courses)","name":"verifyActiveCoursesDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyActiveCourseStatistics(CourseAttributes course, String numSections, String numTeams, String numStudents, String numUnregistered)","name":"verifyActiveCourseStatistics","type":"void","javadoc":null},{"fullQualified":"public void verifyArchivedCoursesDetails(CourseAttributes[] courses)","name":"verifyArchivedCoursesDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyDeletedCoursesDetails(CourseAttributes[] courses)","name":"verifyDeletedCoursesDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyNotModifiable(String courseId)","name":"verifyNotModifiable","type":"void","javadoc":null},{"fullQualified":"public void verifyNumActiveCourses(int expectedNum)","name":"verifyNumActiveCourses","type":"void","javadoc":null},{"fullQualified":"public void verifyNumArchivedCourses(int expectedNum)","name":"verifyNumArchivedCourses","type":"void","javadoc":null},{"fullQualified":"public void verifyNumDeletedCourses(int expectedNum)","name":"verifyNumDeletedCourses","type":"void","javadoc":null},{"fullQualified":"public void addCourse(CourseAttributes newCourse)","name":"addCourse","type":"void","javadoc":null},{"fullQualified":"public void showStatistics(String courseId)","name":"showStatistics","type":"void","javadoc":null},{"fullQualified":"public void archiveCourse(String courseId)","name":"archiveCourse","type":"void","javadoc":null},{"fullQualified":"public void copyCourse(String courseId, CourseAttributes newCourse)","name":"copyCourse","type":"void","javadoc":null},{"fullQualified":"public void moveCourseToRecycleBin(String courseId)","name":"moveCourseToRecycleBin","type":"void","javadoc":null},{"fullQualified":"public void unarchiveCourse(String courseId)","name":"unarchiveCourse","type":"void","javadoc":null},{"fullQualified":"public void moveArchivedCourseToRecycleBin(String courseId)","name":"moveArchivedCourseToRecycleBin","type":"void","javadoc":null},{"fullQualified":"public void showDeleteTable()","name":"showDeleteTable","type":"void","javadoc":null},{"fullQualified":"public void showArchiveTable()","name":"showArchiveTable","type":"void","javadoc":null},{"fullQualified":"public void restoreCourse(String courseId)","name":"restoreCourse","type":"void","javadoc":null},{"fullQualified":"public void deleteCourse(String courseId)","name":"deleteCourse","type":"void","javadoc":null},{"fullQualified":"public void restoreAllCourses()","name":"restoreAllCourses","type":"void","javadoc":null},{"fullQualified":"public void deleteAllCourses()","name":"deleteAllCourses","type":"void","javadoc":null},{"fullQualified":"public void sortByCourseName()","name":"sortByCourseName","type":"void","javadoc":null},{"fullQualified":"public void sortByCourseId()","name":"sortByCourseId","type":"void","javadoc":null},{"fullQualified":"private WebElement getActiveTableRow(String courseId)","name":"getActiveTableRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getArchivedTableRow(String courseId)","name":"getArchivedTableRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDeletedTableRow(String courseId)","name":"getDeletedTableRow","type":"WebElement","javadoc":null},{"fullQualified":"private String[][] getCourseDetails(CourseAttributes[] courses)","name":"getCourseDetails","type":"String[][]","javadoc":null},{"fullQualified":"private String getDateString(Instant instant)","name":"getDateString","type":"String","javadoc":null},{"fullQualified":"private String[][] getDeletedCourseDetails(CourseAttributes[] courses)","name":"getDeletedCourseDetails","type":"String[][]","javadoc":null},{"fullQualified":"private WebElement getRestoreAllButton()","name":"getRestoreAllButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDeleteAllButton()","name":"getDeleteAllButton","type":"WebElement","javadoc":null},{"fullQualified":"private void selectCourseInstitute(String institute)","name":"selectCourseInstitute","type":"void","javadoc":null},{"fullQualified":"private void selectNewTimeZone(String timeZone)","name":"selectNewTimeZone","type":"void","javadoc":null},{"fullQualified":"private void selectCopyTimeZone(String timeZone)","name":"selectCopyTimeZone","type":"void","javadoc":null},{"fullQualified":"private WebElement getShowStatisticsLink(String courseId)","name":"getShowStatisticsLink","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getOtherActionsButton(String courseId)","name":"getOtherActionsButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getArchiveButton(String courseId)","name":"getArchiveButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getCopyButton(String courseId)","name":"getCopyButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMoveToRecycleBinButton(String courseId)","name":"getMoveToRecycleBinButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getUnarchiveButton(String courseId)","name":"getUnarchiveButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMoveArchivedToRecycleBinButton(String courseId)","name":"getMoveArchivedToRecycleBinButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getRestoreButton(String courseId)","name":"getRestoreButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDeleteButton(String courseId)","name":"getDeleteButton","type":"WebElement","javadoc":null},{"fullQualified":"private int getCourseCount()","name":"getCourseCount","type":"int","javadoc":null},{"fullQualified":"private int getArchivedCourseCount()","name":"getArchivedCourseCount","type":"int","javadoc":null},{"fullQualified":"private int getDeletedCourseCount()","name":"getDeletedCourseCount","type":"int","javadoc":null},{"fullQualified":"private int getRowNumberOfCourse(String courseId)","name":"getRowNumberOfCourse","type":"int","javadoc":null},{"fullQualified":"private int getRowNumberOfArchivedCourse(String courseId)","name":"getRowNumberOfArchivedCourse","type":"int","javadoc":null},{"fullQualified":"private int getRowNumberOfDeletedCourse(String courseId)","name":"getRowNumberOfDeletedCourse","type":"int","javadoc":null},{"fullQualified":"private WebElement getCourseIdCell(int rowId)","name":"getCourseIdCell","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getArchivedCourseIdCell(int rowId)","name":"getArchivedCourseIdCell","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDeletedCourseIdCell(int rowId)","name":"getDeletedCourseIdCell","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getShowStatisticsLinkInRow(int rowId)","name":"getShowStatisticsLinkInRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getOtherActionsButtonInRow(int rowId)","name":"getOtherActionsButtonInRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getArchiveButtonInRow(int rowId)","name":"getArchiveButtonInRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getCopyButtonInRow(int rowId)","name":"getCopyButtonInRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMoveToRecycleBinButtonInRow(int rowId)","name":"getMoveToRecycleBinButtonInRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getUnarchiveButtonInRow(int rowId)","name":"getUnarchiveButtonInRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMoveArchivedToRecycleBinButtonInRow(int rowId)","name":"getMoveArchivedToRecycleBinButtonInRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getRestoreButtonInRow(int rowId)","name":"getRestoreButtonInRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getDeleteButtonInRow(int rowId)","name":"getDeleteButtonInRow","type":"WebElement","javadoc":null}],"allConstructors":[{"identifier":"public InstructorCoursesPage(Browser browser)","javadocComment":null}]},{"name":"InstructorCourseStudentDetailsEditPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorCourseStudentDetailsEditPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyIsCorrectPage(String expectedCourseId, String expectedStudentEmail)","name":"verifyIsCorrectPage","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentDetails(StudentAttributes studentDetails)","name":"verifyStudentDetails","type":"void","javadoc":null},{"fullQualified":"public void editStudentDetails(StudentAttributes newStudentDetails)","name":"editStudentDetails","type":"void","javadoc":null},{"fullQualified":"public void editStudentEmailAndResendLinks(String newEmail)","name":"editStudentEmailAndResendLinks","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public InstructorCourseStudentDetailsEditPage(Browser browser)","javadocComment":null}]},{"name":"InstructorCourseStudentDetailsViewPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorCourseStudentDetailsViewPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyIsCorrectPage(String expectedCourseId, String expectedStudentEmail)","name":"verifyIsCorrectPage","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentDetails(StudentProfileAttributes studentProfile, StudentAttributes student)","name":"verifyStudentDetails","type":"void","javadoc":null},{"fullQualified":"private void verifyDetail(String expected, WebElement detailField)","name":"verifyDetail","type":"void","javadoc":null},{"fullQualified":"private String getExpectedNameWithGender(StudentProfileAttributes profile)","name":"getExpectedNameWithGender","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public InstructorCourseStudentDetailsViewPage(Browser browser)","javadocComment":null}]},{"name":"InstructorFeedbackEditPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorFeedbackEditPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" Default settings, assert setting section not expanded","lineNumber":202,"isOrphan":false},{"type":"LineComment","text":" Default settings, assert setting section not expanded","lineNumber":245,"isOrphan":false},{"type":"LineComment","text":" Reload questions","lineNumber":499,"isOrphan":false},{"type":"LineComment","text":" Set to type STUDENT first to adjust NumberOfEntitiesToGiveFeedbackTo","lineNumber":1055,"isOrphan":false},{"type":"LineComment","text":" using clear does not send the required event","lineNumber":1544,"isOrphan":true},{"type":"LineComment","text":" as a workaround, after clearing without event, enter a random character and delete it","lineNumber":1545,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifySessionDetails(CourseAttributes course, FeedbackSessionAttributes feedbackSession)","name":"verifySessionDetails","type":"void","javadoc":null},{"fullQualified":"private void verifySubmissionStatus(FeedbackSessionAttributes feedbackSession)","name":"verifySubmissionStatus","type":"void","javadoc":null},{"fullQualified":"private void verifyPublishedStatus(FeedbackSessionAttributes feedbackSession)","name":"verifyPublishedStatus","type":"void","javadoc":null},{"fullQualified":"private void verifyVisibilitySettings(FeedbackSessionAttributes feedbackSession)","name":"verifyVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void verifySessionVisibilitySettings(Instant sessionVisibleTime, FeedbackSessionAttributes feedbackSession)","name":"verifySessionVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void verifyResponseVisibilitySettings(Instant responseVisibleTime, FeedbackSessionAttributes feedbackSession)","name":"verifyResponseVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void verifyEmailSettings(FeedbackSessionAttributes feedbackSession)","name":"verifyEmailSettings","type":"void","javadoc":null},{"fullQualified":"public void editSessionDetails(FeedbackSessionAttributes newFeedbackSessionDetails)","name":"editSessionDetails","type":"void","javadoc":null},{"fullQualified":"public void copySessionToOtherCourse(CourseAttributes otherCourse, String sessionName)","name":"copySessionToOtherCourse","type":"void","javadoc":null},{"fullQualified":"public void deleteSession()","name":"deleteSession","type":"void","javadoc":null},{"fullQualified":"public FeedbackSubmitPage previewAsStudent(StudentAttributes student)","name":"previewAsStudent","type":"FeedbackSubmitPage","javadoc":null},{"fullQualified":"public FeedbackSubmitPage previewAsInstructor(InstructorAttributes instructor)","name":"previewAsInstructor","type":"FeedbackSubmitPage","javadoc":null},{"fullQualified":"public void verifyNumQuestions(int expected)","name":"verifyNumQuestions","type":"void","javadoc":null},{"fullQualified":"public void verifyQuestionDetails(int questionNum, FeedbackQuestionAttributes feedbackQuestion)","name":"verifyQuestionDetails","type":"void","javadoc":null},{"fullQualified":"private void verifyFeedbackPathSettings(int questionNum, FeedbackQuestionAttributes feedbackQuestion)","name":"verifyFeedbackPathSettings","type":"void","javadoc":null},{"fullQualified":"private void verifyNumberOfEntitiesToGiveFeedbackTo(int questionNum, int numberOfEntitiesToGiveFeedbackTo)","name":"verifyNumberOfEntitiesToGiveFeedbackTo","type":"void","javadoc":null},{"fullQualified":"private void verifyQuestionVisibilitySettings(int questionNum, FeedbackQuestionAttributes feedbackQuestion)","name":"verifyQuestionVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void verifyCustomQuestionVisibility(int questionNum, FeedbackQuestionAttributes feedbackQuestion)","name":"verifyCustomQuestionVisibility","type":"void","javadoc":null},{"fullQualified":"private void assertVisibilityBoxesSelected(WebElement table, FeedbackParticipantType giver, FeedbackParticipantType receiver, List<FeedbackParticipantType> participants, int colNum)","name":"assertVisibilityBoxesSelected","type":"void","javadoc":null},{"fullQualified":"public void addTemplateQuestion(int optionNum)","name":"addTemplateQuestion","type":"void","javadoc":null},{"fullQualified":"public void copyQuestion(String courseId, String questionText)","name":"copyQuestion","type":"void","javadoc":null},{"fullQualified":"public void editQuestionNumber(int questionNum, int newQuestionNumber)","name":"editQuestionNumber","type":"void","javadoc":null},{"fullQualified":"public void editQuestionDetails(int questionNum, FeedbackQuestionAttributes feedbackQuestion)","name":"editQuestionDetails","type":"void","javadoc":null},{"fullQualified":"private void inputQuestionDetails(int questionNum, FeedbackQuestionAttributes feedbackQuestion)","name":"inputQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void duplicateQuestion(int questionNum)","name":"duplicateQuestion","type":"void","javadoc":null},{"fullQualified":"public void deleteQuestion(int questionNum)","name":"deleteQuestion","type":"void","javadoc":null},{"fullQualified":"public void verifyTextQuestionDetails(int questionNum, FeedbackTextQuestionDetails questionDetails)","name":"verifyTextQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void addTextQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addTextQuestion","type":"void","javadoc":null},{"fullQualified":"public void editTextQuestion(int questionNum, FeedbackTextQuestionDetails textQuestionDetails)","name":"editTextQuestion","type":"void","javadoc":null},{"fullQualified":"public void verifyMcqQuestionDetails(int questionNum, FeedbackMcqQuestionDetails questionDetails)","name":"verifyMcqQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void addMcqQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addMcqQuestion","type":"void","javadoc":null},{"fullQualified":"public void editMcqQuestion(int questionNum, FeedbackMcqQuestionDetails questionDetails)","name":"editMcqQuestion","type":"void","javadoc":null},{"fullQualified":"public void verifyMsqQuestionDetails(int questionNum, FeedbackMsqQuestionDetails questionDetails)","name":"verifyMsqQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void addMsqQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addMsqQuestion","type":"void","javadoc":null},{"fullQualified":"public void editMsqQuestion(int questionNum, FeedbackMsqQuestionDetails msqQuestionDetails)","name":"editMsqQuestion","type":"void","javadoc":null},{"fullQualified":"public void verifyNumScaleQuestionDetails(int questionNum, FeedbackNumericalScaleQuestionDetails questionDetails)","name":"verifyNumScaleQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void addNumScaleQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addNumScaleQuestion","type":"void","javadoc":null},{"fullQualified":"public void editNumScaleQuestion(int questionNum, FeedbackNumericalScaleQuestionDetails questionDetails)","name":"editNumScaleQuestion","type":"void","javadoc":null},{"fullQualified":"public void verifyConstSumQuestionDetails(int questionNum, FeedbackConstantSumQuestionDetails questionDetails)","name":"verifyConstSumQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void addConstSumOptionQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addConstSumOptionQuestion","type":"void","javadoc":null},{"fullQualified":"public void addConstSumRecipientQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addConstSumRecipientQuestion","type":"void","javadoc":null},{"fullQualified":"public void addConstSumQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addConstSumQuestion","type":"void","javadoc":null},{"fullQualified":"public void editConstSumQuestion(int questionNum, FeedbackConstantSumQuestionDetails csQuestionDetails)","name":"editConstSumQuestion","type":"void","javadoc":null},{"fullQualified":"public void verifyContributionQuestionDetails(int questionNum, FeedbackContributionQuestionDetails questionDetails)","name":"verifyContributionQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void addContributionQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addContributionQuestion","type":"void","javadoc":null},{"fullQualified":"public void editContributionQuestion(int questionNum, FeedbackContributionQuestionDetails questionDetails)","name":"editContributionQuestion","type":"void","javadoc":null},{"fullQualified":"public void verifyRubricQuestionDetails(int questionNum, FeedbackRubricQuestionDetails questionDetails)","name":"verifyRubricQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void addRubricQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addRubricQuestion","type":"void","javadoc":null},{"fullQualified":"public void editRubricQuestion(int questionNum, FeedbackRubricQuestionDetails questionDetails)","name":"editRubricQuestion","type":"void","javadoc":null},{"fullQualified":"public void verifyRankQuestionDetails(int questionNum, FeedbackRankQuestionDetails questionDetails)","name":"verifyRankQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void addRankOptionsQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addRankOptionsQuestion","type":"void","javadoc":null},{"fullQualified":"public void addRankRecipientsQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"addRankRecipientsQuestion","type":"void","javadoc":null},{"fullQualified":"public void editRankQuestion(int questionNum, FeedbackRankQuestionDetails questionDetails)","name":"editRankQuestion","type":"void","javadoc":null},{"fullQualified":"private String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"private String getCourseName()","name":"getCourseName","type":"String","javadoc":null},{"fullQualified":"private String getTimeZone()","name":"getTimeZone","type":"String","javadoc":null},{"fullQualified":"private String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"private String getInstructions()","name":"getInstructions","type":"String","javadoc":null},{"fullQualified":"private String getStartDate()","name":"getStartDate","type":"String","javadoc":null},{"fullQualified":"private String getStartTime()","name":"getStartTime","type":"String","javadoc":null},{"fullQualified":"private String getEndDate()","name":"getEndDate","type":"String","javadoc":null},{"fullQualified":"private String getEndTime()","name":"getEndTime","type":"String","javadoc":null},{"fullQualified":"private String getSessionVisibilityDate()","name":"getSessionVisibilityDate","type":"String","javadoc":null},{"fullQualified":"private String getSessionVisibilityTime()","name":"getSessionVisibilityTime","type":"String","javadoc":null},{"fullQualified":"private String getResponseVisibilityDate()","name":"getResponseVisibilityDate","type":"String","javadoc":null},{"fullQualified":"private String getResponseVisibilityTime()","name":"getResponseVisibilityTime","type":"String","javadoc":null},{"fullQualified":"private String getGracePeriod()","name":"getGracePeriod","type":"String","javadoc":null},{"fullQualified":"private String getSubmissionStatus()","name":"getSubmissionStatus","type":"String","javadoc":null},{"fullQualified":"private String getPublishedStatus()","name":"getPublishedStatus","type":"String","javadoc":null},{"fullQualified":"private String getDateString(Instant instant, String timeZone)","name":"getDateString","type":"String","javadoc":null},{"fullQualified":"private String getTimeString(Instant instant, String timeZone)","name":"getTimeString","type":"String","javadoc":null},{"fullQualified":"private void setInstructions(String newInstructions)","name":"setInstructions","type":"void","javadoc":null},{"fullQualified":"private void setSessionStartDateTime(Instant startInstant, String timeZone)","name":"setSessionStartDateTime","type":"void","javadoc":null},{"fullQualified":"private void setSessionEndDateTime(Instant endInstant, String timeZone)","name":"setSessionEndDateTime","type":"void","javadoc":null},{"fullQualified":"private void setVisibilityDateTime(Instant startInstant, String timeZone)","name":"setVisibilityDateTime","type":"void","javadoc":null},{"fullQualified":"private void setResponseDateTime(Instant endInstant, String timeZone)","name":"setResponseDateTime","type":"void","javadoc":null},{"fullQualified":"private void setDateTime(WebElement dateBox, WebElement timeBox, Instant startInstant, String timeZone)","name":"setDateTime","type":"void","javadoc":null},{"fullQualified":"private void selectGracePeriod(long gracePeriodMinutes)","name":"selectGracePeriod","type":"void","javadoc":null},{"fullQualified":"private void setVisibilitySettings(FeedbackSessionAttributes newFeedbackSession)","name":"setVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void setSessionVisibilitySettings(FeedbackSessionAttributes newFeedbackSession)","name":"setSessionVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void setResponseVisibilitySettings(FeedbackSessionAttributes newFeedbackSession)","name":"setResponseVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void setEmailSettings(FeedbackSessionAttributes newFeedbackSessionDetails)","name":"setEmailSettings","type":"void","javadoc":null},{"fullQualified":"private void showVisibilitySettings()","name":"showVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void showEmailSettings()","name":"showEmailSettings","type":"void","javadoc":null},{"fullQualified":"private int getNumQuestions()","name":"getNumQuestions","type":"int","javadoc":null},{"fullQualified":"private WebElement getQuestionForm(int questionNum)","name":"getQuestionForm","type":"WebElement","javadoc":null},{"fullQualified":"private FeedbackQuestionType getQuestionType(int questionNum)","name":"getQuestionType","type":"FeedbackQuestionType","javadoc":null},{"fullQualified":"private int getQuestionNumber(int questionNum)","name":"getQuestionNumber","type":"int","javadoc":null},{"fullQualified":"private String getQuestionBrief(int questionNum)","name":"getQuestionBrief","type":"String","javadoc":null},{"fullQualified":"private String getQuestionDescription(int questionNum)","name":"getQuestionDescription","type":"String","javadoc":null},{"fullQualified":"private String getFeedbackGiver(int questionNum)","name":"getFeedbackGiver","type":"String","javadoc":null},{"fullQualified":"private String getFeedbackReceiver(int questionNum)","name":"getFeedbackReceiver","type":"String","javadoc":null},{"fullQualified":"private String getFeedbackPath(int questionNum)","name":"getFeedbackPath","type":"String","javadoc":null},{"fullQualified":"private void setQuestionBrief(int questionNum, String newBrief)","name":"setQuestionBrief","type":"void","javadoc":null},{"fullQualified":"private void setQuestionDescription(int questionNum, String newDescription)","name":"setQuestionDescription","type":"void","javadoc":null},{"fullQualified":"private void setFeedbackPath(int questionNum, FeedbackQuestionAttributes feedbackQuestion)","name":"setFeedbackPath","type":"void","javadoc":null},{"fullQualified":"private void selectFeedbackPathDropdownOption(int questionNum, String text)","name":"selectFeedbackPathDropdownOption","type":"void","javadoc":null},{"fullQualified":"private void clickEditQuestionButton(int questionNum)","name":"clickEditQuestionButton","type":"void","javadoc":null},{"fullQualified":"private void clickSaveQuestionButton(int questionNum)","name":"clickSaveQuestionButton","type":"void","javadoc":null},{"fullQualified":"private void setQuestionVisibility(int questionNum, FeedbackQuestionAttributes feedbackQuestion)","name":"setQuestionVisibility","type":"void","javadoc":null},{"fullQualified":"private void selectVisibilityBoxes(WebElement table, FeedbackParticipantType giver, FeedbackParticipantType receiver, List<FeedbackParticipantType> participants, int colNum)","name":"selectVisibilityBoxes","type":"void","javadoc":null},{"fullQualified":"private void selectVisibilityDropdownOption(int questionNum, String text)","name":"selectVisibilityDropdownOption","type":"void","javadoc":null},{"fullQualified":"private void clickAndWaitForNewQuestion(WebElement button)","name":"clickAndWaitForNewQuestion","type":"void","javadoc":null},{"fullQualified":"private void addNewQuestion(int optionNumber)","name":"addNewQuestion","type":"void","javadoc":null},{"fullQualified":"private void clickSaveNewQuestionButton()","name":"clickSaveNewQuestionButton","type":"void","javadoc":null},{"fullQualified":"private WebElement getRecommendedTextLengthField(int questionNum)","name":"getRecommendedTextLengthField","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getGenerateOptionsCheckbox(int questionNum)","name":"getGenerateOptionsCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getGenerateOptionsDropdown(int questionNum)","name":"getGenerateOptionsDropdown","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getWeightCheckbox(int questionNum)","name":"getWeightCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getOtherOptionCheckbox(int questionNum)","name":"getOtherOptionCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private String getGeneratedOptionString(FeedbackParticipantType type)","name":"getGeneratedOptionString","type":"String","javadoc":null},{"fullQualified":"private String getDoubleString(Double value)","name":"getDoubleString","type":"String","javadoc":null},{"fullQualified":"private WebElement getOptionsSection(int questionNum)","name":"getOptionsSection","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getOptionInputs(int questionNum)","name":"getOptionInputs","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getOptionWeightInputs(int questionNum)","name":"getOptionWeightInputs","type":"List<WebElement>","javadoc":null},{"fullQualified":"private WebElement getOtherWeightInput(int questionNum)","name":"getOtherWeightInput","type":"WebElement","javadoc":null},{"fullQualified":"private boolean verifyGeneratedOptions(int questionNum, FeedbackParticipantType participantType)","name":"verifyGeneratedOptions","type":"boolean","javadoc":null},{"fullQualified":"private void verifyOptions(int questionNum, List<String> options)","name":"verifyOptions","type":"void","javadoc":null},{"fullQualified":"private void verifyOptionWeights(int questionNum, boolean hasWeights, List<Double> weights)","name":"verifyOptionWeights","type":"void","javadoc":null},{"fullQualified":"private void verifyOtherOption(int questionNum, boolean hasOther, Double weight)","name":"verifyOtherOption","type":"void","javadoc":null},{"fullQualified":"private void inputMcqDetails(int questionNum, FeedbackMcqQuestionDetails questionDetails)","name":"inputMcqDetails","type":"void","javadoc":null},{"fullQualified":"private boolean inputGenerateOptions(int questionNum, FeedbackParticipantType participantType)","name":"inputGenerateOptions","type":"boolean","javadoc":null},{"fullQualified":"private void inputOptions(int questionNum, List<String> options)","name":"inputOptions","type":"void","javadoc":null},{"fullQualified":"private void inputOptionWeights(int questionNum, boolean hasWeights, List<Double> weights)","name":"inputOptionWeights","type":"void","javadoc":null},{"fullQualified":"private void inputOtherChoice(int questionNum, boolean hasOther, Double otherWeight)","name":"inputOtherChoice","type":"void","javadoc":null},{"fullQualified":"private WebElement getMaxOptionsCheckbox(int questionNum)","name":"getMaxOptionsCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMaxOptionsInput(int questionNum)","name":"getMaxOptionsInput","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMinOptionsCheckbox(int questionNum)","name":"getMinOptionsCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMinOptionsInput(int questionNum)","name":"getMinOptionsInput","type":"WebElement","javadoc":null},{"fullQualified":"private void verifyMaxOptions(int questionNum, int maxOptions)","name":"verifyMaxOptions","type":"void","javadoc":null},{"fullQualified":"private void verifyMinOptions(int questionNum, int minOptions)","name":"verifyMinOptions","type":"void","javadoc":null},{"fullQualified":"private void inputMsqDetails(int questionNum, FeedbackMsqQuestionDetails questionDetails)","name":"inputMsqDetails","type":"void","javadoc":null},{"fullQualified":"private void inputMaxOptions(int questionNum, int maxOptions)","name":"inputMaxOptions","type":"void","javadoc":null},{"fullQualified":"private void inputMinOptions(int questionNum, int minOptions)","name":"inputMinOptions","type":"void","javadoc":null},{"fullQualified":"private WebElement getMinNumscaleInput(int questionNum)","name":"getMinNumscaleInput","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getMaxNumscaleInput(int questionNum)","name":"getMaxNumscaleInput","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getNumScaleIncrementInput(int questionNum)","name":"getNumScaleIncrementInput","type":"WebElement","javadoc":null},{"fullQualified":"private void inputNumScaleDetails(int questionNum, FeedbackNumericalScaleQuestionDetails questionDetails)","name":"inputNumScaleDetails","type":"void","javadoc":null},{"fullQualified":"private void inputNumScaleValue(WebElement input, String value)","name":"inputNumScaleValue","type":"void","javadoc":null},{"fullQualified":"private WebElement getConstSumTotalPointsRadioBtn(int questionNum)","name":"getConstSumTotalPointsRadioBtn","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getConstSumTotalPointsInput(int questionNum)","name":"getConstSumTotalPointsInput","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getConstSumPerOptionPointsRadioBtn(int questionNum)","name":"getConstSumPerOptionPointsRadioBtn","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getConstSumPerOptionPointsInput(int questionNum)","name":"getConstSumPerOptionPointsInput","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getConstSumUnevenDistributionCheckbox(int questionNum)","name":"getConstSumUnevenDistributionCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getConstSumUnevenDistributionDropdown(int questionNum)","name":"getConstSumUnevenDistributionDropdown","type":"WebElement","javadoc":null},{"fullQualified":"private void inputConstSumDetails(int questionNum, FeedbackConstantSumQuestionDetails questionDetails)","name":"inputConstSumDetails","type":"void","javadoc":null},{"fullQualified":"private WebElement getAllowNotSureContributionCheckbox(int questionNum)","name":"getAllowNotSureContributionCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private void inputContributionDetails(int questionNum, FeedbackContributionQuestionDetails questionDetails)","name":"inputContributionDetails","type":"void","javadoc":null},{"fullQualified":"private WebElement getRubricRow(int questionNum, int rowNumber)","name":"getRubricRow","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getRubricChoiceInputs(int questionNum)","name":"getRubricChoiceInputs","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getRubricTextareas(int questionNum, int rowNum)","name":"getRubricTextareas","type":"List<WebElement>","javadoc":null},{"fullQualified":"private List<WebElement> getRubricWeights(int questionNum, int rowNum)","name":"getRubricWeights","type":"List<WebElement>","javadoc":null},{"fullQualified":"private WebElement getRubricDeleteSubQnBtn(int questionNum, int rowNum)","name":"getRubricDeleteSubQnBtn","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getRubricDeleteChoiceBtn(int questionNum, int colNum)","name":"getRubricDeleteChoiceBtn","type":"WebElement","javadoc":null},{"fullQualified":"private int getNumRubricRows(int questionNum)","name":"getNumRubricRows","type":"int","javadoc":null},{"fullQualified":"private int getNumRubricCols(int questionNum)","name":"getNumRubricCols","type":"int","javadoc":null},{"fullQualified":"private void inputRubricDetails(int questionNum, FeedbackRubricQuestionDetails questionDetails)","name":"inputRubricDetails","type":"void","javadoc":null},{"fullQualified":"private void adjustNumRubricFields(int questionNum, int numSubQn, int numChoices)","name":"adjustNumRubricFields","type":"void","javadoc":null},{"fullQualified":"private WebElement getAllowDuplicateRankCheckbox(int questionNum)","name":"getAllowDuplicateRankCheckbox","type":"WebElement","javadoc":null},{"fullQualified":"private void inputRankDetails(int questionNum, FeedbackRankQuestionDetails questionDetails)","name":"inputRankDetails","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public InstructorFeedbackEditPage(Browser browser)","javadocComment":null}]},{"name":"InstructorFeedbackResultsPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorFeedbackResultsPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" Methods for interacting with WebElements","lineNumber":800,"isOrphan":true},{"type":"LineComment","text":" Methods for manipulating responses information","lineNumber":1033,"isOrphan":true},{"type":"LineComment","text":" all responses should be from the same giver","lineNumber":185,"isOrphan":false},{"type":"LineComment","text":" all responses should have the same recipient","lineNumber":206,"isOrphan":false},{"type":"LineComment","text":" all responses should be from the same giver","lineNumber":227,"isOrphan":false},{"type":"LineComment","text":" all responses should be from the same recipient","lineNumber":254,"isOrphan":false},{"type":"LineComment","text":" No response message shown instead of grouped responses","lineNumber":286,"isOrphan":true},{"type":"LineComment","text":" if all responses in panel are missing responses","lineNumber":287,"isOrphan":false},{"type":"LineComment","text":" Empty grouped response if this user only has missing responses","lineNumber":294,"isOrphan":false},{"type":"LineComment","text":" Missing response will only be shown if this user has some real responses","lineNumber":303,"isOrphan":false},{"type":"LineComment","text":" re-expand question panel to reset sorting order","lineNumber":316,"isOrphan":false},{"type":"LineComment","text":" TODO: Find way to test different statistics efficiently.","lineNumber":374,"isOrphan":false},{"type":"LineComment","text":" sort per recipient statistics","lineNumber":387,"isOrphan":false},{"type":"LineComment","text":" Methods for formatting expected results","lineNumber":583,"isOrphan":false},{"type":"LineComment","text":" For question view","lineNumber":946,"isOrphan":false},{"type":"LineComment","text":" For other views","lineNumber":960,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifySessionDetails(FeedbackSessionAttributes feedbackSession)","name":"verifySessionDetails","type":"void","javadoc":null},{"fullQualified":"public void unpublishSessionResults()","name":"unpublishSessionResults","type":"void","javadoc":null},{"fullQualified":"public void publishSessionResults()","name":"publishSessionResults","type":"void","javadoc":null},{"fullQualified":"public void downloadResults()","name":"downloadResults","type":"void","javadoc":null},{"fullQualified":"public void sortNoResponseByName()","name":"sortNoResponseByName","type":"void","javadoc":null},{"fullQualified":"public void verifyNoResponsePanelDetails(List<StudentAttributes> noResponseStudents)","name":"verifyNoResponsePanelDetails","type":"void","javadoc":null},{"fullQualified":"public void remindAllNonResponders()","name":"remindAllNonResponders","type":"void","javadoc":null},{"fullQualified":"public void includeGroupingByTeam(boolean isIncluded)","name":"includeGroupingByTeam","type":"void","javadoc":null},{"fullQualified":"public void includeMissingResponses(boolean isIncluded)","name":"includeMissingResponses","type":"void","javadoc":null},{"fullQualified":"public void includeStatistics(boolean isIncluded)","name":"includeStatistics","type":"void","javadoc":null},{"fullQualified":"public void expandAllPanels()","name":"expandAllPanels","type":"void","javadoc":null},{"fullQualified":"public void filterBySectionEither(String sectionName)","name":"filterBySectionEither","type":"void","javadoc":null},{"fullQualified":"public void unfilterResponses()","name":"unfilterResponses","type":"void","javadoc":null},{"fullQualified":"public void verifyQnViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyQnViewResponses","type":"void","javadoc":null},{"fullQualified":"public void verifyGrqViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, boolean isGroupedByTeam, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyGrqViewResponses","type":"void","javadoc":null},{"fullQualified":"public void verifyRgqViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, boolean isGroupedByTeam, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyRgqViewResponses","type":"void","javadoc":null},{"fullQualified":"public void verifyGqrViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, boolean isGroupedByTeam, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyGqrViewResponses","type":"void","javadoc":null},{"fullQualified":"public void verifyRqgViewResponses(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, boolean isGroupedByTeam, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyRqgViewResponses","type":"void","javadoc":null},{"fullQualified":"private void verifyQuestionText(WebElement questionPanel, FeedbackQuestionAttributes question)","name":"verifyQuestionText","type":"void","javadoc":null},{"fullQualified":"private void verifyGroupedResponses(FeedbackQuestionAttributes question, WebElement userPanel, String userName, String userTeam, FeedbackResponseAttributes response, boolean isGrq)","name":"verifyGroupedResponses","type":"void","javadoc":null},{"fullQualified":"public void verifyQnViewStats(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyQnViewStats","type":"void","javadoc":null},{"fullQualified":"public void verifyGqrViewStats(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, boolean isGroupedByTeam, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyGqrViewStats","type":"void","javadoc":null},{"fullQualified":"public void verifyRqgViewStats(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, boolean isGroupedByTeam, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyRqgViewStats","type":"void","javadoc":null},{"fullQualified":"private void verifyUserViewStats(FeedbackParticipantType type, String user, FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students, boolean isGroupedByTeam, boolean isGiver)","name":"verifyUserViewStats","type":"void","javadoc":null},{"fullQualified":"private void verifyStatistics(WebElement questionPanel, FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyStatistics","type":"void","javadoc":null},{"fullQualified":"private void verifyMcqStatistics(WebElement questionPanel, FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyMcqStatistics","type":"void","javadoc":null},{"fullQualified":"public void verifyQnViewStatsHidden(FeedbackQuestionAttributes question)","name":"verifyQnViewStatsHidden","type":"void","javadoc":null},{"fullQualified":"public void verifyGqrViewStatsHidden(FeedbackQuestionAttributes question, String giver, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students, boolean isGroupedByTeam)","name":"verifyGqrViewStatsHidden","type":"void","javadoc":null},{"fullQualified":"public void verifyRqgViewStatsHidden(FeedbackQuestionAttributes question, String recipient, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students, boolean isGroupedByTeam)","name":"verifyRqgViewStatsHidden","type":"void","javadoc":null},{"fullQualified":"private WebElement getPanelWithStats(FeedbackParticipantType type, String user, FeedbackQuestionAttributes question, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students, boolean isGroupedByTeam, boolean isGiver)","name":"getPanelWithStats","type":"WebElement","javadoc":null},{"fullQualified":"private void verifyStatsHidden(WebElement panelWithStats)","name":"verifyStatsHidden","type":"void","javadoc":null},{"fullQualified":"public void verifyQnViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment, FeedbackResponseAttributes response, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyQnViewComment","type":"void","javadoc":null},{"fullQualified":"public void verifyGqrViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment, FeedbackResponseAttributes response, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students, boolean isGroupedByTeam)","name":"verifyGqrViewComment","type":"void","javadoc":null},{"fullQualified":"public void verifyRqgViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment, FeedbackResponseAttributes response, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students, boolean isGroupedByTeam)","name":"verifyRqgViewComment","type":"void","javadoc":null},{"fullQualified":"public void verifyGrqViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment, FeedbackResponseAttributes response, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students, boolean isGroupedByTeam)","name":"verifyGrqViewComment","type":"void","javadoc":null},{"fullQualified":"public void verifyRgqViewComment(FeedbackQuestionAttributes question, FeedbackResponseCommentAttributes comment, FeedbackResponseAttributes response, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students, boolean isGroupedByTeam)","name":"verifyRgqViewComment","type":"void","javadoc":null},{"fullQualified":"private void verifyResponseRowComment(WebElement responseRow, FeedbackResponseCommentAttributes comment, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyResponseRowComment","type":"void","javadoc":null},{"fullQualified":"private void verifyGroupedResponseComment(WebElement groupedResponses, int qnNum, FeedbackResponseCommentAttributes comment, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"verifyGroupedResponseComment","type":"void","javadoc":null},{"fullQualified":"public void verifyCommentDetails(WebElement commentSection, String commentGiver, String commentEditor, String commentString, boolean isClosable)","name":"verifyCommentDetails","type":"void","javadoc":null},{"fullQualified":"private void verifyNoResponsesMessage(WebElement panel, boolean isQuestion, boolean isGiver)","name":"verifyNoResponsesMessage","type":"void","javadoc":null},{"fullQualified":"private String[][] getExpectedNoResponseDetails(List<StudentAttributes> noResponseStudents)","name":"getExpectedNoResponseDetails","type":"String[][]","javadoc":null},{"fullQualified":"private String[][] getExpectedQnViewDetails(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"getExpectedQnViewDetails","type":"String[][]","javadoc":null},{"fullQualified":"private String[] getExpectedGqrDetails(FeedbackQuestionAttributes question, FeedbackResponseAttributes response, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"getExpectedGqrDetails","type":"String[]","javadoc":null},{"fullQualified":"private String[] getExpectedRqgDetails(FeedbackQuestionAttributes question, FeedbackResponseAttributes response, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"getExpectedRqgDetails","type":"String[]","javadoc":null},{"fullQualified":"private String[][] getMcqResponseSummary(FeedbackQuestionAttributes question)","name":"getMcqResponseSummary","type":"String[][]","javadoc":null},{"fullQualified":"private String[][] getMcqPerRecipientStatistics(FeedbackQuestionAttributes question, List<FeedbackResponseAttributes> responses, Collection<StudentAttributes> students, Collection<InstructorAttributes> instructors)","name":"getMcqPerRecipientStatistics","type":"String[][]","javadoc":null},{"fullQualified":"private String getAnswerString(FeedbackQuestionAttributes question, FeedbackResponseDetails response)","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"private String getRubricAnsString(FeedbackRubricQuestionDetails question, FeedbackRubricResponseDetails responseDetails)","name":"getRubricAnsString","type":"String","javadoc":null},{"fullQualified":"private String getRankOptionsAnsString(FeedbackRankOptionsQuestionDetails question, FeedbackRankOptionsResponseDetails responseDetails)","name":"getRankOptionsAnsString","type":"String","javadoc":null},{"fullQualified":"private String getConstSumOptionsAnsString(FeedbackConstantSumQuestionDetails question, FeedbackConstantSumResponseDetails responseDetails)","name":"getConstSumOptionsAnsString","type":"String","javadoc":null},{"fullQualified":"private String getContribAnsString(FeedbackContributionResponseDetails responseDetails)","name":"getContribAnsString","type":"String","javadoc":null},{"fullQualified":"private String getUserHeader(boolean isGiver, String name)","name":"getUserHeader","type":"String","javadoc":null},{"fullQualified":"private String getSessionDurationString(FeedbackSessionAttributes feedbackSession)","name":"getSessionDurationString","type":"String","javadoc":null},{"fullQualified":"private String getDateString(Instant date, String timeZone)","name":"getDateString","type":"String","javadoc":null},{"fullQualified":"private String getDoubleString(double value)","name":"getDoubleString","type":"String","javadoc":null},{"fullQualified":"private WebElement getNoResponseTable()","name":"getNoResponseTable","type":"WebElement","javadoc":null},{"fullQualified":"private void includeOption(boolean isIncluded, WebElement option)","name":"includeOption","type":"void","javadoc":null},{"fullQualified":"private void selectViewType(String viewValue)","name":"selectViewType","type":"void","javadoc":null},{"fullQualified":"private void selectSectionDropdown(String sectionName)","name":"selectSectionDropdown","type":"void","javadoc":null},{"fullQualified":"private void selectSectionTypeDropdown(String sectionTypeValue)","name":"selectSectionTypeDropdown","type":"void","javadoc":null},{"fullQualified":"private WebElement getQuestionPanel(int qnNum)","name":"getQuestionPanel","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getQuestionPanel(WebElement parentPanel, int qnNum)","name":"getQuestionPanel","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getSectionPanel(String sectionName)","name":"getSectionPanel","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getTeamPanel(WebElement sectionPanel, String teamName)","name":"getTeamPanel","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getUserPanel(WebElement parentPanel, String header)","name":"getUserPanel","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getUserPanel(FeedbackParticipantType type, String user, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students, boolean isGroupedByTeam, boolean isGiver)","name":"getUserPanel","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getUserPanel(String section, String team, String userPanelHeader, boolean isGroupedByTeam)","name":"getUserPanel","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getUserParentPanel(String section, String team, boolean isGroupedByTeam)","name":"getUserParentPanel","type":"WebElement","javadoc":null},{"fullQualified":"private void expandQuestionPanel(WebElement questionPanel)","name":"expandQuestionPanel","type":"void","javadoc":null},{"fullQualified":"private void hideQuestionPanel(WebElement questionPanel)","name":"hideQuestionPanel","type":"void","javadoc":null},{"fullQualified":"private boolean isQuestionPanelExpanded(WebElement questionPanel)","name":"isQuestionPanelExpanded","type":"boolean","javadoc":null},{"fullQualified":"private String getQuestionText(WebElement questionPanel)","name":"getQuestionText","type":"String","javadoc":null},{"fullQualified":"private WebElement getResponseTable(WebElement questionPanel)","name":"getResponseTable","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getResponseRow(WebElement questionPanel, String giverTeam, String giverName, String recipientTeam, String recipientName)","name":"getResponseRow","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getResponseRow(WebElement questionPanel, String userTeam, String userName)","name":"getResponseRow","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getAllGroupedResponses(WebElement userPanel)","name":"getAllGroupedResponses","type":"List<WebElement>","javadoc":null},{"fullQualified":"private WebElement getGroupedResponses(WebElement userPanel, String userName, String userTeam, boolean isGrq)","name":"getGroupedResponses","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getTeamStats(WebElement parentPanel, int qnNum)","name":"getTeamStats","type":"WebElement","javadoc":null},{"fullQualified":"private String getCommentGiver(WebElement commentField)","name":"getCommentGiver","type":"String","javadoc":null},{"fullQualified":"private String getCommentEditor(WebElement commentField)","name":"getCommentEditor","type":"String","javadoc":null},{"fullQualified":"private WebElement getCommentField(WebElement commentSection, String commentString)","name":"getCommentField","type":"WebElement","javadoc":null},{"fullQualified":"private List<WebElement> getCommentFields(WebElement commentSection)","name":"getCommentFields","type":"List<WebElement>","javadoc":null},{"fullQualified":"private boolean isMissingResponse(FeedbackResponseAttributes response)","name":"isMissingResponse","type":"boolean","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> filterMissingResponses(List<FeedbackResponseAttributes> responses)","name":"filterMissingResponses","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private List<String> getGivers(List<FeedbackResponseAttributes> responses)","name":"getGivers","type":"List<String>","javadoc":null},{"fullQualified":"private List<String> getRecipients(List<FeedbackResponseAttributes> responses)","name":"getRecipients","type":"List<String>","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponseFromGiver(List<FeedbackResponseAttributes> responses, String giver)","name":"getResponseFromGiver","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponseForRecipient(List<FeedbackResponseAttributes> responses, String recipient)","name":"getResponseForRecipient","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"private String getSection(FeedbackParticipantType type, String participant, Collection<StudentAttributes> students)","name":"getSection","type":"String","javadoc":null},{"fullQualified":"private String getTeam(FeedbackParticipantType type, String participant, Collection<StudentAttributes> students)","name":"getTeam","type":"String","javadoc":null},{"fullQualified":"private String getName(FeedbackParticipantType type, String participant, Collection<InstructorAttributes> instructors, Collection<StudentAttributes> students)","name":"getName","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public InstructorFeedbackResultsPage(Browser browser)","javadocComment":null}]},{"name":"InstructorFeedbackSessionsPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorFeedbackSessionsPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifySessionsTable(FeedbackSessionAttributes[] sessions)","name":"verifySessionsTable","type":"void","javadoc":null},{"fullQualified":"public void verifySessionDetails(FeedbackSessionAttributes session)","name":"verifySessionDetails","type":"void","javadoc":null},{"fullQualified":"public void verifySoftDeletedSessionsTable(FeedbackSessionAttributes[] sessions)","name":"verifySoftDeletedSessionsTable","type":"void","javadoc":null},{"fullQualified":"public void verifyNumSoftDeleted(int expected)","name":"verifyNumSoftDeleted","type":"void","javadoc":null},{"fullQualified":"public void verifyResponseRate(FeedbackSessionAttributes session, String expectedResponseRate)","name":"verifyResponseRate","type":"void","javadoc":null},{"fullQualified":"public void addFeedbackSession(FeedbackSessionAttributes newSession, boolean isUsingTemplate)","name":"addFeedbackSession","type":"void","javadoc":null},{"fullQualified":"public void addCopyOfSession(FeedbackSessionAttributes sessionToCopy, CourseAttributes copyToCourse, String newSessionName)","name":"addCopyOfSession","type":"void","javadoc":null},{"fullQualified":"public void copySession(FeedbackSessionAttributes sessionToCopy, CourseAttributes copyToCourse, String newSessionName)","name":"copySession","type":"void","javadoc":null},{"fullQualified":"public void moveToRecycleBin(FeedbackSessionAttributes sessionToDelete)","name":"moveToRecycleBin","type":"void","javadoc":null},{"fullQualified":"public void restoreSession(FeedbackSessionAttributes sessionToRestore)","name":"restoreSession","type":"void","javadoc":null},{"fullQualified":"public void deleteSession(FeedbackSessionAttributes sessionToRestore)","name":"deleteSession","type":"void","javadoc":null},{"fullQualified":"public void restoreAllSessions()","name":"restoreAllSessions","type":"void","javadoc":null},{"fullQualified":"public void deleteAllSessions()","name":"deleteAllSessions","type":"void","javadoc":null},{"fullQualified":"public void showDeleteTable()","name":"showDeleteTable","type":"void","javadoc":null},{"fullQualified":"public void sendReminderEmailToSelectedStudent(FeedbackSessionAttributes session, StudentAttributes student)","name":"sendReminderEmailToSelectedStudent","type":"void","javadoc":null},{"fullQualified":"public void sendReminderEmailToNonSubmitters(FeedbackSessionAttributes session)","name":"sendReminderEmailToNonSubmitters","type":"void","javadoc":null},{"fullQualified":"public void resendResultsLink(FeedbackSessionAttributes session, StudentAttributes student)","name":"resendResultsLink","type":"void","javadoc":null},{"fullQualified":"public void publishSessionResults(FeedbackSessionAttributes sessionToPublish)","name":"publishSessionResults","type":"void","javadoc":null},{"fullQualified":"public void unpublishSessionResults(FeedbackSessionAttributes sessionToPublish)","name":"unpublishSessionResults","type":"void","javadoc":null},{"fullQualified":"public void downloadResults(FeedbackSessionAttributes session)","name":"downloadResults","type":"void","javadoc":null},{"fullQualified":"public void sortBySessionsName()","name":"sortBySessionsName","type":"void","javadoc":null},{"fullQualified":"public void sortByCourseId()","name":"sortByCourseId","type":"void","javadoc":null},{"fullQualified":"private String[] getSessionDetails(FeedbackSessionAttributes session)","name":"getSessionDetails","type":"String[]","javadoc":null},{"fullQualified":"private String[] getSoftDeletedSessionDetails(FeedbackSessionAttributes session)","name":"getSoftDeletedSessionDetails","type":"String[]","javadoc":null},{"fullQualified":"private String getSimpleDateString(Instant instant, String timeZone)","name":"getSimpleDateString","type":"String","javadoc":null},{"fullQualified":"private String getTimeString(Instant instant, String timeZone)","name":"getTimeString","type":"String","javadoc":null},{"fullQualified":"private String getResponseRate(int rowId)","name":"getResponseRate","type":"String","javadoc":null},{"fullQualified":"private void clickAddSessionButton()","name":"clickAddSessionButton","type":"void","javadoc":null},{"fullQualified":"private void setInstructions(String newInstructions)","name":"setInstructions","type":"void","javadoc":null},{"fullQualified":"private void setSessionStartDateTime(Instant startInstant, String timeZone)","name":"setSessionStartDateTime","type":"void","javadoc":null},{"fullQualified":"private void setSessionEndDateTime(Instant endInstant, String timeZone)","name":"setSessionEndDateTime","type":"void","javadoc":null},{"fullQualified":"private void setVisibilityDateTime(Instant startInstant, String timeZone)","name":"setVisibilityDateTime","type":"void","javadoc":null},{"fullQualified":"private void setResponseDateTime(Instant endInstant, String timeZone)","name":"setResponseDateTime","type":"void","javadoc":null},{"fullQualified":"private void setDateTime(WebElement dateBox, WebElement timeBox, Instant startInstant, String timeZone)","name":"setDateTime","type":"void","javadoc":null},{"fullQualified":"private void selectGracePeriod(long gracePeriodMinutes)","name":"selectGracePeriod","type":"void","javadoc":null},{"fullQualified":"private void setVisibilitySettings(FeedbackSessionAttributes newFeedbackSession)","name":"setVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void setSessionVisibilitySettings(FeedbackSessionAttributes newFeedbackSession)","name":"setSessionVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void setResponseVisibilitySettings(FeedbackSessionAttributes newFeedbackSession)","name":"setResponseVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void setEmailSettings(FeedbackSessionAttributes newFeedbackSessionDetails)","name":"setEmailSettings","type":"void","javadoc":null},{"fullQualified":"private void showVisibilitySettings()","name":"showVisibilitySettings","type":"void","javadoc":null},{"fullQualified":"private void showEmailSettings()","name":"showEmailSettings","type":"void","javadoc":null},{"fullQualified":"private void clickCreateSessionButton()","name":"clickCreateSessionButton","type":"void","javadoc":null},{"fullQualified":"private void selectCourseToCopy(String courseToCopyId)","name":"selectCourseToCopy","type":"void","javadoc":null},{"fullQualified":"private void selectSessionToCopy(String copyFromCourse, String sessionNameToCopy)","name":"selectSessionToCopy","type":"void","javadoc":null},{"fullQualified":"private void clickConfirmCopySessionButton()","name":"clickConfirmCopySessionButton","type":"void","javadoc":null},{"fullQualified":"private WebElement clickCopyButtonInTable(String courseId, String sessionName)","name":"clickCopyButtonInTable","type":"WebElement","javadoc":null},{"fullQualified":"private void selectCourseToCopyToInModal(WebElement copyFsModal, String courseToCopyId)","name":"selectCourseToCopyToInModal","type":"void","javadoc":null},{"fullQualified":"private void selectStudentToEmail(String studentEmail)","name":"selectStudentToEmail","type":"void","javadoc":null},{"fullQualified":"private int getFeedbackSessionRowId(String courseId, String sessionName)","name":"getFeedbackSessionRowId","type":"int","javadoc":null},{"fullQualified":"private int getSoftDeletedFeedbackSessionRowId(String courseId, String sessionName)","name":"getSoftDeletedFeedbackSessionRowId","type":"int","javadoc":null},{"fullQualified":"private int getNumFeedbackSessions()","name":"getNumFeedbackSessions","type":"int","javadoc":null},{"fullQualified":"private int getNumSoftDeletedFeedbackSessions()","name":"getNumSoftDeletedFeedbackSessions","type":"int","javadoc":null},{"fullQualified":"private String getFeedbackSessionCourseId(int rowId)","name":"getFeedbackSessionCourseId","type":"String","javadoc":null},{"fullQualified":"private String getSoftDeletedFeedbackSessionCourseId(int rowId)","name":"getSoftDeletedFeedbackSessionCourseId","type":"String","javadoc":null},{"fullQualified":"private String getFeedbackSessionName(int rowId)","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"private String getSoftDeletedFeedbackSessionName(int rowId)","name":"getSoftDeletedFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"private void waitForSessionEditPage()","name":"waitForSessionEditPage","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public InstructorFeedbackSessionsPage(Browser browser)","javadocComment":null}]},{"name":"InstructorHomePage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorHomePage","isInterface":false,"codeComments":[{"type":"LineComment","text":" continue","lineNumber":183,"isOrphan":true}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyCourseTabDetails(int courseTabIndex, CourseAttributes course, FeedbackSessionAttributes[] sessions)","name":"verifyCourseTabDetails","type":"void","javadoc":null},{"fullQualified":"public void verifySessionDetails(int courseTabIndex, int sessionIndex, FeedbackSessionAttributes session)","name":"verifySessionDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyNumCourses(int expectedNum)","name":"verifyNumCourses","type":"void","javadoc":null},{"fullQualified":"public void verifyResponseRate(int courseTabIndex, int sessionIndex, String expectedResponseRate)","name":"verifyResponseRate","type":"void","javadoc":null},{"fullQualified":"public void copySession(int courseTabIndex, int sessionIndex, CourseAttributes copyToCourse, String newSessionName)","name":"copySession","type":"void","javadoc":null},{"fullQualified":"public void publishSessionResults(int courseTabIndex, int sessionIndex)","name":"publishSessionResults","type":"void","javadoc":null},{"fullQualified":"public void unpublishSessionResults(int courseTabIndex, int sessionIndex)","name":"unpublishSessionResults","type":"void","javadoc":null},{"fullQualified":"public void sendReminderEmailToSelectedStudent(int courseTabIndex, int sessionIndex, StudentAttributes student)","name":"sendReminderEmailToSelectedStudent","type":"void","javadoc":null},{"fullQualified":"public void sendReminderEmailToNonSubmitters(int courseTabIndex, int sessionIndex)","name":"sendReminderEmailToNonSubmitters","type":"void","javadoc":null},{"fullQualified":"public void resendResultsLink(int courseTabIndex, int sessionIndex, StudentAttributes student)","name":"resendResultsLink","type":"void","javadoc":null},{"fullQualified":"public void downloadResults(int courseTabIndex, int sessionIndex)","name":"downloadResults","type":"void","javadoc":null},{"fullQualified":"public void deleteSession(int courseTabIndex, int sessionIndex)","name":"deleteSession","type":"void","javadoc":null},{"fullQualified":"public void archiveCourse(int courseTabIndex)","name":"archiveCourse","type":"void","javadoc":null},{"fullQualified":"public void deleteCourse(int courseTabIndex)","name":"deleteCourse","type":"void","javadoc":null},{"fullQualified":"public void sortCoursesById()","name":"sortCoursesById","type":"void","javadoc":null},{"fullQualified":"public void sortCoursesByName()","name":"sortCoursesByName","type":"void","javadoc":null},{"fullQualified":"public void sortCoursesByCreationDate()","name":"sortCoursesByCreationDate","type":"void","javadoc":null},{"fullQualified":"private int getNumCourses()","name":"getNumCourses","type":"int","javadoc":null},{"fullQualified":"private WebElement getCourseTab(int courseTabIndex)","name":"getCourseTab","type":"WebElement","javadoc":null},{"fullQualified":"private String getCourseDetails(int courseTabIndex)","name":"getCourseDetails","type":"String","javadoc":null},{"fullQualified":"private WebElement getSessionsTable(int courseTabIndex)","name":"getSessionsTable","type":"WebElement","javadoc":null},{"fullQualified":"private String getDateString(Instant instant, String timeZone)","name":"getDateString","type":"String","javadoc":null},{"fullQualified":"private String[] getExpectedSessionDetails(FeedbackSessionAttributes session)","name":"getExpectedSessionDetails","type":"String[]","javadoc":null},{"fullQualified":"private String getResponseRate(int courseTabIndex, int sessionIndex)","name":"getResponseRate","type":"String","javadoc":null},{"fullQualified":"private WebElement clickCopyButtonInTable(int courseTabIndex, int sessionIndex)","name":"clickCopyButtonInTable","type":"WebElement","javadoc":null},{"fullQualified":"private void selectCourseToCopyToInModal(WebElement copyFsModal, String courseToCopyId)","name":"selectCourseToCopyToInModal","type":"void","javadoc":null},{"fullQualified":"private void selectStudentToEmail(String studentEmail)","name":"selectStudentToEmail","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public InstructorHomePage(Browser browser)","javadocComment":null}]},{"name":"InstructorNotificationsPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorNotificationsPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public InstructorNotificationsPage(Browser browser)","javadocComment":null}]},{"name":"InstructorSearchPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorSearchPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" loading has finished before this block is reached","lineNumber":51,"isOrphan":true}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void search(String searchTerm)","name":"search","type":"void","javadoc":null},{"fullQualified":"private List<WebElement> getStudentCoursesResult()","name":"getStudentCoursesResult","type":"List<WebElement>","javadoc":null},{"fullQualified":"private String createHeaderText(CourseAttributes course)","name":"createHeaderText","type":"String","javadoc":null},{"fullQualified":"public void verifyStudentDetails(Map<String, CourseAttributes> courses, Map<String, StudentAttributes[]> students)","name":"verifyStudentDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentDetails(CourseAttributes course, StudentAttributes[] students)","name":"verifyStudentDetails","type":"void","javadoc":null},{"fullQualified":"private WebElement getStudentTableForHeader(CourseAttributes course)","name":"getStudentTableForHeader","type":"WebElement","javadoc":null},{"fullQualified":"private String[][] getExpectedStudentValues(StudentAttributes[] students)","name":"getExpectedStudentValues","type":"String[][]","javadoc":null},{"fullQualified":"public void deleteStudent(CourseAttributes course, String studentEmail)","name":"deleteStudent","type":"void","javadoc":null},{"fullQualified":"private WebElement getDeleteButton(CourseAttributes course, String studentEmail)","name":"getDeleteButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getStudentRow(CourseAttributes course, String studentEmail)","name":"getStudentRow","type":"WebElement","javadoc":null},{"fullQualified":"public InstructorCourseStudentDetailsViewPage clickViewStudent(CourseAttributes course, String studentEmail)","name":"clickViewStudent","type":"InstructorCourseStudentDetailsViewPage","javadoc":null},{"fullQualified":"public InstructorCourseStudentDetailsEditPage clickEditStudent(CourseAttributes course, String studentEmail)","name":"clickEditStudent","type":"InstructorCourseStudentDetailsEditPage","javadoc":null},{"fullQualified":"public InstructorStudentRecordsPage clickViewAllRecords(CourseAttributes course, String studentEmail)","name":"clickViewAllRecords","type":"InstructorStudentRecordsPage","javadoc":null}],"allConstructors":[{"identifier":"public InstructorSearchPage(Browser browser)","javadocComment":null}]},{"name":"InstructorSessionIndividualExtensionPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorSessionIndividualExtensionPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" set time","lineNumber":212,"isOrphan":false},{"type":"LineComment","text":" set date","lineNumber":217,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyDeadlineDetails(FeedbackSessionAttributes session, Collection<StudentAttributes> students, Collection<InstructorAttributes> instructors)","name":"verifyDeadlineDetails","type":"void","javadoc":null},{"fullQualified":"private Map<String, String> getStudentDeadlines(FeedbackSessionAttributes session, Collection<StudentAttributes> students)","name":"getStudentDeadlines","type":"Map<String,String>","javadoc":null},{"fullQualified":"private Map<String, String> getInstructorDeadlines(FeedbackSessionAttributes session, Collection<InstructorAttributes> instructors)","name":"getInstructorDeadlines","type":"Map<String,String>","javadoc":null},{"fullQualified":"private String formatDeadline(Instant deadline, String timezone)","name":"formatDeadline","type":"String","javadoc":null},{"fullQualified":"private Map<String, StudentAttributes> getStudentsMap(Collection<StudentAttributes> students)","name":"getStudentsMap","type":"Map<String,StudentAttributes>","javadoc":null},{"fullQualified":"private Map<String, InstructorAttributes> getInstructorsMap(Collection<InstructorAttributes> instructors)","name":"getInstructorsMap","type":"Map<String,InstructorAttributes>","javadoc":null},{"fullQualified":"private void verifyStudentDeadlines(Map<String, String> studentDeadlines, Map<String, StudentAttributes> students)","name":"verifyStudentDeadlines","type":"void","javadoc":null},{"fullQualified":"private void verifyInstructorDeadlines(Map<String, String> instructorDeadlines, Map<String, InstructorAttributes> instructors)","name":"verifyInstructorDeadlines","type":"void","javadoc":null},{"fullQualified":"public void selectStudents(int... indexes)","name":"selectStudents","type":"void","javadoc":null},{"fullQualified":"public void selectStudent(int index)","name":"selectStudent","type":"void","javadoc":null},{"fullQualified":"public void selectInstructor(int index)","name":"selectInstructor","type":"void","javadoc":null},{"fullQualified":"public void selectAllStudents()","name":"selectAllStudents","type":"void","javadoc":null},{"fullQualified":"public void selectAllInstructors()","name":"selectAllInstructors","type":"void","javadoc":null},{"fullQualified":"public void deleteDeadlines(boolean notifyUsers)","name":"deleteDeadlines","type":"void","javadoc":null},{"fullQualified":"public void extendDeadlineByTwelveHours(boolean notifyUsers)","name":"extendDeadlineByTwelveHours","type":"void","javadoc":null},{"fullQualified":"public void extendDeadlineByOneDay(boolean notifyUsers)","name":"extendDeadlineByOneDay","type":"void","javadoc":null},{"fullQualified":"private void extendDeadlineBy(String by, boolean notifyUsers)","name":"extendDeadlineBy","type":"void","javadoc":null},{"fullQualified":"public void extendDeadlineToOneDayAway(FeedbackSessionAttributes session, boolean notifyUsers)","name":"extendDeadlineToOneDayAway","type":"void","javadoc":null},{"fullQualified":"private void confirmChangesToDeadlineExtensions(boolean notifyUsers)","name":"confirmChangesToDeadlineExtensions","type":"void","javadoc":null},{"fullQualified":"private String getTimeString(Instant instant, String timezone)","name":"getTimeString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public InstructorSessionIndividualExtensionPage(Browser browser)","javadocComment":null}]},{"name":"InstructorStudentListPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorStudentListPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" Need to account for the text from the enroll students button as well","lineNumber":74,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"private List<WebElement> getCoursesTabs()","name":"getCoursesTabs","type":"List<WebElement>","javadoc":null},{"fullQualified":"private String createHeaderText(CourseAttributes course)","name":"createHeaderText","type":"String","javadoc":null},{"fullQualified":"public void clickCourseTabHeader(CourseAttributes course)","name":"clickCourseTabHeader","type":"void","javadoc":null},{"fullQualified":"public void verifyAllCoursesHaveTabs(Collection<CourseAttributes> courses)","name":"verifyAllCoursesHaveTabs","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentDetails(Map<String, CourseAttributes> courses, Map<String, StudentAttributes[]> students)","name":"verifyStudentDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentDetails(CourseAttributes course, StudentAttributes[] students)","name":"verifyStudentDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentDetailsNotViewable(CourseAttributes course)","name":"verifyStudentDetailsNotViewable","type":"void","javadoc":null},{"fullQualified":"private WebElement getCourseTab(CourseAttributes course)","name":"getCourseTab","type":"WebElement","javadoc":null},{"fullQualified":"private void verifyDisplayedNumbers(WebElement courseTab, StudentAttributes[] students)","name":"verifyDisplayedNumbers","type":"void","javadoc":null},{"fullQualified":"private String[][] getExpectedStudentValues(StudentAttributes[] students)","name":"getExpectedStudentValues","type":"String[][]","javadoc":null},{"fullQualified":"public void deleteStudent(CourseAttributes course, String studentEmail)","name":"deleteStudent","type":"void","javadoc":null},{"fullQualified":"private WebElement getDeleteButton(CourseAttributes course, String studentEmail)","name":"getDeleteButton","type":"WebElement","javadoc":null},{"fullQualified":"private WebElement getStudentRow(CourseAttributes course, String studentEmail)","name":"getStudentRow","type":"WebElement","javadoc":null},{"fullQualified":"public InstructorCourseEnrollPage clickEnrollStudents(CourseAttributes course)","name":"clickEnrollStudents","type":"InstructorCourseEnrollPage","javadoc":null},{"fullQualified":"public InstructorCourseStudentDetailsViewPage clickViewStudent(CourseAttributes course, String studentEmail)","name":"clickViewStudent","type":"InstructorCourseStudentDetailsViewPage","javadoc":null},{"fullQualified":"public InstructorCourseStudentDetailsEditPage clickEditStudent(CourseAttributes course, String studentEmail)","name":"clickEditStudent","type":"InstructorCourseStudentDetailsEditPage","javadoc":null},{"fullQualified":"public InstructorStudentRecordsPage clickViewAllRecords(CourseAttributes course, String studentEmail)","name":"clickViewAllRecords","type":"InstructorStudentRecordsPage","javadoc":null}],"allConstructors":[{"identifier":"public InstructorStudentListPage(Browser browser)","javadocComment":null}]},{"name":"InstructorStudentRecordsPage","fullyQualifiedName":"teammates.e2e.pageobjects.InstructorStudentRecordsPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyIsCorrectPage(String courseId, String studentName)","name":"verifyIsCorrectPage","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentDetails(StudentProfileAttributes studentProfile, StudentAttributes student)","name":"verifyStudentDetails","type":"void","javadoc":null},{"fullQualified":"private void verifyDetail(String expected, WebElement detailField)","name":"verifyDetail","type":"void","javadoc":null},{"fullQualified":"private String getExpectedNameWithGender(StudentProfileAttributes profile)","name":"getExpectedNameWithGender","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public InstructorStudentRecordsPage(Browser browser)","javadocComment":null}]},{"name":"StudentCourseDetailsPage","fullyQualifiedName":"teammates.e2e.pageobjects.StudentCourseDetailsPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyCourseDetails(CourseAttributes courseDetails)","name":"verifyCourseDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyInstructorsDetails(InstructorAttributes[] instructorDetails)","name":"verifyInstructorsDetails","type":"void","javadoc":null},{"fullQualified":"public void verifyStudentDetails(StudentAttributes studentDetails)","name":"verifyStudentDetails","type":"void","javadoc":null},{"fullQualified":"private String convertGender(StudentProfileAttributes.Gender gender)","name":"convertGender","type":"String","javadoc":null},{"fullQualified":"public void verifyTeammatesDetails(StudentAttributes[] teammates, StudentProfileAttributes[] teammateProfiles)","name":"verifyTeammatesDetails","type":"void","javadoc":null},{"fullQualified":"public void sortTeammatesByName()","name":"sortTeammatesByName","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public StudentCourseDetailsPage(Browser browser)","javadocComment":null}]},{"name":"StudentHomePage","fullyQualifiedName":"teammates.e2e.pageobjects.StudentHomePage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"private List<WebElement> getStudentHomeCoursePanels()","name":"getStudentHomeCoursePanels","type":"List<WebElement>","javadoc":null},{"fullQualified":"public void verifyVisibleCourseToStudents(String courseName, int index)","name":"verifyVisibleCourseToStudents","type":"void","javadoc":null},{"fullQualified":"public void verifyVisibleFeedbackSessionToStudents(String feedbackSessionName, int index)","name":"verifyVisibleFeedbackSessionToStudents","type":"void","javadoc":null},{"fullQualified":"public void clickCloseNotificationBannerButton()","name":"clickCloseNotificationBannerButton","type":"void","javadoc":null},{"fullQualified":"public void clickMarkAsReadButton()","name":"clickMarkAsReadButton","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public StudentHomePage(Browser browser)","javadocComment":null}]},{"name":"StudentNotificationsPage","fullyQualifiedName":"teammates.e2e.pageobjects.StudentNotificationsPage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public StudentNotificationsPage(Browser browser)","javadocComment":null}]},{"name":"StudentProfilePage","fullyQualifiedName":"teammates.e2e.pageobjects.StudentProfilePage","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Selects student nationality from the dropdown list if the nationality is\n     * valid, otherwise it fails with a message.\n     ","lineNumber":84,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Makes sure that the nationality is selected in the dropdown list.\n     * If not, it fails with a message.\n     ","lineNumber":189,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void editProfileThroughUi(String shortName, String email, String institute, String nationality, StudentProfileAttributes.Gender gender, String moreInfo)","name":"editProfileThroughUi","type":"void","javadoc":null},{"fullQualified":"private void submitEditedProfile()","name":"submitEditedProfile","type":"void","javadoc":null},{"fullQualified":"private void fillShortName(String shortName)","name":"fillShortName","type":"void","javadoc":null},{"fullQualified":"private void fillEmail(String studentEmail)","name":"fillEmail","type":"void","javadoc":null},{"fullQualified":"private void fillInstitution(String studentInstitution)","name":"fillInstitution","type":"void","javadoc":null},{"fullQualified":"private void selectNationality(String studentNationality)","name":"selectNationality","type":"void","javadoc":"\n     * Selects student nationality from the dropdown list if the nationality is\n     * valid, otherwise it fails with a message.\n     "},{"fullQualified":"private void fillMoreInfo(String moreInfo)","name":"fillMoreInfo","type":"void","javadoc":null},{"fullQualified":"private void selectGender(StudentProfileAttributes.Gender gender)","name":"selectGender","type":"void","javadoc":null},{"fullQualified":"public void uploadPicture()","name":"uploadPicture","type":"void","javadoc":null},{"fullQualified":"public void editProfilePhoto()","name":"editProfilePhoto","type":"void","javadoc":null},{"fullQualified":"public void fillProfilePic(String fileName)","name":"fillProfilePic","type":"void","javadoc":null},{"fullQualified":"public void showPictureEditor()","name":"showPictureEditor","type":"void","javadoc":null},{"fullQualified":"public void closePictureEditor()","name":"closePictureEditor","type":"void","javadoc":null},{"fullQualified":"public void verifyPhotoSize(int height, int width)","name":"verifyPhotoSize","type":"void","javadoc":null},{"fullQualified":"public void uploadProfilePicAndVerifyDimensions(String imagePath, int height, int width)","name":"uploadProfilePicAndVerifyDimensions","type":"void","javadoc":null},{"fullQualified":"public void ensureProfileContains(String shortName, String email, String institute, String nationality, StudentProfileAttributes.Gender gender, String moreInfo)","name":"ensureProfileContains","type":"void","javadoc":null},{"fullQualified":"private void ensureNationalityIsSelectedAs(String nationality)","name":"ensureNationalityIsSelectedAs","type":"void","javadoc":"\n     * Makes sure that the nationality is selected in the dropdown list.\n     * If not, it fails with a message.\n     "},{"fullQualified":"private void ensureGenderIsSelectedAs(StudentProfileAttributes.Gender gender)","name":"ensureGenderIsSelectedAs","type":"void","javadoc":null},{"fullQualified":"public void waitForUploadEditModalVisible()","name":"waitForUploadEditModalVisible","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public StudentProfilePage(Browser browser)","javadocComment":null}]},{"name":"UserNotificationsPage","fullyQualifiedName":"teammates.e2e.pageobjects.UserNotificationsPage","isInterface":false,"codeComments":[{"type":"LineComment","text":" Only validates that the preset notifications are present instead of checking every notification","lineNumber":48,"isOrphan":true},{"type":"LineComment","text":" This is because the page will display all active notifications in the database, which is not predictable","lineNumber":49,"isOrphan":false},{"type":"LineComment","text":" Check text and style of notification header","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" Checks if tab is open if notification is unread, and closed if notification is read","lineNumber":64,"isOrphan":false},{"type":"LineComment","text":" Open tab if notification is unread","lineNumber":68,"isOrphan":false},{"type":"LineComment","text":" Check notification message","lineNumber":75,"isOrphan":false},{"type":"LineComment","text":" Check that mark as read button cannot be found if notification is read","lineNumber":82,"isOrphan":false},{"type":"LineComment","text":" Close tab if notification is read","lineNumber":85,"isOrphan":false},{"type":"LineComment","text":" Check style of mark as read button if notification is unread","lineNumber":89,"isOrphan":false}],"allMethods":[{"fullQualified":"protected boolean containsExpectedPageContents()","name":"containsExpectedPageContents","type":"boolean","javadoc":null},{"fullQualified":"public void verifyNotShownNotifications(NotificationAttributes[] notifications)","name":"verifyNotShownNotifications","type":"void","javadoc":null},{"fullQualified":"public void verifyShownNotifications(NotificationAttributes[] notifications, Set<String> readNotificationIds)","name":"verifyShownNotifications","type":"void","javadoc":null},{"fullQualified":"public void verifyNotificationTab(NotificationAttributes notification, Set<String> readNotificationIds)","name":"verifyNotificationTab","type":"void","javadoc":null},{"fullQualified":"public void markNotificationAsRead(NotificationAttributes notification)","name":"markNotificationAsRead","type":"void","javadoc":null},{"fullQualified":"private String getTimezone()","name":"getTimezone","type":"String","javadoc":null},{"fullQualified":"private String getHeaderText(NotificationAttributes notification)","name":"getHeaderText","type":"String","javadoc":null},{"fullQualified":"private String getHeaderDateString(Instant date)","name":"getHeaderDateString","type":"String","javadoc":null},{"fullQualified":"private String getHeaderClass(NotificationStyle style)","name":"getHeaderClass","type":"String","javadoc":null},{"fullQualified":"private String getButtonClass(NotificationStyle style)","name":"getButtonClass","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public UserNotificationsPage(Browser browser)","javadocComment":null}]},{"name":"BackDoor","fullyQualifiedName":"teammates.e2e.util.BackDoor","isInterface":false,"codeComments":[{"type":"LineComment","text":" Utility class","lineNumber":13,"isOrphan":true}],"allMethods":[{"fullQualified":"public static BackDoor getInstance()","name":"getInstance","type":"BackDoor","javadoc":null},{"fullQualified":"protected String getAppUrl()","name":"getAppUrl","type":"String","javadoc":null},{"fullQualified":"protected String getBackdoorKey()","name":"getBackdoorKey","type":"String","javadoc":null},{"fullQualified":"protected String getCsrfKey()","name":"getCsrfKey","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private BackDoor()","javadocComment":null}]},{"name":"EmailAccount","fullyQualifiedName":"teammates.e2e.util.EmailAccount","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Constructs an email client for the {@code username}.\n     ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Triggers the authentication process for the associated {@code username}.\n     ","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" assume user is authenticated before","lineNumber":43,"isOrphan":false},{"type":"LineComment","text":" touch one API endpoint to check authentication","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" existing credential missing or not working, should do authentication for the account again","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if unread mail that arrived in the past minute contains mail with the specified subject.\n     ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of up to maxResults number of unread emails from the sender.\n     * Returns an empty list if there is no unread email from sender.\n     ","lineNumber":92,"isOrphan":false},{"type":"LineComment","text":" While we are not actually sending or receiving an email, a session is required so there will be strict parsing","lineNumber":113,"isOrphan":true},{"type":"LineComment","text":" of address headers when we create a MimeMessage. We are also passing in empty properties where we are expected to","lineNumber":114,"isOrphan":true},{"type":"LineComment","text":" supply some values because we are not actually sending or receiving any email.","lineNumber":115,"isOrphan":false}],"allMethods":[{"fullQualified":"public void getUserAuthenticated() throws IOException","name":"getUserAuthenticated","type":"void","javadoc":"\n     * Triggers the authentication process for the associated {@code username}.\n     "},{"fullQualified":"public boolean isRecentEmailWithSubjectPresent(String subject, String senderEmail) throws IOException, MessagingException","name":"isRecentEmailWithSubjectPresent","type":"boolean","javadoc":"\n     * Returns true if unread mail that arrived in the past minute contains mail with the specified subject.\n     "},{"fullQualified":"private List<Message> getListOfUnreadEmailFromSender(long maxResults, String senderEmail) throws IOException","name":"getListOfUnreadEmailFromSender","type":"List<Message>","javadoc":"\n     * Returns a list of up to maxResults number of unread emails from the sender.\n     * Returns an empty list if there is no unread email from sender.\n     "},{"fullQualified":"private void markMessageAsRead(Message messageStub) throws IOException","name":"markMessageAsRead","type":"void","javadoc":null},{"fullQualified":"private MimeMessage convertFromMessageToMimeMessage(Message message) throws MessagingException","name":"convertFromMessageToMimeMessage","type":"MimeMessage","javadoc":null},{"fullQualified":"public String getUsername()","name":"getUsername","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public EmailAccount(String username)","javadocComment":"\n     * Constructs an email client for the {@code username}.\n     "}]},{"name":"EmailAccountTest","fullyQualifiedName":"teammates.e2e.util.EmailAccountTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Access to actual email account is not necessary for dev server testing","lineNumber":13,"isOrphan":false}],"allMethods":[{"fullQualified":"public void checkEmailAccount() throws Exception","name":"checkEmailAccount","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GmailServiceMaker","fullyQualifiedName":"teammates.e2e.util.GmailServiceMaker","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" Global instance of the JSON factory. ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":" Global instance of the HTTP transport. ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Builds and returns an authorized Gmail client service.\n     ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Authorizes the user and creates an authorized Credential.\n     * @return an authorized Credential\n     ","lineNumber":70,"isOrphan":false},{"type":"LineComment","text":" if the scopes need to change, the user will need to manually delete","lineNumber":100,"isOrphan":true},{"type":"LineComment","text":" <TestProperties.TEST_GMAIL_API_FOLDER>/StoredCredential","lineNumber":101,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the credential containing the access token from the flow if it exists. Otherwise a local server receiver is used\n     * to receive authorization code and then exchanges the code for an access token.\n     ","lineNumber":111,"isOrphan":false}],"allMethods":[{"fullQualified":" Gmail makeGmailService() throws IOException","name":"makeGmailService","type":"Gmail","javadoc":"\n     * Builds and returns an authorized Gmail client service.\n     "},{"fullQualified":"private Credential authorizeAndCreateCredentials() throws IOException","name":"authorizeAndCreateCredentials","type":"Credential","javadoc":"\n     * Authorizes the user and creates an authorized Credential.\n     * @return an authorized Credential\n     "},{"fullQualified":"private GoogleClientSecrets loadClientSecretFromJson() throws IOException","name":"loadClientSecretFromJson","type":"GoogleClientSecrets","javadoc":null},{"fullQualified":"private GoogleAuthorizationCodeFlow buildFlow(GoogleClientSecrets clientSecrets) throws IOException","name":"buildFlow","type":"GoogleAuthorizationCodeFlow","javadoc":null},{"fullQualified":"private Credential getCredentialFromFlow(GoogleAuthorizationCodeFlow flow) throws IOException","name":"getCredentialFromFlow","type":"Credential","javadoc":"\n     * Gets the credential containing the access token from the flow if it exists. Otherwise a local server receiver is used\n     * to receive authorization code and then exchanges the code for an access token.\n     "}],"allConstructors":[{"identifier":" GmailServiceMaker(String username)","javadocComment":null},{"identifier":" GmailServiceMaker(String username, boolean shouldUseFreshCredentials)","javadocComment":null}]},{"name":"MaximumRetriesExceededException","fullyQualifiedName":"teammates.e2e.util.MaximumRetriesExceededException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public MaximumRetriesExceededException(Retryable task, Throwable cause)","javadocComment":null}]},{"name":"Retryable","fullyQualifiedName":"teammates.e2e.util.Retryable","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Executes a method that runs the task once.\n     ","lineNumber":14,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the name of the task.\n     ","lineNumber":19,"isOrphan":false}],"allMethods":[{"fullQualified":"protected abstract void run()","name":"run","type":"void","javadoc":"\n     * Executes a method that runs the task once.\n     "},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":"\n     * Returns the name of the task.\n     "}],"allConstructors":[{"identifier":"public Retryable(String name)","javadocComment":null}]},{"name":"RetryManager","fullyQualifiedName":"teammates.e2e.util.RetryManager","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Creates a new {@link RetryManager} that contains methods to retry tasks.\n     *\n     * @param maxDelayInS maximum delay (in seconds) to wait before final retry.\n     ","lineNumber":18,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Runs {@code task}, retrying if needed using exponential backoff, until no exceptions of the specified\n     * {@code recognizedExceptionTypes} are caught.\n     *\n     * @throws MaximumRetriesExceededException if maximum retries are exceeded.\n     ","lineNumber":27,"isOrphan":false},{"type":"LineComment","text":" allow users to catch specific errors e.g. AssertionError","lineNumber":34,"isOrphan":false},{"type":"LineComment","text":" continue retry process","lineNumber":46,"isOrphan":true}],"allMethods":[{"fullQualified":"public final void runUntilNoRecognizedException(Retryable task, Class<? extends Throwable>... recognizedExceptionTypes) throws MaximumRetriesExceededException","name":"runUntilNoRecognizedException","type":"void","javadoc":"\n     * Runs {@code task}, retrying if needed using exponential backoff, until no exceptions of the specified\n     * {@code recognizedExceptionTypes} are caught.\n     *\n     * @throws MaximumRetriesExceededException if maximum retries are exceeded.\n     "},{"fullQualified":"private static boolean isThrowableTypeIn(Throwable e, Class<? extends Throwable>... recognizedExceptionTypes)","name":"isThrowableTypeIn","type":"boolean","javadoc":null},{"fullQualified":"private static void logFailure(Retryable task, int delay)","name":"logFailure","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public RetryManager(int maxDelayInS)","javadocComment":"\n     * Creates a new {@link RetryManager} that contains methods to retry tasks.\n     *\n     * @param maxDelayInS maximum delay (in seconds) to wait before final retry.\n     "}]},{"name":"TestDataValidityTest","fullyQualifiedName":"teammates.e2e.util.TestDataValidityTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" SpotBugs false positive: https://github.com/spotbugs/spotbugs/issues/1694","lineNumber":46,"isOrphan":false},{"type":"LineComment","text":" Empty google ID is always acceptable","lineNumber":180,"isOrphan":false},{"type":"LineComment","text":" We set these rules for setting the prefix for IDs:","lineNumber":187,"isOrphan":true},{"type":"LineComment","text":" Rule 1: must start with predefined phrase","lineNumber":188,"isOrphan":true},{"type":"LineComment","text":" Rule 2: must be representative of the test but yet not too long","lineNumber":189,"isOrphan":true},{"type":"LineComment","text":" Prefix with tm.e2e.","lineNumber":223,"isOrphan":true},{"type":"LineComment","text":" Trim the Page word at the end if any","lineNumber":193,"isOrphan":false},{"type":"LineComment","text":" Shorten common words","lineNumber":197,"isOrphan":false},{"type":"LineComment","text":" Shorten question types","lineNumber":216,"isOrphan":false},{"type":"LineComment","text":" Add validation at the end to ensure that the ID is not equal to the prefix only","lineNumber":224,"isOrphan":false}],"allMethods":[{"fullQualified":"public void checkTestDataValidity() throws IOException","name":"checkTestDataValidity","type":"void","javadoc":null},{"fullQualified":"private boolean isValidTestEmail(String email)","name":"isValidTestEmail","type":"boolean","javadoc":null},{"fullQualified":"private boolean isValidTestCourseId(String courseId, String testPage)","name":"isValidTestCourseId","type":"boolean","javadoc":null},{"fullQualified":"private boolean isValidTestGoogleId(String googleId, String testPage)","name":"isValidTestGoogleId","type":"boolean","javadoc":null},{"fullQualified":"private String constructIdRegex(String testPage)","name":"constructIdRegex","type":"String","javadoc":null}],"allConstructors":[]},{"name":"TestNgXmlTest","fullyQualifiedName":"teammates.e2e.util.TestNgXmlTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" <class name, package name>","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Files to be checked in testng-e2e.xml are added to testFiles.\n     *\n     * @param testNgXml    Contents of testng-e2e.xml\n     * @param rootPath     Root path of test files\n     * @return             Map containing {@code <class name, package name>}\n     ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Recursively adds files from testng-e2e.xml which are to be checked.\n     *\n     * @param path                            Check files and directories in the current path\n     *\n     * @param areFilesInCurrentDirExcluded    If true, files in the current path are not\n     *                                        added to tests but sub-directories are still checked\n     *\n     * @param packageName                     Package name of the current file\n     * @param testNgXml                       Contents of testng-e2e.xml\n     *\n     * @return                                Map containing {@code <class name, package name>} including\n     *                                        current file or tests in the current directory\n     ","lineNumber":43,"isOrphan":false},{"type":"LineComment","text":" If the package name is in TestNG in the form of <package name=\"teammates.package.name\" />","lineNumber":75,"isOrphan":true},{"type":"LineComment","text":" then files in the current directory are excluded because the whole package would be tested by TestNG.","lineNumber":76,"isOrphan":true}],"allMethods":[{"fullQualified":"public void checkTestsInTestNg() throws IOException","name":"checkTestsInTestNg","type":"void","javadoc":null},{"fullQualified":"private Map<String, String> getTestFiles(String testNgXml, String rootPath)","name":"getTestFiles","type":"Map<String,String>","javadoc":"\n     * Files to be checked in testng-e2e.xml are added to testFiles.\n     *\n     * @param testNgXml    Contents of testng-e2e.xml\n     * @param rootPath     Root path of test files\n     * @return             Map containing {@code <class name, package name>}\n     "},{"fullQualified":"private boolean isTestFileIncluded(String testNgXml, String packageName, String testClassName)","name":"isTestFileIncluded","type":"boolean","javadoc":null},{"fullQualified":"private Map<String, String> addFilesToTestsRecursively(String path, boolean areFilesInCurrentDirExcluded, String packageName, String testNgXml)","name":"addFilesToTestsRecursively","type":"Map<String,String>","javadoc":"\n     * Recursively adds files from testng-e2e.xml which are to be checked.\n     *\n     * @param path                            Check files and directories in the current path\n     *\n     * @param areFilesInCurrentDirExcluded    If true, files in the current path are not\n     *                                        added to tests but sub-directories are still checked\n     *\n     * @param packageName                     Package name of the current file\n     * @param testNgXml                       Contents of testng-e2e.xml\n     *\n     * @return                                Map containing {@code <class name, package name>} including\n     *                                        current file or tests in the current directory\n     "},{"fullQualified":"private boolean isPackageNameInTestNg(String packageName, String testNgXml)","name":"isPackageNameInTestNg","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"TestProperties","fullyQualifiedName":"teammates.e2e.util.TestProperties","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" The directory where JSON files used to create data bundles are stored. ","lineNumber":14,"isOrphan":false},{"type":"JavadocComment","text":" The directory where webdriver downloads files to. ","lineNumber":17,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.app.frontend.url\" in test.properties file. ","lineNumber":20,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.app.backend.url\" in test.properties file. ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":" The Google ID of user with admin permission. ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":" The email address used for testing that emails are sent by the system. ","lineNumber":29,"isOrphan":false},{"type":"JavadocComment","text":" The email address used by the system the send emails. ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.csrf.key\" in test.properties file. ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.backdoor.key\" in test.properties file. ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.selenium.browser\" in test.properties file. ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":" One of the allowed values of \"test.selenium.browser\" in test.properties file. ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":" One of the allowed values of \"test.selenium.browser\" in test.properties file. ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":" One of the allowed values of \"test.selenium.browser\" in test.properties file. ","lineNumber":47,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.browser.closeonfailure\" in test.properties file. ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.firefox.path\" in test.properties file. ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.chromedriver.path\" in test.properties file. ","lineNumber":56,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.geckodriver.path\" in test.properties file. ","lineNumber":59,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.edgedriver.path\" in test.properties file. ","lineNumber":62,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.timeout\" in test.properties file. ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":" The flag to indicate whether emails sent should be verified. ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":" The flag to indicate whether search-related functions should be tested. ","lineNumber":71,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Line separator to be used when performing text comparison.\n     *\n     * <p>It needs to be redefined here because either the browser or Selenium uses a predetermined line separator\n     * instead of the system's line separator.\n     ","lineNumber":74,"isOrphan":false},{"type":"JavadocComment","text":" The directory where credentials used in Gmail API are stored. ","lineNumber":82,"isOrphan":false},{"type":"LineComment","text":" access static fields directly","lineNumber":120,"isOrphan":true}],"allMethods":[{"fullQualified":"public static boolean isDevServer()","name":"isDevServer","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"private TestProperties()","javadocComment":null}]},{"name":"TestPropertiesTest","fullyQualifiedName":"teammates.e2e.util.TestPropertiesTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testContent()","name":"testContent","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BaseLNPTestCase","fullyQualifiedName":"teammates.lnp.cases.BaseLNPTestCase","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns the test data used for the current test.\n     ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the JMeter test plan for the L&P test case.\n     * @return A nested tree structure that consists of the various elements that are used in the JMeter test.\n     ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets up the specification for this L&P test case.\n     ","lineNumber":74,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the path to the generated JSON data bundle file.\n     ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the path to the generated JMeter CSV config file.\n     ","lineNumber":86,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the path to the generated JTL test results file.\n     ","lineNumber":93,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the path to the data file, relative to the project root directory.\n     ","lineNumber":105,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the path to the JSON test results statistics file, relative to the project root directory.\n     ","lineNumber":112,"isOrphan":false},{"type":"LineComment","text":" Write data to the file; overwrite if it already exists","lineNumber":129,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates the JSON data and writes it to the file specified by {@link #getJsonDataPath()}.\n     ","lineNumber":137,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates the CSV data and writes it to the file specified by {@link #getCsvConfigPath()}.\n     ","lineNumber":150,"isOrphan":false},{"type":"LineComment","text":" Write headers and data to the CSV file","lineNumber":159,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts the list of {@code values} to a CSV row.\n     * @return A single string containing {@code values} separated by pipelines and ending with newline.\n     ","lineNumber":170,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the L&P test results statistics.\n     * @return The initialized result statistics from the L&P test results.\n     * @throws IOException if there is an error when loading the result file.\n     ","lineNumber":182,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Renames the default results statistics file to the name of the test.\n     ","lineNumber":196,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Setup and load the JMeter configuration and property files to run the Jmeter test.\n     * @throws IOException if the save service properties file cannot be loaded.\n     ","lineNumber":211,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates the JSON test data and CSV config data files for the performance test from {@code testData}.\n     ","lineNumber":222,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates the entities in the database from the JSON data file.\n     ","lineNumber":232,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Display the L&P results on the console.\n     ","lineNumber":244,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Runs the JMeter test.\n     * @param shouldCreateJmxFile true if the generated test plan should be saved to a `.jmx` file which\n     *                            can be opened in the JMeter GUI, and false otherwise.\n     ","lineNumber":254,"isOrphan":false},{"type":"LineComment","text":" Add result collector to the test plan for generating results file","lineNumber":271,"isOrphan":false},{"type":"LineComment","text":" Run Jmeter Test","lineNumber":283,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the data that was created in the database from the JSON data file.\n     ","lineNumber":297,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the JSON and CSV data files that were created.\n     ","lineNumber":305,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the oldest excess result .jtl file and the statistics file, if there are more than RESULT_COUNT.\n     ","lineNumber":316,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sanitize the string to be CSV-safe string.\n     ","lineNumber":348,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates timestamp for generated statistics/CSV files in order to prevent concurrency issues.\n     ","lineNumber":355,"isOrphan":false}],"allMethods":[{"fullQualified":"protected abstract LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":"\n     * Returns the test data used for the current test.\n     "},{"fullQualified":"protected abstract ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":"\n     * Returns the JMeter test plan for the L&P test case.\n     * @return A nested tree structure that consists of the various elements that are used in the JMeter test.\n     "},{"fullQualified":"protected abstract void setupSpecification()","name":"setupSpecification","type":"void","javadoc":"\n     * Sets up the specification for this L&P test case.\n     "},{"fullQualified":"protected String getJsonDataPath()","name":"getJsonDataPath","type":"String","javadoc":"\n     * Returns the path to the generated JSON data bundle file.\n     "},{"fullQualified":"protected String getCsvConfigPath()","name":"getCsvConfigPath","type":"String","javadoc":"\n     * Returns the path to the generated JMeter CSV config file.\n     "},{"fullQualified":"protected String getJtlResultsPath()","name":"getJtlResultsPath","type":"String","javadoc":"\n     * Returns the path to the generated JTL test results file.\n     "},{"fullQualified":"protected String getTestDataFolder()","name":"getTestDataFolder","type":"String","javadoc":null},{"fullQualified":"protected String getPathToTestDataFile(String fileName)","name":"getPathToTestDataFile","type":"String","javadoc":"\n     * Returns the path to the data file, relative to the project root directory.\n     "},{"fullQualified":"private String getPathToTestStatisticsResultsFile()","name":"getPathToTestStatisticsResultsFile","type":"String","javadoc":"\n     * Returns the path to the JSON test results statistics file, relative to the project root directory.\n     "},{"fullQualified":" String createFileAndDirectory(String directory, String fileName) throws IOException","name":"createFileAndDirectory","type":"String","javadoc":null},{"fullQualified":" void createJsonDataFile(LNPTestData testData) throws IOException","name":"createJsonDataFile","type":"void","javadoc":"\n     * Creates the JSON data and writes it to the file specified by {@link #getJsonDataPath()}.\n     "},{"fullQualified":"private void createCsvConfigDataFile(LNPTestData testData) throws IOException","name":"createCsvConfigDataFile","type":"void","javadoc":"\n     * Creates the CSV data and writes it to the file specified by {@link #getCsvConfigPath()}.\n     "},{"fullQualified":" String convertToCsv(List<String> values)","name":"convertToCsv","type":"String","javadoc":"\n     * Converts the list of {@code values} to a CSV row.\n     * @return A single string containing {@code values} separated by pipelines and ending with newline.\n     "},{"fullQualified":"private LNPResultsStatistics getResultsStatistics() throws IOException","name":"getResultsStatistics","type":"LNPResultsStatistics","javadoc":"\n     * Returns the L&P test results statistics.\n     * @return The initialized result statistics from the L&P test results.\n     * @throws IOException if there is an error when loading the result file.\n     "},{"fullQualified":"private void renameStatisticsFile()","name":"renameStatisticsFile","type":"void","javadoc":"\n     * Renames the default results statistics file to the name of the test.\n     "},{"fullQualified":"private void setJmeterProperties() throws IOException","name":"setJmeterProperties","type":"void","javadoc":"\n     * Setup and load the JMeter configuration and property files to run the Jmeter test.\n     * @throws IOException if the save service properties file cannot be loaded.\n     "},{"fullQualified":"protected void createTestData() throws IOException, HttpRequestFailedException","name":"createTestData","type":"void","javadoc":"\n     * Creates the JSON test data and CSV config data files for the performance test from {@code testData}.\n     "},{"fullQualified":"protected void persistTestData() throws IOException, HttpRequestFailedException","name":"persistTestData","type":"void","javadoc":"\n     * Creates the entities in the database from the JSON data file.\n     "},{"fullQualified":"protected void displayLnpResults() throws IOException","name":"displayLnpResults","type":"void","javadoc":"\n     * Display the L&P results on the console.\n     "},{"fullQualified":"protected void runJmeter(boolean shouldCreateJmxFile) throws IOException","name":"runJmeter","type":"void","javadoc":"\n     * Runs the JMeter test.\n     * @param shouldCreateJmxFile true if the generated test plan should be saved to a `.jmx` file which\n     *                            can be opened in the JMeter GUI, and false otherwise.\n     "},{"fullQualified":"protected void deleteTestData()","name":"deleteTestData","type":"void","javadoc":"\n     * Deletes the data that was created in the database from the JSON data file.\n     "},{"fullQualified":"protected void deleteDataFiles() throws IOException","name":"deleteDataFiles","type":"void","javadoc":"\n     * Deletes the JSON and CSV data files that were created.\n     "},{"fullQualified":"protected void cleanupResults() throws IOException","name":"cleanupResults","type":"void","javadoc":"\n     * Deletes the oldest excess result .jtl file and the statistics file, if there are more than RESULT_COUNT.\n     "},{"fullQualified":"protected String sanitizeForCsv(String originalString)","name":"sanitizeForCsv","type":"String","javadoc":"\n     * Sanitize the string to be CSV-safe string.\n     "},{"fullQualified":"protected void generateTimeStamp()","name":"generateTimeStamp","type":"void","javadoc":"\n     * Generates timestamp for generated statistics/CSV files in order to prevent concurrency issues.\n     "}],"allConstructors":[]},{"name":"FeedbackQuestionUpdateLNPTest","fullyQualifiedName":"teammates.lnp.cases.FeedbackQuestionUpdateLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Add HTTP sampler for test endpoint","lineNumber":305,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private FeedbackQuestionUpdateRequest getTypicalTextQuestionUpdateRequest()","name":"getTypicalTextQuestionUpdateRequest","type":"FeedbackQuestionUpdateRequest","javadoc":null},{"fullQualified":"private Map<String, String> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,String>","javadoc":null},{"fullQualified":"private String getTestEndpoint()","name":"getTestEndpoint","type":"String","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionSubmitLNPTest","fullyQualifiedName":"teammates.lnp.cases.FeedbackSessionSubmitLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" \"googleId\" is used for logging in, not \"email\"","lineNumber":202,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     ","lineNumber":283,"isOrphan":false},{"type":"LineComment","text":" There is no need to add the newly enrolled students to the JSON DataBundle#students. This is because the new","lineNumber":288,"isOrphan":true},{"type":"LineComment","text":" CourseStudent entities that were created are automatically deleted when the corresponding course is deleted.","lineNumber":289,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private Map<String, String> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,String>","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     "}],"allConstructors":[]},{"name":"FeedbackSessionViewLNPTest","fullyQualifiedName":"teammates.lnp.cases.FeedbackSessionViewLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" \"googleId\" is used for logging in, not \"email\"","lineNumber":192,"isOrphan":false},{"type":"LineComment","text":" Add HTTP samplers for test endpoint","lineNumber":216,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     ","lineNumber":252,"isOrphan":false},{"type":"LineComment","text":" There is no need to add the newly enrolled students to the JSON DataBundle#students. This is because the new","lineNumber":257,"isOrphan":true},{"type":"LineComment","text":" CourseStudent entities that were created are automatically deleted when the corresponding course is deleted.","lineNumber":258,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     "}],"allConstructors":[]},{"name":"InstructorCourseUpdateLNPTest","fullyQualifiedName":"teammates.lnp.cases.InstructorCourseUpdateLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Add HTTP sampler for test endpoint","lineNumber":176,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private Map<String, String> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,String>","javadoc":null},{"fullQualified":"private String getTestEndpoint()","name":"getTestEndpoint","type":"String","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorSessionResultLNPTest","fullyQualifiedName":"teammates.lnp.cases.InstructorSessionResultLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" For loading section panel for each controller.","lineNumber":208,"isOrphan":false},{"type":"LineComment","text":" \"googleId\" is used for logging in, not \"email\"","lineNumber":228,"isOrphan":false},{"type":"LineComment","text":" For loading section panel for each controller.","lineNumber":232,"isOrphan":false},{"type":"LineComment","text":" For loading feedback question IDs","lineNumber":237,"isOrphan":false},{"type":"LineComment","text":" Set query param.","lineNumber":264,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     ","lineNumber":359,"isOrphan":false},{"type":"LineComment","text":" There is no need to add the newly enrolled students to the JSON DataBundle#students. This is because the new","lineNumber":364,"isOrphan":true},{"type":"LineComment","text":" CourseStudent entities that were created are automatically deleted when the corresponding course is deleted.","lineNumber":365,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"private void addLoadPageController(HashTree threadGroup, Map<String, String> argumentsMap)","name":"addLoadPageController","type":"void","javadoc":null},{"fullQualified":"private void addLoadSectionsController(HashTree threadGroup, Map<String, String> sectionsArgumentsMap)","name":"addLoadSectionsController","type":"void","javadoc":null},{"fullQualified":"private void addLoadNoResponsePanelController(HashTree threadGroup, Map<String, String> argumentsMap)","name":"addLoadNoResponsePanelController","type":"void","javadoc":null},{"fullQualified":"private void addLoadQuestionPanelController(HashTree threadGroup, Map<String, String> argumentsMap)","name":"addLoadQuestionPanelController","type":"void","javadoc":null},{"fullQualified":"private void addLoadSectionPanelController(HashTree threadGroup, Map<String, String> argumentsMap)","name":"addLoadSectionPanelController","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     "}],"allConstructors":[]},{"name":"InstructorStudentCascadingUpdateLNPTest","fullyQualifiedName":"teammates.lnp.cases.InstructorStudentCascadingUpdateLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" To generate multiple csv files for multiple sections","lineNumber":63,"isOrphan":false},{"type":"LineComment","text":" Create and add student enrollment data with a team number corresponding to each section number","lineNumber":195,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates csv data for each request, distinguished by csvTestDataIndex.\n     ","lineNumber":248,"isOrphan":false},{"type":"LineComment","text":" Write headers and data to the CSV file","lineNumber":257,"isOrphan":false},{"type":"LineComment","text":" Add HTTP sampler for test endpoint","lineNumber":281,"isOrphan":false},{"type":"LineComment","text":" Mocks paginated calls from FE","lineNumber":283,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     ","lineNumber":335,"isOrphan":false},{"type":"LineComment","text":" There is no need to add the newly enrolled students to the JSON DataBundle#students. This is because the new","lineNumber":340,"isOrphan":true},{"type":"LineComment","text":" CourseStudent entities that were created are automatically deleted when the corresponding course is deleted.","lineNumber":341,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private Map<String, String> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,String>","javadoc":null},{"fullQualified":"private String getTestEndpoint()","name":"getTestEndpoint","type":"String","javadoc":null},{"fullQualified":"protected void createTestData() throws IOException, HttpRequestFailedException","name":"createTestData","type":"void","javadoc":null},{"fullQualified":"protected String getCsvConfigPath()","name":"getCsvConfigPath","type":"String","javadoc":null},{"fullQualified":"protected void createCsvConfigDataFile() throws IOException","name":"createCsvConfigDataFile","type":"void","javadoc":"\n     * Generates csv data for each request, distinguished by csvTestDataIndex.\n     "},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"protected void deleteDataFiles() throws IOException","name":"deleteDataFiles","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     "}],"allConstructors":[]},{"name":"InstructorStudentEnrollmentLNPTest","fullyQualifiedName":"teammates.lnp.cases.InstructorStudentEnrollmentLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Create a course for each instructor","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":" Create and add student enrollment data with a team number corresponding to each section number","lineNumber":108,"isOrphan":false},{"type":"LineComment","text":" Add HTTP sampler for test endpoint","lineNumber":160,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     ","lineNumber":189,"isOrphan":false},{"type":"LineComment","text":" There is no need to add the newly enrolled students to the JSON DataBundle#students. This is because the new","lineNumber":194,"isOrphan":true},{"type":"LineComment","text":" CourseStudent entities that were created are automatically deleted when the corresponding course is deleted.","lineNumber":195,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private Map<String, String> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,String>","javadoc":null},{"fullQualified":"private String getTestEndpoint()","name":"getTestEndpoint","type":"String","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":"\n     * Removes the entities added for the instructors' student enrollment L&P test.\n     "}],"allConstructors":[]},{"name":"InstructorUpdateLNPTest","fullyQualifiedName":"teammates.lnp.cases.InstructorUpdateLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Add HTTP sampler for test endpoint","lineNumber":303,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private Map<String, String> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,String>","javadoc":null},{"fullQualified":"private String getTestEndpoint()","name":"getTestEndpoint","type":"String","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentEmailUpdateLNPTest","fullyQualifiedName":"teammates.lnp.cases.StudentEmailUpdateLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Add HTTP sampler for test endpoint","lineNumber":276,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private Map<String, String> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,String>","javadoc":null},{"fullQualified":"private String getTestEndpoint()","name":"getTestEndpoint","type":"String","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentProfileLNPTest","fullyQualifiedName":"teammates.lnp.cases.StudentProfileLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" \"googleId\" is used for logging in, not \"email\"","lineNumber":148,"isOrphan":false},{"type":"LineComment","text":" Add HTTP sampler for test endpoint","lineNumber":175,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private String getTestEndpoint()","name":"getTestEndpoint","type":"String","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentSectionUpdateLNPTest","fullyQualifiedName":"teammates.lnp.cases.StudentSectionUpdateLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Add HTTP sampler for test endpoint","lineNumber":276,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private Map<String, String> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,String>","javadoc":null},{"fullQualified":"private String getTestEndpoint()","name":"getTestEndpoint","type":"String","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentTeamUpdateLNPTest","fullyQualifiedName":"teammates.lnp.cases.StudentTeamUpdateLNPTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Add HTTP sampler for test endpoint","lineNumber":276,"isOrphan":false}],"allMethods":[{"fullQualified":"protected LNPTestData getTestData()","name":"getTestData","type":"LNPTestData","javadoc":null},{"fullQualified":"private Map<String, String> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,String>","javadoc":null},{"fullQualified":"private String getTestEndpoint()","name":"getTestEndpoint","type":"String","javadoc":null},{"fullQualified":"protected ListedHashTree getLnpTestPlan()","name":"getLnpTestPlan","type":"ListedHashTree","javadoc":null},{"fullQualified":"protected void setupSpecification()","name":"setupSpecification","type":"void","javadoc":null},{"fullQualified":"public void classSetup() throws IOException, HttpRequestFailedException","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void runLnpTest() throws IOException","name":"runLnpTest","type":"void","javadoc":null},{"fullQualified":"public void classTearDown() throws IOException","name":"classTearDown","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BackDoor","fullyQualifiedName":"teammates.lnp.util.BackDoor","isInterface":false,"codeComments":[{"type":"LineComment","text":" Utility class","lineNumber":13,"isOrphan":true}],"allMethods":[{"fullQualified":"public static BackDoor getInstance()","name":"getInstance","type":"BackDoor","javadoc":null},{"fullQualified":"protected String getAppUrl()","name":"getAppUrl","type":"String","javadoc":null},{"fullQualified":"protected String getBackdoorKey()","name":"getBackdoorKey","type":"String","javadoc":null},{"fullQualified":"protected String getCsrfKey()","name":"getCsrfKey","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private BackDoor()","javadocComment":null}]},{"name":"JMeterElements","fullyQualifiedName":"teammates.lnp.util.JMeterElements","isInterface":false,"codeComments":[{"type":"LineComment","text":" Utility class","lineNumber":45,"isOrphan":true},{"type":"LineComment","text":" Intentional private constructor to prevent instantiation","lineNumber":46,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns the top-level Test Plan element.\n     ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a Thread Group element.\n     * @param numThreads The number of concurrent threads that will run the test plan and independently of the other threads\n     * @param rampUpPeriod Time (in seconds) to take to \"ramp-up\" to the full number of threads\n     * @param numLoops The number of times to execute the entire test plan\n     ","lineNumber":64,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a Loop Controller element that configures the number of times its sub-elements are iterated in a test run.\n     * @param loopCount The number of iterations in a test run\n     ","lineNumber":84,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a CSV Data Set Config element that reads lines from a file and splits them into variables.\n     * @param configFilePath Path to the CSV config file\n     ","lineNumber":99,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a HTTP Cookie Manager element.\n     ","lineNumber":121,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a HTTP Request Defaults element that sets the default values for the HTTP Request elements.\n     * @param domain Domain name of the server\n     * @param port Port that the server is listening to\n     ","lineNumber":136,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a HTTP Request Defaults element that sets the default values for the HTTP Request elements.\n     * @param argumentsMap parameters of the request\n     ","lineNumber":155,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Overloaded method that returns a HTTP Request Defaults element that listens to the server at \"localhost:8080\".\n     ","lineNumber":178,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a HTTP Request element that is configured to login to a TEAMMATES instance.\n     *\n     * <p>This element uses data from the \"loginId\" field of the CSV config file.</p>\n     ","lineNumber":185,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a Generic Controller element that processes the controller(s) inside it without additional effects.\n     ","lineNumber":206,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a Once Only Controller element that processes the controller(s) inside it only once per thread.\n     ","lineNumber":219,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a For Each Controller element that processes the controller(s) inside it for each list variables.\n     ","lineNumber":232,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a Regular Expression Extractor element that extracts values from a server response header.\n     * @param varName Name of the variable in which the result is stored\n     * @param regex The regular expression used to parse the response data\n     ","lineNumber":247,"isOrphan":false},{"type":"LineComment","text":" Find regex matches in response headers","lineNumber":256,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a Regular Expression Extractor element that extracts the CSRF token from a server response header.\n     * @param varName Name of the variable which stores the value of the extracted CSRF token\n     ","lineNumber":266,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a HTTP Header Manager element.\n     * @param headers A map consisting of {header name -> header value} pairs (eg. {\"Content-Type\" -> \"application/json\"})\n     ","lineNumber":274,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Return a HTTP Request element.\n     * @param path The path to the resource with the query string parameters (eg. /webapi/student?courseid=cs101)\n     * @param method HTTP request method type (eg. GET, POST, PUT)\n     * @param body The HTTP request body for methods like POST, PUT, PATCH\n     ","lineNumber":291,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a HTTP Request element with a GET method to the endpoint specified by {@code path}.\n     ","lineNumber":316,"isOrphan":false}],"allMethods":[{"fullQualified":"public static TestPlan testPlan()","name":"testPlan","type":"TestPlan","javadoc":"\n     * Returns the top-level Test Plan element.\n     "},{"fullQualified":"public static ThreadGroup threadGroup(int numThreads, int rampUpPeriod, int numLoops)","name":"threadGroup","type":"ThreadGroup","javadoc":"\n     * Returns a Thread Group element.\n     * @param numThreads The number of concurrent threads that will run the test plan and independently of the other threads\n     * @param rampUpPeriod Time (in seconds) to take to \"ramp-up\" to the full number of threads\n     * @param numLoops The number of times to execute the entire test plan\n     "},{"fullQualified":"public static LoopController loopController(int loopCount)","name":"loopController","type":"LoopController","javadoc":"\n     * Returns a Loop Controller element that configures the number of times its sub-elements are iterated in a test run.\n     * @param loopCount The number of iterations in a test run\n     "},{"fullQualified":"public static CSVDataSet csvDataSet(String configFilePath)","name":"csvDataSet","type":"CSVDataSet","javadoc":"\n     * Returns a CSV Data Set Config element that reads lines from a file and splits them into variables.\n     * @param configFilePath Path to the CSV config file\n     "},{"fullQualified":"public static CookieManager cookieManager()","name":"cookieManager","type":"CookieManager","javadoc":"\n     * Returns a HTTP Cookie Manager element.\n     "},{"fullQualified":"public static ConfigTestElement defaultSampler(String domain, String port)","name":"defaultSampler","type":"ConfigTestElement","javadoc":"\n     * Returns a HTTP Request Defaults element that sets the default values for the HTTP Request elements.\n     * @param domain Domain name of the server\n     * @param port Port that the server is listening to\n     "},{"fullQualified":"public static ConfigTestElement defaultSampler(Map<String, String> argumentsMap)","name":"defaultSampler","type":"ConfigTestElement","javadoc":"\n     * Returns a HTTP Request Defaults element that sets the default values for the HTTP Request elements.\n     * @param argumentsMap parameters of the request\n     "},{"fullQualified":"public static ConfigTestElement defaultSampler()","name":"defaultSampler","type":"ConfigTestElement","javadoc":"\n     * Overloaded method that returns a HTTP Request Defaults element that listens to the server at \"localhost:8080\".\n     "},{"fullQualified":"public static HTTPSamplerProxy loginSampler()","name":"loginSampler","type":"HTTPSamplerProxy","javadoc":"\n     * Returns a HTTP Request element that is configured to login to a TEAMMATES instance.\n     *\n     * <p>This element uses data from the \"loginId\" field of the CSV config file.</p>\n     "},{"fullQualified":"public static GenericController genericController()","name":"genericController","type":"GenericController","javadoc":"\n     * Returns a Generic Controller element that processes the controller(s) inside it without additional effects.\n     "},{"fullQualified":"public static OnceOnlyController onceOnlyController()","name":"onceOnlyController","type":"OnceOnlyController","javadoc":"\n     * Returns a Once Only Controller element that processes the controller(s) inside it only once per thread.\n     "},{"fullQualified":"public static ForeachController foreachController(String inputVarible, String returnVal)","name":"foreachController","type":"ForeachController","javadoc":"\n     * Returns a For Each Controller element that processes the controller(s) inside it for each list variables.\n     "},{"fullQualified":"public static RegexExtractor regexExtractor(String varName, String regex)","name":"regexExtractor","type":"RegexExtractor","javadoc":"\n     * Returns a Regular Expression Extractor element that extracts values from a server response header.\n     * @param varName Name of the variable in which the result is stored\n     * @param regex The regular expression used to parse the response data\n     "},{"fullQualified":"public static RegexExtractor csrfExtractor(String varName)","name":"csrfExtractor","type":"RegexExtractor","javadoc":"\n     * Returns a Regular Expression Extractor element that extracts the CSRF token from a server response header.\n     * @param varName Name of the variable which stores the value of the extracted CSRF token\n     "},{"fullQualified":"public static HeaderManager headerManager(Map<String, String> headers)","name":"headerManager","type":"HeaderManager","javadoc":"\n     * Returns a HTTP Header Manager element.\n     * @param headers A map consisting of {header name -> header value} pairs (eg. {\"Content-Type\" -> \"application/json\"})\n     "},{"fullQualified":"public static HTTPSamplerProxy httpSampler(String path, String method, String body)","name":"httpSampler","type":"HTTPSamplerProxy","javadoc":"\n     * Return a HTTP Request element.\n     * @param path The path to the resource with the query string parameters (eg. /webapi/student?courseid=cs101)\n     * @param method HTTP request method type (eg. GET, POST, PUT)\n     * @param body The HTTP request body for methods like POST, PUT, PATCH\n     "},{"fullQualified":"public static HTTPSamplerProxy httpGetSampler(String path)","name":"httpGetSampler","type":"HTTPSamplerProxy","javadoc":"\n     * Returns a HTTP Request element with a GET method to the endpoint specified by {@code path}.\n     "}],"allConstructors":[{"identifier":"private JMeterElements()","javadocComment":null}]},{"name":"LNPResultsStatistics","fullyQualifiedName":"teammates.lnp.util.LNPResultsStatistics","isInterface":false,"codeComments":[{"type":"LineComment","text":" 90th percentile","lineNumber":12,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Display the statistics from a given test result.\n     ","lineNumber":17,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Reorganise existing result statistics into one line with labels.\n     ","lineNumber":32,"isOrphan":false}],"allMethods":[{"fullQualified":"public void displayLnpResultsStatistics()","name":"displayLnpResultsStatistics","type":"void","javadoc":"\n     * Display the statistics from a given test result.\n     "},{"fullQualified":"public double getMeanResTime()","name":"getMeanResTime","type":"double","javadoc":null},{"fullQualified":"public double getErrorPct()","name":"getErrorPct","type":"double","javadoc":null},{"fullQualified":"private String formatResultsStats()","name":"formatResultsStats","type":"String","javadoc":"\n     * Reorganise existing result statistics into one line with labels.\n     "}],"allConstructors":[]},{"name":"Builder","fullyQualifiedName":"teammates.lnp.util.LNPSpecification.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withErrorRateLimit(double errorRateLimit)","name":"withErrorRateLimit","type":"Builder","javadoc":null},{"fullQualified":"public Builder withMeanRespTimeLimit(double meanResTimeLimit)","name":"withMeanRespTimeLimit","type":"Builder","javadoc":null},{"fullQualified":"public LNPSpecification build()","name":"build","type":"LNPSpecification","javadoc":null}],"allConstructors":[{"identifier":"private Builder()","javadocComment":null}]},{"name":"LNPSpecification","fullyQualifiedName":"teammates.lnp.util.LNPSpecification","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Maximum allowable threshold for the ratio of failed request\n     * (between 0 and 1) to the test endpoint.\n     ","lineNumber":8,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Maximum allowable threshold for the mean response time\n     * (in seconds) for the test endpoint.\n     ","lineNumber":14,"isOrphan":false},{"type":"LineComment","text":" This class should always be constructed using builder() instead of constructor","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verify the LNP results statistics with the specified threshold.\n     * @param resultStatistics {@link LNPResultsStatistics} object that contains\n     *                         the result statistics from running this test.\n     ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the mean response time exceeds the specified time limit.\n     ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the error rate exceeds the specified error percentage limit.\n     ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link LNPSpecification}.\n     ","lineNumber":62,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder class for {@link LNPSpecification}.\n     ","lineNumber":69,"isOrphan":false}],"allMethods":[{"fullQualified":"public void verifyLnpTestSuccess(LNPResultsStatistics resultStatistics)","name":"verifyLnpTestSuccess","type":"void","javadoc":"\n     * Verify the LNP results statistics with the specified threshold.\n     * @param resultStatistics {@link LNPResultsStatistics} object that contains\n     *                         the result statistics from running this test.\n     "},{"fullQualified":"private void checkMeanResTimeLimit(double meanResTime)","name":"checkMeanResTimeLimit","type":"void","javadoc":"\n     * Checks if the mean response time exceeds the specified time limit.\n     "},{"fullQualified":"private void checkErrorLimit(double errorPct)","name":"checkErrorLimit","type":"void","javadoc":"\n     * Checks if the error rate exceeds the specified error percentage limit.\n     "},{"fullQualified":"public static Builder builder()","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link LNPSpecification}.\n     "}],"allConstructors":[{"identifier":"private LNPSpecification()","javadocComment":null}]},{"name":"LNPTestData","fullyQualifiedName":"teammates.lnp.util.LNPTestData","isInterface":false,"codeComments":[{"type":"LineComment","text":" CHECKSTYLE.OFF:MissingJavadocMethod generator for different entities are self-explained by the method name","lineNumber":23,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.ON:MissingJavadocMethod","lineNumber":61,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns a JSON data bundle containing the data relevant for the performance test.\n     ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns list of header fields for the data in the CSV file to be generated.\n     *\n     * <p>Note that these header names should correspond to the variables used in the JMeter L&P test.</p>\n     ","lineNumber":82,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the data for the entries in the CSV file to be generated.\n     * The order of the field values for each entry should correspond to the order of headers specified\n     * in {@link #generateCsvHeaders()}.\n     *\n     * @return List of entries, which are made up of a list of field values.\n     ","lineNumber":89,"isOrphan":false}],"allMethods":[{"fullQualified":"protected Map<String, AccountAttributes> generateAccounts()","name":"generateAccounts","type":"Map<String,AccountAttributes>","javadoc":null},{"fullQualified":"protected Map<String, CourseAttributes> generateCourses()","name":"generateCourses","type":"Map<String,CourseAttributes>","javadoc":null},{"fullQualified":"protected Map<String, InstructorAttributes> generateInstructors()","name":"generateInstructors","type":"Map<String,InstructorAttributes>","javadoc":null},{"fullQualified":"protected Map<String, StudentAttributes> generateStudents()","name":"generateStudents","type":"Map<String,StudentAttributes>","javadoc":null},{"fullQualified":"protected Map<String, FeedbackSessionAttributes> generateFeedbackSessions()","name":"generateFeedbackSessions","type":"Map<String,FeedbackSessionAttributes>","javadoc":null},{"fullQualified":"protected Map<String, FeedbackQuestionAttributes> generateFeedbackQuestions()","name":"generateFeedbackQuestions","type":"Map<String,FeedbackQuestionAttributes>","javadoc":null},{"fullQualified":"protected Map<String, FeedbackResponseAttributes> generateFeedbackResponses()","name":"generateFeedbackResponses","type":"Map<String,FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"protected Map<String, FeedbackResponseCommentAttributes> generateFeedbackResponseComments()","name":"generateFeedbackResponseComments","type":"Map<String,FeedbackResponseCommentAttributes>","javadoc":null},{"fullQualified":"protected Map<String, StudentProfileAttributes> generateProfiles()","name":"generateProfiles","type":"Map<String,StudentProfileAttributes>","javadoc":null},{"fullQualified":"public DataBundle generateJsonData()","name":"generateJsonData","type":"DataBundle","javadoc":"\n     * Returns a JSON data bundle containing the data relevant for the performance test.\n     "},{"fullQualified":"public abstract List<String> generateCsvHeaders()","name":"generateCsvHeaders","type":"List<String>","javadoc":"\n     * Returns list of header fields for the data in the CSV file to be generated.\n     *\n     * <p>Note that these header names should correspond to the variables used in the JMeter L&P test.</p>\n     "},{"fullQualified":"public abstract List<List<String>> generateCsvData()","name":"generateCsvData","type":"List<List<String>>","javadoc":"\n     * Returns the data for the entries in the CSV file to be generated.\n     * The order of the field values for each entry should correspond to the order of headers specified\n     * in {@link #generateCsvHeaders()}.\n     *\n     * @return List of entries, which are made up of a list of field values.\n     "}],"allConstructors":[]},{"name":"TestProperties","fullyQualifiedName":"teammates.lnp.util.TestProperties","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" The directory where the L&P test data files are stored. ","lineNumber":14,"isOrphan":false},{"type":"JavadocComment","text":" The directory where the L&P test configuration files are stored. ","lineNumber":17,"isOrphan":false},{"type":"JavadocComment","text":" The directory where the L&P test results are stored. ","lineNumber":20,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.jmeter.home\" in test.properties file. ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.jmeter.properties\" in test.properties file. ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.app.url\" in test.properties file. ","lineNumber":29,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.app.domain\" in test.properties file. ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.app.port\" in test.properties file. ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.csrf.key\" in test.properties file. ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.backdoor.key\" in test.properties file. ","lineNumber":41,"isOrphan":false},{"type":"LineComment","text":" access static fields directly","lineNumber":65,"isOrphan":true}],"allMethods":[],"allConstructors":[{"identifier":"private TestProperties()","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withName(String name)","name":"withName","type":"Builder","javadoc":null},{"fullQualified":"public Builder withEmail(String email)","name":"withEmail","type":"Builder","javadoc":null},{"fullQualified":"public AccountAttributes build()","name":"build","type":"AccountAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String googleId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String googleId)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":236,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String googleId)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withReadNotifications(Map<String, Instant> readNotifications)","name":"withReadNotifications","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"AccountAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the {@link AccountAttributes} instance of the given {@link Account}.\n     ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link AccountAttributes}.\n     ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deep copy of this object.\n     ","lineNumber":52,"isOrphan":false},{"type":"LineComment","text":" No validation necessary for createdAt and readNotifications fields.","lineNumber":116,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":160,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for an account.\n     ","lineNumber":167,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder class for {@link AccountAttributes}.\n     ","lineNumber":174,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specify the fields to update in {@link AccountAttributes}.\n     ","lineNumber":210,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":236,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link AccountAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":255,"isOrphan":false}],"allMethods":[{"fullQualified":"public static AccountAttributes valueOf(Account a)","name":"valueOf","type":"AccountAttributes","javadoc":"\n     * Gets the {@link AccountAttributes} instance of the given {@link Account}.\n     "},{"fullQualified":"public static Builder builder(String googleId)","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link AccountAttributes}.\n     "},{"fullQualified":"public AccountAttributes getCopy()","name":"getCopy","type":"AccountAttributes","javadoc":"\n     * Gets a deep copy of this object.\n     "},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String googleId)","name":"setGoogleId","type":"void","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public Map<String, Instant> getReadNotifications()","name":"getReadNotifications","type":"Map<String,Instant>","javadoc":null},{"fullQualified":"public void setReadNotifications(Map<String, Instant> readNotifications)","name":"setReadNotifications","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public Account toEntity()","name":"toEntity","type":"Account","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(String googleId)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for an account.\n     "}],"allConstructors":[{"identifier":"private AccountAttributes(String googleId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountRequestAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public AccountRequestAttributes build()","name":"build","type":"AccountRequestAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String email, String institute, String name)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountRequestAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String email, String institute)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountRequestAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":218,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String email, String institute)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountRequestAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withRegisteredAt(Instant registeredAt)","name":"withRegisteredAt","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"AccountRequestAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountRequestAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the {@link AccountRequestAttributes} instance of the given {@link AccountRequest}.\n     ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link AccountRequestAttributes}.\n     ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":149,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for an account request.\n     ","lineNumber":156,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder for {@link AccountRequestAttributes}.\n     ","lineNumber":163,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specify the fields to update in {@link AccountRequestAttributes}.\n     ","lineNumber":184,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":218,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link AccountRequestAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":236,"isOrphan":false}],"allMethods":[{"fullQualified":"public static AccountRequestAttributes valueOf(AccountRequest accountRequest)","name":"valueOf","type":"AccountRequestAttributes","javadoc":"\n     * Gets the {@link AccountRequestAttributes} instance of the given {@link AccountRequest}.\n     "},{"fullQualified":"public static Builder builder(String email, String institute, String name)","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link AccountRequestAttributes}.\n     "},{"fullQualified":"public String getRegistrationKey()","name":"getRegistrationKey","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public Instant getRegisteredAt()","name":"getRegisteredAt","type":"Instant","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public String getRegistrationUrl()","name":"getRegistrationUrl","type":"String","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public AccountRequest toEntity()","name":"toEntity","type":"AccountRequest","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(String email, String institute)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for an account request.\n     "}],"allConstructors":[{"identifier":"private AccountRequestAttributes(String email, String institute, String name)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.CourseAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public CourseAttributes build()","name":"build","type":"CourseAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String courseId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.CourseAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String courseId)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.CourseAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":252,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String courseId)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.CourseAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withName(String name)","name":"withName","type":"B","javadoc":null},{"fullQualified":"public B withTimezone(String timezone)","name":"withTimezone","type":"B","javadoc":null},{"fullQualified":"public B withInstitute(String institute)","name":"withInstitute","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"CourseAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.CourseAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the {@link CourseAttributes} instance of the given {@link Course}.\n     ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link CourseAttributes}.\n     ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sorts the list of courses by the course ID.\n     ","lineNumber":177,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":184,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a course.\n     ","lineNumber":193,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder for {@link CourseAttributes}.\n     ","lineNumber":200,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link AccountAttributes}.\n     ","lineNumber":222,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":252,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link CourseAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":271,"isOrphan":false}],"allMethods":[{"fullQualified":"public static CourseAttributes valueOf(Course course)","name":"valueOf","type":"CourseAttributes","javadoc":"\n     * Gets the {@link CourseAttributes} instance of the given {@link Course}.\n     "},{"fullQualified":"public static Builder builder(String courseId)","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link CourseAttributes}.\n     "},{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":null},{"fullQualified":"public String getTimeZone()","name":"getTimeZone","type":"String","javadoc":null},{"fullQualified":"public void setTimeZone(String timeZone)","name":"setTimeZone","type":"void","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public Instant getDeletedAt()","name":"getDeletedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setDeletedAt(Instant deletedAt)","name":"setDeletedAt","type":"void","javadoc":null},{"fullQualified":"public boolean isCourseDeleted()","name":"isCourseDeleted","type":"boolean","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public Course toEntity()","name":"toEntity","type":"Course","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public int compareTo(CourseAttributes o)","name":"compareTo","type":"int","javadoc":null},{"fullQualified":"public static void sortById(List<CourseAttributes> courses)","name":"sortById","type":"void","javadoc":"\n     * Sorts the list of courses by the course ID.\n     "},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(String courseId)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a course.\n     "}],"allConstructors":[{"identifier":"private CourseAttributes(String courseId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.DeadlineExtensionAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public DeadlineExtensionAttributes build()","name":"build","type":"DeadlineExtensionAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.DeadlineExtensionAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withNewEmail(String newEmail)","name":"withNewEmail","type":"Builder","javadoc":null},{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(UpdateOptions updateOptions)","javadocComment":null},{"identifier":"private Builder(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.DeadlineExtensionAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":272,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getUserEmail()","name":"getUserEmail","type":"String","javadoc":null},{"fullQualified":"public boolean getIsInstructor()","name":"getIsInstructor","type":"boolean","javadoc":null},{"fullQualified":"public boolean isEndTimeOptionPresent()","name":"isEndTimeOptionPresent","type":"boolean","javadoc":null},{"fullQualified":"public boolean isSentClosingEmailOptionPresent()","name":"isSentClosingEmailOptionPresent","type":"boolean","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.DeadlineExtensionAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withEndTime(Instant endTime)","name":"withEndTime","type":"B","javadoc":null},{"fullQualified":"public B withSentClosingEmail(boolean sentClosingEmail)","name":"withSentClosingEmail","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"DeadlineExtensionAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.DeadlineExtensionAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the {@link DeadlineExtensionAttributes} instance of the given {@link DeadlineExtension}.\n     ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link DeadlineExtensionAttributes}.\n     ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":168,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a deadline extension.\n     ","lineNumber":177,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a deadline extension.\n     ","lineNumber":185,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder for {@link DeadlineExtensionAttributes}.\n     ","lineNumber":192,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specify the fields to update in {@link DeadlineExtensionAttributes}.\n     ","lineNumber":214,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":272,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link DeadlineExtensionAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":302,"isOrphan":false}],"allMethods":[{"fullQualified":"public static DeadlineExtensionAttributes valueOf(DeadlineExtension deadlineExtension)","name":"valueOf","type":"DeadlineExtensionAttributes","javadoc":"\n     * Gets the {@link DeadlineExtensionAttributes} instance of the given {@link DeadlineExtension}.\n     "},{"fullQualified":"public static Builder builder(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link DeadlineExtensionAttributes}.\n     "},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getUserEmail()","name":"getUserEmail","type":"String","javadoc":null},{"fullQualified":"public boolean getIsInstructor()","name":"getIsInstructor","type":"boolean","javadoc":null},{"fullQualified":"public boolean getSentClosingEmail()","name":"getSentClosingEmail","type":"boolean","javadoc":null},{"fullQualified":"public Instant getEndTime()","name":"getEndTime","type":"Instant","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setUpdatedAt(Instant updatedAt)","name":"setUpdatedAt","type":"void","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public DeadlineExtension toEntity()","name":"toEntity","type":"DeadlineExtension","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a deadline extension.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(UpdateOptions updateOptions)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a deadline extension.\n     "}],"allConstructors":[{"identifier":"private DeadlineExtensionAttributes(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","javadocComment":null}]},{"name":"UpdateOption","fullyQualifiedName":"teammates.common.datatransfer.attributes.EntityAttributes.UpdateOption","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Returns an {@code UpdateOption} with the specified present value.\n         ","lineNumber":83,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Returns an empty {@code UpdateOption} instance.\n         *\n         * <p>No value is present for this UpdateOption.\n         ","lineNumber":90,"isOrphan":false},{"type":"JavadocComment","text":"\n         * If a value is present, invoke the specified consumer with the value,\n         * otherwise do nothing.\n         *\n         * @param consumer block to be executed if a value is present\n         * @throws NullPointerException if value is present and {@code consumer} is null\n         ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Returns {@code true} if value is present, {@code false} otherwise.\n         ","lineNumber":113,"isOrphan":false}],"allMethods":[{"fullQualified":"public static UpdateOption<T> of(T value)","name":"of","type":"UpdateOption<T>","javadoc":"\n         * Returns an {@code UpdateOption} with the specified present value.\n         "},{"fullQualified":"public static UpdateOption<T> empty()","name":"empty","type":"UpdateOption<T>","javadoc":"\n         * Returns an empty {@code UpdateOption} instance.\n         *\n         * <p>No value is present for this UpdateOption.\n         "},{"fullQualified":" void ifPresent(Consumer<? super T> consumer)","name":"ifPresent","type":"void","javadoc":"\n         * If a value is present, invoke the specified consumer with the value,\n         * otherwise do nothing.\n         *\n         * @param consumer block to be executed if a value is present\n         * @throws NullPointerException if value is present and {@code consumer} is null\n         "},{"fullQualified":" boolean isPresent()","name":"isPresent","type":"boolean","javadoc":"\n         * Returns {@code true} if value is present, {@code false} otherwise.\n         "},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOption()","javadocComment":null},{"identifier":"private UpdateOption(T value)","javadocComment":null}]},{"name":"EntityAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.EntityAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns true if the attributes represent a valid state for the entity.\n     ","lineNumber":16,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@code List} of strings, one string for each attribute whose\n     *         value is invalid. The string explains why the value is invalid\n     *         and what should values are acceptable. These explanations are\n     *         good enough to show to the user. Returns an empty {@code List} if\n     *         all attributes are valid.\n     ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@code Object} corresponding to the attributes defined by {@code this}\n     *            {@link EntityAttributes} class.\n     ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Perform any sanitization that needs to be done before saving.\n     * e.g. trim strings\n     ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Adds {@code error} to {@code errors} if {@code error} is a non-empty string.\n     *\n     * @param error An error message, possibly empty.\n     * @param errors A List of errors, to add {@code error} to.\n     ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to determine whether a field should be updated or not.\n     *\n     * <p>The class behaves like {@link java.util.Optional} but allows null value.\n     *\n     * @param <T> type of object being updated\n     ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Returns an {@code UpdateOption} with the specified present value.\n         ","lineNumber":83,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Returns an empty {@code UpdateOption} instance.\n         *\n         * <p>No value is present for this UpdateOption.\n         ","lineNumber":90,"isOrphan":false},{"type":"JavadocComment","text":"\n         * If a value is present, invoke the specified consumer with the value,\n         * otherwise do nothing.\n         *\n         * @param consumer block to be executed if a value is present\n         * @throws NullPointerException if value is present and {@code consumer} is null\n         ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Returns {@code true} if value is present, {@code false} otherwise.\n         ","lineNumber":113,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean isValid()","name":"isValid","type":"boolean","javadoc":"\n     * Returns true if the attributes represent a valid state for the entity.\n     "},{"fullQualified":"public abstract List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":"\n     * Returns a {@code List} of strings, one string for each attribute whose\n     *         value is invalid. The string explains why the value is invalid\n     *         and what should values are acceptable. These explanations are\n     *         good enough to show to the user. Returns an empty {@code List} if\n     *         all attributes are valid.\n     "},{"fullQualified":"public abstract E toEntity()","name":"toEntity","type":"E","javadoc":"\n     * Returns a {@code Object} corresponding to the attributes defined by {@code this}\n     *            {@link EntityAttributes} class.\n     "},{"fullQualified":"public abstract void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":"\n     * Perform any sanitization that needs to be done before saving.\n     * e.g. trim strings\n     "},{"fullQualified":" void addNonEmptyError(String error, List<String> errors)","name":"addNonEmptyError","type":"void","javadoc":"\n     * Adds {@code error} to {@code errors} if {@code error} is a non-empty string.\n     *\n     * @param error An error message, possibly empty.\n     * @param errors A List of errors, to add {@code error} to.\n     "}],"allConstructors":[]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackQuestionAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withFeedbackSessionName(String feedbackSessionName)","name":"withFeedbackSessionName","type":"Builder","javadoc":null},{"fullQualified":"public Builder withCourseId(String courseId)","name":"withCourseId","type":"Builder","javadoc":null},{"fullQualified":"public FeedbackQuestionAttributes build()","name":"build","type":"FeedbackQuestionAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder()","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackQuestionAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String feedbackQuestionId)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackQuestionAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":590,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getFeedbackQuestionId()","name":"getFeedbackQuestionId","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String feedbackQuestionId)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackQuestionAttributes.BasicBuilder","isInterface":false,"codeComments":[{"type":"LineComment","text":" questionDescription can be null","lineNumber":632,"isOrphan":true}],"allMethods":[{"fullQualified":"public B withQuestionDetails(FeedbackQuestionDetails questionDetails)","name":"withQuestionDetails","type":"B","javadoc":null},{"fullQualified":"public B withQuestionDescription(String questionDescription)","name":"withQuestionDescription","type":"B","javadoc":null},{"fullQualified":"public B withQuestionNumber(int questionNumber)","name":"withQuestionNumber","type":"B","javadoc":null},{"fullQualified":"public B withGiverType(FeedbackParticipantType giverType)","name":"withGiverType","type":"B","javadoc":null},{"fullQualified":"public B withRecipientType(FeedbackParticipantType recipientType)","name":"withRecipientType","type":"B","javadoc":null},{"fullQualified":"public B withNumberOfEntitiesToGiveFeedbackTo(int numberOfEntitiesToGiveFeedbackTo)","name":"withNumberOfEntitiesToGiveFeedbackTo","type":"B","javadoc":null},{"fullQualified":"public B withShowResponsesTo(List<FeedbackParticipantType> showResponsesTo)","name":"withShowResponsesTo","type":"B","javadoc":null},{"fullQualified":"public B withShowGiverNameTo(List<FeedbackParticipantType> showGiverNameTo)","name":"withShowGiverNameTo","type":"B","javadoc":null},{"fullQualified":"public B withShowRecipientNameTo(List<FeedbackParticipantType> showRecipientNameTo)","name":"withShowRecipientNameTo","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"FeedbackQuestionAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackQuestionAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns a builder for {@link FeedbackQuestionAttributes}.\n     ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the {@link FeedbackQuestionAttributes} instance of the given {@link FeedbackQuestion}.\n     ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":" NOTE: Only use this to match and search for the ID of a known existing question entity. ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deep copy of this object.\n     ","lineNumber":106,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the response is visible to the given participant type.\n     ","lineNumber":167,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if updating this question to the {@code newAttributes} will\n     * require the responses to be deleted for consistency.\n     * Does not check if any responses exist.\n     ","lineNumber":174,"isOrphan":false},{"type":"LineComment","text":" Although question numbers ought to be unique in a feedback session,","lineNumber":197,"isOrphan":true},{"type":"LineComment","text":" eventual consistency can result in duplicate questions numbers.","lineNumber":198,"isOrphan":true},{"type":"LineComment","text":" Therefore, to ensure that the question order is always consistent to the user,","lineNumber":199,"isOrphan":true},{"type":"LineComment","text":" compare feedbackQuestionId, which is guaranteed to be unique,","lineNumber":200,"isOrphan":true},{"type":"LineComment","text":" when the questionNumbers are the same.","lineNumber":201,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes irrelevant/extraneous response visibility option settings from the question.\n     ","lineNumber":326,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":487,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder}\n     * to build {@link UpdateOptions} for a question.\n     ","lineNumber":504,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A Builder class for {@link FeedbackQuestionAttributes}.\n     ","lineNumber":512,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link FeedbackQuestionAttributes}.\n     ","lineNumber":548,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":590,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link FeedbackQuestionAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":609,"isOrphan":false},{"type":"LineComment","text":" questionDescription can be null","lineNumber":632,"isOrphan":true}],"allMethods":[{"fullQualified":"public static Builder builder()","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link FeedbackQuestionAttributes}.\n     "},{"fullQualified":"public static FeedbackQuestionAttributes valueOf(FeedbackQuestion fq)","name":"valueOf","type":"FeedbackQuestionAttributes","javadoc":"\n     * Gets the {@link FeedbackQuestionAttributes} instance of the given {@link FeedbackQuestion}.\n     "},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":null},{"fullQualified":"public void setId(String id)","name":"setId","type":"void","javadoc":" NOTE: Only use this to match and search for the ID of a known existing question entity. "},{"fullQualified":"public FeedbackQuestion toEntity()","name":"toEntity","type":"FeedbackQuestion","javadoc":null},{"fullQualified":"public FeedbackQuestionAttributes getCopy()","name":"getCopy","type":"FeedbackQuestionAttributes","javadoc":"\n     * Gets a deep copy of this object.\n     "},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isValid()","name":"isValid","type":"boolean","javadoc":null},{"fullQualified":"public boolean isResponseVisibleTo(FeedbackParticipantType userType)","name":"isResponseVisibleTo","type":"boolean","javadoc":"\n     * Returns true if the response is visible to the given participant type.\n     "},{"fullQualified":"public boolean areResponseDeletionsRequiredForChanges(FeedbackQuestionAttributes newAttributes)","name":"areResponseDeletionsRequiredForChanges","type":"boolean","javadoc":"\n     * Checks if updating this question to the {@code newAttributes} will\n     * require the responses to be deleted for consistency.\n     * Does not check if any responses exist.\n     "},{"fullQualified":"public int compareTo(FeedbackQuestionAttributes o)","name":"compareTo","type":"int","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void removeIrrelevantVisibilityOptions()","name":"removeIrrelevantVisibilityOptions","type":"void","javadoc":"\n     * Removes irrelevant/extraneous response visibility option settings from the question.\n     "},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public FeedbackQuestionDetails getQuestionDetails()","name":"getQuestionDetails","type":"FeedbackQuestionDetails","javadoc":null},{"fullQualified":"public void setQuestionDetails(FeedbackQuestionDetails newQuestionDetails)","name":"setQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public FeedbackQuestionDetails getQuestionDetailsCopy()","name":"getQuestionDetailsCopy","type":"FeedbackQuestionDetails","javadoc":null},{"fullQualified":"public String getSerializedQuestionDetails()","name":"getSerializedQuestionDetails","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackQuestionId()","name":"getFeedbackQuestionId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getQuestionDescription()","name":"getQuestionDescription","type":"String","javadoc":null},{"fullQualified":"public void setQuestionDescription(String questionDescription)","name":"setQuestionDescription","type":"void","javadoc":null},{"fullQualified":"public int getQuestionNumber()","name":"getQuestionNumber","type":"int","javadoc":null},{"fullQualified":"public void setQuestionNumber(int questionNumber)","name":"setQuestionNumber","type":"void","javadoc":null},{"fullQualified":"public FeedbackQuestionType getQuestionType()","name":"getQuestionType","type":"FeedbackQuestionType","javadoc":null},{"fullQualified":"public FeedbackParticipantType getGiverType()","name":"getGiverType","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public void setGiverType(FeedbackParticipantType giverType)","name":"setGiverType","type":"void","javadoc":null},{"fullQualified":"public FeedbackParticipantType getRecipientType()","name":"getRecipientType","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public void setRecipientType(FeedbackParticipantType recipientType)","name":"setRecipientType","type":"void","javadoc":null},{"fullQualified":"public int getNumberOfEntitiesToGiveFeedbackTo()","name":"getNumberOfEntitiesToGiveFeedbackTo","type":"int","javadoc":null},{"fullQualified":"public void setNumberOfEntitiesToGiveFeedbackTo(int numberOfEntitiesToGiveFeedbackTo)","name":"setNumberOfEntitiesToGiveFeedbackTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowResponsesTo()","name":"getShowResponsesTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public void setShowResponsesTo(List<FeedbackParticipantType> showResponsesTo)","name":"setShowResponsesTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowGiverNameTo()","name":"getShowGiverNameTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public void setShowGiverNameTo(List<FeedbackParticipantType> showGiverNameTo)","name":"setShowGiverNameTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowRecipientNameTo()","name":"getShowRecipientNameTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public void setShowRecipientNameTo(List<FeedbackParticipantType> showRecipientNameTo)","name":"setShowRecipientNameTo","type":"void","javadoc":null},{"fullQualified":"private static FeedbackQuestionDetails deserializeFeedbackQuestionDetails(String questionDetailsInJson, FeedbackQuestionType questionType)","name":"deserializeFeedbackQuestionDetails","type":"FeedbackQuestionDetails","javadoc":null},{"fullQualified":"public void update(FeedbackQuestionAttributes.UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static FeedbackQuestionAttributes.UpdateOptions.Builder updateOptionsBuilder(String feedbackQuestionId)","name":"updateOptionsBuilder","type":"FeedbackQuestionAttributes.UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder}\n     * to build {@link UpdateOptions} for a question.\n     "}],"allConstructors":[{"identifier":"private FeedbackQuestionAttributes()","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withCourseId(String courseId)","name":"withCourseId","type":"Builder","javadoc":null},{"fullQualified":"public Builder withFeedbackSessionName(String feedbackSessionName)","name":"withFeedbackSessionName","type":"Builder","javadoc":null},{"fullQualified":"public FeedbackResponseAttributes build()","name":"build","type":"FeedbackResponseAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String feedbackQuestionId, String giver, String recipient)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withGiver(String giver)","name":"withGiver","type":"Builder","javadoc":null},{"fullQualified":"public Builder withRecipient(String recipient)","name":"withRecipient","type":"Builder","javadoc":null},{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String feedbackResponseId)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":341,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getFeedbackResponseId()","name":"getFeedbackResponseId","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String feedbackResponseId)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withGiverSection(String giverSection)","name":"withGiverSection","type":"B","javadoc":null},{"fullQualified":"public B withRecipientSection(String recipientSection)","name":"withRecipientSection","type":"B","javadoc":null},{"fullQualified":"public B withResponseDetails(FeedbackResponseDetails responseDetails)","name":"withResponseDetails","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"FeedbackResponseAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Depending on the question giver type, {@code giver} may contain the giver's email, the team name,\n     * \"anonymous\", etc.\n     ","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Depending on the question recipient type, {@code recipient} may contain the recipient's email, the team\n     * name, \"%GENERAL%\", etc.\n     ","lineNumber":27,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the {@link FeedbackResponseAttributes} instance of the given {@link FeedbackResponse}.\n     ","lineNumber":65,"isOrphan":false},{"type":"LineComment","text":" nothing to sanitize before saving","lineNumber":215,"isOrphan":true},{"type":"LineComment","text":" For Text questions, the answer simply contains the response text, not a JSON","lineNumber":237,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link FeedbackResponseAttributes}.\n     ","lineNumber":243,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":250,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a response.\n     ","lineNumber":261,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder for {@link FeedbackResponseCommentAttributes}.\n     ","lineNumber":268,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link FeedbackResponseAttributes}.\n     ","lineNumber":307,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":341,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link FeedbackResponseAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":374,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackResponseAttributes valueOf(FeedbackResponse fr)","name":"valueOf","type":"FeedbackResponseAttributes","javadoc":"\n     * Gets the {@link FeedbackResponseAttributes} instance of the given {@link FeedbackResponse}.\n     "},{"fullQualified":"public FeedbackQuestionType getFeedbackQuestionType()","name":"getFeedbackQuestionType","type":"FeedbackQuestionType","javadoc":null},{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":null},{"fullQualified":"public void setId(String feedbackResponseId)","name":"setId","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackQuestionId()","name":"getFeedbackQuestionId","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackQuestionId(String feedbackQuestionId)","name":"setFeedbackQuestionId","type":"void","javadoc":null},{"fullQualified":"public String getGiver()","name":"getGiver","type":"String","javadoc":null},{"fullQualified":"public void setGiver(String giver)","name":"setGiver","type":"void","javadoc":null},{"fullQualified":"public String getRecipient()","name":"getRecipient","type":"String","javadoc":null},{"fullQualified":"public void setRecipient(String recipient)","name":"setRecipient","type":"void","javadoc":null},{"fullQualified":"public String getGiverSection()","name":"getGiverSection","type":"String","javadoc":null},{"fullQualified":"public String getRecipientSection()","name":"getRecipientSection","type":"String","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isValid()","name":"isValid","type":"boolean","javadoc":null},{"fullQualified":"public FeedbackResponse toEntity()","name":"toEntity","type":"FeedbackResponse","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public FeedbackResponseDetails getResponseDetails()","name":"getResponseDetails","type":"FeedbackResponseDetails","javadoc":null},{"fullQualified":"public void setResponseDetails(FeedbackResponseDetails newFeedbackResponseDetails)","name":"setResponseDetails","type":"void","javadoc":null},{"fullQualified":"public String getSerializedFeedbackResponseDetail()","name":"getSerializedFeedbackResponseDetail","type":"String","javadoc":null},{"fullQualified":"public FeedbackResponseDetails getResponseDetailsCopy()","name":"getResponseDetailsCopy","type":"FeedbackResponseDetails","javadoc":null},{"fullQualified":"private static FeedbackResponseDetails deserializeResponseFromSerializedString(String serializedResponseDetails, FeedbackQuestionType questionType)","name":"deserializeResponseFromSerializedString","type":"FeedbackResponseDetails","javadoc":null},{"fullQualified":"public static Builder builder(String feedbackQuestionId, String giver, String recipient)","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link FeedbackResponseAttributes}.\n     "},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(String feedbackResponseId)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a response.\n     "}],"allConstructors":[{"identifier":"private FeedbackResponseAttributes(String feedbackQuestionId, String giver, String recipient)","javadocComment":null},{"identifier":"public FeedbackResponseAttributes(FeedbackResponseAttributes copy)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withCourseId(String courseId)","name":"withCourseId","type":"Builder","javadoc":null},{"fullQualified":"public Builder withFeedbackSessionName(String feedbackSessionName)","name":"withFeedbackSessionName","type":"Builder","javadoc":null},{"fullQualified":"public Builder withCommentGiver(String commentGiver)","name":"withCommentGiver","type":"Builder","javadoc":null},{"fullQualified":"public Builder withFeedbackQuestionId(String feedbackQuestionId)","name":"withFeedbackQuestionId","type":"Builder","javadoc":null},{"fullQualified":"public Builder withVisibilityFollowingFeedbackQuestion(boolean visibilityFollowingFeedbackQuestion)","name":"withVisibilityFollowingFeedbackQuestion","type":"Builder","javadoc":null},{"fullQualified":"public Builder withCommentGiverType(FeedbackParticipantType commentGiverType)","name":"withCommentGiverType","type":"Builder","javadoc":null},{"fullQualified":"public Builder withCommentFromFeedbackParticipant(boolean isCommentFromFeedbackParticipant)","name":"withCommentFromFeedbackParticipant","type":"Builder","javadoc":null},{"fullQualified":"public FeedbackResponseCommentAttributes build()","name":"build","type":"FeedbackResponseCommentAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder()","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withLastEditorEmail(String lastEditorEmail)","name":"withLastEditorEmail","type":"Builder","javadoc":null},{"fullQualified":"public Builder withLastEditorAt(Instant lastEditedAt)","name":"withLastEditorAt","type":"Builder","javadoc":null},{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(Long feedbackResponseCommentId)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":452,"isOrphan":false}],"allMethods":[{"fullQualified":"public long getFeedbackResponseCommentId()","name":"getFeedbackResponseCommentId","type":"long","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(long feedbackResponseCommentId)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withFeedbackResponseId(String feedbackResponseId)","name":"withFeedbackResponseId","type":"B","javadoc":null},{"fullQualified":"public B withCommentText(String commentText)","name":"withCommentText","type":"B","javadoc":null},{"fullQualified":"public B withShowCommentTo(List<FeedbackParticipantType> showCommentTo)","name":"withShowCommentTo","type":"B","javadoc":null},{"fullQualified":"public B withShowGiverNameTo(List<FeedbackParticipantType> showGiverNameTo)","name":"withShowGiverNameTo","type":"B","javadoc":null},{"fullQualified":"public B withGiverSection(String giverSection)","name":"withGiverSection","type":"B","javadoc":null},{"fullQualified":"public B withReceiverSection(String receiverSection)","name":"withReceiverSection","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"FeedbackResponseCommentAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Contains the email of student/instructor if comment giver is student/instructor\n     * and name of team if comment giver is a team.\n     ","lineNumber":22,"isOrphan":false},{"type":"LineComment","text":" Determines the type of comment giver- instructor, student, or team","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" true if comment is given by response giver","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the {@link FeedbackResponseCommentAttributes} instance of the given {@link FeedbackResponseComment}.\n     ","lineNumber":54,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link FeedbackResponseCommentAttributes}.\n     ","lineNumber":98,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the response comment is visible to the given participant type.\n     ","lineNumber":105,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Use only to match existing and known Comment.\n     ","lineNumber":236,"isOrphan":false},{"type":"LineComment","text":"TODO: handle the new attributes showCommentTo and showGiverNameTo","lineNumber":256,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":329,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a comment.\n     ","lineNumber":343,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder for {@link FeedbackResponseCommentAttributes}.\n     ","lineNumber":350,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link FeedbackResponseCommentAttributes}.\n     ","lineNumber":416,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":452,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link FeedbackResponseCommentAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":485,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackResponseCommentAttributes valueOf(FeedbackResponseComment comment)","name":"valueOf","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Gets the {@link FeedbackResponseCommentAttributes} instance of the given {@link FeedbackResponseComment}.\n     "},{"fullQualified":"public static Builder builder()","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link FeedbackResponseCommentAttributes}.\n     "},{"fullQualified":"public boolean isVisibleTo(FeedbackParticipantType viewerType)","name":"isVisibleTo","type":"boolean","javadoc":"\n     * Returns true if the response comment is visible to the given participant type.\n     "},{"fullQualified":"public Long getId()","name":"getId","type":"Long","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public String getCommentGiver()","name":"getCommentGiver","type":"String","javadoc":null},{"fullQualified":"public void setCommentGiver(String commentGiver)","name":"setCommentGiver","type":"void","javadoc":null},{"fullQualified":"public String getCommentText()","name":"getCommentText","type":"String","javadoc":null},{"fullQualified":"public void setCommentText(String commentText)","name":"setCommentText","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackResponseId()","name":"getFeedbackResponseId","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackResponseId(String feedbackResponseId)","name":"setFeedbackResponseId","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackQuestionId()","name":"getFeedbackQuestionId","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackQuestionId(String feedbackQuestionId)","name":"setFeedbackQuestionId","type":"void","javadoc":null},{"fullQualified":"public void setShowCommentTo(List<FeedbackParticipantType> showCommentTo)","name":"setShowCommentTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowCommentTo()","name":"getShowCommentTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public void setShowGiverNameTo(List<FeedbackParticipantType> showGiverNameTo)","name":"setShowGiverNameTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowGiverNameTo()","name":"getShowGiverNameTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public boolean isVisibilityFollowingFeedbackQuestion()","name":"isVisibilityFollowingFeedbackQuestion","type":"boolean","javadoc":null},{"fullQualified":"public void setVisibilityFollowingFeedbackQuestion(boolean visibilityFollowingFeedbackQuestion)","name":"setVisibilityFollowingFeedbackQuestion","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public String getLastEditorEmail()","name":"getLastEditorEmail","type":"String","javadoc":null},{"fullQualified":"public void setLastEditorEmail(String lastEditorEmail)","name":"setLastEditorEmail","type":"void","javadoc":null},{"fullQualified":"public Instant getLastEditedAt()","name":"getLastEditedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setLastEditedAt(Instant lastEditedAt)","name":"setLastEditedAt","type":"void","javadoc":null},{"fullQualified":"public String getGiverSection()","name":"getGiverSection","type":"String","javadoc":null},{"fullQualified":"public String getReceiverSection()","name":"getReceiverSection","type":"String","javadoc":null},{"fullQualified":"public FeedbackParticipantType getCommentGiverType()","name":"getCommentGiverType","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public void setCommentGiverType(FeedbackParticipantType commentGiverType)","name":"setCommentGiverType","type":"void","javadoc":null},{"fullQualified":"public boolean isCommentFromFeedbackParticipant()","name":"isCommentFromFeedbackParticipant","type":"boolean","javadoc":null},{"fullQualified":"public void setCommentFromFeedbackParticipant(boolean commentFromFeedbackParticipant)","name":"setCommentFromFeedbackParticipant","type":"void","javadoc":null},{"fullQualified":"public void setId(Long id)","name":"setId","type":"void","javadoc":"\n     * Use only to match existing and known Comment.\n     "},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public FeedbackResponseComment toEntity()","name":"toEntity","type":"FeedbackResponseComment","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(long feedbackResponseCommentId)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a comment.\n     "}],"allConstructors":[{"identifier":"private FeedbackResponseCommentAttributes()","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackSessionAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withCreatorEmail(String creatorEmail)","name":"withCreatorEmail","type":"Builder","javadoc":null},{"fullQualified":"public FeedbackSessionAttributes build()","name":"build","type":"FeedbackSessionAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String feedbackSessionName, String courseId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackSessionAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withSentOpeningSoonEmail(boolean sentOpeningSoonEmailOption)","name":"withSentOpeningSoonEmail","type":"Builder","javadoc":null},{"fullQualified":"public Builder withSentOpenEmail(boolean sentOpenEmail)","name":"withSentOpenEmail","type":"Builder","javadoc":null},{"fullQualified":"public Builder withSentClosingEmail(boolean sentClosingEmail)","name":"withSentClosingEmail","type":"Builder","javadoc":null},{"fullQualified":"public Builder withSentClosedEmail(boolean sentClosedEmail)","name":"withSentClosedEmail","type":"Builder","javadoc":null},{"fullQualified":"public Builder withSentPublishedEmail(boolean sentPublishedEmail)","name":"withSentPublishedEmail","type":"Builder","javadoc":null},{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(UpdateOptions updateOptions)","javadocComment":null},{"identifier":"private Builder(String feedbackSessionName, String courseId)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackSessionAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":752,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String feedbackSessionName, String courseId)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackSessionAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withInstructions(String instruction)","name":"withInstructions","type":"B","javadoc":null},{"fullQualified":"public B withStartTime(Instant startTime)","name":"withStartTime","type":"B","javadoc":null},{"fullQualified":"public B withEndTime(Instant endTime)","name":"withEndTime","type":"B","javadoc":null},{"fullQualified":"public B withSessionVisibleFromTime(Instant sessionVisibleFromTime)","name":"withSessionVisibleFromTime","type":"B","javadoc":null},{"fullQualified":"public B withResultsVisibleFromTime(Instant resultsVisibleFromTime)","name":"withResultsVisibleFromTime","type":"B","javadoc":null},{"fullQualified":"public B withTimeZone(String timeZone)","name":"withTimeZone","type":"B","javadoc":null},{"fullQualified":"public B withGracePeriod(Duration gracePeriod)","name":"withGracePeriod","type":"B","javadoc":null},{"fullQualified":"public B withIsClosingEmailEnabled(boolean isClosingEmailEnabled)","name":"withIsClosingEmailEnabled","type":"B","javadoc":null},{"fullQualified":"public B withIsPublishedEmailEnabled(boolean isPublishedEmailEnabled)","name":"withIsPublishedEmailEnabled","type":"B","javadoc":null},{"fullQualified":"public B withStudentDeadlines(Map<String, Instant> studentDeadlines)","name":"withStudentDeadlines","type":"B","javadoc":null},{"fullQualified":"public B withInstructorDeadlines(Map<String, Instant> instructorDeadlines)","name":"withInstructorDeadlines","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"FeedbackSessionAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackSessionAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the {@link FeedbackSessionAttributes} instance of the given {@link FeedbackSession}.\n     ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link FeedbackSessionAttributes}.\n     ","lineNumber":106,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deep copy of this object.\n     ","lineNumber":113,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a copy that uses the specific deadline for the given student.\n     *\n     * @param studentEmail The email address of the given student.\n     * @return The copy of this object for the given student.\n     ","lineNumber":120,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a copy that uses the specific deadline for the given instructor.\n     *\n     * @param instructorEmail The email address of the given instructor.\n     * @return The copy of this object for the given instructor.\n     ","lineNumber":133,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the instructions of the feedback session.\n     ","lineNumber":154,"isOrphan":false},{"type":"LineComment","text":" Check for null fields.","lineNumber":179,"isOrphan":true},{"type":"LineComment","text":" Early return if any null fields","lineNumber":198,"isOrphan":false},{"type":"LineComment","text":" Early return if any null fields","lineNumber":218,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Finds the point in time when the session is considered closed, excluding the grace period.\n     * <p>This varies depending on who is looking at the session:</p>\n     * <ul>\n     *     <li>For instructors looking at the session in full detail, this is when the end time is reached.</li>\n     *     <li>For participants, this is when the end time is reached, or their extension deadline, if it exists.</li>\n     * </ul>\n     ","lineNumber":246,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if session's start time is opening from now to anytime before\n     * now() + the specific number of {@param hours} supplied in the argument.\n     ","lineNumber":265,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the feedback session is closed after the number of specified hours.\n     ","lineNumber":274,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the feedback session is closing (almost closed) after the number of specified hours.\n     ","lineNumber":281,"isOrphan":false},{"type":"LineComment","text":" If now and start are almost similar, it means the feedback session","lineNumber":287,"isOrphan":true},{"type":"LineComment","text":" is open for only 24 hours.","lineNumber":288,"isOrphan":true},{"type":"LineComment","text":" Hence we do not send a reminder e-mail for feedback session.","lineNumber":289,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the feedback session opens after the number of specified hours.\n     ","lineNumber":295,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the session closed some time in the last one hour from calling this function.\n     *\n     * @return true if the session closed within the past hour; false otherwise.\n     ","lineNumber":307,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the feedback session is closed.\n     * This occurs when the current time is after both the deadline and the grace period.\n     ","lineNumber":318,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the feedback session is open.\n     * This occurs when the current time is either the start time or later but before the deadline.\n     ","lineNumber":326,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the feedback session is closed but still accepts responses.\n     * This occurs when the current time is either the deadline or later but still within the grace period.\n     ","lineNumber":335,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns {@code true} has not opened before and is waiting to open,\n     * {@code false} if session has opened before.\n     ","lineNumber":346,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns {@code true} if the session is visible; {@code false} if not.\n     *         Does not care if the session has started or not.\n     ","lineNumber":354,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns {@code true} if the results of the feedback session is visible; {@code false} if not.\n     *         Does not care if the session has ended or not.\n     ","lineNumber":369,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the given email is the same as the creator email of the feedback session.\n     ","lineNumber":390,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":623,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a session.\n     ","lineNumber":645,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build on top of {@code updateOptions}.\n     ","lineNumber":652,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder for {@link FeedbackSessionAttributes}.\n     ","lineNumber":659,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link FeedbackSessionAttributes}.\n     ","lineNumber":688,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":752,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link FeedbackSessionAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":802,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackSessionAttributes valueOf(FeedbackSession fs)","name":"valueOf","type":"FeedbackSessionAttributes","javadoc":"\n     * Gets the {@link FeedbackSessionAttributes} instance of the given {@link FeedbackSession}.\n     "},{"fullQualified":"public static Builder builder(String feedbackSessionName, String courseId)","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link FeedbackSessionAttributes}.\n     "},{"fullQualified":"public FeedbackSessionAttributes getCopy()","name":"getCopy","type":"FeedbackSessionAttributes","javadoc":"\n     * Gets a deep copy of this object.\n     "},{"fullQualified":"public FeedbackSessionAttributes getCopyForStudent(String studentEmail)","name":"getCopyForStudent","type":"FeedbackSessionAttributes","javadoc":"\n     * Creates a copy that uses the specific deadline for the given student.\n     *\n     * @param studentEmail The email address of the given student.\n     * @return The copy of this object for the given student.\n     "},{"fullQualified":"public FeedbackSessionAttributes getCopyForInstructor(String instructorEmail)","name":"getCopyForInstructor","type":"FeedbackSessionAttributes","javadoc":"\n     * Creates a copy that uses the specific deadline for the given instructor.\n     *\n     * @param instructorEmail The email address of the given instructor.\n     * @return The copy of this object for the given instructor.\n     "},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getInstructionsString()","name":"getInstructionsString","type":"String","javadoc":"\n     * Gets the instructions of the feedback session.\n     "},{"fullQualified":"public FeedbackSession toEntity()","name":"toEntity","type":"FeedbackSession","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public Instant getDeadline()","name":"getDeadline","type":"Instant","javadoc":"\n     * Finds the point in time when the session is considered closed, excluding the grace period.\n     * <p>This varies depending on who is looking at the session:</p>\n     * <ul>\n     *     <li>For instructors looking at the session in full detail, this is when the end time is reached.</li>\n     *     <li>For participants, this is when the end time is reached, or their extension deadline, if it exists.</li>\n     * </ul>\n     "},{"fullQualified":"public String getUserEmail()","name":"getUserEmail","type":"String","javadoc":null},{"fullQualified":"public boolean isOpeningInHours(long hours)","name":"isOpeningInHours","type":"boolean","javadoc":"\n     * Returns true if session's start time is opening from now to anytime before\n     * now() + the specific number of {@param hours} supplied in the argument.\n     "},{"fullQualified":"public boolean isClosedAfter(long hours)","name":"isClosedAfter","type":"boolean","javadoc":"\n     * Returns true if the feedback session is closed after the number of specified hours.\n     "},{"fullQualified":"public boolean isClosingWithinTimeLimit(long hours)","name":"isClosingWithinTimeLimit","type":"boolean","javadoc":"\n     * Returns true if the feedback session is closing (almost closed) after the number of specified hours.\n     "},{"fullQualified":"public boolean isOpeningWithinTimeLimit(long hours)","name":"isOpeningWithinTimeLimit","type":"boolean","javadoc":"\n     * Returns true if the feedback session opens after the number of specified hours.\n     "},{"fullQualified":"public boolean isClosedWithinPastHour()","name":"isClosedWithinPastHour","type":"boolean","javadoc":"\n     * Checks if the session closed some time in the last one hour from calling this function.\n     *\n     * @return true if the session closed within the past hour; false otherwise.\n     "},{"fullQualified":"public boolean isClosed()","name":"isClosed","type":"boolean","javadoc":"\n     * Checks if the feedback session is closed.\n     * This occurs when the current time is after both the deadline and the grace period.\n     "},{"fullQualified":"public boolean isOpened()","name":"isOpened","type":"boolean","javadoc":"\n     * Checks if the feedback session is open.\n     * This occurs when the current time is either the start time or later but before the deadline.\n     "},{"fullQualified":"public boolean isInGracePeriod()","name":"isInGracePeriod","type":"boolean","javadoc":"\n     * Checks if the feedback session is closed but still accepts responses.\n     * This occurs when the current time is either the deadline or later but still within the grace period.\n     "},{"fullQualified":"public boolean isWaitingToOpen()","name":"isWaitingToOpen","type":"boolean","javadoc":"\n     * Returns {@code true} has not opened before and is waiting to open,\n     * {@code false} if session has opened before.\n     "},{"fullQualified":"public boolean isVisible()","name":"isVisible","type":"boolean","javadoc":"\n     * Returns {@code true} if the session is visible; {@code false} if not.\n     *         Does not care if the session has started or not.\n     "},{"fullQualified":"public boolean isPublished()","name":"isPublished","type":"boolean","javadoc":"\n     * Returns {@code true} if the results of the feedback session is visible; {@code false} if not.\n     *         Does not care if the session has ended or not.\n     "},{"fullQualified":"public boolean isCreator(String instructorEmail)","name":"isCreator","type":"boolean","javadoc":"\n     * Returns true if the given email is the same as the creator email of the feedback session.\n     "},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getCreatorEmail()","name":"getCreatorEmail","type":"String","javadoc":null},{"fullQualified":"public void setCreatorEmail(String creatorEmail)","name":"setCreatorEmail","type":"void","javadoc":null},{"fullQualified":"public String getInstructions()","name":"getInstructions","type":"String","javadoc":null},{"fullQualified":"public void setInstructions(String instructions)","name":"setInstructions","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedTime()","name":"getCreatedTime","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedTime(Instant createdTime)","name":"setCreatedTime","type":"void","javadoc":null},{"fullQualified":"public Instant getDeletedTime()","name":"getDeletedTime","type":"Instant","javadoc":null},{"fullQualified":"public void setDeletedTime(Instant deletedTime)","name":"setDeletedTime","type":"void","javadoc":null},{"fullQualified":"public boolean isSessionDeleted()","name":"isSessionDeleted","type":"boolean","javadoc":null},{"fullQualified":"public Instant getStartTime()","name":"getStartTime","type":"Instant","javadoc":null},{"fullQualified":"public void setStartTime(Instant startTime)","name":"setStartTime","type":"void","javadoc":null},{"fullQualified":"public Instant getEndTime()","name":"getEndTime","type":"Instant","javadoc":null},{"fullQualified":"public void setEndTime(Instant endTime)","name":"setEndTime","type":"void","javadoc":null},{"fullQualified":"public Instant getSessionVisibleFromTime()","name":"getSessionVisibleFromTime","type":"Instant","javadoc":null},{"fullQualified":"public void setSessionVisibleFromTime(Instant sessionVisibleFromTime)","name":"setSessionVisibleFromTime","type":"void","javadoc":null},{"fullQualified":"public Instant getResultsVisibleFromTime()","name":"getResultsVisibleFromTime","type":"Instant","javadoc":null},{"fullQualified":"public void setResultsVisibleFromTime(Instant resultsVisibleFromTime)","name":"setResultsVisibleFromTime","type":"void","javadoc":null},{"fullQualified":"public String getTimeZone()","name":"getTimeZone","type":"String","javadoc":null},{"fullQualified":"public void setTimeZone(String timeZone)","name":"setTimeZone","type":"void","javadoc":null},{"fullQualified":"public long getGracePeriodMinutes()","name":"getGracePeriodMinutes","type":"long","javadoc":null},{"fullQualified":"public void setGracePeriodMinutes(long gracePeriodMinutes)","name":"setGracePeriodMinutes","type":"void","javadoc":null},{"fullQualified":"public boolean isSentOpeningSoonEmail()","name":"isSentOpeningSoonEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentOpeningSoonEmail(boolean sentOpeningSoonEmail)","name":"setSentOpeningSoonEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isSentOpenEmail()","name":"isSentOpenEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentOpenEmail(boolean sentOpenEmail)","name":"setSentOpenEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isSentClosingEmail()","name":"isSentClosingEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentClosingEmail(boolean sentClosingEmail)","name":"setSentClosingEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isSentClosedEmail()","name":"isSentClosedEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentClosedEmail(boolean sentClosedEmail)","name":"setSentClosedEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isSentPublishedEmail()","name":"isSentPublishedEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentPublishedEmail(boolean sentPublishedEmail)","name":"setSentPublishedEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isOpeningEmailEnabled()","name":"isOpeningEmailEnabled","type":"boolean","javadoc":null},{"fullQualified":"public void setOpeningEmailEnabled(boolean isOpeningEmailEnabled)","name":"setOpeningEmailEnabled","type":"void","javadoc":null},{"fullQualified":"public boolean isClosingEmailEnabled()","name":"isClosingEmailEnabled","type":"boolean","javadoc":null},{"fullQualified":"public void setClosingEmailEnabled(boolean isClosingEmailEnabled)","name":"setClosingEmailEnabled","type":"void","javadoc":null},{"fullQualified":"public boolean isPublishedEmailEnabled()","name":"isPublishedEmailEnabled","type":"boolean","javadoc":null},{"fullQualified":"public void setPublishedEmailEnabled(boolean isPublishedEmailEnabled)","name":"setPublishedEmailEnabled","type":"void","javadoc":null},{"fullQualified":"public Map<String, Instant> getStudentDeadlines()","name":"getStudentDeadlines","type":"Map<String,Instant>","javadoc":null},{"fullQualified":"public void setStudentDeadlines(Map<String, Instant> studentDeadlines)","name":"setStudentDeadlines","type":"void","javadoc":null},{"fullQualified":"public Map<String, Instant> getInstructorDeadlines()","name":"getInstructorDeadlines","type":"Map<String,Instant>","javadoc":null},{"fullQualified":"public void setInstructorDeadlines(Map<String, Instant> instructorDeadlines)","name":"setInstructorDeadlines","type":"void","javadoc":null},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(String feedbackSessionName, String courseId)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a session.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(UpdateOptions updateOptions)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build on top of {@code updateOptions}.\n     "}],"allConstructors":[{"identifier":"private FeedbackSessionAttributes(String feedbackSessionName, String courseId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.InstructorAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withGoogleId(String googleId)","name":"withGoogleId","type":"Builder","javadoc":null},{"fullQualified":"public InstructorAttributes build()","name":"build","type":"InstructorAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String courseId, String email)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.InstructorAttributes.UpdateOptionsWithEmail.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withGoogleId(String googleId)","name":"withGoogleId","type":"Builder","javadoc":null},{"fullQualified":"public UpdateOptionsWithEmail build()","name":"build","type":"UpdateOptionsWithEmail","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String courseId, String email)","javadocComment":null}]},{"name":"UpdateOptionsWithEmail","fullyQualifiedName":"teammates.common.datatransfer.attributes.InstructorAttributes.UpdateOptionsWithEmail","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class for {@link UpdateOptionsWithEmail}.\n         ","lineNumber":467,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptionsWithEmail(String courseId, String email)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.InstructorAttributes.UpdateOptionsWithGoogleId.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withEmail(String email)","name":"withEmail","type":"Builder","javadoc":null},{"fullQualified":"public UpdateOptionsWithGoogleId build()","name":"build","type":"UpdateOptionsWithGoogleId","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String courseId, String email)","javadocComment":null}]},{"name":"UpdateOptionsWithGoogleId","fullyQualifiedName":"teammates.common.datatransfer.attributes.InstructorAttributes.UpdateOptionsWithGoogleId","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class for {@link UpdateOptionsWithGoogleId}.\n         ","lineNumber":529,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptionsWithGoogleId(String courseId, String googleId)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.InstructorAttributes.UpdateOptions","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.InstructorAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withName(String name)","name":"withName","type":"B","javadoc":null},{"fullQualified":"public B withRole(String role)","name":"withRole","type":"B","javadoc":null},{"fullQualified":"public B withDisplayedName(String displayedName)","name":"withDisplayedName","type":"B","javadoc":null},{"fullQualified":"public B withPrivileges(InstructorPrivileges instructorPrivileges)","name":"withPrivileges","type":"B","javadoc":null},{"fullQualified":"public B withIsDisplayedToStudents(boolean isDisplayedToStudents)","name":"withIsDisplayedToStudents","type":"B","javadoc":null},{"fullQualified":"public B withIsArchived(boolean isAchieved)","name":"withIsArchived","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"InstructorAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.InstructorAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Return a builder for {@link InstructorAttributes}.\n     ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the {@link InstructorAttributes} instance of the given {@link Instructor}.\n     ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deep copy of this object.\n     ","lineNumber":94,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sorts the instructors list alphabetically by name.\n     ","lineNumber":211,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the instructor has the given privilege in the course.\n     ","lineNumber":274,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the instructor has the given privilege in the given section.\n     ","lineNumber":284,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the instructor has the given privilege in the given section for the given feedback session.\n     ","lineNumber":294,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if privilege for session is present for any section.\n     ","lineNumber":304,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the instructor has co-owner privilege.\n     ","lineNumber":314,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptionsWithEmail}.\n     ","lineNumber":361,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptionsWithGoogleId}.\n     ","lineNumber":369,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptionsWithEmail.Builder} to build {@link UpdateOptions}\n     * for an instructor with {@code courseId} and {@code email}.\n     ","lineNumber":386,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptionsWithGoogleId.Builder} to build {@link UpdateOptions}\n     * for an instructor with {@code courseId} and {@code googleId}.\n     ","lineNumber":394,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder class for {@link InstructorAttributes}.\n     ","lineNumber":402,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link StudentAttributes}.\n     *\n     * <p>{@code courseId} and {@code email} is used to identify the instructor.\n     ","lineNumber":433,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class for {@link UpdateOptionsWithEmail}.\n         ","lineNumber":467,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link StudentAttributes}\n     *\n     * <p>{@code courseId} and {@code googleId} is used to identify the instructor.\n     ","lineNumber":494,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class for {@link UpdateOptionsWithGoogleId}.\n         ","lineNumber":529,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link InstructorAttributes}.\n     ","lineNumber":558,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link InstructorAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":583,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Builder builder(String courseId, String email)","name":"builder","type":"Builder","javadoc":"\n     * Return a builder for {@link InstructorAttributes}.\n     "},{"fullQualified":"public static InstructorAttributes valueOf(Instructor instructor)","name":"valueOf","type":"InstructorAttributes","javadoc":"\n     * Gets the {@link InstructorAttributes} instance of the given {@link Instructor}.\n     "},{"fullQualified":"public InstructorAttributes getCopy()","name":"getCopy","type":"InstructorAttributes","javadoc":"\n     * Gets a deep copy of this object.\n     "},{"fullQualified":"public String getInstructorPrivilegesAsText()","name":"getInstructorPrivilegesAsText","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":null},{"fullQualified":"public String getKey()","name":"getKey","type":"String","javadoc":null},{"fullQualified":"public void setKey(String key)","name":"setKey","type":"void","javadoc":null},{"fullQualified":"public boolean isArchived()","name":"isArchived","type":"boolean","javadoc":null},{"fullQualified":"public void setArchived(boolean archived)","name":"setArchived","type":"void","javadoc":null},{"fullQualified":"public InstructorPrivileges getPrivileges()","name":"getPrivileges","type":"InstructorPrivileges","javadoc":null},{"fullQualified":"public void setPrivileges(InstructorPrivileges privileges)","name":"setPrivileges","type":"void","javadoc":null},{"fullQualified":"public String getDisplayedName()","name":"getDisplayedName","type":"String","javadoc":null},{"fullQualified":"public void setDisplayedName(String displayedName)","name":"setDisplayedName","type":"void","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isDisplayedToStudents()","name":"isDisplayedToStudents","type":"boolean","javadoc":null},{"fullQualified":"public void setDisplayedToStudents(boolean displayedToStudents)","name":"setDisplayedToStudents","type":"void","javadoc":null},{"fullQualified":"public boolean isRegistered()","name":"isRegistered","type":"boolean","javadoc":null},{"fullQualified":"public String getRegistrationUrl()","name":"getRegistrationUrl","type":"String","javadoc":null},{"fullQualified":"public Instructor toEntity()","name":"toEntity","type":"Instructor","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public static void sortByName(List<InstructorAttributes> instructors)","name":"sortByName","type":"void","javadoc":"\n     * Sorts the instructors list alphabetically by name.\n     "},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public boolean isAllowedForPrivilege(String privilegeName)","name":"isAllowedForPrivilege","type":"boolean","javadoc":"\n     * Returns true if the instructor has the given privilege in the course.\n     "},{"fullQualified":"public boolean isAllowedForPrivilege(String sectionName, String privilegeName)","name":"isAllowedForPrivilege","type":"boolean","javadoc":"\n     * Returns true if the instructor has the given privilege in the given section.\n     "},{"fullQualified":"public boolean isAllowedForPrivilege(String sectionName, String sessionName, String privilegeName)","name":"isAllowedForPrivilege","type":"boolean","javadoc":"\n     * Returns true if the instructor has the given privilege in the given section for the given feedback session.\n     "},{"fullQualified":"public boolean isAllowedForPrivilegeAnySection(String sessionName, String privilegeName)","name":"isAllowedForPrivilegeAnySection","type":"boolean","javadoc":"\n     * Returns true if privilege for session is present for any section.\n     "},{"fullQualified":"public boolean hasCoownerPrivileges()","name":"hasCoownerPrivileges","type":"boolean","javadoc":"\n     * Returns true if the instructor has co-owner privilege.\n     "},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String googleId)","name":"setGoogleId","type":"void","javadoc":null},{"fullQualified":"public String getRole()","name":"getRole","type":"String","javadoc":null},{"fullQualified":"public void setRole(String role)","name":"setRole","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public void setUpdatedAt(Instant updatedAt)","name":"setUpdatedAt","type":"void","javadoc":null},{"fullQualified":"public void update(UpdateOptionsWithEmail updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptionsWithEmail}.\n     "},{"fullQualified":"public void update(UpdateOptionsWithGoogleId updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptionsWithGoogleId}.\n     "},{"fullQualified":"private void updateBasic(UpdateOptions updateOptions)","name":"updateBasic","type":"void","javadoc":null},{"fullQualified":"public static UpdateOptionsWithEmail.Builder updateOptionsWithEmailBuilder(String courseId, String email)","name":"updateOptionsWithEmailBuilder","type":"UpdateOptionsWithEmail.Builder","javadoc":"\n     * Returns a {@link UpdateOptionsWithEmail.Builder} to build {@link UpdateOptions}\n     * for an instructor with {@code courseId} and {@code email}.\n     "},{"fullQualified":"public static UpdateOptionsWithGoogleId.Builder updateOptionsWithGoogleIdBuilder(String courseId, String googleId)","name":"updateOptionsWithGoogleIdBuilder","type":"UpdateOptionsWithGoogleId.Builder","javadoc":"\n     * Returns a {@link UpdateOptionsWithGoogleId.Builder} to build {@link UpdateOptions}\n     * for an instructor with {@code courseId} and {@code googleId}.\n     "}],"allConstructors":[{"identifier":"private InstructorAttributes(String courseId, String email)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.NotificationAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public NotificationAttributes build()","name":"build","type":"NotificationAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String notificationId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.NotificationAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(UpdateOptions updateOptions)","javadocComment":null},{"identifier":"private Builder(String notificationId)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.NotificationAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":318,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getNotificationId()","name":"getNotificationId","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String notificationId)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.NotificationAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withStartTime(Instant startTime)","name":"withStartTime","type":"B","javadoc":null},{"fullQualified":"public B withEndTime(Instant endTime)","name":"withEndTime","type":"B","javadoc":null},{"fullQualified":"public B withStyle(NotificationStyle style)","name":"withStyle","type":"B","javadoc":null},{"fullQualified":"public B withTargetUser(NotificationTargetUser targetUser)","name":"withTargetUser","type":"B","javadoc":null},{"fullQualified":"public B withTitle(String title)","name":"withTitle","type":"B","javadoc":null},{"fullQualified":"public B withMessage(String message)","name":"withMessage","type":"B","javadoc":null},{"fullQualified":"public B withShown()","name":"withShown","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"NotificationAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.NotificationAttributes","isInterface":false,"codeComments":[{"type":"LineComment","text":" createdAt is not transient as it is used for the frontend to sort by creation datetime.","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the {@link NotificationAttributes} instance of the given {@link Notification}.\n     ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link NotificationAttributes}.\n     ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deep copy of this object.\n     ","lineNumber":64,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the notification as shown to the user.\n     * Only allowed to change value from false to true.\n     ","lineNumber":143,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sorts the list of notifications by the start time, with the latest as the first element.\n     ","lineNumber":167,"isOrphan":false},{"type":"LineComment","text":" Notification ID uniquely identifies a notification.","lineNumber":209,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":233,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a notification.\n     ","lineNumber":246,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build on top of {@code updateOptions}.\n     ","lineNumber":253,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder for {@link NotificationAttributes}.\n     ","lineNumber":260,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link NotificationAttributes}.\n     ","lineNumber":281,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":318,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link NotificationAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":343,"isOrphan":false}],"allMethods":[{"fullQualified":"public static NotificationAttributes valueOf(Notification n)","name":"valueOf","type":"NotificationAttributes","javadoc":"\n     * Gets the {@link NotificationAttributes} instance of the given {@link Notification}.\n     "},{"fullQualified":"public static Builder builder(String notificationId)","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link NotificationAttributes}.\n     "},{"fullQualified":"public NotificationAttributes getCopy()","name":"getCopy","type":"NotificationAttributes","javadoc":"\n     * Gets a deep copy of this object.\n     "},{"fullQualified":"public String getNotificationId()","name":"getNotificationId","type":"String","javadoc":null},{"fullQualified":"public void setNotificationId(String notificationId)","name":"setNotificationId","type":"void","javadoc":null},{"fullQualified":"public Instant getStartTime()","name":"getStartTime","type":"Instant","javadoc":null},{"fullQualified":"public void setStartTime(Instant startTime)","name":"setStartTime","type":"void","javadoc":null},{"fullQualified":"public Instant getEndTime()","name":"getEndTime","type":"Instant","javadoc":null},{"fullQualified":"public void setEndTime(Instant endTime)","name":"setEndTime","type":"void","javadoc":null},{"fullQualified":"public NotificationStyle getStyle()","name":"getStyle","type":"NotificationStyle","javadoc":null},{"fullQualified":"public void setStyle(NotificationStyle style)","name":"setStyle","type":"void","javadoc":null},{"fullQualified":"public NotificationTargetUser getTargetUser()","name":"getTargetUser","type":"NotificationTargetUser","javadoc":null},{"fullQualified":"public void setTargetUser(NotificationTargetUser targetUser)","name":"setTargetUser","type":"void","javadoc":null},{"fullQualified":"public String getTitle()","name":"getTitle","type":"String","javadoc":null},{"fullQualified":"public void setTitle(String title)","name":"setTitle","type":"void","javadoc":null},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null},{"fullQualified":"public void setMessage(String message)","name":"setMessage","type":"void","javadoc":null},{"fullQualified":"public boolean isShown()","name":"isShown","type":"boolean","javadoc":null},{"fullQualified":"public void setShown()","name":"setShown","type":"void","javadoc":"\n     * Sets the notification as shown to the user.\n     * Only allowed to change value from false to true.\n     "},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setUpdatedAt(Instant updatedAt)","name":"setUpdatedAt","type":"void","javadoc":null},{"fullQualified":"public static void sortByStartTime(List<NotificationAttributes> notifications)","name":"sortByStartTime","type":"void","javadoc":"\n     * Sorts the list of notifications by the start time, with the latest as the first element.\n     "},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public Notification toEntity()","name":"toEntity","type":"Notification","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(String notificationId)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a notification.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(UpdateOptions updateOptions)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build on top of {@code updateOptions}.\n     "}],"allConstructors":[{"identifier":"private NotificationAttributes(String notificationId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public StudentAttributes build()","name":"build","type":"StudentAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String courseId, String email)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withNewEmail(String email)","name":"withNewEmail","type":"Builder","javadoc":null},{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String courseId, String email)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":363,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String courseId, String email)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentAttributes.BasicBuilder","isInterface":false,"codeComments":[{"type":"LineComment","text":" google id can be set to null","lineNumber":419,"isOrphan":false}],"allMethods":[{"fullQualified":"public B withName(String name)","name":"withName","type":"B","javadoc":null},{"fullQualified":"public B withComment(String comment)","name":"withComment","type":"B","javadoc":null},{"fullQualified":"public B withGoogleId(String googleId)","name":"withGoogleId","type":"B","javadoc":null},{"fullQualified":"public B withTeamName(String teamName)","name":"withTeamName","type":"B","javadoc":null},{"fullQualified":"public B withSectionName(String sectionName)","name":"withSectionName","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"StudentAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the {@link StudentAttributes} instance of the given {@link CourseStudent}.\n     ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Return a builder for {@link StudentAttributes}.\n     ","lineNumber":66,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deep copy of this object.\n     ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Format: email%courseId e.g., adam@gmail.com%cs1101.\n     ","lineNumber":142,"isOrphan":false},{"type":"LineComment","text":" id is allowed to be null when the student is not registered","lineNumber":195,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sorts the list of students by the section name, then team name, then name.\n     ","lineNumber":220,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sorts the list of students by the team name, then name.\n     ","lineNumber":229,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":278,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a student.\n     ","lineNumber":290,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder class for {@link StudentAttributes}.\n     ","lineNumber":297,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specify the fields to update in {@link StudentAttributes}.\n     ","lineNumber":319,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":363,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link StudentAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":389,"isOrphan":false},{"type":"LineComment","text":" google id can be set to null","lineNumber":419,"isOrphan":false}],"allMethods":[{"fullQualified":"public static StudentAttributes valueOf(CourseStudent student)","name":"valueOf","type":"StudentAttributes","javadoc":"\n     * Gets the {@link StudentAttributes} instance of the given {@link CourseStudent}.\n     "},{"fullQualified":"public static Builder builder(String courseId, String email)","name":"builder","type":"Builder","javadoc":"\n     * Return a builder for {@link StudentAttributes}.\n     "},{"fullQualified":"public StudentAttributes getCopy()","name":"getCopy","type":"StudentAttributes","javadoc":"\n     * Gets a deep copy of this object.\n     "},{"fullQualified":"public boolean isRegistered()","name":"isRegistered","type":"boolean","javadoc":null},{"fullQualified":"public String getRegistrationUrl()","name":"getRegistrationUrl","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public String getCourse()","name":"getCourse","type":"String","javadoc":null},{"fullQualified":"public void setCourse(String course)","name":"setCourse","type":"void","javadoc":null},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String googleId)","name":"setGoogleId","type":"void","javadoc":null},{"fullQualified":"public String getKey()","name":"getKey","type":"String","javadoc":null},{"fullQualified":"public void setKey(String key)","name":"setKey","type":"void","javadoc":null},{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":"\n     * Format: email%courseId e.g., adam@gmail.com%cs1101.\n     "},{"fullQualified":"public String getSection()","name":"getSection","type":"String","javadoc":null},{"fullQualified":"public void setSection(String section)","name":"setSection","type":"void","javadoc":null},{"fullQualified":"public String getTeam()","name":"getTeam","type":"String","javadoc":null},{"fullQualified":"public void setTeam(String team)","name":"setTeam","type":"void","javadoc":null},{"fullQualified":"public String getComments()","name":"getComments","type":"String","javadoc":null},{"fullQualified":"public void setComments(String comments)","name":"setComments","type":"void","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public static void sortBySectionName(List<StudentAttributes> students)","name":"sortBySectionName","type":"void","javadoc":"\n     * Sorts the list of students by the section name, then team name, then name.\n     "},{"fullQualified":"public static void sortByTeamName(List<StudentAttributes> students)","name":"sortByTeamName","type":"void","javadoc":"\n     * Sorts the list of students by the team name, then name.\n     "},{"fullQualified":"public CourseStudent toEntity()","name":"toEntity","type":"CourseStudent","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public void setUpdatedAt(Instant updatedAt)","name":"setUpdatedAt","type":"void","javadoc":null},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(String courseId, String email)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a student.\n     "}],"allConstructors":[{"identifier":"private StudentAttributes(String courseId, String email)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentProfileAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public StudentProfileAttributes build()","name":"build","type":"StudentProfileAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String googleId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentProfileAttributes.UpdateOptions.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public UpdateOptions build()","name":"build","type":"UpdateOptions","javadoc":null}],"allConstructors":[{"identifier":"private Builder(String googleId)","javadocComment":null}]},{"name":"UpdateOptions","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentProfileAttributes.UpdateOptions","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":327,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private UpdateOptions(String googleId)","javadocComment":null}]},{"name":"BasicBuilder","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentProfileAttributes.BasicBuilder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public B withShortName(String shortName)","name":"withShortName","type":"B","javadoc":null},{"fullQualified":"public B withEmail(String email)","name":"withEmail","type":"B","javadoc":null},{"fullQualified":"public B withInstitute(String institute)","name":"withInstitute","type":"B","javadoc":null},{"fullQualified":"public B withNationality(String nationality)","name":"withNationality","type":"B","javadoc":null},{"fullQualified":"public B withGender(Gender gender)","name":"withGender","type":"B","javadoc":null},{"fullQualified":"public B withMoreInfo(String moreInfo)","name":"withMoreInfo","type":"B","javadoc":null},{"fullQualified":"public abstract T build()","name":"build","type":"T","javadoc":null}],"allConstructors":[{"identifier":" BasicBuilder(UpdateOptions updateOptions)","javadocComment":null}]},{"name":"StudentProfileAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentProfileAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the {@link StudentProfileAttributes} instance of the given {@link StudentProfile}.\n     ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Return a builder for {@link StudentProfileAttributes}.\n     ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deep copy of this object.\n     ","lineNumber":75,"isOrphan":false},{"type":"LineComment","text":" accept empty string values as it means the user has not specified anything yet.","lineNumber":158,"isOrphan":true},{"type":"LineComment","text":" No validation for modified date as it is determined by the system.","lineNumber":178,"isOrphan":true},{"type":"LineComment","text":" No validation for More Info. It will properly sanitized.","lineNumber":179,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Updates with {@link UpdateOptions}.\n     ","lineNumber":226,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a profile.\n     ","lineNumber":238,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder class for {@link StudentProfileAttributes}.\n     ","lineNumber":245,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents the gender of a student.\n     ","lineNumber":266,"isOrphan":false},{"type":"LineComment","text":" CHECKSTYLE.ON:JavadocVariable","lineNumber":274,"isOrphan":true},{"type":"JavadocComment","text":"\n         * Returns the Gender enum value corresponding to {@code gender}, or OTHER by default.\n         ","lineNumber":276,"isOrphan":false},{"type":"LineComment","text":" CHECKSTYLE.OFF:JavadocVariable enum names are self-documenting","lineNumber":270,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Helper class to specific the fields to update in {@link StudentProfileAttributes}.\n     ","lineNumber":291,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class to build {@link UpdateOptions}.\n         ","lineNumber":327,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Basic builder to build {@link StudentProfileAttributes} related classes.\n     *\n     * @param <T> type to be built\n     * @param <B> type of the builder\n     ","lineNumber":345,"isOrphan":false}],"allMethods":[{"fullQualified":"public static StudentProfileAttributes valueOf(StudentProfile sp)","name":"valueOf","type":"StudentProfileAttributes","javadoc":"\n     * Gets the {@link StudentProfileAttributes} instance of the given {@link StudentProfile}.\n     "},{"fullQualified":"public static Builder builder(String googleId)","name":"builder","type":"Builder","javadoc":"\n     * Return a builder for {@link StudentProfileAttributes}.\n     "},{"fullQualified":"public StudentProfileAttributes getCopy()","name":"getCopy","type":"StudentProfileAttributes","javadoc":"\n     * Gets a deep copy of this object.\n     "},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public String getShortName()","name":"getShortName","type":"String","javadoc":null},{"fullQualified":"public void setShortName(String shortName)","name":"setShortName","type":"void","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public void setInstitute(String institute)","name":"setInstitute","type":"void","javadoc":null},{"fullQualified":"public String getNationality()","name":"getNationality","type":"String","javadoc":null},{"fullQualified":"public void setNationality(String nationality)","name":"setNationality","type":"void","javadoc":null},{"fullQualified":"public Gender getGender()","name":"getGender","type":"Gender","javadoc":null},{"fullQualified":"public void setGender(Gender gender)","name":"setGender","type":"void","javadoc":null},{"fullQualified":"public String getMoreInfo()","name":"getMoreInfo","type":"String","javadoc":null},{"fullQualified":"public void setMoreInfo(String moreInfo)","name":"setMoreInfo","type":"void","javadoc":null},{"fullQualified":"public Instant getModifiedDate()","name":"getModifiedDate","type":"Instant","javadoc":null},{"fullQualified":"public void setModifiedDate(Instant modifiedDate)","name":"setModifiedDate","type":"void","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public StudentProfile toEntity()","name":"toEntity","type":"StudentProfile","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public void update(UpdateOptions updateOptions)","name":"update","type":"void","javadoc":"\n     * Updates with {@link UpdateOptions}.\n     "},{"fullQualified":"public static UpdateOptions.Builder updateOptionsBuilder(String googleId)","name":"updateOptionsBuilder","type":"UpdateOptions.Builder","javadoc":"\n     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a profile.\n     "}],"allConstructors":[{"identifier":"private StudentProfileAttributes(String googleId)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.attributes.UsageStatisticsAttributes.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withNumResponses(int numResponses)","name":"withNumResponses","type":"Builder","javadoc":null},{"fullQualified":"public Builder withNumCourses(int numCourses)","name":"withNumCourses","type":"Builder","javadoc":null},{"fullQualified":"public Builder withNumStudents(int numStudents)","name":"withNumStudents","type":"Builder","javadoc":null},{"fullQualified":"public Builder withNumInstructors(int numInstructors)","name":"withNumInstructors","type":"Builder","javadoc":null},{"fullQualified":"public Builder withNumAccountRequests(int numAccountRequests)","name":"withNumAccountRequests","type":"Builder","javadoc":null},{"fullQualified":"public Builder withNumEmails(int numEmails)","name":"withNumEmails","type":"Builder","javadoc":null},{"fullQualified":"public Builder withNumSubmissions(int numSubmissions)","name":"withNumSubmissions","type":"Builder","javadoc":null},{"fullQualified":"public UsageStatisticsAttributes build()","name":"build","type":"UsageStatisticsAttributes","javadoc":null}],"allConstructors":[{"identifier":"private Builder(Instant startTime, int timePeriod)","javadocComment":null}]},{"name":"UsageStatisticsAttributes","fullyQualifiedName":"teammates.common.datatransfer.attributes.UsageStatisticsAttributes","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the {@link UsageStatisticsAttributes} instance of the given {@link UsageStatistics}.\n     ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deep copy of this object.\n     ","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" Nothing to check","lineNumber":103,"isOrphan":false},{"type":"LineComment","text":" Due to the immutable design for the entity, only the two basic fields are necessary","lineNumber":132,"isOrphan":true},{"type":"LineComment","text":" to determine the equality of two attributes","lineNumber":133,"isOrphan":false},{"type":"LineComment","text":" Nothing to sanitize","lineNumber":143,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link UsageStatisticsAttributes}.\n     ","lineNumber":146,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A builder for {@link UsageStatisticsAttributes}.\n     *\n     * <p>Note that we are using a simplified builder pattern here, as opposed to builders of other attributes,\n     * as this entity is designed to be immutable.\n     ","lineNumber":153,"isOrphan":false}],"allMethods":[{"fullQualified":"public static UsageStatisticsAttributes valueOf(UsageStatistics us)","name":"valueOf","type":"UsageStatisticsAttributes","javadoc":"\n     * Gets the {@link UsageStatisticsAttributes} instance of the given {@link UsageStatistics}.\n     "},{"fullQualified":"public UsageStatisticsAttributes getCopy()","name":"getCopy","type":"UsageStatisticsAttributes","javadoc":"\n     * Gets a deep copy of this object.\n     "},{"fullQualified":"public Instant getStartTime()","name":"getStartTime","type":"Instant","javadoc":null},{"fullQualified":"public int getTimePeriod()","name":"getTimePeriod","type":"int","javadoc":null},{"fullQualified":"public int getNumResponses()","name":"getNumResponses","type":"int","javadoc":null},{"fullQualified":"public int getNumCourses()","name":"getNumCourses","type":"int","javadoc":null},{"fullQualified":"public int getNumStudents()","name":"getNumStudents","type":"int","javadoc":null},{"fullQualified":"public int getNumInstructors()","name":"getNumInstructors","type":"int","javadoc":null},{"fullQualified":"public int getNumAccountRequests()","name":"getNumAccountRequests","type":"int","javadoc":null},{"fullQualified":"public int getNumEmails()","name":"getNumEmails","type":"int","javadoc":null},{"fullQualified":"public int getNumSubmissions()","name":"getNumSubmissions","type":"int","javadoc":null},{"fullQualified":"public List<String> getInvalidityInfo()","name":"getInvalidityInfo","type":"List<String>","javadoc":null},{"fullQualified":"public UsageStatistics toEntity()","name":"toEntity","type":"UsageStatistics","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public void sanitizeForSaving()","name":"sanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public static Builder builder(Instant startTime, int timePeriod)","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link UsageStatisticsAttributes}.\n     "}],"allConstructors":[{"identifier":"private UsageStatisticsAttributes(Instant startTime, int timePeriod)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.AttributesDeletionQuery.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withCourseId(String courseId)","name":"withCourseId","type":"Builder","javadoc":null},{"fullQualified":"public Builder withFeedbackSessionName(String feedbackSessionName)","name":"withFeedbackSessionName","type":"Builder","javadoc":null},{"fullQualified":"public Builder withQuestionId(String questionId)","name":"withQuestionId","type":"Builder","javadoc":null},{"fullQualified":"public Builder withResponseId(String responseId)","name":"withResponseId","type":"Builder","javadoc":null},{"fullQualified":"public Builder withUserEmail(String userEmail)","name":"withUserEmail","type":"Builder","javadoc":null},{"fullQualified":"public Builder withIsInstructor(boolean isInstructor)","name":"withIsInstructor","type":"Builder","javadoc":null},{"fullQualified":"public AttributesDeletionQuery build()","name":"build","type":"AttributesDeletionQuery","javadoc":null}],"allConstructors":[{"identifier":"private Builder()","javadocComment":null}]},{"name":"AttributesDeletionQuery","fullyQualifiedName":"teammates.common.datatransfer.AttributesDeletionQuery","isInterface":false,"codeComments":[{"type":"LineComment","text":" use builder to construct query","lineNumber":16,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns a builder for {@link AttributesDeletionQuery}.\n     ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Builder for {@link AttributesDeletionQuery}.\n     ","lineNumber":74,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean isCourseIdPresent()","name":"isCourseIdPresent","type":"boolean","javadoc":null},{"fullQualified":"public boolean isFeedbackSessionNamePresent()","name":"isFeedbackSessionNamePresent","type":"boolean","javadoc":null},{"fullQualified":"public boolean isQuestionIdPresent()","name":"isQuestionIdPresent","type":"boolean","javadoc":null},{"fullQualified":"public boolean isResponseIdPresent()","name":"isResponseIdPresent","type":"boolean","javadoc":null},{"fullQualified":"public boolean isUserEmailPresent()","name":"isUserEmailPresent","type":"boolean","javadoc":null},{"fullQualified":"public boolean isIsInstructorPresent()","name":"isIsInstructorPresent","type":"boolean","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getQuestionId()","name":"getQuestionId","type":"String","javadoc":null},{"fullQualified":"public String getResponseId()","name":"getResponseId","type":"String","javadoc":null},{"fullQualified":"public String getUserEmail()","name":"getUserEmail","type":"String","javadoc":null},{"fullQualified":"public Boolean getIsInstructor()","name":"getIsInstructor","type":"Boolean","javadoc":null},{"fullQualified":"public static Builder builder()","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link AttributesDeletionQuery}.\n     "}],"allConstructors":[{"identifier":"private AttributesDeletionQuery()","javadocComment":null}]},{"name":"ParticipantInfo","fullyQualifiedName":"teammates.common.datatransfer.CourseRoster.ParticipantInfo","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public String getTeamName()","name":"getTeamName","type":"String","javadoc":null},{"fullQualified":"public String getSectionName()","name":"getSectionName","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private ParticipantInfo(String name, String teamName, String sectionName)","javadocComment":null}]},{"name":"CourseRoster","fullyQualifiedName":"teammates.common.datatransfer.CourseRoster","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Checks whether a student is in course.\n     ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether a team is in course.\n     ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether a student is in team.\n     ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether two students are in the same team.\n     ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the student object for the given email.\n     ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the instructor object for the given email.\n     ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Builds a Map from team name to team members.\n     ","lineNumber":109,"isOrphan":false},{"type":"LineComment","text":" group students by team","lineNumber":114,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets info of a participant associated with an identifier in the course.\n     *\n     * @return an object {@link ParticipantInfo} containing the name, teamName and the sectionName.\n     ","lineNumber":122,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Simple data transfer object containing the information of a participant.\n     ","lineNumber":158,"isOrphan":false}],"allMethods":[{"fullQualified":"public List<StudentAttributes> getStudents()","name":"getStudents","type":"List<StudentAttributes>","javadoc":null},{"fullQualified":"public List<InstructorAttributes> getInstructors()","name":"getInstructors","type":"List<InstructorAttributes>","javadoc":null},{"fullQualified":"public Map<String, List<StudentAttributes>> getTeamToMembersTable()","name":"getTeamToMembersTable","type":"Map<String,List<StudentAttributes>>","javadoc":null},{"fullQualified":"public boolean isStudentInCourse(String studentEmail)","name":"isStudentInCourse","type":"boolean","javadoc":"\n     * Checks whether a student is in course.\n     "},{"fullQualified":"public boolean isTeamInCourse(String teamName)","name":"isTeamInCourse","type":"boolean","javadoc":"\n     * Checks whether a team is in course.\n     "},{"fullQualified":"public boolean isStudentInTeam(String studentEmail, String targetTeamName)","name":"isStudentInTeam","type":"boolean","javadoc":"\n     * Checks whether a student is in team.\n     "},{"fullQualified":"public boolean isStudentsInSameTeam(String studentEmail1, String studentEmail2)","name":"isStudentsInSameTeam","type":"boolean","javadoc":"\n     * Checks whether two students are in the same team.\n     "},{"fullQualified":"public StudentAttributes getStudentForEmail(String email)","name":"getStudentForEmail","type":"StudentAttributes","javadoc":"\n     * Returns the student object for the given email.\n     "},{"fullQualified":"public InstructorAttributes getInstructorForEmail(String email)","name":"getInstructorForEmail","type":"InstructorAttributes","javadoc":"\n     * Returns the instructor object for the given email.\n     "},{"fullQualified":"private void populateStudentListByEmail(List<StudentAttributes> students)","name":"populateStudentListByEmail","type":"void","javadoc":null},{"fullQualified":"private void populateInstructorListByEmail(List<InstructorAttributes> instructors)","name":"populateInstructorListByEmail","type":"void","javadoc":null},{"fullQualified":"public static Map<String, List<StudentAttributes>> buildTeamToMembersTable(List<StudentAttributes> students)","name":"buildTeamToMembersTable","type":"Map<String,List<StudentAttributes>>","javadoc":"\n     * Builds a Map from team name to team members.\n     "},{"fullQualified":"public ParticipantInfo getInfoForIdentifier(String identifier)","name":"getInfoForIdentifier","type":"ParticipantInfo","javadoc":"\n     * Gets info of a participant associated with an identifier in the course.\n     *\n     * @return an object {@link ParticipantInfo} containing the name, teamName and the sectionName.\n     "}],"allConstructors":[{"identifier":"public CourseRoster(List<StudentAttributes> students, List<InstructorAttributes> instructors)","javadocComment":null}]},{"name":"DataBundle","fullyQualifiedName":"teammates.common.datatransfer.DataBundle","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"ErrorLogEntry","fullyQualifiedName":"teammates.common.datatransfer.ErrorLogEntry","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Converts a {@link GeneralLogEntry} to a condensed {@link ErrorLogEntry}.\n     ","lineNumber":25,"isOrphan":false},{"type":"LineComment","text":" This is a set of extra-defensive checks. A well-formed exception log should not need these checks","lineNumber":45,"isOrphan":true},{"type":"LineComment","text":" as exception messages are not null and all the list sizes are equal.","lineNumber":46,"isOrphan":false}],"allMethods":[{"fullQualified":"public static ErrorLogEntry fromLogEntry(GeneralLogEntry logEntry)","name":"fromLogEntry","type":"ErrorLogEntry","javadoc":"\n     * Converts a {@link GeneralLogEntry} to a condensed {@link ErrorLogEntry}.\n     "},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null},{"fullQualified":"public String getSeverity()","name":"getSeverity","type":"String","javadoc":null},{"fullQualified":"public String getTraceId()","name":"getTraceId","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public ErrorLogEntry(String message, String severity, String traceId)","javadocComment":null}]},{"name":"FeedbackSessionLogEntry","fullyQualifiedName":"teammates.common.datatransfer.FeedbackSessionLogEntry","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getStudentEmail()","name":"getStudentEmail","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionLogType()","name":"getFeedbackSessionLogType","type":"String","javadoc":null},{"fullQualified":"public long getTimestamp()","name":"getTimestamp","type":"long","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSessionLogEntry(String studentEmail, String feedbackSessionName, String feedbackSessionLogType, long timestamp)","javadocComment":null}]},{"name":"InstructorPermissionSet","fullyQualifiedName":"teammates.common.datatransfer.InstructorPermissionSet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns the legacy map representation of this permission set structure.\n     ","lineNumber":153,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean isCanModifyCourse()","name":"isCanModifyCourse","type":"boolean","javadoc":null},{"fullQualified":"public void setCanModifyCourse(boolean canModifyCourse)","name":"setCanModifyCourse","type":"void","javadoc":null},{"fullQualified":"public boolean isCanModifyInstructor()","name":"isCanModifyInstructor","type":"boolean","javadoc":null},{"fullQualified":"public void setCanModifyInstructor(boolean canModifyInstructor)","name":"setCanModifyInstructor","type":"void","javadoc":null},{"fullQualified":"public boolean isCanModifySession()","name":"isCanModifySession","type":"boolean","javadoc":null},{"fullQualified":"public void setCanModifySession(boolean canModifySession)","name":"setCanModifySession","type":"void","javadoc":null},{"fullQualified":"public boolean isCanModifyStudent()","name":"isCanModifyStudent","type":"boolean","javadoc":null},{"fullQualified":"public void setCanModifyStudent(boolean canModifyStudent)","name":"setCanModifyStudent","type":"void","javadoc":null},{"fullQualified":"public boolean isCanViewStudentInSections()","name":"isCanViewStudentInSections","type":"boolean","javadoc":null},{"fullQualified":"public void setCanViewStudentInSections(boolean canViewStudentInSections)","name":"setCanViewStudentInSections","type":"void","javadoc":null},{"fullQualified":"public boolean isCanViewSessionInSections()","name":"isCanViewSessionInSections","type":"boolean","javadoc":null},{"fullQualified":"public void setCanViewSessionInSections(boolean canViewSessionInSections)","name":"setCanViewSessionInSections","type":"void","javadoc":null},{"fullQualified":"public boolean isCanSubmitSessionInSections()","name":"isCanSubmitSessionInSections","type":"boolean","javadoc":null},{"fullQualified":"public void setCanSubmitSessionInSections(boolean canSubmitSessionInSections)","name":"setCanSubmitSessionInSections","type":"void","javadoc":null},{"fullQualified":"public boolean isCanModifySessionCommentsInSections()","name":"isCanModifySessionCommentsInSections","type":"boolean","javadoc":null},{"fullQualified":"public void setCanModifySessionCommentsInSections(boolean canModifySessionCommentsInSections)","name":"setCanModifySessionCommentsInSections","type":"void","javadoc":null},{"fullQualified":" InstructorPermissionSet getCopy()","name":"getCopy","type":"InstructorPermissionSet","javadoc":null},{"fullQualified":" boolean get(String privilegeName)","name":"get","type":"boolean","javadoc":null},{"fullQualified":" void put(String privilegeName, boolean value)","name":"put","type":"void","javadoc":null},{"fullQualified":"public Map<String, Boolean> toLegacyMapFormat()","name":"toLegacyMapFormat","type":"Map<String,Boolean>","javadoc":"\n     * Returns the legacy map representation of this permission set structure.\n     "},{"fullQualified":" static InstructorPermissionSet fromLegacyMapFormat(Map<String, Boolean> legacyMap)","name":"fromLegacyMapFormat","type":"InstructorPermissionSet","javadoc":null},{"fullQualified":"public boolean equals(Object other)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null}],"allConstructors":[]},{"name":"InstructorPrivileges","fullyQualifiedName":"teammates.common.datatransfer.InstructorPrivileges","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Converts the current privilege object to its legacy format.\n     ","lineNumber":144,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the given string is a valid privilege name.\n     ","lineNumber":175,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the given string is a valid section-level privilege name.\n     ","lineNumber":184,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the given string is a valid session-level privilege name.\n     ","lineNumber":192,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets privilege for the privilege specified by privilegeName.\n     ","lineNumber":241,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets privilege for the privilege specified by privilegeName for sectionName.\n     ","lineNumber":248,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets privilege for the privilege specified by privilegeName for sessionName in sectionName.\n     ","lineNumber":255,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if it is allowed for the privilege specified by privilegeName.\n     ","lineNumber":298,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if it is allowed for the privilege specified by privilegeName in sectionName.\n     ","lineNumber":305,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if it is allowed for the privilege specified by privilegeName for sessionName in sectionName.\n     ","lineNumber":312,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if privilege for session is present for any section.\n     ","lineNumber":319,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if co-owner privilege exists.\n     ","lineNumber":326,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if manager privilege exists.\n     ","lineNumber":333,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if observer privilege exists.\n     ","lineNumber":340,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if tutor privilege exists.\n     ","lineNumber":347,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Validates the privileges in course level, section level and session level.\n     *\n     * <p>Makes sure there is nothing wrong with privileges hierarchy by adding the\n     * prerequisite privileges if they have not been granted yet.\n     ","lineNumber":398,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the section level privileges of the instructor.\n     ","lineNumber":426,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the session level privileges of the instructor.\n     ","lineNumber":435,"isOrphan":false}],"allMethods":[{"fullQualified":"public InstructorPrivilegesLegacy toLegacyFormat()","name":"toLegacyFormat","type":"InstructorPrivilegesLegacy","javadoc":"\n     * Converts the current privilege object to its legacy format.\n     "},{"fullQualified":"public static boolean isPrivilegeNameValid(String privilegeName)","name":"isPrivilegeNameValid","type":"boolean","javadoc":"\n     * Returns true if the given string is a valid privilege name.\n     "},{"fullQualified":"public static boolean isPrivilegeNameValidForSectionLevel(String privilegeName)","name":"isPrivilegeNameValidForSectionLevel","type":"boolean","javadoc":"\n     * Returns true if the given string is a valid section-level privilege name.\n     "},{"fullQualified":"public static boolean isPrivilegeNameValidForSessionLevel(String privilegeName)","name":"isPrivilegeNameValidForSessionLevel","type":"boolean","javadoc":"\n     * Returns true if the given string is a valid session-level privilege name.\n     "},{"fullQualified":" void setDefaultPrivilegesForCoowner()","name":"setDefaultPrivilegesForCoowner","type":"void","javadoc":null},{"fullQualified":" void setDefaultPrivilegesForManager()","name":"setDefaultPrivilegesForManager","type":"void","javadoc":null},{"fullQualified":" void setDefaultPrivilegesForObserver()","name":"setDefaultPrivilegesForObserver","type":"void","javadoc":null},{"fullQualified":" void setDefaultPrivilegesForTutor()","name":"setDefaultPrivilegesForTutor","type":"void","javadoc":null},{"fullQualified":" void setDefaultPrivilegesForCustom()","name":"setDefaultPrivilegesForCustom","type":"void","javadoc":null},{"fullQualified":"private void setDefaultPrivileges(InstructorPermissionSet defaultPrivileges)","name":"setDefaultPrivileges","type":"void","javadoc":null},{"fullQualified":"private InstructorPermissionSet getOverallPrivilegesForSections()","name":"getOverallPrivilegesForSections","type":"InstructorPermissionSet","javadoc":null},{"fullQualified":"public void updatePrivilege(String privilegeName, boolean isAllowed)","name":"updatePrivilege","type":"void","javadoc":"\n     * Sets privilege for the privilege specified by privilegeName.\n     "},{"fullQualified":"public void updatePrivilege(String sectionName, String privilegeName, boolean isAllowed)","name":"updatePrivilege","type":"void","javadoc":"\n     * Sets privilege for the privilege specified by privilegeName for sectionName.\n     "},{"fullQualified":"public void updatePrivilege(String sectionName, String sessionName, String privilegeName, boolean isAllowed)","name":"updatePrivilege","type":"void","javadoc":"\n     * Sets privilege for the privilege specified by privilegeName for sessionName in sectionName.\n     "},{"fullQualified":"private void updatePrivilegeInCourseLevel(String privilegeName, boolean isAllowed)","name":"updatePrivilegeInCourseLevel","type":"void","javadoc":null},{"fullQualified":"private void updatePrivilegeInSectionLevel(String sectionName, String privilegeName, boolean isAllowed)","name":"updatePrivilegeInSectionLevel","type":"void","javadoc":null},{"fullQualified":"private void updatePrivilegeInSessionLevel(String sectionName, String sessionName, String privilegeName, boolean isAllowed)","name":"updatePrivilegeInSessionLevel","type":"void","javadoc":null},{"fullQualified":"private void verifyExistenceOfsectionName(String sectionName)","name":"verifyExistenceOfsectionName","type":"void","javadoc":null},{"fullQualified":" void addSectionWithDefaultPrivileges(String sectionName)","name":"addSectionWithDefaultPrivileges","type":"void","javadoc":null},{"fullQualified":"public boolean isAllowedForPrivilege(String privilegeName)","name":"isAllowedForPrivilege","type":"boolean","javadoc":"\n     * Returns true if it is allowed for the privilege specified by privilegeName.\n     "},{"fullQualified":"public boolean isAllowedForPrivilege(String sectionName, String privilegeName)","name":"isAllowedForPrivilege","type":"boolean","javadoc":"\n     * Returns true if it is allowed for the privilege specified by privilegeName in sectionName.\n     "},{"fullQualified":"public boolean isAllowedForPrivilege(String sectionName, String sessionName, String privilegeName)","name":"isAllowedForPrivilege","type":"boolean","javadoc":"\n     * Returns true if it is allowed for the privilege specified by privilegeName for sessionName in sectionName.\n     "},{"fullQualified":"public boolean isAllowedForPrivilegeAnySection(String sessionName, String privilegeName)","name":"isAllowedForPrivilegeAnySection","type":"boolean","javadoc":"\n     * Returns true if privilege for session is present for any section.\n     "},{"fullQualified":"public boolean hasCoownerPrivileges()","name":"hasCoownerPrivileges","type":"boolean","javadoc":"\n     * Returns true if co-owner privilege exists.\n     "},{"fullQualified":"public boolean hasManagerPrivileges()","name":"hasManagerPrivileges","type":"boolean","javadoc":"\n     * Returns true if manager privilege exists.\n     "},{"fullQualified":"public boolean hasObserverPrivileges()","name":"hasObserverPrivileges","type":"boolean","javadoc":"\n     * Returns true if observer privilege exists.\n     "},{"fullQualified":"public boolean hasTutorPrivileges()","name":"hasTutorPrivileges","type":"boolean","javadoc":"\n     * Returns true if tutor privilege exists.\n     "},{"fullQualified":"private boolean isAllowedInCourseLevel(String privilegeName)","name":"isAllowedInCourseLevel","type":"boolean","javadoc":null},{"fullQualified":"private boolean isAllowedInSectionLevel(String sectionName, String privilegeName)","name":"isAllowedInSectionLevel","type":"boolean","javadoc":null},{"fullQualified":"private boolean isAllowedInSessionLevel(String sectionName, String sessionName, String privilegeName)","name":"isAllowedInSessionLevel","type":"boolean","javadoc":null},{"fullQualified":"private boolean isAllowedInSessionLevelAnySection(String sessionName, String privilegeName)","name":"isAllowedInSessionLevelAnySection","type":"boolean","javadoc":null},{"fullQualified":"public void validatePrivileges()","name":"validatePrivileges","type":"void","javadoc":"\n     * Validates the privileges in course level, section level and session level.\n     *\n     * <p>Makes sure there is nothing wrong with privileges hierarchy by adding the\n     * prerequisite privileges if they have not been granted yet.\n     "},{"fullQualified":"public InstructorPermissionSet getCourseLevelPrivileges()","name":"getCourseLevelPrivileges","type":"InstructorPermissionSet","javadoc":null},{"fullQualified":"public Map<String, InstructorPermissionSet> getSectionLevelPrivileges()","name":"getSectionLevelPrivileges","type":"Map<String,InstructorPermissionSet>","javadoc":"\n     * Returns the section level privileges of the instructor.\n     "},{"fullQualified":"public Map<String, Map<String, InstructorPermissionSet>> getSessionLevelPrivileges()","name":"getSessionLevelPrivileges","type":"Map<String,Map<String,InstructorPermissionSet>>","javadoc":"\n     * Returns the session level privileges of the instructor.\n     "},{"fullQualified":"public boolean equals(Object another)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public InstructorPrivileges()","javadocComment":null},{"identifier":"public InstructorPrivileges(String instrRole)","javadocComment":null},{"identifier":"public InstructorPrivileges(InstructorPrivilegesLegacy legacyFormat)","javadocComment":null}]},{"name":"InstructorPrivilegesLegacy","fullyQualifiedName":"teammates.common.datatransfer.InstructorPrivilegesLegacy","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Map<String, Boolean> getCourseLevel()","name":"getCourseLevel","type":"Map<String,Boolean>","javadoc":null},{"fullQualified":"public Map<String, Map<String, Boolean>> getSectionLevel()","name":"getSectionLevel","type":"Map<String,Map<String,Boolean>>","javadoc":null},{"fullQualified":"public Map<String, Map<String, Map<String, Boolean>>> getSessionLevel()","name":"getSessionLevel","type":"Map<String,Map<String,Map<String,Boolean>>>","javadoc":null}],"allConstructors":[{"identifier":"public InstructorPrivilegesLegacy()","javadocComment":null}]},{"name":"DefaultLogDetails","fullyQualifiedName":"teammates.common.datatransfer.logs.DefaultLogDetails","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void hideSensitiveInformation()","name":"hideSensitiveInformation","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public DefaultLogDetails()","javadocComment":null}]},{"name":"EmailSentLogDetails","fullyQualifiedName":"teammates.common.datatransfer.logs.EmailSentLogDetails","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getEmailRecipient()","name":"getEmailRecipient","type":"String","javadoc":null},{"fullQualified":"public void setEmailRecipient(String emailRecipient)","name":"setEmailRecipient","type":"void","javadoc":null},{"fullQualified":"public String getEmailSubject()","name":"getEmailSubject","type":"String","javadoc":null},{"fullQualified":"public void setEmailSubject(String emailSubject)","name":"setEmailSubject","type":"void","javadoc":null},{"fullQualified":"public String getEmailContent()","name":"getEmailContent","type":"String","javadoc":null},{"fullQualified":"public void setEmailContent(String emailContent)","name":"setEmailContent","type":"void","javadoc":null},{"fullQualified":"public EmailType getEmailType()","name":"getEmailType","type":"EmailType","javadoc":null},{"fullQualified":"public void setEmailType(EmailType emailType)","name":"setEmailType","type":"void","javadoc":null},{"fullQualified":"public int getEmailStatus()","name":"getEmailStatus","type":"int","javadoc":null},{"fullQualified":"public void setEmailStatus(int emailStatus)","name":"setEmailStatus","type":"void","javadoc":null},{"fullQualified":"public String getEmailStatusMessage()","name":"getEmailStatusMessage","type":"String","javadoc":null},{"fullQualified":"public void setEmailStatusMessage(String emailStatusMessage)","name":"setEmailStatusMessage","type":"void","javadoc":null},{"fullQualified":"public void hideSensitiveInformation()","name":"hideSensitiveInformation","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public EmailSentLogDetails()","javadocComment":null}]},{"name":"ExceptionLogDetails","fullyQualifiedName":"teammates.common.datatransfer.logs.ExceptionLogDetails","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getExceptionClass()","name":"getExceptionClass","type":"String","javadoc":null},{"fullQualified":"public void setExceptionClass(String exceptionClass)","name":"setExceptionClass","type":"void","javadoc":null},{"fullQualified":"public List<String> getExceptionClasses()","name":"getExceptionClasses","type":"List<String>","javadoc":null},{"fullQualified":"public void setExceptionClasses(List<String> exceptionClasses)","name":"setExceptionClasses","type":"void","javadoc":null},{"fullQualified":"public List<List<String>> getExceptionStackTraces()","name":"getExceptionStackTraces","type":"List<List<String>>","javadoc":null},{"fullQualified":"public void setExceptionStackTraces(List<List<String>> exceptionStackTraces)","name":"setExceptionStackTraces","type":"void","javadoc":null},{"fullQualified":"public List<String> getExceptionMessages()","name":"getExceptionMessages","type":"List<String>","javadoc":null},{"fullQualified":"public void setExceptionMessages(List<String> exceptionMessages)","name":"setExceptionMessages","type":"void","javadoc":null},{"fullQualified":"public SourceLocation getLoggerSourceLocation()","name":"getLoggerSourceLocation","type":"SourceLocation","javadoc":null},{"fullQualified":"public void setLoggerSourceLocation(SourceLocation loggerSourceLocation)","name":"setLoggerSourceLocation","type":"void","javadoc":null},{"fullQualified":"public void hideSensitiveInformation()","name":"hideSensitiveInformation","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public ExceptionLogDetails()","javadocComment":null}]},{"name":"FeedbackSessionAuditLogDetails","fullyQualifiedName":"teammates.common.datatransfer.logs.FeedbackSessionAuditLogDetails","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public String getStudentEmail()","name":"getStudentEmail","type":"String","javadoc":null},{"fullQualified":"public void setStudentEmail(String studentEmail)","name":"setStudentEmail","type":"void","javadoc":null},{"fullQualified":"public String getAccessType()","name":"getAccessType","type":"String","javadoc":null},{"fullQualified":"public void setAccessType(String accessType)","name":"setAccessType","type":"void","javadoc":null},{"fullQualified":"public void hideSensitiveInformation()","name":"hideSensitiveInformation","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSessionAuditLogDetails()","javadocComment":null}]},{"name":"GeneralLogEntry","fullyQualifiedName":"teammates.common.datatransfer.logs.GeneralLogEntry","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void setMessage(String message)","name":"setMessage","type":"void","javadoc":null},{"fullQualified":"public void setDetails(LogDetails details)","name":"setDetails","type":"void","javadoc":null},{"fullQualified":"public LogSeverity getSeverity()","name":"getSeverity","type":"LogSeverity","javadoc":null},{"fullQualified":"public String getTrace()","name":"getTrace","type":"String","javadoc":null},{"fullQualified":"public String getInsertId()","name":"getInsertId","type":"String","javadoc":null},{"fullQualified":"public Map<String, String> getResourceIdentifier()","name":"getResourceIdentifier","type":"Map<String,String>","javadoc":null},{"fullQualified":"public SourceLocation getSourceLocation()","name":"getSourceLocation","type":"SourceLocation","javadoc":null},{"fullQualified":"public long getTimestamp()","name":"getTimestamp","type":"long","javadoc":null},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null},{"fullQualified":"public LogDetails getDetails()","name":"getDetails","type":"LogDetails","javadoc":null}],"allConstructors":[{"identifier":"public GeneralLogEntry(LogSeverity severity, String trace, String insertId, Map<String, String> resourceIdentifier, SourceLocation sourceLocation, long timestamp)","javadocComment":null}]},{"name":"InstanceLogDetails","fullyQualifiedName":"teammates.common.datatransfer.logs.InstanceLogDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" no fields need to be hidden","lineNumber":33,"isOrphan":true}],"allMethods":[{"fullQualified":"public String getInstanceId()","name":"getInstanceId","type":"String","javadoc":null},{"fullQualified":"public void setInstanceId(String instanceId)","name":"setInstanceId","type":"void","javadoc":null},{"fullQualified":"public String getInstanceEvent()","name":"getInstanceEvent","type":"String","javadoc":null},{"fullQualified":"public void setInstanceEvent(String instanceEvent)","name":"setInstanceEvent","type":"void","javadoc":null},{"fullQualified":"public void hideSensitiveInformation()","name":"hideSensitiveInformation","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public InstanceLogDetails()","javadocComment":null}]},{"name":"LogDetails","fullyQualifiedName":"teammates.common.datatransfer.logs.LogDetails","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Hides sensitive, confidential information, particularly those that contain user information.\n     ","lineNumber":30,"isOrphan":false}],"allMethods":[{"fullQualified":"public LogEvent getEvent()","name":"getEvent","type":"LogEvent","javadoc":null},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null},{"fullQualified":"public void setMessage(String message)","name":"setMessage","type":"void","javadoc":null},{"fullQualified":"public abstract void hideSensitiveInformation()","name":"hideSensitiveInformation","type":"void","javadoc":"\n     * Hides sensitive, confidential information, particularly those that contain user information.\n     "}],"allConstructors":[{"identifier":"protected LogDetails(LogEvent event)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.common.datatransfer.logs.QueryLogsParams.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Builder withSeverityLevel(LogSeverity severityLevel)","name":"withSeverityLevel","type":"Builder","javadoc":null},{"fullQualified":"public Builder withMinSeverity(LogSeverity minSeverity)","name":"withMinSeverity","type":"Builder","javadoc":null},{"fullQualified":"public Builder withTraceId(String traceId)","name":"withTraceId","type":"Builder","javadoc":null},{"fullQualified":"public Builder withActionClass(String actionClass)","name":"withActionClass","type":"Builder","javadoc":null},{"fullQualified":"public Builder withUserInfo(RequestLogUser userInfoParams)","name":"withUserInfo","type":"Builder","javadoc":null},{"fullQualified":"public Builder withLogEvent(String logEvent)","name":"withLogEvent","type":"Builder","javadoc":null},{"fullQualified":"public Builder withSourceLocation(SourceLocation sourceLocation)","name":"withSourceLocation","type":"Builder","javadoc":null},{"fullQualified":"public Builder withExceptionClass(String exceptionClass)","name":"withExceptionClass","type":"Builder","javadoc":null},{"fullQualified":"public Builder withOrder(String order)","name":"withOrder","type":"Builder","javadoc":null},{"fullQualified":"public Builder withLatency(String latency)","name":"withLatency","type":"Builder","javadoc":null},{"fullQualified":"public Builder withStatus(String status)","name":"withStatus","type":"Builder","javadoc":null},{"fullQualified":"public Builder withVersion(String version)","name":"withVersion","type":"Builder","javadoc":null},{"fullQualified":"public Builder withExtraFilters(String extraFilters)","name":"withExtraFilters","type":"Builder","javadoc":null},{"fullQualified":"public Builder withPageSize(Integer pageSize)","name":"withPageSize","type":"Builder","javadoc":null},{"fullQualified":"public QueryLogsParams build()","name":"build","type":"QueryLogsParams","javadoc":null}],"allConstructors":[{"identifier":"private Builder(long startTime, long endTime)","javadocComment":null}]},{"name":"QueryLogsParams","fullyQualifiedName":"teammates.common.datatransfer.logs.QueryLogsParams","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns a builder for {@link QueryLogsParams}.\n     ","lineNumber":29,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Builder for {@link QueryLogsParams}.\n     ","lineNumber":100,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Builder builder(long startTime, long endTime)","name":"builder","type":"Builder","javadoc":"\n     * Returns a builder for {@link QueryLogsParams}.\n     "},{"fullQualified":"public LogSeverity getSeverity()","name":"getSeverity","type":"LogSeverity","javadoc":null},{"fullQualified":"public LogSeverity getMinSeverity()","name":"getMinSeverity","type":"LogSeverity","javadoc":null},{"fullQualified":"public long getStartTime()","name":"getStartTime","type":"long","javadoc":null},{"fullQualified":"public long getEndTime()","name":"getEndTime","type":"long","javadoc":null},{"fullQualified":"public String getTraceId()","name":"getTraceId","type":"String","javadoc":null},{"fullQualified":"public String getActionClass()","name":"getActionClass","type":"String","javadoc":null},{"fullQualified":"public RequestLogUser getUserInfoParams()","name":"getUserInfoParams","type":"RequestLogUser","javadoc":null},{"fullQualified":"public String getLogEvent()","name":"getLogEvent","type":"String","javadoc":null},{"fullQualified":"public SourceLocation getSourceLocation()","name":"getSourceLocation","type":"SourceLocation","javadoc":null},{"fullQualified":"public String getExceptionClass()","name":"getExceptionClass","type":"String","javadoc":null},{"fullQualified":"public String getLatency()","name":"getLatency","type":"String","javadoc":null},{"fullQualified":"public String getStatus()","name":"getStatus","type":"String","javadoc":null},{"fullQualified":"public String getVersion()","name":"getVersion","type":"String","javadoc":null},{"fullQualified":"public String getExtraFilters()","name":"getExtraFilters","type":"String","javadoc":null},{"fullQualified":"public String getOrder()","name":"getOrder","type":"String","javadoc":null},{"fullQualified":"public Integer getPageSize()","name":"getPageSize","type":"Integer","javadoc":null}],"allConstructors":[{"identifier":"private QueryLogsParams(long startTime, long endTime)","javadocComment":null}]},{"name":"RequestLogDetails","fullyQualifiedName":"teammates.common.datatransfer.logs.RequestLogDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" TODO remove nullable annotation 30 days after release of V8.2.1","lineNumber":24,"isOrphan":false},{"type":"LineComment","text":" Hide only the query parameters as the URL on its own is not sensitive","lineNumber":147,"isOrphan":false}],"allMethods":[{"fullQualified":"public int getResponseStatus()","name":"getResponseStatus","type":"int","javadoc":null},{"fullQualified":"public void setResponseStatus(int responseStatus)","name":"setResponseStatus","type":"void","javadoc":null},{"fullQualified":"public long getResponseTime()","name":"getResponseTime","type":"long","javadoc":null},{"fullQualified":"public void setResponseTime(long responseTime)","name":"setResponseTime","type":"void","javadoc":null},{"fullQualified":"public String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void setRequestMethod(String requestMethod)","name":"setRequestMethod","type":"void","javadoc":null},{"fullQualified":"public String getRequestUrl()","name":"getRequestUrl","type":"String","javadoc":null},{"fullQualified":"public void setRequestUrl(String requestUrl)","name":"setRequestUrl","type":"void","javadoc":null},{"fullQualified":"public String getInstanceId()","name":"getInstanceId","type":"String","javadoc":null},{"fullQualified":"public void setInstanceId(String instanceId)","name":"setInstanceId","type":"void","javadoc":null},{"fullQualified":"public String getWebVersion()","name":"getWebVersion","type":"String","javadoc":null},{"fullQualified":"public void setWebVersion(String webVersion)","name":"setWebVersion","type":"void","javadoc":null},{"fullQualified":"public String getReferrer()","name":"getReferrer","type":"String","javadoc":null},{"fullQualified":"public void setReferrer(String referrer)","name":"setReferrer","type":"void","javadoc":null},{"fullQualified":"public String getUserAgent()","name":"getUserAgent","type":"String","javadoc":null},{"fullQualified":"public void setUserAgent(String userAgent)","name":"setUserAgent","type":"void","javadoc":null},{"fullQualified":"public Map<String, Object> getRequestParams()","name":"getRequestParams","type":"Map<String,Object>","javadoc":null},{"fullQualified":"public void setRequestParams(Map<String, Object> requestParams)","name":"setRequestParams","type":"void","javadoc":null},{"fullQualified":"public Map<String, Object> getRequestHeaders()","name":"getRequestHeaders","type":"Map<String,Object>","javadoc":null},{"fullQualified":"public void setRequestHeaders(Map<String, Object> requestHeaders)","name":"setRequestHeaders","type":"void","javadoc":null},{"fullQualified":"public String getRequestBody()","name":"getRequestBody","type":"String","javadoc":null},{"fullQualified":"public void setRequestBody(String requestBody)","name":"setRequestBody","type":"void","javadoc":null},{"fullQualified":"public String getActionClass()","name":"getActionClass","type":"String","javadoc":null},{"fullQualified":"public void setActionClass(String actionClass)","name":"setActionClass","type":"void","javadoc":null},{"fullQualified":"public RequestLogUser getUserInfo()","name":"getUserInfo","type":"RequestLogUser","javadoc":null},{"fullQualified":"public void setUserInfo(RequestLogUser userInfo)","name":"setUserInfo","type":"void","javadoc":null},{"fullQualified":"public void hideSensitiveInformation()","name":"hideSensitiveInformation","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public RequestLogDetails()","javadocComment":null}]},{"name":"RequestLogUser","fullyQualifiedName":"teammates.common.datatransfer.logs.RequestLogUser","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getRegkey()","name":"getRegkey","type":"String","javadoc":null},{"fullQualified":"public void setRegkey(String regkey)","name":"setRegkey","type":"void","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String googleId)","name":"setGoogleId","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SourceLocation","fullyQualifiedName":"teammates.common.datatransfer.logs.SourceLocation","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getFile()","name":"getFile","type":"String","javadoc":null},{"fullQualified":"public Long getLine()","name":"getLine","type":"Long","javadoc":null},{"fullQualified":"public String getFunction()","name":"getFunction","type":"String","javadoc":null},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public SourceLocation(String file, Long line, String function)","javadocComment":null}]},{"name":"QueryLogsResults","fullyQualifiedName":"teammates.common.datatransfer.QueryLogsResults","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<GeneralLogEntry> getLogEntries()","name":"getLogEntries","type":"List<GeneralLogEntry>","javadoc":null},{"fullQualified":"public boolean getHasNextPage()","name":"getHasNextPage","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public QueryLogsResults(List<GeneralLogEntry> logEntries, boolean hasNextPage)","javadocComment":null}]},{"name":"FeedbackConstantSumQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" Return an error if any response is erroneous","lineNumber":135,"isOrphan":false},{"type":"LineComment","text":" Distribute to recipient must have array size one","lineNumber":152,"isOrphan":false},{"type":"LineComment","text":" Return an error if any response is erroneous","lineNumber":156,"isOrphan":false},{"type":"LineComment","text":" Check that all points are >= 0","lineNumber":171,"isOrphan":false},{"type":"LineComment","text":" Check that points sum up properly","lineNumber":182,"isOrphan":false},{"type":"LineComment","text":" Check that points are given unevenly for all/at least some options as per the question settings","lineNumber":188,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":null},{"fullQualified":"public List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":null},{"fullQualified":"private List<String> getErrorsForConstSumOptions(List<FeedbackResponseDetails> responses, int totalPoints)","name":"getErrorsForConstSumOptions","type":"List<String>","javadoc":null},{"fullQualified":"private List<String> getErrorsForConstSumRecipients(List<FeedbackResponseDetails> responses, int totalPoints)","name":"getErrorsForConstSumRecipients","type":"List<String>","javadoc":null},{"fullQualified":"private List<String> getErrors(List<Integer> givenPoints, int totalPoints)","name":"getErrors","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":null},{"fullQualified":"public int getNumOfConstSumOptions()","name":"getNumOfConstSumOptions","type":"int","javadoc":null},{"fullQualified":"public List<String> getConstSumOptions()","name":"getConstSumOptions","type":"List<String>","javadoc":null},{"fullQualified":"public void setConstSumOptions(List<String> constSumOptions)","name":"setConstSumOptions","type":"void","javadoc":null},{"fullQualified":"public boolean isDistributeToRecipients()","name":"isDistributeToRecipients","type":"boolean","javadoc":null},{"fullQualified":"public void setDistributeToRecipients(boolean distributeToRecipients)","name":"setDistributeToRecipients","type":"void","javadoc":null},{"fullQualified":"public boolean isPointsPerOption()","name":"isPointsPerOption","type":"boolean","javadoc":null},{"fullQualified":"public void setPointsPerOption(boolean pointsPerOption)","name":"setPointsPerOption","type":"void","javadoc":null},{"fullQualified":"public boolean isForceUnevenDistribution()","name":"isForceUnevenDistribution","type":"boolean","javadoc":null},{"fullQualified":"public void setForceUnevenDistribution(boolean forceUnevenDistribution)","name":"setForceUnevenDistribution","type":"void","javadoc":null},{"fullQualified":"public String getDistributePointsFor()","name":"getDistributePointsFor","type":"String","javadoc":null},{"fullQualified":"public void setDistributePointsFor(String distributePointsFor)","name":"setDistributePointsFor","type":"void","javadoc":null},{"fullQualified":"public int getPoints()","name":"getPoints","type":"int","javadoc":null},{"fullQualified":"public void setPoints(int points)","name":"setPoints","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackConstantSumQuestionDetails()","javadocComment":null},{"identifier":"public FeedbackConstantSumQuestionDetails(String questionText)","javadocComment":null}]},{"name":"FeedbackConstantSumResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackConstantSumResponseDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":"[1, 2, 3] format","lineNumber":19,"isOrphan":false},{"type":"LineComment","text":"remove []","lineNumber":20,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getAnswerString()","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"public List<Integer> getAnswers()","name":"getAnswers","type":"List<Integer>","javadoc":null},{"fullQualified":"public void setAnswers(List<Integer> answers)","name":"setAnswers","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackConstantSumResponseDetails()","javadocComment":null}]},{"name":"ContributionStatistics","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackContributionQuestionDetails.ContributionStatistics","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Map<String, ContributionStatisticsEntry> getResults()","name":"getResults","type":"Map<String,ContributionStatisticsEntry>","javadoc":null}],"allConstructors":[]},{"name":"ContributionStatisticsEntry","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackContributionQuestionDetails.ContributionStatisticsEntry","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public int getClaimed()","name":"getClaimed","type":"int","javadoc":null},{"fullQualified":"public int getPerceived()","name":"getPerceived","type":"int","javadoc":null},{"fullQualified":"public Map<String, Integer> getClaimedOthers()","name":"getClaimedOthers","type":"Map<String,Integer>","javadoc":null},{"fullQualified":"public int[] getPerceivedOthers()","name":"getPerceivedOthers","type":"int[]","javadoc":null}],"allConstructors":[{"identifier":"public ContributionStatisticsEntry(int claimed, int perceived, Map<String, Integer> claimedOthers, int[] perceivedOthers)","javadocComment":null}]},{"name":"FeedbackContributionQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackContributionQuestionDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" Get each team's submission array. -> int[teamSize][teamSize]","lineNumber":89,"isOrphan":true},{"type":"LineComment","text":" Where int[0][1] refers points from student 0 to student 1","lineNumber":90,"isOrphan":true},{"type":"LineComment","text":" Each team's member (email) list","lineNumber":83,"isOrphan":false},{"type":"LineComment","text":" Each team's responses","lineNumber":86,"isOrphan":false},{"type":"LineComment","text":" Where student 0 is the 0th student in the list in teamMembersEmail","lineNumber":91,"isOrphan":false},{"type":"LineComment","text":" Each team's contribution question results.","lineNumber":94,"isOrphan":false},{"type":"LineComment","text":"Initialize all as not submitted.","lineNumber":197,"isOrphan":false},{"type":"LineComment","text":"Fill in submitted points","lineNumber":203,"isOrphan":false},{"type":"LineComment","text":" Valid answers: 0, 5, 10, 15, .... 190, 195, 200","lineNumber":269,"isOrphan":false},{"type":"LineComment","text":" giver type can only be STUDENTS","lineNumber":291,"isOrphan":false},{"type":"LineComment","text":" recipient type can only be OWN_TEAM_MEMBERS_INCLUDING_SELF","lineNumber":299,"isOrphan":false},{"type":"LineComment","text":" restrictions on visibility options","lineNumber":308,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents a list of participants to their question statistics for one contribution question.\n     ","lineNumber":345,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents the statistics of one feedback participant in one contribution question.\n     *\n     * <p>This class is a container for some representative values from {@link TeamEvalResult}.\n     *\n     * @see TeamEvalResult\n     ","lineNumber":356,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":null},{"fullQualified":"public boolean isIndividualResponsesShownToStudents()","name":"isIndividualResponsesShownToStudents","type":"boolean","javadoc":null},{"fullQualified":"public String getQuestionResultStatisticsJson(FeedbackQuestionAttributes question, String studentEmail, SessionResultsBundle bundle)","name":"getQuestionResultStatisticsJson","type":"String","javadoc":null},{"fullQualified":"private Map<String, int[]> getStudentResults(Map<String, List<String>> teamMembersEmail, Map<String, TeamEvalResult> teamResults)","name":"getStudentResults","type":"Map<String,int[]>","javadoc":null},{"fullQualified":"private Map<String, TeamEvalResult> getTeamResults(List<String> teamNames, Map<String, int[][]> teamSubmissionArray)","name":"getTeamResults","type":"Map<String,TeamEvalResult>","javadoc":null},{"fullQualified":"private Map<String, int[][]> getTeamSubmissionArray(List<String> teamNames, Map<String, List<String>> teamMembersEmail, Map<String, List<FeedbackResponseAttributes>> teamResponses)","name":"getTeamSubmissionArray","type":"Map<String,int[][]>","javadoc":null},{"fullQualified":"private Map<String, List<FeedbackResponseAttributes>> getTeamResponses(List<FeedbackResponseAttributes> responses, SessionResultsBundle bundle, List<String> teamNames)","name":"getTeamResponses","type":"Map<String,List<FeedbackResponseAttributes>>","javadoc":null},{"fullQualified":"private Map<String, List<String>> getTeamMembersEmail(SessionResultsBundle bundle, List<String> teamNames)","name":"getTeamMembersEmail","type":"Map<String,List<String>>","javadoc":null},{"fullQualified":"private List<String> getTeamsWithAtLeastOneResponse(List<FeedbackResponseAttributes> responses, SessionResultsBundle bundle)","name":"getTeamsWithAtLeastOneResponse","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":null},{"fullQualified":"public String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":null},{"fullQualified":"public boolean isInstructorCommentsOnResponsesAllowed()","name":"isInstructorCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public boolean isNotSureAllowed()","name":"isNotSureAllowed","type":"boolean","javadoc":null},{"fullQualified":"public void setNotSureAllowed(boolean notSureAllowed)","name":"setNotSureAllowed","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackContributionQuestionDetails()","javadocComment":null},{"identifier":"public FeedbackContributionQuestionDetails(String questionText)","javadocComment":null}]},{"name":"FeedbackContributionResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackContributionResponseDetails","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * This is the claimed points from giver to recipient.\n     ","lineNumber":10,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getAnswerString()","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"public int getAnswer()","name":"getAnswer","type":"int","javadoc":null},{"fullQualified":"public void setAnswer(int answer)","name":"setAnswer","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackContributionResponseDetails()","javadocComment":null}]},{"name":"FeedbackMcqQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" If weights are enabled, number of choices and weights should be same.","lineNumber":81,"isOrphan":true},{"type":"LineComment","text":" If user enters an invalid weight for a valid choice,","lineNumber":82,"isOrphan":true},{"type":"LineComment","text":" the mcqChoices.size() will be greater than mcqWeights.size(),","lineNumber":83,"isOrphan":true},{"type":"LineComment","text":" If weights are not enabled, but weight list is not empty or otherWeight is not 0","lineNumber":89,"isOrphan":true},{"type":"LineComment","text":" If weights are enabled, but other option is disabled, and mcqOtherWeight is not 0","lineNumber":95,"isOrphan":true},{"type":"LineComment","text":" If weights are enabled, and any of the weights have negative value,","lineNumber":101,"isOrphan":true},{"type":"LineComment","text":" If 'Other' option is enabled, and other weight has negative value,","lineNumber":109,"isOrphan":true},{"type":"LineComment","text":" If there are Empty Mcq options entered trigger this error","lineNumber":75,"isOrphan":false},{"type":"LineComment","text":" in that case, trigger this error.","lineNumber":84,"isOrphan":false},{"type":"LineComment","text":" In that case, trigger this error.","lineNumber":90,"isOrphan":false},{"type":"LineComment","text":" In that case, trigger this error.","lineNumber":96,"isOrphan":false},{"type":"LineComment","text":" trigger this error.","lineNumber":102,"isOrphan":false},{"type":"LineComment","text":" trigger this error.","lineNumber":110,"isOrphan":false},{"type":"LineComment","text":"If there are duplicate mcq options trigger this error","lineNumber":115,"isOrphan":false},{"type":"LineComment","text":" if other option is not selected and selected answer is not part of Mcq option list trigger this error.","lineNumber":133,"isOrphan":false},{"type":"LineComment","text":" if other option is selected but not text is provided trigger this error","lineNumber":138,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":null},{"fullQualified":"public List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":null},{"fullQualified":"public boolean isHasAssignedWeights()","name":"isHasAssignedWeights","type":"boolean","javadoc":null},{"fullQualified":"public void setHasAssignedWeights(boolean hasAssignedWeights)","name":"setHasAssignedWeights","type":"void","javadoc":null},{"fullQualified":"public List<Double> getMcqWeights()","name":"getMcqWeights","type":"List<Double>","javadoc":null},{"fullQualified":"public void setMcqWeights(List<Double> mcqWeights)","name":"setMcqWeights","type":"void","javadoc":null},{"fullQualified":"public double getMcqOtherWeight()","name":"getMcqOtherWeight","type":"double","javadoc":null},{"fullQualified":"public void setMcqOtherWeight(double mcqOtherWeight)","name":"setMcqOtherWeight","type":"void","javadoc":null},{"fullQualified":"public int getNumOfMcqChoices()","name":"getNumOfMcqChoices","type":"int","javadoc":null},{"fullQualified":"public List<String> getMcqChoices()","name":"getMcqChoices","type":"List<String>","javadoc":null},{"fullQualified":"public void setMcqChoices(List<String> mcqChoices)","name":"setMcqChoices","type":"void","javadoc":null},{"fullQualified":"public boolean isOtherEnabled()","name":"isOtherEnabled","type":"boolean","javadoc":null},{"fullQualified":"public void setOtherEnabled(boolean otherEnabled)","name":"setOtherEnabled","type":"void","javadoc":null},{"fullQualified":"public FeedbackParticipantType getGenerateOptionsFor()","name":"getGenerateOptionsFor","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public void setGenerateOptionsFor(FeedbackParticipantType generateOptionsFor)","name":"setGenerateOptionsFor","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackMcqQuestionDetails()","javadocComment":null},{"identifier":"public FeedbackMcqQuestionDetails(String questionText)","javadocComment":null}]},{"name":"FeedbackMcqResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackMcqResponseDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":"content of other field if \"other\" is selected as the answer","lineNumber":9,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getAnswerString()","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"public String getAnswer()","name":"getAnswer","type":"String","javadoc":null},{"fullQualified":"public void setAnswer(String answer)","name":"setAnswer","type":"void","javadoc":null},{"fullQualified":"public boolean isOther()","name":"isOther","type":"boolean","javadoc":null},{"fullQualified":"public void setOther(boolean other)","name":"setOther","type":"void","javadoc":null},{"fullQualified":"public String getOtherFieldContent()","name":"getOtherFieldContent","type":"String","javadoc":null},{"fullQualified":"public void setOtherFieldContent(String otherFieldContent)","name":"setOtherFieldContent","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackMcqResponseDetails()","javadocComment":null}]},{"name":"FeedbackMsqQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" Delete responses if max selectable restriction is newly added","lineNumber":86,"isOrphan":false},{"type":"LineComment","text":" Delete responses if min selectable restriction is newly added","lineNumber":92,"isOrphan":false},{"type":"LineComment","text":" A more strict min selectable choices restriction is placed","lineNumber":99,"isOrphan":false},{"type":"LineComment","text":" A more strict max selectable choices restriction is placed","lineNumber":106,"isOrphan":false},{"type":"LineComment","text":" If weights are enabled, number of choices and weights should be same.","lineNumber":129,"isOrphan":true},{"type":"LineComment","text":" If a user enters an invalid weight for a valid choice,","lineNumber":130,"isOrphan":true},{"type":"LineComment","text":" the msqChoices.size() will be greater than msqWeights.size(), in that case","lineNumber":131,"isOrphan":true},{"type":"LineComment","text":" If weights are not enabled, but weight list is not empty or otherWeight is not 0","lineNumber":137,"isOrphan":true},{"type":"LineComment","text":" If weight is enabled, but other option is disabled, and msqOtherWeight is not 0","lineNumber":143,"isOrphan":true},{"type":"LineComment","text":" If 'Other' option is enabled, and other weight has negative value,","lineNumber":156,"isOrphan":true},{"type":"LineComment","text":" If there are Empty Msq options entered trigger this error","lineNumber":123,"isOrphan":false},{"type":"LineComment","text":" trigger this error.","lineNumber":132,"isOrphan":false},{"type":"LineComment","text":" In that case, trigger this error.","lineNumber":138,"isOrphan":false},{"type":"LineComment","text":" In that case, trigger this error.","lineNumber":144,"isOrphan":false},{"type":"LineComment","text":" If weights are negative, trigger this error.","lineNumber":149,"isOrphan":false},{"type":"LineComment","text":" trigger this error.","lineNumber":157,"isOrphan":false},{"type":"LineComment","text":"If there are duplicate mcq options trigger this error","lineNumber":162,"isOrphan":false},{"type":"LineComment","text":" number of Msq options selected including other option","lineNumber":207,"isOrphan":false},{"type":"LineComment","text":" if other is not enabled and other is selected as an answer trigger this error","lineNumber":214,"isOrphan":false},{"type":"LineComment","text":" if other is not chosen while other field is not empty trigger this error","lineNumber":219,"isOrphan":false},{"type":"LineComment","text":" other field content becomes a valid choice if other is enabled","lineNumber":226,"isOrphan":false},{"type":"LineComment","text":" if selected answers are not a part of the Msq option list trigger this error","lineNumber":229,"isOrphan":false},{"type":"LineComment","text":" if other option is selected but no text is provided trigger this error","lineNumber":235,"isOrphan":false},{"type":"LineComment","text":" if other option is selected but not in the answer list trigger this error","lineNumber":240,"isOrphan":false},{"type":"LineComment","text":" if total choices selected exceed maximum choices allowed trigger this error","lineNumber":245,"isOrphan":false},{"type":"LineComment","text":" if total choices selected is less than the minimum required choices","lineNumber":251,"isOrphan":false},{"type":"LineComment","text":" if minimumSelectableChoices is enabled and None of the Above is selected as an answer trigger this error","lineNumber":255,"isOrphan":false},{"type":"LineComment","text":" if none of the above is selected AND other options are selected trigger this error","lineNumber":260,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":null},{"fullQualified":"public List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":null},{"fullQualified":"public List<String> getMsqChoices()","name":"getMsqChoices","type":"List<String>","javadoc":null},{"fullQualified":"public void setMsqChoices(List<String> msqChoices)","name":"setMsqChoices","type":"void","javadoc":null},{"fullQualified":"public boolean isOtherEnabled()","name":"isOtherEnabled","type":"boolean","javadoc":null},{"fullQualified":"public void setOtherEnabled(boolean otherEnabled)","name":"setOtherEnabled","type":"void","javadoc":null},{"fullQualified":"public boolean isHasAssignedWeights()","name":"isHasAssignedWeights","type":"boolean","javadoc":null},{"fullQualified":"public void setHasAssignedWeights(boolean hasAssignedWeights)","name":"setHasAssignedWeights","type":"void","javadoc":null},{"fullQualified":"public List<Double> getMsqWeights()","name":"getMsqWeights","type":"List<Double>","javadoc":null},{"fullQualified":"public void setMsqWeights(List<Double> msqWeights)","name":"setMsqWeights","type":"void","javadoc":null},{"fullQualified":"public double getMsqOtherWeight()","name":"getMsqOtherWeight","type":"double","javadoc":null},{"fullQualified":"public void setMsqOtherWeight(double msqOtherWeight)","name":"setMsqOtherWeight","type":"void","javadoc":null},{"fullQualified":"public FeedbackParticipantType getGenerateOptionsFor()","name":"getGenerateOptionsFor","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public void setGenerateOptionsFor(FeedbackParticipantType generateOptionsFor)","name":"setGenerateOptionsFor","type":"void","javadoc":null},{"fullQualified":"public int getMaxSelectableChoices()","name":"getMaxSelectableChoices","type":"int","javadoc":null},{"fullQualified":"public void setMaxSelectableChoices(int maxSelectableChoices)","name":"setMaxSelectableChoices","type":"void","javadoc":null},{"fullQualified":"public int getMinSelectableChoices()","name":"getMinSelectableChoices","type":"int","javadoc":null},{"fullQualified":"public void setMinSelectableChoices(int minSelectableChoices)","name":"setMinSelectableChoices","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackMsqQuestionDetails()","javadocComment":null},{"identifier":"public FeedbackMsqQuestionDetails(String questionText)","javadocComment":null}]},{"name":"FeedbackMsqResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackMsqResponseDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" answers contain the \"other\" answer, if any","lineNumber":12,"isOrphan":false},{"type":"LineComment","text":"content of other field if \"other\" is selected as the answer","lineNumber":14,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getAnswerString()","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"public List<String> getAnswers()","name":"getAnswers","type":"List<String>","javadoc":null},{"fullQualified":"public void setAnswers(List<String> answers)","name":"setAnswers","type":"void","javadoc":null},{"fullQualified":"public boolean isOther()","name":"isOther","type":"boolean","javadoc":null},{"fullQualified":"public void setOther(boolean other)","name":"setOther","type":"void","javadoc":null},{"fullQualified":"public String getOtherFieldContent()","name":"getOtherFieldContent","type":"String","javadoc":null},{"fullQualified":"public void setOtherFieldContent(String otherFieldContent)","name":"setOtherFieldContent","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackMsqResponseDetails()","javadocComment":null}]},{"name":"FeedbackNumericalScaleQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" out of range","lineNumber":65,"isOrphan":false},{"type":"LineComment","text":" when the answer is within range but not one of the possible values","lineNumber":72,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":null},{"fullQualified":"public List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":null},{"fullQualified":"public int getMinScale()","name":"getMinScale","type":"int","javadoc":null},{"fullQualified":"public void setMinScale(int minScale)","name":"setMinScale","type":"void","javadoc":null},{"fullQualified":"public int getMaxScale()","name":"getMaxScale","type":"int","javadoc":null},{"fullQualified":"public void setMaxScale(int maxScale)","name":"setMaxScale","type":"void","javadoc":null},{"fullQualified":"public double getStep()","name":"getStep","type":"double","javadoc":null},{"fullQualified":"public void setStep(double step)","name":"setStep","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackNumericalScaleQuestionDetails()","javadocComment":null},{"identifier":"public FeedbackNumericalScaleQuestionDetails(String questionText)","javadocComment":null}]},{"name":"FeedbackNumericalScaleResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackNumericalScaleResponseDetails","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getAnswerString()","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"public double getAnswer()","name":"getAnswer","type":"double","javadoc":null},{"fullQualified":"public void setAnswer(double answer)","name":"setAnswer","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackNumericalScaleResponseDetails()","javadocComment":null}]},{"name":"FeedbackQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackQuestionDetails","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Get question result statistics as JSON string.\n     ","lineNumber":30,"isOrphan":false},{"type":"LineComment","text":" Statistics are calculated in the front-end as it is dependent on the responses being filtered.","lineNumber":36,"isOrphan":true},{"type":"LineComment","text":" The only exception is contribution question, where there is only one statistics for the entire question.","lineNumber":37,"isOrphan":true},{"type":"LineComment","text":" It is also necessary to calculate contribution question statistics here","lineNumber":38,"isOrphan":true},{"type":"LineComment","text":" to be displayed in student result page as students are not supposed to be able to see the exact responses.","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether the changes to the question details require deletion of corresponding responses.\n     ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Individual responses are shown by default.\n     * Override for specific question types if necessary.\n     *\n     * @return boolean indicating if individual responses are to be shown to students.\n     ","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Validates the question details.\n     * @return A {@code List<String>} of error messages (to show as status message to user) if any, or an\n     *         empty list if question details are valid.\n     ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Validates the list of response details.\n     * @return A {@code List<String>} of error messages (to show as status message to user) if any, or an\n     *         empty list if all response details are valid.\n     ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Validates if giverType and recipientType are valid for the question type.\n     * Validates visibility options as well.\n     *\n     * <p>Override in Feedback*QuestionDetails if necessary.\n     * @return error message detailing the error, or an empty string if valid.\n     ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether instructor comments are allowed for the question.\n     ","lineNumber":81,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether participant comments are allowed for the question.\n     ","lineNumber":88,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether missing responses should be generated.\n     ","lineNumber":93,"isOrphan":false},{"type":"LineComment","text":" generate combinations against all students/teams are meaningless","lineNumber":97,"isOrphan":false},{"type":"LineComment","text":" Json string contains all attributes of a `FeedbackQuestionDetails` object,","lineNumber":114,"isOrphan":true},{"type":"LineComment","text":" so it is sufficient to use it to compare two `FeedbackQuestionDetails` objects.","lineNumber":115,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a JSON string representation of the question details.\n     ","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a deep copy of the question details.\n     ","lineNumber":133,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getQuestionResultStatisticsJson(FeedbackQuestionAttributes question, String studentEmail, SessionResultsBundle bundle)","name":"getQuestionResultStatisticsJson","type":"String","javadoc":"\n     * Get question result statistics as JSON string.\n     "},{"fullQualified":"public abstract boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":"\n     * Checks whether the changes to the question details require deletion of corresponding responses.\n     "},{"fullQualified":"public boolean isIndividualResponsesShownToStudents()","name":"isIndividualResponsesShownToStudents","type":"boolean","javadoc":"\n     * Individual responses are shown by default.\n     * Override for specific question types if necessary.\n     *\n     * @return boolean indicating if individual responses are to be shown to students.\n     "},{"fullQualified":"public abstract List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":"\n     * Validates the question details.\n     * @return A {@code List<String>} of error messages (to show as status message to user) if any, or an\n     *         empty list if question details are valid.\n     "},{"fullQualified":"public abstract List<String> validateResponsesDetails(List<FeedbackResponseDetails> responseDetails, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":"\n     * Validates the list of response details.\n     * @return A {@code List<String>} of error messages (to show as status message to user) if any, or an\n     *         empty list if all response details are valid.\n     "},{"fullQualified":"public abstract String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":"\n     * Validates if giverType and recipientType are valid for the question type.\n     * Validates visibility options as well.\n     *\n     * <p>Override in Feedback*QuestionDetails if necessary.\n     * @return error message detailing the error, or an empty string if valid.\n     "},{"fullQualified":"public boolean isInstructorCommentsOnResponsesAllowed()","name":"isInstructorCommentsOnResponsesAllowed","type":"boolean","javadoc":"\n     * Checks whether instructor comments are allowed for the question.\n     "},{"fullQualified":"public abstract boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":"\n     * Checks whether participant comments are allowed for the question.\n     "},{"fullQualified":"public boolean shouldGenerateMissingResponses(FeedbackQuestionAttributes question)","name":"shouldGenerateMissingResponses","type":"boolean","javadoc":"\n     * Checks whether missing responses should be generated.\n     "},{"fullQualified":"public boolean equals(Object obj)","name":"equals","type":"boolean","javadoc":null},{"fullQualified":"public int hashCode()","name":"hashCode","type":"int","javadoc":null},{"fullQualified":"public String getJsonString()","name":"getJsonString","type":"String","javadoc":"\n     * Returns a JSON string representation of the question details.\n     "},{"fullQualified":"public FeedbackQuestionDetails getDeepCopy()","name":"getDeepCopy","type":"FeedbackQuestionDetails","javadoc":"\n     * Returns a deep copy of the question details.\n     "},{"fullQualified":"public FeedbackQuestionType getQuestionType()","name":"getQuestionType","type":"FeedbackQuestionType","javadoc":null},{"fullQualified":"public void setQuestionType(FeedbackQuestionType questionType)","name":"setQuestionType","type":"void","javadoc":null},{"fullQualified":"public String getQuestionText()","name":"getQuestionText","type":"String","javadoc":null},{"fullQualified":"public void setQuestionText(String questionText)","name":"setQuestionText","type":"void","javadoc":null}],"allConstructors":[{"identifier":"protected FeedbackQuestionDetails(FeedbackQuestionType questionType)","javadocComment":null},{"identifier":"protected FeedbackQuestionDetails(FeedbackQuestionType questionType, String questionText)","javadocComment":null}]},{"name":"FeedbackRankOptionsQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" if duplicate ranks are not allowed but have been assigned trigger this error","lineNumber":105,"isOrphan":false},{"type":"LineComment","text":" if number of options ranked is less than the minimum required trigger this error","lineNumber":109,"isOrphan":false},{"type":"LineComment","text":" if number of options ranked is more than the maximum possible trigger this error","lineNumber":113,"isOrphan":false},{"type":"LineComment","text":" if rank assigned is invalid trigger this error","lineNumber":117,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":null},{"fullQualified":"public List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":null},{"fullQualified":"public List<String> getOptions()","name":"getOptions","type":"List<String>","javadoc":null},{"fullQualified":"public void setOptions(List<String> options)","name":"setOptions","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackRankOptionsQuestionDetails()","javadocComment":null},{"identifier":"public FeedbackRankOptionsQuestionDetails(String questionText)","javadocComment":null}]},{"name":"FeedbackRankOptionsResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns List of sorted answers, with uninitialised values filtered out.\n     ","lineNumber":19,"isOrphan":false},{"type":"LineComment","text":"[1, 2, 3] format","lineNumber":37,"isOrphan":false},{"type":"LineComment","text":"remove []","lineNumber":38,"isOrphan":false}],"allMethods":[{"fullQualified":"public List<Integer> getFilteredSortedAnswerList()","name":"getFilteredSortedAnswerList","type":"List<Integer>","javadoc":"\n     * Returns List of sorted answers, with uninitialised values filtered out.\n     "},{"fullQualified":"public String getAnswerString()","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"public List<Integer> getAnswers()","name":"getAnswers","type":"List<Integer>","javadoc":null},{"fullQualified":"public void setAnswers(List<Integer> answers)","name":"setAnswers","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackRankOptionsResponseDetails()","javadocComment":null}]},{"name":"FeedbackRankQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRankQuestionDetails","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public int getMinOptionsToBeRanked()","name":"getMinOptionsToBeRanked","type":"int","javadoc":null},{"fullQualified":"public void setMinOptionsToBeRanked(int minOptionsToBeRanked)","name":"setMinOptionsToBeRanked","type":"void","javadoc":null},{"fullQualified":"public int getMaxOptionsToBeRanked()","name":"getMaxOptionsToBeRanked","type":"int","javadoc":null},{"fullQualified":"public void setMaxOptionsToBeRanked(int maxOptionsToBeRanked)","name":"setMaxOptionsToBeRanked","type":"void","javadoc":null},{"fullQualified":"public boolean isAreDuplicatesAllowed()","name":"isAreDuplicatesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public void setAreDuplicatesAllowed(boolean areDuplicatesAllowed)","name":"setAreDuplicatesAllowed","type":"void","javadoc":null}],"allConstructors":[{"identifier":" FeedbackRankQuestionDetails(FeedbackQuestionType questionType, String questionText)","javadocComment":null}]},{"name":"FeedbackRankRecipientsQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRankRecipientsQuestionDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" if number of options ranked is less than the minimum required trigger this error","lineNumber":52,"isOrphan":false},{"type":"LineComment","text":" if number of options ranked is more than the maximum possible trigger this error","lineNumber":56,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":null},{"fullQualified":"public List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackRankRecipientsQuestionDetails()","javadocComment":null},{"identifier":"public FeedbackRankRecipientsQuestionDetails(String questionText)","javadocComment":null}]},{"name":"FeedbackRankRecipientsResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRankRecipientsResponseDetails","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getAnswerString()","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"public int getAnswer()","name":"getAnswer","type":"int","javadoc":null},{"fullQualified":"public void setAnswer(int answer)","name":"setAnswer","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackRankRecipientsResponseDetails()","javadocComment":null}]},{"name":"FeedbackResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackResponseDetails","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns a string representation of the response.\n     ","lineNumber":20,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a JSON string representation of the response details.\n     ","lineNumber":25,"isOrphan":false},{"type":"LineComment","text":" For Text questions, the answer simply contains the response text, not a JSON","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a deep copy of the response details.\n     ","lineNumber":37,"isOrphan":false}],"allMethods":[{"fullQualified":"public abstract String getAnswerString()","name":"getAnswerString","type":"String","javadoc":"\n     * Returns a string representation of the response.\n     "},{"fullQualified":"public String getJsonString()","name":"getJsonString","type":"String","javadoc":"\n     * Returns a JSON string representation of the response details.\n     "},{"fullQualified":"public FeedbackResponseDetails getDeepCopy()","name":"getDeepCopy","type":"FeedbackResponseDetails","javadoc":"\n     * Returns a deep copy of the response details.\n     "},{"fullQualified":"public void setQuestionType(FeedbackQuestionType questionType)","name":"setQuestionType","type":"void","javadoc":null},{"fullQualified":"public FeedbackQuestionType getQuestionType()","name":"getQuestionType","type":"FeedbackQuestionType","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackResponseDetails(FeedbackQuestionType questionType)","javadocComment":null}]},{"name":"FeedbackRubricQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Checks if the dimensions of rubricDescription is valid according\n     * to size of rubricSubQuestions and size of rubricChoices.\n     ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the dimensions of rubricWeightsForEachCell is valid according\n     * to size of rubricSubQuestions and size of rubricChoices.\n     ","lineNumber":66,"isOrphan":false},{"type":"LineComment","text":" TODO: need to check for exact match.","lineNumber":80,"isOrphan":true},{"type":"LineComment","text":" Responses require deletion if choices change","lineNumber":82,"isOrphan":false},{"type":"LineComment","text":" Responses require deletion if sub-questions change","lineNumber":87,"isOrphan":false},{"type":"LineComment","text":" For rubric questions,","lineNumber":95,"isOrphan":true},{"type":"LineComment","text":" 1) Description size should be valid","lineNumber":96,"isOrphan":true},{"type":"LineComment","text":" 2) At least 2 choices","lineNumber":97,"isOrphan":true},{"type":"LineComment","text":" 3) At least 1 sub-question","lineNumber":98,"isOrphan":true},{"type":"LineComment","text":" 4) Choices and sub-questions should not be empty","lineNumber":99,"isOrphan":true},{"type":"LineComment","text":" 5) Weights must be assigned to all cells if weights are assigned, which means","lineNumber":100,"isOrphan":true},{"type":"LineComment","text":"    weight size should be equal to (rubricChoices.size() * rubricSubQuestions.size()).","lineNumber":101,"isOrphan":true},{"type":"LineComment","text":"Rubric choices are now allowed to be empty.","lineNumber":121,"isOrphan":true},{"type":"BlockComment","text":"\n        for (String choice : this.rubricChoices) {\n            if (choice.trim().isEmpty()) {\n                errors.add(ERROR_RUBRIC_EMPTY_CHOICE);\n                break;\n            }\n        }\n        ","lineNumber":122,"isOrphan":true},{"type":"LineComment","text":" This should not happen.","lineNumber":106,"isOrphan":true},{"type":"LineComment","text":" Set descriptions to empty if the sizes are invalid when extracting question details.","lineNumber":107,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of rubric weights if the weights are assigned,\n     * otherwise returns an empty list.\n     ","lineNumber":184,"isOrphan":false}],"allMethods":[{"fullQualified":"private boolean isValidDescriptionSize()","name":"isValidDescriptionSize","type":"boolean","javadoc":"\n     * Checks if the dimensions of rubricDescription is valid according\n     * to size of rubricSubQuestions and size of rubricChoices.\n     "},{"fullQualified":"private boolean isValidWeightSize()","name":"isValidWeightSize","type":"boolean","javadoc":"\n     * Checks if the dimensions of rubricWeightsForEachCell is valid according\n     * to size of rubricSubQuestions and size of rubricChoices.\n     "},{"fullQualified":"public boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":null},{"fullQualified":"public List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":null},{"fullQualified":"public List<List<Double>> getRubricWeights()","name":"getRubricWeights","type":"List<List<Double>>","javadoc":"\n     * Returns a list of rubric weights if the weights are assigned,\n     * otherwise returns an empty list.\n     "},{"fullQualified":"public boolean isHasAssignedWeights()","name":"isHasAssignedWeights","type":"boolean","javadoc":null},{"fullQualified":"public void setHasAssignedWeights(boolean hasAssignedWeights)","name":"setHasAssignedWeights","type":"void","javadoc":null},{"fullQualified":"public List<List<Double>> getRubricWeightsForEachCell()","name":"getRubricWeightsForEachCell","type":"List<List<Double>>","javadoc":null},{"fullQualified":"public void setRubricWeightsForEachCell(List<List<Double>> rubricWeightsForEachCell)","name":"setRubricWeightsForEachCell","type":"void","javadoc":null},{"fullQualified":"public int getNumOfRubricChoices()","name":"getNumOfRubricChoices","type":"int","javadoc":null},{"fullQualified":"public List<String> getRubricChoices()","name":"getRubricChoices","type":"List<String>","javadoc":null},{"fullQualified":"public void setRubricChoices(List<String> rubricChoices)","name":"setRubricChoices","type":"void","javadoc":null},{"fullQualified":"public int getNumOfRubricSubQuestions()","name":"getNumOfRubricSubQuestions","type":"int","javadoc":null},{"fullQualified":"public List<String> getRubricSubQuestions()","name":"getRubricSubQuestions","type":"List<String>","javadoc":null},{"fullQualified":"public void setRubricSubQuestions(List<String> rubricSubQuestions)","name":"setRubricSubQuestions","type":"void","javadoc":null},{"fullQualified":"public List<List<String>> getRubricDescriptions()","name":"getRubricDescriptions","type":"List<List<String>>","javadoc":null},{"fullQualified":"public void setRubricDescriptions(List<List<String>> rubricDescriptions)","name":"setRubricDescriptions","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackRubricQuestionDetails()","javadocComment":null},{"identifier":"public FeedbackRubricQuestionDetails(String questionText)","javadocComment":null}]},{"name":"FeedbackRubricResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRubricResponseDetails","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * List of integers, the size of the list corresponds to the number of sub-questions.\n     * Each integer at index i, represents the choice chosen for sub-question i.\n     ","lineNumber":11,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getAnswerString()","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"public List<Integer> getAnswer()","name":"getAnswer","type":"List<Integer>","javadoc":null},{"fullQualified":"public void setAnswer(List<Integer> answer)","name":"setAnswer","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackRubricResponseDetails()","javadocComment":null}]},{"name":"FeedbackTextQuestionDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackTextQuestionDetails","isInterface":false,"codeComments":[{"type":"LineComment","text":" delete the existing response upon change from rich text allowed to disallowed","lineNumber":36,"isOrphan":true},{"type":"LineComment","text":" due to the effort to cleanup of HTML tags from the respondents","lineNumber":37,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails)","name":"shouldChangesRequireResponseDeletion","type":"boolean","javadoc":null},{"fullQualified":"public List<String> validateQuestionDetails()","name":"validateQuestionDetails","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> validateResponsesDetails(List<FeedbackResponseDetails> responses, int numRecipients)","name":"validateResponsesDetails","type":"List<String>","javadoc":null},{"fullQualified":"public boolean isFeedbackParticipantCommentsOnResponsesAllowed()","name":"isFeedbackParticipantCommentsOnResponsesAllowed","type":"boolean","javadoc":null},{"fullQualified":"public String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes)","name":"validateGiverRecipientVisibility","type":"String","javadoc":null},{"fullQualified":"public Integer getRecommendedLength()","name":"getRecommendedLength","type":"Integer","javadoc":null},{"fullQualified":"public void setRecommendedLength(Integer recommendedLength)","name":"setRecommendedLength","type":"void","javadoc":null},{"fullQualified":"public boolean getShouldAllowRichText()","name":"getShouldAllowRichText","type":"boolean","javadoc":null},{"fullQualified":"public void setShouldAllowRichText(Boolean shouldAllowRichText)","name":"setShouldAllowRichText","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackTextQuestionDetails()","javadocComment":null},{"identifier":"public FeedbackTextQuestionDetails(String questionText)","javadocComment":null}]},{"name":"FeedbackTextResponseDetails","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackTextResponseDetails","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getAnswerString()","name":"getAnswerString","type":"String","javadoc":null},{"fullQualified":"public String getAnswer()","name":"getAnswer","type":"String","javadoc":null},{"fullQualified":"public void setAnswer(String answer)","name":"setAnswer","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackTextResponseDetails()","javadocComment":null},{"identifier":"public FeedbackTextResponseDetails(String answer)","javadocComment":null}]},{"name":"SessionResultsBundle","fullyQualifiedName":"teammates.common.datatransfer.SessionResultsBundle","isInterface":false,"codeComments":[{"type":"LineComment","text":" build question to response map","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the giver of a response is visible to the current user.\n     * Returns false otherwise.\n     ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the recipient of a response is visible to the current user.\n     * Returns false otherwise.\n     ","lineNumber":71,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the giver/recipient for a response is visible/hidden from the current user.\n     ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the giver of a comment is visible to the current user.\n     * Returns false otherwise.\n     ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the anonymous name for a given name.\n     *\n     * <p>The anonymous name will be deterministic based on {@code name}.\n     ","lineNumber":108,"isOrphan":false}],"allMethods":[{"fullQualified":"private Map<String, List<FeedbackResponseAttributes>> buildQuestionToResponseMap(List<FeedbackResponseAttributes> responses)","name":"buildQuestionToResponseMap","type":"Map<String,List<FeedbackResponseAttributes>>","javadoc":null},{"fullQualified":"public boolean isResponseGiverVisible(FeedbackResponseAttributes response)","name":"isResponseGiverVisible","type":"boolean","javadoc":"\n     * Returns true if the giver of a response is visible to the current user.\n     * Returns false otherwise.\n     "},{"fullQualified":"public boolean isResponseRecipientVisible(FeedbackResponseAttributes response)","name":"isResponseRecipientVisible","type":"boolean","javadoc":"\n     * Returns true if the recipient of a response is visible to the current user.\n     * Returns false otherwise.\n     "},{"fullQualified":"private boolean isResponseParticipantVisible(boolean isGiver, FeedbackResponseAttributes response)","name":"isResponseParticipantVisible","type":"boolean","javadoc":"\n     * Checks if the giver/recipient for a response is visible/hidden from the current user.\n     "},{"fullQualified":"public boolean isCommentGiverVisible(FeedbackResponseCommentAttributes comment)","name":"isCommentGiverVisible","type":"boolean","javadoc":"\n     * Returns true if the giver of a comment is visible to the current user.\n     * Returns false otherwise.\n     "},{"fullQualified":"public static String getAnonName(FeedbackParticipantType type, String name)","name":"getAnonName","type":"String","javadoc":"\n     * Gets the anonymous name for a given name.\n     *\n     * <p>The anonymous name will be deterministic based on {@code name}.\n     "},{"fullQualified":"public Map<String, List<FeedbackResponseAttributes>> getQuestionResponseMap()","name":"getQuestionResponseMap","type":"Map<String,List<FeedbackResponseAttributes>>","javadoc":null},{"fullQualified":"public Map<String, List<FeedbackResponseAttributes>> getQuestionMissingResponseMap()","name":"getQuestionMissingResponseMap","type":"Map<String,List<FeedbackResponseAttributes>>","javadoc":null},{"fullQualified":"private static String getEncryptedName(String name)","name":"getEncryptedName","type":"String","javadoc":null},{"fullQualified":"private static String getHashOfName(String name)","name":"getHashOfName","type":"String","javadoc":null},{"fullQualified":"public Map<String, FeedbackQuestionAttributes> getQuestionsMap()","name":"getQuestionsMap","type":"Map<String,FeedbackQuestionAttributes>","javadoc":null},{"fullQualified":"public Map<String, List<FeedbackResponseCommentAttributes>> getResponseCommentsMap()","name":"getResponseCommentsMap","type":"Map<String,List<FeedbackResponseCommentAttributes>>","javadoc":null},{"fullQualified":"public CourseRoster getRoster()","name":"getRoster","type":"CourseRoster","javadoc":null},{"fullQualified":"public Map<String, Boolean> getResponseGiverVisibilityTable()","name":"getResponseGiverVisibilityTable","type":"Map<String,Boolean>","javadoc":null},{"fullQualified":"public Map<String, Boolean> getResponseRecipientVisibilityTable()","name":"getResponseRecipientVisibilityTable","type":"Map<String,Boolean>","javadoc":null},{"fullQualified":"public Map<Long, Boolean> getCommentGiverVisibilityTable()","name":"getCommentGiverVisibilityTable","type":"Map<Long,Boolean>","javadoc":null}],"allConstructors":[{"identifier":"public SessionResultsBundle(Map<String, FeedbackQuestionAttributes> questionsMap, List<FeedbackResponseAttributes> responses, List<FeedbackResponseAttributes> missingResponses, Map<String, Boolean> responseGiverVisibilityTable, Map<String, Boolean> responseRecipientVisibilityTable, Map<String, List<FeedbackResponseCommentAttributes>> responseCommentsMap, Map<Long, Boolean> commentGiverVisibilityTable, CourseRoster roster)","javadocComment":null}]},{"name":"TeamEvalResult","fullyQualifiedName":"teammates.common.datatransfer.TeamEvalResult","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" submitted value is uninitialized. ","lineNumber":15,"isOrphan":false},{"type":"JavadocComment","text":" submitted 'Not SUre'. ","lineNumber":17,"isOrphan":false},{"type":"JavadocComment","text":" did Not SuBmit. ","lineNumber":19,"isOrphan":false},{"type":"JavadocComment","text":" submission values originally from students of the team. ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":" submission values to be shown to instructor (after normalization). ","lineNumber":25,"isOrphan":false},{"type":"JavadocComment","text":" average perception of team shown to instructor. Excludes self evaluations ","lineNumber":27,"isOrphan":false},{"type":"JavadocComment","text":" team perception shown to students. denormalized to match their own claims ","lineNumber":29,"isOrphan":false},{"type":"JavadocComment","text":" the values that were used to calculate normalizedAveragePerceived values. ","lineNumber":32,"isOrphan":false},{"type":"BlockComment","text":"This is the only method that should be public. However, many of the\n         * other methods are set as public for the ease of testing.\n         ","lineNumber":36,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Replaces all missing points ('not sure' with NSU and 'did not submit' with NA).\n     ","lineNumber":89,"isOrphan":false},{"type":"LineComment","text":" remove from each array values matching special values in the other","lineNumber":142,"isOrphan":false},{"type":"LineComment","text":" if the student did not submit","lineNumber":153,"isOrphan":false},{"type":"LineComment","text":" omit calculation if no data points","lineNumber":332,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Replaces 999 etc. with NA, NSB, NSU etc.\n     ","lineNumber":369,"isOrphan":false}],"allMethods":[{"fullQualified":"private int[][] sanitizeInput(int[][] input)","name":"sanitizeInput","type":"int[][]","javadoc":"\n     * Replaces all missing points ('not sure' with NSU and 'did not submit' with NA).\n     "},{"fullQualified":"private static double[][] calculatePeerContributionRatio(double[][] input)","name":"calculatePeerContributionRatio","type":"double[][]","javadoc":null},{"fullQualified":"private static double[][] adjustPeerContributionRatioToTallyNormalizedAveragePerceived(double[][] peerContributionRatio)","name":"adjustPeerContributionRatioToTallyNormalizedAveragePerceived","type":"double[][]","javadoc":null},{"fullQualified":"private int[][] calculatePerceivedForStudents(int[][] claimedSanitized, double[] normalizedAveragePerceivedAsDouble)","name":"calculatePerceivedForStudents","type":"int[][]","javadoc":null},{"fullQualified":" static int[] calculatePerceivedForStudent(int[] claimedSanitizedRow, double[] normalizedAveragePerceivedAsDouble)","name":"calculatePerceivedForStudent","type":"int[]","javadoc":null},{"fullQualified":" static boolean isSanitized(int[] array)","name":"isSanitized","type":"boolean","javadoc":null},{"fullQualified":"private static boolean isSanitized(int i)","name":"isSanitized","type":"boolean","javadoc":null},{"fullQualified":"private static boolean isSpecialValue(int value)","name":"isSpecialValue","type":"boolean","javadoc":null},{"fullQualified":"private static boolean isValidSpecialValue(double value)","name":"isValidSpecialValue","type":"boolean","javadoc":null},{"fullQualified":"private static double[][] multiplyByFactor(double factor, double[][] input)","name":"multiplyByFactor","type":"double[][]","javadoc":null},{"fullQualified":"private static double[] multiplyByFactor(double factor, double[] input)","name":"multiplyByFactor","type":"double[]","javadoc":null},{"fullQualified":" static double[] purgeValuesCorrespondingToSpecialValuesInFilter(double[] filterArray, double[] valueArray)","name":"purgeValuesCorrespondingToSpecialValuesInFilter","type":"double[]","javadoc":null},{"fullQualified":" static double sum(double[] input)","name":"sum","type":"double","javadoc":null},{"fullQualified":"private static int sum(int[] input)","name":"sum","type":"int","javadoc":null},{"fullQualified":" static double[][] removeSelfRatings(double[][] input)","name":"removeSelfRatings","type":"double[][]","javadoc":null},{"fullQualified":"private static double[][] normalizeValues(double[][] input)","name":"normalizeValues","type":"double[][]","javadoc":null},{"fullQualified":" static double[] normalizeValues(double[] input)","name":"normalizeValues","type":"double[]","javadoc":null},{"fullQualified":"private static int[][] normalizeValues(int[][] input)","name":"normalizeValues","type":"int[][]","javadoc":null},{"fullQualified":"private static double calculateFactor(double[] input)","name":"calculateFactor","type":"double","javadoc":null},{"fullQualified":"private static double[] intToDouble(int[] input)","name":"intToDouble","type":"double[]","javadoc":null},{"fullQualified":"private static double[][] intToDouble(int[][] input)","name":"intToDouble","type":"double[][]","javadoc":null},{"fullQualified":"private static int[] doubleToInt(double[] input)","name":"doubleToInt","type":"int[]","javadoc":null},{"fullQualified":"private static int[][] doubleToInt(double[][] input)","name":"doubleToInt","type":"int[][]","javadoc":null},{"fullQualified":" static double[] averageColumns(double[][] input)","name":"averageColumns","type":"double[]","javadoc":null},{"fullQualified":"private static double averageColumn(double[][] arrayOfArrays, int columnIndex)","name":"averageColumn","type":"double","javadoc":null},{"fullQualified":" static String pointsToString(int[][] array)","name":"pointsToString","type":"String","javadoc":null},{"fullQualified":"private String pointsToString(int[] input)","name":"pointsToString","type":"String","javadoc":null},{"fullQualified":" static String pointsToString(double[][] array)","name":"pointsToString","type":"String","javadoc":null},{"fullQualified":" static String replaceMagicNumbers(String returnValue)","name":"replaceMagicNumbers","type":"String","javadoc":"\n     * Replaces 999 etc. with NA, NSB, NSU etc.\n     "},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"private String toString(int indent)","name":"toString","type":"String","javadoc":null},{"fullQualified":"private static void verify(String message, boolean condition)","name":"verify","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public TeamEvalResult(int[][] submissionValues)","javadocComment":null}]},{"name":"UserInfo","fullyQualifiedName":"teammates.common.datatransfer.UserInfo","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * The user's Google ID.\n     ","lineNumber":10,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Indicates whether the user has admin privilege.\n     ","lineNumber":15,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Indicates whether the user has instructor privilege.\n     ","lineNumber":20,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Indicates whether the user has student privilege.\n     ","lineNumber":25,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Indicates whether the user has maintainer privilege.\n     ","lineNumber":30,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":null},{"fullQualified":"public boolean getIsAdmin()","name":"getIsAdmin","type":"boolean","javadoc":null},{"fullQualified":"public boolean getIsInstructor()","name":"getIsInstructor","type":"boolean","javadoc":null},{"fullQualified":"public boolean getIsStudent()","name":"getIsStudent","type":"boolean","javadoc":null},{"fullQualified":"public boolean getIsMaintainer()","name":"getIsMaintainer","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public UserInfo(String googleId)","javadocComment":null}]},{"name":"UserInfoCookie","fullyQualifiedName":"teammates.common.datatransfer.UserInfoCookie","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets a {@link UserInfoCookie} object from cookie string.\n     ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the object represents a valid user info and the object has not expired.\n     ","lineNumber":67,"isOrphan":false}],"allMethods":[{"fullQualified":"public static UserInfoCookie fromCookie(String cookie)","name":"fromCookie","type":"UserInfoCookie","javadoc":"\n     * Gets a {@link UserInfoCookie} object from cookie string.\n     "},{"fullQualified":"public String getUserId()","name":"getUserId","type":"String","javadoc":null},{"fullQualified":"public void setUserId(String userId)","name":"setUserId","type":"void","javadoc":null},{"fullQualified":"public String getVerificationCode()","name":"getVerificationCode","type":"String","javadoc":null},{"fullQualified":"public void setVerificationCode(String verificationCode)","name":"setVerificationCode","type":"void","javadoc":null},{"fullQualified":"public long getExpiryTime()","name":"getExpiryTime","type":"long","javadoc":null},{"fullQualified":"public void setExpiryTime(long expiryTime)","name":"setExpiryTime","type":"void","javadoc":null},{"fullQualified":"public boolean isValid()","name":"isValid","type":"boolean","javadoc":"\n     * Returns true if the object represents a valid user info and the object has not expired.\n     "}],"allConstructors":[{"identifier":"public UserInfoCookie(String userId)","javadocComment":null}]},{"name":"DeadlineExceededException","fullyQualifiedName":"teammates.common.exception.DeadlineExceededException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"EmailSendingException","fullyQualifiedName":"teammates.common.exception.EmailSendingException","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public int getStatusCode()","name":"getStatusCode","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public EmailSendingException(Throwable cause, int statusCode)","javadocComment":null}]},{"name":"EnrollException","fullyQualifiedName":"teammates.common.exception.EnrollException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public EnrollException(String message)","javadocComment":null}]},{"name":"EntityAlreadyExistsException","fullyQualifiedName":"teammates.common.exception.EntityAlreadyExistsException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public EntityAlreadyExistsException(String message)","javadocComment":null}]},{"name":"EntityDoesNotExistException","fullyQualifiedName":"teammates.common.exception.EntityDoesNotExistException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public EntityDoesNotExistException(String message)","javadocComment":null}]},{"name":"HttpRequestFailedException","fullyQualifiedName":"teammates.common.exception.HttpRequestFailedException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public HttpRequestFailedException(String message)","javadocComment":null}]},{"name":"InstructorUpdateException","fullyQualifiedName":"teammates.common.exception.InstructorUpdateException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public InstructorUpdateException(String message)","javadocComment":null}]},{"name":"InvalidParametersException","fullyQualifiedName":"teammates.common.exception.InvalidParametersException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public InvalidParametersException(String message)","javadocComment":null},{"identifier":"public InvalidParametersException(List<String> messages)","javadocComment":null},{"identifier":"public InvalidParametersException(Throwable cause)","javadocComment":null}]},{"name":"SearchServiceException","fullyQualifiedName":"teammates.common.exception.SearchServiceException","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public int getStatusCode()","name":"getStatusCode","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public SearchServiceException(String message, Throwable cause, int statusCode)","javadocComment":null},{"identifier":"public SearchServiceException(Throwable cause, int statusCode)","javadocComment":null},{"identifier":"public SearchServiceException(String message, int statusCode)","javadocComment":null}]},{"name":"AppUrl","fullyQualifiedName":"teammates.common.util.AppUrl","isInterface":false,"codeComments":[{"type":"LineComment","text":" must either be http or https","lineNumber":10,"isOrphan":false}],"allMethods":[{"fullQualified":"public AppUrl withUserId(String userId)","name":"withUserId","type":"AppUrl","javadoc":null},{"fullQualified":"public AppUrl withRegistrationKey(String key)","name":"withRegistrationKey","type":"AppUrl","javadoc":null},{"fullQualified":"public AppUrl withIsCreatingAccount(String isCreatingAccount)","name":"withIsCreatingAccount","type":"AppUrl","javadoc":null},{"fullQualified":"public AppUrl withCourseId(String courseId)","name":"withCourseId","type":"AppUrl","javadoc":null},{"fullQualified":"public AppUrl withSessionName(String feedbackSessionName)","name":"withSessionName","type":"AppUrl","javadoc":null},{"fullQualified":"public AppUrl withStudentEmail(String email)","name":"withStudentEmail","type":"AppUrl","javadoc":null},{"fullQualified":"public AppUrl withEntityType(String entityType)","name":"withEntityType","type":"AppUrl","javadoc":null}],"allConstructors":[{"identifier":"public AppUrl(String url)","javadocComment":null}]},{"name":"Config","fullyQualifiedName":"teammates.common.util.Config","isInterface":false,"codeComments":[{"type":"LineComment","text":" Other properties","lineNumber":106,"isOrphan":true},{"type":"JavadocComment","text":" The value of the \"app.id\" in build.properties file. ","lineNumber":16,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.region\" in build.properties file. ","lineNumber":19,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.version\" in build.properties file. ","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.frontend.url\" in build.properties file. ","lineNumber":25,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.production.gcs.bucketname\" in build.properties file. ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.backup.gcs.bucketname\" in build.properties file. ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.csrf.key\" in build.properties file. ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.backdoor.key\" in build.properties file. ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.encryption.key\" in build.properties file. ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.oauth2.client.id\" in build.properties file. ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.oauth2.client.secret\" in build.properties file. ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.captcha.secretkey\" in build.properties file. ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.admins\" in build.properties file. ","lineNumber":52,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.maintainers\" in build.properties file. ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.crashreport.email\" in build.properties file. ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.email.senderemail\" in build.properties file. ","lineNumber":61,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.email.sendername\" in build.properties file. ","lineNumber":64,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.email.replyto\" in build.properties file. ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.email.service\" in build.properties file. ","lineNumber":70,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.sendgrid.apikey\" in build.properties file. ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.mailgun.apikey\" in build.properties file. ","lineNumber":76,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.mailgun.domainname\" in build.properties file. ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.mailjet.apikey\" in build.properties file. ","lineNumber":82,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.mailjet.secretkey\" in build.properties file. ","lineNumber":85,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.search.service.host\" in build.properties file. ","lineNumber":88,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.enable.datastore.backup\" in build.properties file. ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.maintenance\" in build.properties file. ","lineNumber":94,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.localdatastore.port\" in build-dev.properties file. ","lineNumber":97,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.enable.devserver.login\" in build-dev.properties file. ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":" The value of the \"app.taskqueue.active\" in build-dev.properties file. ","lineNumber":103,"isOrphan":false},{"type":"JavadocComment","text":" Indicates whether the current server is dev server. ","lineNumber":108,"isOrphan":false},{"type":"LineComment","text":" The following properties are not used in production server.","lineNumber":170,"isOrphan":true},{"type":"LineComment","text":" So they will only be read from build-dev.properties file.","lineNumber":171,"isOrphan":false},{"type":"LineComment","text":" access static fields directly","lineNumber":178,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns the a default frontend URL if it is not set in property file(s).\n     ","lineNumber":181,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the property value based on running environment.\n     *\n     * <p>If it is in dev server, it will return the value from build-dev.properties file.\n     * If the respective key does not exist in build-dev.properties file, or it is in production server,\n     * it will return the value from build.properties file instead.\n     *\n     * <p>If still no key found in build.properties file, the specified default value will be returned.\n     ","lineNumber":188,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the property value based on running environment. null is returned when no match values are found.\n     ","lineNumber":207,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the port number at which the system will be run in.\n     ","lineNumber":214,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the GAE instance ID.\n     ","lineNumber":225,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the server is configured to be the dev server.\n     ","lineNumber":236,"isOrphan":false},{"type":"LineComment","text":" In production server, GAE sets some non-overrideable environment variables.","lineNumber":240,"isOrphan":true},{"type":"LineComment","text":" We will make use of some of them to determine whether the server is dev server or not.","lineNumber":241,"isOrphan":true},{"type":"LineComment","text":" This means that any developer can replicate this condition in dev server,","lineNumber":242,"isOrphan":true},{"type":"LineComment","text":" but it is their own choice and risk should they choose to do so.","lineNumber":243,"isOrphan":true},{"type":"LineComment","text":" GAE standard","lineNumber":252,"isOrphan":false},{"type":"LineComment","text":" GAE flexible; GAE_ENV variable should not exist in GAE flexible environment","lineNumber":257,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Indicates whether dev server login is enabled.\n     ","lineNumber":261,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter.\n     * The base URL will be the application front-end URL.\n     * {@code relativeUrl} must start with a \"/\".\n     ","lineNumber":268,"isOrphan":false}],"allMethods":[{"fullQualified":" static String getDefaultFrontEndUrl()","name":"getDefaultFrontEndUrl","type":"String","javadoc":"\n     * Returns the a default frontend URL if it is not set in property file(s).\n     "},{"fullQualified":"private static String getProperty(Properties properties, Properties devProperties, String key, String defaultValue)","name":"getProperty","type":"String","javadoc":"\n     * Returns the property value based on running environment.\n     *\n     * <p>If it is in dev server, it will return the value from build-dev.properties file.\n     * If the respective key does not exist in build-dev.properties file, or it is in production server,\n     * it will return the value from build.properties file instead.\n     *\n     * <p>If still no key found in build.properties file, the specified default value will be returned.\n     "},{"fullQualified":"private static String getProperty(Properties properties, Properties devProperties, String key)","name":"getProperty","type":"String","javadoc":"\n     * Returns the property value based on running environment. null is returned when no match values are found.\n     "},{"fullQualified":"public static int getPort()","name":"getPort","type":"int","javadoc":"\n     * Returns the port number at which the system will be run in.\n     "},{"fullQualified":"public static String getInstanceId()","name":"getInstanceId","type":"String","javadoc":"\n     * Returns the GAE instance ID.\n     "},{"fullQualified":"private static boolean isDevServer(String appVersion, String appId)","name":"isDevServer","type":"boolean","javadoc":"\n     * Returns true if the server is configured to be the dev server.\n     "},{"fullQualified":"public static boolean isDevServerLoginEnabled()","name":"isDevServerLoginEnabled","type":"boolean","javadoc":"\n     * Indicates whether dev server login is enabled.\n     "},{"fullQualified":"public static AppUrl getFrontEndAppUrl(String relativeUrl)","name":"getFrontEndAppUrl","type":"AppUrl","javadoc":"\n     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter.\n     * The base URL will be the application front-end URL.\n     * {@code relativeUrl} must start with a \"/\".\n     "},{"fullQualified":"public static boolean isUsingSendgrid()","name":"isUsingSendgrid","type":"boolean","javadoc":null},{"fullQualified":"public static boolean isUsingMailgun()","name":"isUsingMailgun","type":"boolean","javadoc":null},{"fullQualified":"public static boolean isUsingMailjet()","name":"isUsingMailjet","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"private Config()","javadocComment":null}]},{"name":"InstructorPermissionRoleNames","fullyQualifiedName":"teammates.common.util.Const.InstructorPermissionRoleNames","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"InstructorPermissions","fullyQualifiedName":"teammates.common.util.Const.InstructorPermissions","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"ParamsNames","fullyQualifiedName":"teammates.common.util.Const.ParamsNames","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"HeaderNames","fullyQualifiedName":"teammates.common.util.Const.HeaderNames","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"CourseStatus","fullyQualifiedName":"teammates.common.util.Const.CourseStatus","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"EntityType","fullyQualifiedName":"teammates.common.util.Const.EntityType","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"SecurityConfig","fullyQualifiedName":"teammates.common.util.Const.SecurityConfig","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"LegacyURIs","fullyQualifiedName":"teammates.common.util.Const.LegacyURIs","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"WebPageURIs","fullyQualifiedName":"teammates.common.util.Const.WebPageURIs","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"ResourceURIs","fullyQualifiedName":"teammates.common.util.Const.ResourceURIs","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"CronJobURIs","fullyQualifiedName":"teammates.common.util.Const.CronJobURIs","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"TaskQueue","fullyQualifiedName":"teammates.common.util.Const.TaskQueue","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"Const","fullyQualifiedName":"teammates.common.util.Const","isInterface":false,"codeComments":[{"type":"LineComment","text":" This section holds constants that are defined as constants primarily because they are repeated in many places.","lineNumber":15,"isOrphan":true},{"type":"LineComment","text":" These constants are used as variable values to mean that the variable is in a 'special' state.","lineNumber":40,"isOrphan":true},{"type":"LineComment","text":" Other Constants","lineNumber":69,"isOrphan":true},{"type":"LineComment","text":" Utility class containing constants","lineNumber":72,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Represents role names for instructors based on their permission settings.\n     ","lineNumber":75,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents atomic permission for instructors.\n     ","lineNumber":86,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents keys for HTTP requests to the API layer.\n     ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents custom header names used by the system.\n     ","lineNumber":191,"isOrphan":false},{"type":"JavadocComment","text":"\n     * The course status respect to the instructor's point of view.\n     * This parameter is used to get a course list for instructor.\n     ","lineNumber":201,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents user types.\n     ","lineNumber":211,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents security-related configuration.\n     ","lineNumber":223,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents URIs of accessible pages in the front-end in past versions (V6 and before).\n     ","lineNumber":233,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents URIs of accessible pages in the front-end.\n     ","lineNumber":251,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents URIs of resource endpoints.\n     ","lineNumber":308,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents URIs of endpoints used by cron jobs.\n     ","lineNumber":376,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Configurations for task queue.\n     ","lineNumber":398,"isOrphan":false}],"allMethods":[],"allConstructors":[{"identifier":"private Const()","javadocComment":null}]},{"name":"EmailSendingStatus","fullyQualifiedName":"teammates.common.util.EmailSendingStatus","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public int getStatusCode()","name":"getStatusCode","type":"int","javadoc":null},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null},{"fullQualified":"public boolean isSuccess()","name":"isSuccess","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public EmailSendingStatus(int statusCode, String message)","javadocComment":null}]},{"name":"EmailWrapper","fullyQualifiedName":"teammates.common.util.EmailWrapper","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Prefix appended to the subject if the email is set as a copy.\n     ","lineNumber":8,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the email subject based on the email type and inserts the specified {@code params}\n     * in the indicated places.\n     ","lineNumber":79,"isOrphan":false}],"allMethods":[{"fullQualified":"public EmailType getType()","name":"getType","type":"EmailType","javadoc":null},{"fullQualified":"public void setType(EmailType type)","name":"setType","type":"void","javadoc":null},{"fullQualified":"public String getSenderName()","name":"getSenderName","type":"String","javadoc":null},{"fullQualified":"public void setSenderName(String senderName)","name":"setSenderName","type":"void","javadoc":null},{"fullQualified":"public String getSenderEmail()","name":"getSenderEmail","type":"String","javadoc":null},{"fullQualified":"public void setSenderEmail(String senderEmail)","name":"setSenderEmail","type":"void","javadoc":null},{"fullQualified":"public String getReplyTo()","name":"getReplyTo","type":"String","javadoc":null},{"fullQualified":"public void setReplyTo(String replyTo)","name":"setReplyTo","type":"void","javadoc":null},{"fullQualified":"public String getRecipient()","name":"getRecipient","type":"String","javadoc":null},{"fullQualified":"public void setRecipient(String recipient)","name":"setRecipient","type":"void","javadoc":null},{"fullQualified":"public String getBcc()","name":"getBcc","type":"String","javadoc":null},{"fullQualified":"public void setBcc(String bcc)","name":"setBcc","type":"void","javadoc":null},{"fullQualified":"public String getSubject()","name":"getSubject","type":"String","javadoc":null},{"fullQualified":"public void setSubject(String subject)","name":"setSubject","type":"void","javadoc":null},{"fullQualified":"public void setSubjectFromType(Object... params)","name":"setSubjectFromType","type":"void","javadoc":"\n     * Sets the email subject based on the email type and inserts the specified {@code params}\n     * in the indicated places.\n     "},{"fullQualified":"public String getContent()","name":"getContent","type":"String","javadoc":null},{"fullQualified":"public void setContent(String content)","name":"setContent","type":"void","javadoc":null},{"fullQualified":"public boolean getIsCopy()","name":"getIsCopy","type":"boolean","javadoc":null},{"fullQualified":"public void setIsCopy(boolean isCopy)","name":"setIsCopy","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FieldValidator","fullyQualifiedName":"teammates.common.util.FieldValidator","isInterface":false,"codeComments":[{"type":"LineComment","text":"///////////////","lineNumber":26,"isOrphan":true},{"type":"LineComment","text":" FIELD TYPES //","lineNumber":27,"isOrphan":true},{"type":"LineComment","text":"///////////////","lineNumber":28,"isOrphan":true},{"type":"LineComment","text":"//////////////////","lineNumber":130,"isOrphan":true},{"type":"LineComment","text":" ERROR MESSAGES //","lineNumber":131,"isOrphan":true},{"type":"LineComment","text":"//////////////////","lineNumber":132,"isOrphan":true},{"type":"LineComment","text":"/////////////////////////////////////","lineNumber":245,"isOrphan":true},{"type":"LineComment","text":" VALIDATION REGEX FOR INTERNAL USE //","lineNumber":246,"isOrphan":true},{"type":"LineComment","text":"/////////////////////////////////////","lineNumber":247,"isOrphan":true},{"type":"LineComment","text":"///////////////////////////////////////","lineNumber":280,"isOrphan":true},{"type":"LineComment","text":" VALIDATION METHODS FOR EXTERNAL USE //","lineNumber":281,"isOrphan":true},{"type":"LineComment","text":"///////////////////////////////////////","lineNumber":282,"isOrphan":true},{"type":"LineComment","text":" name-related","lineNumber":30,"isOrphan":false},{"type":"LineComment","text":" email-related","lineNumber":51,"isOrphan":false},{"type":"LineComment","text":" notification-related","lineNumber":55,"isOrphan":false},{"type":"LineComment","text":" others","lineNumber":81,"isOrphan":false},{"type":"BlockComment","text":"\n     * =======================================================================\n     * Field: Course ID\n     * Unique: system-wide, not just among the course of that instructor.\n     * Technically, we can get rid of CourseID field and enforce users to use\n     * CourseName as a unique ID. In that case, we have to enforce CourseName\n     * must be unique across the full system. However, users expect names to be\n     * non-unique and more tolerant of enforcing uniqueness on an ID. Whenever\n     * possible, must be displayed in the same case as user entered. This is\n     * because the case of the letters can mean something. Furthermore,\n     * converting to same case can reduce readability.\n     *\n     * Course ID is necessary because the course name is not unique enough to\n     * distinguish between courses because the same course can be offered\n     * multiple times and courses can be shared between instructors and many\n     * students. Allowing same Course ID among different instructors could be\n     * problematic if we allow multiple instructors for a single course.\n     * TODO: make case insensitive\n     ","lineNumber":85,"isOrphan":false},{"type":"LineComment","text":" error message components","lineNumber":140,"isOrphan":false},{"type":"LineComment","text":" generic (i.e., not specific to any field) error messages","lineNumber":155,"isOrphan":false},{"type":"LineComment","text":" field-specific error messages","lineNumber":181,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Must start with alphanumeric character, cannot contain vertical bar(|) or percent sign(%).\n     ","lineNumber":249,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Allows English alphabet, numbers, underscore,  dot, dollar sign and hyphen.\n     ","lineNumber":254,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Local part:\n     * <li>Can only start with letters, digits, hyphen or plus sign;\n     * <li>Special characters allowed are ! # $ % & ' * + - / = ? ^ _ ` { } ~\n     * <li>Dot can only appear between any 2 characters and cannot appear continuously<br>\n     * Domain part:\n     * <li>Only allow letters, digits, hyphen and dot; Must end with letters; Must have TLD\n     ","lineNumber":259,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Allows English alphabet, numbers, underscore,  dot and hyphen.\n     ","lineNumber":270,"isOrphan":false},{"type":"LineComment","text":" utility class","lineNumber":276,"isOrphan":true},{"type":"LineComment","text":" Intentional private constructor to prevent instantiation.","lineNumber":277,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Checks if {@code email} is not null, not empty, not longer than {@code EMAIL_MAX_LENGTH}, and is a\n     * valid email address according to {@code REGEX_EMAIL}.\n     * @return An explanation of why the {@code email} is not acceptable.\n     *         Returns an empty string if the {@code email} is acceptable.\n     ","lineNumber":284,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code gracePeriod} is not negative.\n     * @return An explanation why the {@code gracePeriod} is not acceptable.\n     *         Returns an empty string if the {@code gracePeriod} is acceptable.\n     ","lineNumber":309,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code googleId} is not null, not empty, not longer than {@code GOOGLE_ID_MAX_LENGTH}, does\n     * not contain any invalid characters (| or %), AND is either a Google username (without the \"@gmail.com\")\n     * or a valid email address that does not end in \"@gmail.com\".\n     * @return An explanation of why the {@code googleId} is not acceptable.\n     *         Returns an empty string if the {@code googleId} is acceptable.\n     ","lineNumber":321,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code courseId} is not null, not empty, has no surrounding whitespaces, not longer than\n     * {@code COURSE_ID_MAX_LENGTH}, is sanitized for HTML, and match the REGEX {@code REGEX_COURSE_ID}.\n     * @return An explanation of why the {@code courseId} is not acceptable.\n     *         Returns an empty string if the {@code courseId} is acceptable.\n     ","lineNumber":352,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code sectionName} is a non-null non-empty string no longer than the specified length\n     * {@code SECTION_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %).\n     * @return An explanation of why the {@code sectionName} is not acceptable.\n     *         Returns an empty string if the {@code sectionName} is acceptable.\n     ","lineNumber":381,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code teamName} is a non-null non-empty string no longer than the specified length\n     * {@code TEAM_NAME_MAX_LENGTH}, does not contain any invalid characters (| or %) and is not a valid email.\n     * @return An explanation of why the {@code teamName} is not acceptable.\n     *         Returns an empty string if the {@code teamName} is acceptable.\n     ","lineNumber":391,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the given studentRoleComments is a non-null string no longer than\n     * the specified length {@code STUDENT_ROLE_COMMENTS_MAX_LENGTH}. However, this string can be empty.\n     * @return An explanation of why the {@code studentRoleComments} is not acceptable.\n     *         Returns an empty string \"\" if the {@code studentRoleComments} is acceptable.\n     ","lineNumber":405,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code feedbackSessionName} is a non-null non-empty string no longer than the specified length\n     * {@code FEEDBACK_SESSION_NAME_MAX_LENGTH}, does not contain any invalid characters (| or %), and has no\n     * unsanitized HTML characters.\n     * @return An explanation of why the {@code feedbackSessionName} is not acceptable.\n     *         Returns an empty string if the {@code feedbackSessionName} is acceptable.\n     ","lineNumber":417,"isOrphan":false},{"type":"LineComment","text":" return early if error already exists because session name is too long etc.","lineNumber":428,"isOrphan":false},{"type":"LineComment","text":" checks for unsanitized HTML characters","lineNumber":433,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code courseName} is a non-null non-empty string no longer than the specified length\n     * {@code COURSE_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %).\n     * @return An explanation of why the {@code courseName} is not acceptable.\n     *         Returns an empty string if the {@code courseName} is acceptable.\n     ","lineNumber":437,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code nationality} is a non-null non-empty string contained in the {@link NationalityHelper}'s\n     * list of nationalities.\n     * @return An explanation of why the {@code nationality} is not acceptable.\n     *         Returns an empty string if the {@code nationality} is acceptable.\n     ","lineNumber":447,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code instituteName} is a non-null non-empty string no longer than the specified length\n     * {@code INSTITUTE_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %).\n     * @return An explanation of why the {@code instituteName} is not acceptable.\n     *         Returns an empty string if the {@code instituteName} is acceptable.\n     ","lineNumber":461,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code personName} is a non-null non-empty string no longer than the specified length\n     * {@code PERSON_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %).\n     * @return An explanation of why the {@code personName} is not acceptable.\n     *         Returns an empty string if the {@code personName} is acceptable.\n     ","lineNumber":472,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the given string is a non-null string contained in Java's list of\n     * regional time zone IDs.\n     * @return An explanation of why the {@code timeZoneValue} is not acceptable.\n     *         Returns an empty string if the {@code timeZoneValue} is acceptable.\n     ","lineNumber":482,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code role} is one of the recognized roles {@link #ROLE_ACCEPTED_VALUES}.\n     *\n     * @return An explanation of why the {@code role} is not acceptable.\n     *         Returns an empty string if the {@code role} is acceptable.\n     ","lineNumber":497,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the given name (including person name, institute name, course name, feedback session and team name)\n     * is a non-null non-empty string no longer than the specified length {@code maxLength},\n     * and also does not contain any invalid characters (| or %).\n     *\n     * @param fieldName\n     *            A descriptive name of the field e.g., \"student name\", to be\n     *            used in the return value to make the explanation more\n     *            descriptive.\n     * @param value\n     *            The string to be checked.\n     * @return An explanation of why the {@code value} is not acceptable.\n     *         Returns an empty string \"\" if the {@code value} is acceptable.\n     ","lineNumber":512,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the notification title is a non-null non-empty string.\n     *\n     * @param notificationTitle The title of the notification.\n     * @return An explanation of why the {@code notificationTitle} is not acceptable.\n     *         Returns an empty string \"\" if the {@code notificationTitle} is acceptable.\n     ","lineNumber":566,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the notification message is a non-null non-empty string.\n     *\n     * @param notificationMessage The notification message.\n     * @return An explanation of why the {@code notificationMessage} is not acceptable.\n     *         Returns an empty string \"\" if the {@code notificationMessage} is acceptable.\n     ","lineNumber":588,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code style} is one of the recognized notification style {@link #NOTIFICATION_STYLE_ACCEPTED_VALUES}.\n     *\n     * @return An explanation of why the {@code style} is not acceptable.\n     *         Returns an empty string if the {@code style} is acceptable.\n     ","lineNumber":606,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if {@code targetUser} is one of the\n     * recognized notification target user groups {@link #NOTIFICATION_TARGET_USER_ACCEPTED_VALUES}.\n     *\n     * @return An explanation of why the {@code targetUser} is not acceptable.\n     *         Returns an empty string if the {@code targetUser} is acceptable.\n     ","lineNumber":622,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the given string is a non-null string no longer than\n     * the specified length {@code maxLength}. However, this string can be empty.\n     *\n     * @param fieldName\n     *            A descriptive name of the field e.g., \"student name\", to be\n     *            used in the return value to make the explanation more\n     *            descriptive.\n     * @param value\n     *            The string to be checked.\n     * @return An explanation of why the {@code value} is not acceptable.\n     *         Returns an empty string \"\" if the {@code value} is acceptable.\n     ","lineNumber":639,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if Session Start Time is before Session End Time.\n     * @return Error string if {@code sessionStart} is before {@code sessionEnd}\n     *         Empty string if {@code sessionStart} is after {@code sessionEnd}\n     ","lineNumber":665,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if Session Visibility Start Time is before Session Start Time.\n     * @return Error string if {@code visibilityStart} is before {@code sessionStart}\n     *         Empty string if {@code visibilityStart} is after {@code sessionStart}\n     ","lineNumber":675,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if Visibility Start Time is before Results Publish Time.\n     * @return Error string if {@code visibilityStart} is before {@code resultsPublish}\n     *         Empty string if {@code visibilityStart} is after {@code resultsPublish}\n     ","lineNumber":686,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the session end time is before all extended deadlines.\n     * @return Error string if any deadline in {@code deadlines} is before {@code sessionEnd}, an empty one otherwise.\n     ","lineNumber":697,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if Notification Start Time is before Notification End Time.\n     * @return Error string if {@code notificationStart} is before {@code notificationEnd}\n     *         Empty string if {@code notificationStart} is after {@code notificationEnd}\n     ","lineNumber":712,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if both the giver type and recipient type for the feedback question is valid.\n     *\n     * @param giverType feedback question giver type to be checked.\n     * @param recipientType feedback question recipient type to be checked.\n     * @return Error string if either type is invalid, otherwise empty string.\n     ","lineNumber":758,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if comment giver type is either instructor, student or team.\n     *\n     * @param commentGiverType comment giver type to be checked.\n     * @return Error string if type is invalid, otherwise empty string.\n     ","lineNumber":791,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if visibility of comment is following question when comment is from a feedback participant.\n     *\n     * @param isCommentFromFeedbackParticipant true if comment is from feedback participant.\n     * @param isVisibilityFollowingFeedbackQuestion true if visibility of comment follows question.\n     * @return Error string if condition is not met, otherwise empty string.\n     ","lineNumber":807,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if all the given participant types are valid for the purpose of\n     * showing different fields of a feedback response.\n     *\n     * @param showResponsesTo the list of participant types to whom responses can be shown\n     * @param showGiverNameTo the list of participant types to whom giver name can be shown\n     * @param showRecipientNameTo the list of participant types to whom recipient name can be shown\n     * @return Error string if any type in any list is invalid, otherwise empty string.\n     ","lineNumber":823,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the given {@code value} has no HTML code.\n     ","lineNumber":880,"isOrphan":false},{"type":"LineComment","text":"Fails if sanitized value is not same as value","lineNumber":885,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the given {@code value} is not null.\n     ","lineNumber":889,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether a given text input represents a format of a valid email address.\n     * @param email text input which needs the validation\n     * @return true if it is a valid email address, else false.\n     ","lineNumber":900,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether all the elements in a Collection are unique.\n     * @param elements The Collection of elements to be checked.\n     * @return true if all elements are unique, else false.\n     ","lineNumber":909,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String getInvalidityInfoForEmail(String email)","name":"getInvalidityInfoForEmail","type":"String","javadoc":"\n     * Checks if {@code email} is not null, not empty, not longer than {@code EMAIL_MAX_LENGTH}, and is a\n     * valid email address according to {@code REGEX_EMAIL}.\n     * @return An explanation of why the {@code email} is not acceptable.\n     *         Returns an empty string if the {@code email} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForGracePeriod(Duration gracePeriod)","name":"getInvalidityInfoForGracePeriod","type":"String","javadoc":"\n     * Checks if {@code gracePeriod} is not negative.\n     * @return An explanation why the {@code gracePeriod} is not acceptable.\n     *         Returns an empty string if the {@code gracePeriod} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForGoogleId(String googleId)","name":"getInvalidityInfoForGoogleId","type":"String","javadoc":"\n     * Checks if {@code googleId} is not null, not empty, not longer than {@code GOOGLE_ID_MAX_LENGTH}, does\n     * not contain any invalid characters (| or %), AND is either a Google username (without the \"@gmail.com\")\n     * or a valid email address that does not end in \"@gmail.com\".\n     * @return An explanation of why the {@code googleId} is not acceptable.\n     *         Returns an empty string if the {@code googleId} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForCourseId(String courseId)","name":"getInvalidityInfoForCourseId","type":"String","javadoc":"\n     * Checks if {@code courseId} is not null, not empty, has no surrounding whitespaces, not longer than\n     * {@code COURSE_ID_MAX_LENGTH}, is sanitized for HTML, and match the REGEX {@code REGEX_COURSE_ID}.\n     * @return An explanation of why the {@code courseId} is not acceptable.\n     *         Returns an empty string if the {@code courseId} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForSectionName(String sectionName)","name":"getInvalidityInfoForSectionName","type":"String","javadoc":"\n     * Checks if {@code sectionName} is a non-null non-empty string no longer than the specified length\n     * {@code SECTION_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %).\n     * @return An explanation of why the {@code sectionName} is not acceptable.\n     *         Returns an empty string if the {@code sectionName} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForTeamName(String teamName)","name":"getInvalidityInfoForTeamName","type":"String","javadoc":"\n     * Checks if {@code teamName} is a non-null non-empty string no longer than the specified length\n     * {@code TEAM_NAME_MAX_LENGTH}, does not contain any invalid characters (| or %) and is not a valid email.\n     * @return An explanation of why the {@code teamName} is not acceptable.\n     *         Returns an empty string if the {@code teamName} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForStudentRoleComments(String studentRoleComments)","name":"getInvalidityInfoForStudentRoleComments","type":"String","javadoc":"\n     * Checks if the given studentRoleComments is a non-null string no longer than\n     * the specified length {@code STUDENT_ROLE_COMMENTS_MAX_LENGTH}. However, this string can be empty.\n     * @return An explanation of why the {@code studentRoleComments} is not acceptable.\n     *         Returns an empty string \"\" if the {@code studentRoleComments} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForFeedbackSessionName(String feedbackSessionName)","name":"getInvalidityInfoForFeedbackSessionName","type":"String","javadoc":"\n     * Checks if {@code feedbackSessionName} is a non-null non-empty string no longer than the specified length\n     * {@code FEEDBACK_SESSION_NAME_MAX_LENGTH}, does not contain any invalid characters (| or %), and has no\n     * unsanitized HTML characters.\n     * @return An explanation of why the {@code feedbackSessionName} is not acceptable.\n     *         Returns an empty string if the {@code feedbackSessionName} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForCourseName(String courseName)","name":"getInvalidityInfoForCourseName","type":"String","javadoc":"\n     * Checks if {@code courseName} is a non-null non-empty string no longer than the specified length\n     * {@code COURSE_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %).\n     * @return An explanation of why the {@code courseName} is not acceptable.\n     *         Returns an empty string if the {@code courseName} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForNationality(String nationality)","name":"getInvalidityInfoForNationality","type":"String","javadoc":"\n     * Checks if {@code nationality} is a non-null non-empty string contained in the {@link NationalityHelper}'s\n     * list of nationalities.\n     * @return An explanation of why the {@code nationality} is not acceptable.\n     *         Returns an empty string if the {@code nationality} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForInstituteName(String instituteName)","name":"getInvalidityInfoForInstituteName","type":"String","javadoc":"\n     * Checks if {@code instituteName} is a non-null non-empty string no longer than the specified length\n     * {@code INSTITUTE_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %).\n     * @return An explanation of why the {@code instituteName} is not acceptable.\n     *         Returns an empty string if the {@code instituteName} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForPersonName(String personName)","name":"getInvalidityInfoForPersonName","type":"String","javadoc":"\n     * Checks if {@code personName} is a non-null non-empty string no longer than the specified length\n     * {@code PERSON_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %).\n     * @return An explanation of why the {@code personName} is not acceptable.\n     *         Returns an empty string if the {@code personName} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForTimeZone(String timeZoneValue)","name":"getInvalidityInfoForTimeZone","type":"String","javadoc":"\n     * Checks if the given string is a non-null string contained in Java's list of\n     * regional time zone IDs.\n     * @return An explanation of why the {@code timeZoneValue} is not acceptable.\n     *         Returns an empty string if the {@code timeZoneValue} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForRole(String role)","name":"getInvalidityInfoForRole","type":"String","javadoc":"\n     * Checks if {@code role} is one of the recognized roles {@link #ROLE_ACCEPTED_VALUES}.\n     *\n     * @return An explanation of why the {@code role} is not acceptable.\n     *         Returns an empty string if the {@code role} is acceptable.\n     "},{"fullQualified":" static String getValidityInfoForAllowedName(String fieldName, int maxLength, String value)","name":"getValidityInfoForAllowedName","type":"String","javadoc":"\n     * Checks if the given name (including person name, institute name, course name, feedback session and team name)\n     * is a non-null non-empty string no longer than the specified length {@code maxLength},\n     * and also does not contain any invalid characters (| or %).\n     *\n     * @param fieldName\n     *            A descriptive name of the field e.g., \"student name\", to be\n     *            used in the return value to make the explanation more\n     *            descriptive.\n     * @param value\n     *            The string to be checked.\n     * @return An explanation of why the {@code value} is not acceptable.\n     *         Returns an empty string \"\" if the {@code value} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForNotificationTitle(String notificationTitle)","name":"getInvalidityInfoForNotificationTitle","type":"String","javadoc":"\n     * Checks if the notification title is a non-null non-empty string.\n     *\n     * @param notificationTitle The title of the notification.\n     * @return An explanation of why the {@code notificationTitle} is not acceptable.\n     *         Returns an empty string \"\" if the {@code notificationTitle} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForNotificationBody(String notificationMessage)","name":"getInvalidityInfoForNotificationBody","type":"String","javadoc":"\n     * Checks if the notification message is a non-null non-empty string.\n     *\n     * @param notificationMessage The notification message.\n     * @return An explanation of why the {@code notificationMessage} is not acceptable.\n     *         Returns an empty string \"\" if the {@code notificationMessage} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForNotificationStyle(String style)","name":"getInvalidityInfoForNotificationStyle","type":"String","javadoc":"\n     * Checks if {@code style} is one of the recognized notification style {@link #NOTIFICATION_STYLE_ACCEPTED_VALUES}.\n     *\n     * @return An explanation of why the {@code style} is not acceptable.\n     *         Returns an empty string if the {@code style} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForNotificationTargetUser(String targetUser)","name":"getInvalidityInfoForNotificationTargetUser","type":"String","javadoc":"\n     * Checks if {@code targetUser} is one of the\n     * recognized notification target user groups {@link #NOTIFICATION_TARGET_USER_ACCEPTED_VALUES}.\n     *\n     * @return An explanation of why the {@code targetUser} is not acceptable.\n     *         Returns an empty string if the {@code targetUser} is acceptable.\n     "},{"fullQualified":" static String getValidityInfoForSizeCappedPossiblyEmptyString(String fieldName, int maxLength, String value)","name":"getValidityInfoForSizeCappedPossiblyEmptyString","type":"String","javadoc":"\n     * Checks if the given string is a non-null string no longer than\n     * the specified length {@code maxLength}. However, this string can be empty.\n     *\n     * @param fieldName\n     *            A descriptive name of the field e.g., \"student name\", to be\n     *            used in the return value to make the explanation more\n     *            descriptive.\n     * @param value\n     *            The string to be checked.\n     * @return An explanation of why the {@code value} is not acceptable.\n     *         Returns an empty string \"\" if the {@code value} is acceptable.\n     "},{"fullQualified":"public static String getInvalidityInfoForTimeForSessionStartAndEnd(Instant sessionStart, Instant sessionEnd)","name":"getInvalidityInfoForTimeForSessionStartAndEnd","type":"String","javadoc":"\n     * Checks if Session Start Time is before Session End Time.\n     * @return Error string if {@code sessionStart} is before {@code sessionEnd}\n     *         Empty string if {@code sessionStart} is after {@code sessionEnd}\n     "},{"fullQualified":"public static String getInvalidityInfoForTimeForVisibilityStartAndSessionStart(Instant visibilityStart, Instant sessionStart)","name":"getInvalidityInfoForTimeForVisibilityStartAndSessionStart","type":"String","javadoc":"\n     * Checks if Session Visibility Start Time is before Session Start Time.\n     * @return Error string if {@code visibilityStart} is before {@code sessionStart}\n     *         Empty string if {@code visibilityStart} is after {@code sessionStart}\n     "},{"fullQualified":"public static String getInvalidityInfoForTimeForVisibilityStartAndResultsPublish(Instant visibilityStart, Instant resultsPublish)","name":"getInvalidityInfoForTimeForVisibilityStartAndResultsPublish","type":"String","javadoc":"\n     * Checks if Visibility Start Time is before Results Publish Time.\n     * @return Error string if {@code visibilityStart} is before {@code resultsPublish}\n     *         Empty string if {@code visibilityStart} is after {@code resultsPublish}\n     "},{"fullQualified":"public static String getInvalidityInfoForTimeForSessionEndAndExtendedDeadlines(Instant sessionEnd, Map<String, Instant> deadlines)","name":"getInvalidityInfoForTimeForSessionEndAndExtendedDeadlines","type":"String","javadoc":"\n     * Checks if the session end time is before all extended deadlines.\n     * @return Error string if any deadline in {@code deadlines} is before {@code sessionEnd}, an empty one otherwise.\n     "},{"fullQualified":"public static String getInvalidityInfoForTimeForNotificationStartAndEnd(Instant notificationStart, Instant notificationExpiry)","name":"getInvalidityInfoForTimeForNotificationStartAndEnd","type":"String","javadoc":"\n     * Checks if Notification Start Time is before Notification End Time.\n     * @return Error string if {@code notificationStart} is before {@code notificationEnd}\n     *         Empty string if {@code notificationStart} is after {@code notificationEnd}\n     "},{"fullQualified":"private static String getInvalidityInfoForFirstTimeIsBeforeSecondTime(Instant earlierTime, Instant laterTime, String entityName, String earlierTimeFieldName, String laterTimeFieldName)","name":"getInvalidityInfoForFirstTimeIsBeforeSecondTime","type":"String","javadoc":null},{"fullQualified":"private static String getInvalidityInfoForFirstTimeIsStrictlyBeforeSecondTime(Instant earlierTime, Instant laterTime, String entityName, String earlierTimeFieldName, String laterTimeFieldName)","name":"getInvalidityInfoForFirstTimeIsStrictlyBeforeSecondTime","type":"String","javadoc":null},{"fullQualified":"private static String getInvalidityInfoForFirstTimeComparedToSecondTime(Instant earlierTime, Instant laterTime, String entityName, String earlierTimeFieldName, String laterTimeFieldName, BiPredicate<Instant, Instant> validityChecker, String invalidityInfoTemplate)","name":"getInvalidityInfoForFirstTimeComparedToSecondTime","type":"String","javadoc":null},{"fullQualified":"public static List<String> getValidityInfoForFeedbackParticipantType(FeedbackParticipantType giverType, FeedbackParticipantType recipientType)","name":"getValidityInfoForFeedbackParticipantType","type":"List<String>","javadoc":"\n     * Checks if both the giver type and recipient type for the feedback question is valid.\n     *\n     * @param giverType feedback question giver type to be checked.\n     * @param recipientType feedback question recipient type to be checked.\n     * @return Error string if either type is invalid, otherwise empty string.\n     "},{"fullQualified":"public static String getInvalidityInfoForCommentGiverType(FeedbackParticipantType commentGiverType)","name":"getInvalidityInfoForCommentGiverType","type":"String","javadoc":"\n     * Checks if comment giver type is either instructor, student or team.\n     *\n     * @param commentGiverType comment giver type to be checked.\n     * @return Error string if type is invalid, otherwise empty string.\n     "},{"fullQualified":"public static String getInvalidityInfoForVisibilityOfFeedbackParticipantComments(boolean isCommentFromFeedbackParticipant, boolean isVisibilityFollowingFeedbackQuestion)","name":"getInvalidityInfoForVisibilityOfFeedbackParticipantComments","type":"String","javadoc":"\n     * Checks if visibility of comment is following question when comment is from a feedback participant.\n     *\n     * @param isCommentFromFeedbackParticipant true if comment is from feedback participant.\n     * @param isVisibilityFollowingFeedbackQuestion true if visibility of comment follows question.\n     * @return Error string if condition is not met, otherwise empty string.\n     "},{"fullQualified":"public static List<String> getValidityInfoForFeedbackResponseVisibility(List<FeedbackParticipantType> showResponsesTo, List<FeedbackParticipantType> showGiverNameTo, List<FeedbackParticipantType> showRecipientNameTo)","name":"getValidityInfoForFeedbackResponseVisibility","type":"List<String>","javadoc":"\n     * Checks if all the given participant types are valid for the purpose of\n     * showing different fields of a feedback response.\n     *\n     * @param showResponsesTo the list of participant types to whom responses can be shown\n     * @param showGiverNameTo the list of participant types to whom giver name can be shown\n     * @param showRecipientNameTo the list of participant types to whom recipient name can be shown\n     * @return Error string if any type in any list is invalid, otherwise empty string.\n     "},{"fullQualified":" static String getValidityInfoForNonHtmlField(String fieldName, String value)","name":"getValidityInfoForNonHtmlField","type":"String","javadoc":"\n     * Checks if the given {@code value} has no HTML code.\n     "},{"fullQualified":"public static String getValidityInfoForNonNullField(String fieldName, Object value)","name":"getValidityInfoForNonNullField","type":"String","javadoc":"\n     * Checks if the given {@code value} is not null.\n     "},{"fullQualified":"private static boolean isUntrimmed(String value)","name":"isUntrimmed","type":"boolean","javadoc":null},{"fullQualified":"private static boolean isValidEmailAddress(String email)","name":"isValidEmailAddress","type":"boolean","javadoc":"\n     * Checks whether a given text input represents a format of a valid email address.\n     * @param email text input which needs the validation\n     * @return true if it is a valid email address, else false.\n     "},{"fullQualified":"public static boolean areElementsUnique(Collection<T> elements)","name":"areElementsUnique","type":"boolean","javadoc":"\n     * Checks whether all the elements in a Collection are unique.\n     * @param elements The Collection of elements to be checked.\n     * @return true if all elements are unique, else false.\n     "},{"fullQualified":"private static String getPopulatedErrorMessage(String messageTemplate, String userInput, String fieldName, String errorReason, int maxLength)","name":"getPopulatedErrorMessage","type":"String","javadoc":null},{"fullQualified":"private static String getPopulatedErrorMessage(String messageTemplate, String userInput, String fieldName, String errorReason)","name":"getPopulatedErrorMessage","type":"String","javadoc":null},{"fullQualified":"private static String getPopulatedEmptyStringErrorMessage(String messageTemplate, String fieldName, int maxLength)","name":"getPopulatedEmptyStringErrorMessage","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private FieldValidator()","javadocComment":null}]},{"name":"FileHelper","fullyQualifiedName":"teammates.common.util.FileHelper","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":12,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Reads the contents of a file in the {@code resources} folder\n     * as an {@link InputStream}.\n     * @param file The file name, which must be in the {@code resources} folder.\n     ","lineNumber":15,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Reads the contents of a file in the {@code resources} folder.\n     * @param file The file name, which must be in the {@code resources} folder.\n     ","lineNumber":24,"isOrphan":false}],"allMethods":[{"fullQualified":"public static InputStream getResourceAsStream(String file)","name":"getResourceAsStream","type":"InputStream","javadoc":"\n     * Reads the contents of a file in the {@code resources} folder\n     * as an {@link InputStream}.\n     * @param file The file name, which must be in the {@code resources} folder.\n     "},{"fullQualified":"public static String readResourceFile(String file)","name":"readResourceFile","type":"String","javadoc":"\n     * Reads the contents of a file in the {@code resources} folder.\n     * @param file The file name, which must be in the {@code resources} folder.\n     "}],"allConstructors":[{"identifier":"private FileHelper()","javadocComment":null}]},{"name":"HttpRequest","fullyQualifiedName":"teammates.common.util.HttpRequest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Utility class","lineNumber":24,"isOrphan":true},{"type":"LineComment","text":" Intentional private constructor to prevent instantiation.","lineNumber":25,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Executes a HTTP GET request and returns the response string.\n     * @param uri The URI containing the request URL and request parameters.\n     * @return the HTTP response string after executing the GET request\n     ","lineNumber":28,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String executeGetRequest(URI uri) throws IOException","name":"executeGetRequest","type":"String","javadoc":"\n     * Executes a HTTP GET request and returns the response string.\n     * @param uri The URI containing the request URL and request parameters.\n     * @return the HTTP response string after executing the GET request\n     "}],"allConstructors":[{"identifier":"private HttpRequest()","javadocComment":null}]},{"name":"HttpRequestHelper","fullyQualifiedName":"teammates.common.util.HttpRequestHelper","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":21,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets the parameters of the given HTTP request as key-value (possibly multi-values) mapping.\n     ","lineNumber":24,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the headers of the given HTTP request as key-value (possibly multi-values) mapping.\n     ","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" Do not include cookie header/secret keys in production for privacy reasons","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the cookie value, or null if said cookie does not exist.\n     ","lineNumber":61,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the request body payload.\n     ","lineNumber":78,"isOrphan":false}],"allMethods":[{"fullQualified":" static Map<String, Object> getRequestParameters(HttpServletRequest req)","name":"getRequestParameters","type":"Map<String,Object>","javadoc":"\n     * Gets the parameters of the given HTTP request as key-value (possibly multi-values) mapping.\n     "},{"fullQualified":" static Map<String, Object> getRequestHeaders(HttpServletRequest req)","name":"getRequestHeaders","type":"Map<String,Object>","javadoc":"\n     * Gets the headers of the given HTTP request as key-value (possibly multi-values) mapping.\n     "},{"fullQualified":"public static String getCookieValueFromRequest(HttpServletRequest req, String cookieName)","name":"getCookieValueFromRequest","type":"String","javadoc":"\n     * Returns the cookie value, or null if said cookie does not exist.\n     "},{"fullQualified":"public static String getRequestBody(HttpServletRequest req)","name":"getRequestBody","type":"String","javadoc":"\n     * Gets the request body payload.\n     "}],"allConstructors":[{"identifier":"private HttpRequestHelper()","javadocComment":null}]},{"name":"InstantAdapter","fullyQualifiedName":"teammates.common.util.JsonUtils.InstantAdapter","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonElement serialize(Instant instant, Type type, JsonSerializationContext context)","name":"serialize","type":"JsonElement","javadoc":null},{"fullQualified":"public Instant deserialize(JsonElement element, Type type, JsonDeserializationContext context)","name":"deserialize","type":"Instant","javadoc":null}],"allConstructors":[]},{"name":"ZoneIdAdapter","fullyQualifiedName":"teammates.common.util.JsonUtils.ZoneIdAdapter","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonElement serialize(ZoneId zoneId, Type type, JsonSerializationContext context)","name":"serialize","type":"JsonElement","javadoc":null},{"fullQualified":"public ZoneId deserialize(JsonElement element, Type type, JsonDeserializationContext context)","name":"deserialize","type":"ZoneId","javadoc":null}],"allConstructors":[]},{"name":"DurationMinutesAdapter","fullyQualifiedName":"teammates.common.util.JsonUtils.DurationMinutesAdapter","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonElement serialize(Duration duration, Type type, JsonSerializationContext context)","name":"serialize","type":"JsonElement","javadoc":null},{"fullQualified":"public Duration deserialize(JsonElement element, Type type, JsonDeserializationContext context)","name":"deserialize","type":"Duration","javadoc":null}],"allConstructors":[]},{"name":"FeedbackResponseDetailsAdapter","fullyQualifiedName":"teammates.common.util.JsonUtils.FeedbackResponseDetailsAdapter","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonElement serialize(FeedbackResponseDetails src, Type typeOfSrc, JsonSerializationContext context)","name":"serialize","type":"JsonElement","javadoc":null},{"fullQualified":"public FeedbackResponseDetails deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)","name":"deserialize","type":"FeedbackResponseDetails","javadoc":null}],"allConstructors":[]},{"name":"FeedbackQuestionDetailsAdapter","fullyQualifiedName":"teammates.common.util.JsonUtils.FeedbackQuestionDetailsAdapter","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonElement serialize(FeedbackQuestionDetails src, Type typeOfSrc, JsonSerializationContext context)","name":"serialize","type":"JsonElement","javadoc":null},{"fullQualified":"public FeedbackQuestionDetails deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)","name":"deserialize","type":"FeedbackQuestionDetails","javadoc":null}],"allConstructors":[]},{"name":"LogDetailsAdapter","fullyQualifiedName":"teammates.common.util.JsonUtils.LogDetailsAdapter","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonElement serialize(LogDetails src, Type typeOfSrc, JsonSerializationContext context)","name":"serialize","type":"JsonElement","javadoc":null},{"fullQualified":"public LogDetails deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)","name":"deserialize","type":"LogDetails","javadoc":null}],"allConstructors":[]},{"name":"JsonUtils","fullyQualifiedName":"teammates.common.util.JsonUtils","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":31,"isOrphan":true},{"type":"JavadocComment","text":"\n     * This creates a Gson object that can handle the Date format we use in the\n     * Json file and also reformat the Json string in pretty-print format.\n     ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Serializes and pretty-prints the specified object into its equivalent JSON string.\n     *\n     * @see Gson#toJson(Object, Type)\n     ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Serializes and pretty-prints the specified object into its equivalent JSON string.\n     *\n     * @see Gson#toJson(Object)\n     ","lineNumber":62,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Serializes the specified object into its equivalent JSON string.\n     *\n     * @see Gson#toJson(Object)\n     ","lineNumber":71,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Serializes the specified object into its equivalent JSON string and stream into a writer.\n     * This is done to reduce the memory consumption when creating object across call stack.\n     *\n     * @see Gson#toJson(Object, Appendable)\n     ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deserializes the specified JSON string into an object of the specified type.\n     *\n     * @see Gson#fromJson(String, Type)\n     ","lineNumber":90,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deserializes the specified JSON string into an object of the specified class.\n     *\n     * @see Gson#fromJson(String, Class)\n     ","lineNumber":99,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Parses the specified JSON string into a {@link JsonElement} object.\n     *\n     * @see JsonParser#parseString(String)\n     ","lineNumber":108,"isOrphan":false}],"allMethods":[{"fullQualified":"private static Gson getGsonInstance(boolean prettyPrint)","name":"getGsonInstance","type":"Gson","javadoc":"\n     * This creates a Gson object that can handle the Date format we use in the\n     * Json file and also reformat the Json string in pretty-print format.\n     "},{"fullQualified":"public static String toJson(Object src, Type typeOfSrc)","name":"toJson","type":"String","javadoc":"\n     * Serializes and pretty-prints the specified object into its equivalent JSON string.\n     *\n     * @see Gson#toJson(Object, Type)\n     "},{"fullQualified":"public static String toJson(Object src)","name":"toJson","type":"String","javadoc":"\n     * Serializes and pretty-prints the specified object into its equivalent JSON string.\n     *\n     * @see Gson#toJson(Object)\n     "},{"fullQualified":"public static String toCompactJson(Object src)","name":"toCompactJson","type":"String","javadoc":"\n     * Serializes the specified object into its equivalent JSON string.\n     *\n     * @see Gson#toJson(Object)\n     "},{"fullQualified":"public static void toCompactJson(Object src, Appendable writer)","name":"toCompactJson","type":"void","javadoc":"\n     * Serializes the specified object into its equivalent JSON string and stream into a writer.\n     * This is done to reduce the memory consumption when creating object across call stack.\n     *\n     * @see Gson#toJson(Object, Appendable)\n     "},{"fullQualified":"public static T fromJson(String json, Type typeOfT)","name":"fromJson","type":"T","javadoc":"\n     * Deserializes the specified JSON string into an object of the specified type.\n     *\n     * @see Gson#fromJson(String, Type)\n     "},{"fullQualified":"public static T fromJson(String json, Class<T> classOfT)","name":"fromJson","type":"T","javadoc":"\n     * Deserializes the specified JSON string into an object of the specified class.\n     *\n     * @see Gson#fromJson(String, Class)\n     "},{"fullQualified":"public static JsonElement parse(String json)","name":"parse","type":"JsonElement","javadoc":"\n     * Parses the specified JSON string into a {@link JsonElement} object.\n     *\n     * @see JsonParser#parseString(String)\n     "}],"allConstructors":[{"identifier":"private JsonUtils()","javadocComment":null}]},{"name":"Logger","fullyQualifiedName":"teammates.common.util.Logger","isInterface":false,"codeComments":[{"type":"LineComment","text":" class is designed as a facade for two different loggers","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs a message at FINE level.\n     ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs a message at INFO level.\n     ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs an instance startup event.\n     ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs an instance shutdown event.\n     ","lineNumber":67,"isOrphan":false},{"type":"LineComment","text":" Need to use println as the logger is disabled when the instance is shutting down","lineNumber":96,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs an HTTP request.\n     ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs an HTTP request.\n     ","lineNumber":107,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs a particular event at INFO level.\n     ","lineNumber":140,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs a message at WARNING level.\n     ","lineNumber":159,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs a message at WARNING level.\n     ","lineNumber":166,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs a message at SEVERE level.\n     ","lineNumber":174,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs a message at SEVERE level.\n     ","lineNumber":181,"isOrphan":false},{"type":"LineComment","text":" Replace the source location with the Throwable's source location instead","lineNumber":226,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the first stack trace for the throwable that originates from an internal class\n     * (i.e. package name starting with teammates).\n     * If no such stack trace is found, return the first element of the stack trace list.\n     ","lineNumber":240,"isOrphan":false},{"type":"LineComment","text":" Everything past this line is the internal workings of Jetty","lineNumber":261,"isOrphan":true},{"type":"LineComment","text":" and does not provide anything useful for debugging","lineNumber":262,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Logger getLogger()","name":"getLogger","type":"Logger","javadoc":null},{"fullQualified":"public void fine(String message)","name":"fine","type":"void","javadoc":"\n     * Logs a message at FINE level.\n     "},{"fullQualified":"public void info(String message)","name":"info","type":"void","javadoc":"\n     * Logs a message at INFO level.\n     "},{"fullQualified":"public void startup()","name":"startup","type":"void","javadoc":"\n     * Logs an instance startup event.\n     "},{"fullQualified":"public void shutdown()","name":"shutdown","type":"void","javadoc":"\n     * Logs an instance shutdown event.\n     "},{"fullQualified":"private void instance(String instanceEvent)","name":"instance","type":"void","javadoc":null},{"fullQualified":"public void request(HttpServletRequest request, int statusCode, String message)","name":"request","type":"void","javadoc":"\n     * Logs an HTTP request.\n     "},{"fullQualified":"public void request(HttpServletRequest request, int statusCode, String message, RequestLogUser userInfo, String requestBody, String actionClass)","name":"request","type":"void","javadoc":"\n     * Logs an HTTP request.\n     "},{"fullQualified":"public void event(String message, LogDetails details)","name":"event","type":"void","javadoc":"\n     * Logs a particular event at INFO level.\n     "},{"fullQualified":"public void warning(String message)","name":"warning","type":"void","javadoc":"\n     * Logs a message at WARNING level.\n     "},{"fullQualified":"public void warning(String message, Throwable t)","name":"warning","type":"void","javadoc":"\n     * Logs a message at WARNING level.\n     "},{"fullQualified":"public void severe(String message)","name":"severe","type":"void","javadoc":"\n     * Logs a message at SEVERE level.\n     "},{"fullQualified":"public void severe(String message, Throwable t)","name":"severe","type":"void","javadoc":"\n     * Logs a message at SEVERE level.\n     "},{"fullQualified":"private String getLogMessageWithStackTrace(String message, Throwable t, LogSeverity severity)","name":"getLogMessageWithStackTrace","type":"String","javadoc":null},{"fullQualified":"private StackTraceElement getFirstInternalStackTrace(Throwable t)","name":"getFirstInternalStackTrace","type":"StackTraceElement","javadoc":"\n     * Returns the first stack trace for the throwable that originates from an internal class\n     * (i.e. package name starting with teammates).\n     * If no such stack trace is found, return the first element of the stack trace list.\n     "},{"fullQualified":"private List<String> getStackTraceToDisplay(Throwable t)","name":"getStackTraceToDisplay","type":"List<String>","javadoc":null},{"fullQualified":"private String formatLogMessage(String message, LogSeverity severity)","name":"formatLogMessage","type":"String","javadoc":null},{"fullQualified":"private String formatLogMessageForHumanDisplay(String message)","name":"formatLogMessageForHumanDisplay","type":"String","javadoc":null},{"fullQualified":"private String formatLogMessageForCloudLogging(String message, LogSeverity severity)","name":"formatLogMessageForCloudLogging","type":"String","javadoc":null},{"fullQualified":"private Map<String, Object> getBaseCloudLoggingPayload(String message, LogSeverity severity)","name":"getBaseCloudLoggingPayload","type":"Map<String,Object>","javadoc":null},{"fullQualified":"private StackTraceElement getLoggerSource()","name":"getLoggerSource","type":"StackTraceElement","javadoc":null}],"allConstructors":[{"identifier":"private Logger()","javadocComment":null}]},{"name":"NationalityHelper","fullyQualifiedName":"teammates.common.util.NationalityHelper","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * This list of nationalities was created for the dropdown list and contains\n     * 198 nationalities and an 'Other' option.\n     * reference : \"https://mytaskhelper.com/forums/5-faq-s/topics/98-nationality-dropdown-list\"\n     ","lineNumber":11,"isOrphan":false},{"type":"LineComment","text":" utility class","lineNumber":219,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns with the nationalities list.\n     ","lineNumber":222,"isOrphan":false}],"allMethods":[{"fullQualified":"public static List<String> getNationalities()","name":"getNationalities","type":"List<String>","javadoc":"\n     * Returns with the nationalities list.\n     "}],"allConstructors":[{"identifier":"private NationalityHelper()","javadocComment":null}]},{"name":"RequestTrace","fullyQualifiedName":"teammates.common.util.RequestTracer.RequestTrace","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"private RequestTrace(String traceId, String spanId, int timeoutInSeconds)","javadocComment":null}]},{"name":"RequestTracer","fullyQualifiedName":"teammates.common.util.RequestTracer","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":16,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns the trace ID of the current request.\n     ","lineNumber":19,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the span ID of the current request.\n     ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the remaining time (in millis) until the current request times out.\n     ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Throws {@link DeadlineExceededException} if the current thread has exceeded\n     * the limit for serving request.\n     ","lineNumber":52,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the remaining time (in millis) until the current request times out.\n     ","lineNumber":63,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Initializes the request with an ID and the timeout value (in seconds).\n     ","lineNumber":74,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String getTraceId()","name":"getTraceId","type":"String","javadoc":"\n     * Returns the trace ID of the current request.\n     "},{"fullQualified":"public static String getSpanId()","name":"getSpanId","type":"String","javadoc":"\n     * Returns the span ID of the current request.\n     "},{"fullQualified":"private static long getRemainingTimeMillis()","name":"getRemainingTimeMillis","type":"long","javadoc":"\n     * Returns the remaining time (in millis) until the current request times out.\n     "},{"fullQualified":"public static void checkRemainingTime()","name":"checkRemainingTime","type":"void","javadoc":"\n     * Throws {@link DeadlineExceededException} if the current thread has exceeded\n     * the limit for serving request.\n     "},{"fullQualified":"public static long getTimeElapsedMillis()","name":"getTimeElapsedMillis","type":"long","javadoc":"\n     * Returns the remaining time (in millis) until the current request times out.\n     "},{"fullQualified":"public static void init(String traceId, String spanId, int timeoutInSeconds)","name":"init","type":"void","javadoc":"\n     * Initializes the request with an ID and the timeout value (in seconds).\n     "}],"allConstructors":[{"identifier":"private RequestTracer()","javadocComment":null}]},{"name":"SanitizationHelper","fullyQualifiedName":"teammates.common.util.SanitizationHelper","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":38,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Sanitizes a google ID by removing leading/trailing whitespace\n     * and the trailing \"@gmail.com\".\n     *\n     * @return the sanitized google ID or null (if the parameter was null).\n     ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sanitizes an email address by removing leading/trailing whitespace.\n     *\n     * @return the sanitized email address or null (if the parameter was null).\n     ","lineNumber":59,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sanitizes name by removing leading, trailing, and duplicate internal whitespace.\n     *\n     * @return the sanitized name or null (if the parameter was null).\n     ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sanitizes title by removing leading, trailing, and duplicate internal whitespace.\n     *\n     * @return the sanitized title or null (if the parameter was null).\n     ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sanitizes a user input text field by removing leading/trailing whitespace.\n     * i.e. comments, instructions, etc.\n     *\n     * @return the sanitized text or null (if the parameter was null).\n     ","lineNumber":86,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sanitizes the string with rich-text.\n     * Removes disallowed elements based on defined policy.\n     ","lineNumber":96,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sanitizes the string for inserting into HTML. Converts special characters\n     * into HTML-safe equivalents.\n     ","lineNumber":107,"isOrphan":false},{"type":"LineComment","text":"To ensure when apply sanitizeForHtml for multiple times, the string's still fine","lineNumber":120,"isOrphan":true},{"type":"LineComment","text":"Regex meaning: replace '&' with safe encoding, but not the one that is safe already","lineNumber":121,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts a string to be put in URL (replaces some characters).\n     ","lineNumber":125,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String sanitizeGoogleId(String rawGoogleId)","name":"sanitizeGoogleId","type":"String","javadoc":"\n     * Sanitizes a google ID by removing leading/trailing whitespace\n     * and the trailing \"@gmail.com\".\n     *\n     * @return the sanitized google ID or null (if the parameter was null).\n     "},{"fullQualified":"public static String sanitizeEmail(String rawEmail)","name":"sanitizeEmail","type":"String","javadoc":"\n     * Sanitizes an email address by removing leading/trailing whitespace.\n     *\n     * @return the sanitized email address or null (if the parameter was null).\n     "},{"fullQualified":"public static String sanitizeName(String rawName)","name":"sanitizeName","type":"String","javadoc":"\n     * Sanitizes name by removing leading, trailing, and duplicate internal whitespace.\n     *\n     * @return the sanitized name or null (if the parameter was null).\n     "},{"fullQualified":"public static String sanitizeTitle(String rawTitle)","name":"sanitizeTitle","type":"String","javadoc":"\n     * Sanitizes title by removing leading, trailing, and duplicate internal whitespace.\n     *\n     * @return the sanitized title or null (if the parameter was null).\n     "},{"fullQualified":"public static String sanitizeTextField(String rawText)","name":"sanitizeTextField","type":"String","javadoc":"\n     * Sanitizes a user input text field by removing leading/trailing whitespace.\n     * i.e. comments, instructions, etc.\n     *\n     * @return the sanitized text or null (if the parameter was null).\n     "},{"fullQualified":"public static String sanitizeForRichText(String content)","name":"sanitizeForRichText","type":"String","javadoc":"\n     * Sanitizes the string with rich-text.\n     * Removes disallowed elements based on defined policy.\n     "},{"fullQualified":"public static String sanitizeForHtml(String unsanitizedString)","name":"sanitizeForHtml","type":"String","javadoc":"\n     * Sanitizes the string for inserting into HTML. Converts special characters\n     * into HTML-safe equivalents.\n     "},{"fullQualified":"public static String sanitizeForUri(String uri)","name":"sanitizeForUri","type":"String","javadoc":"\n     * Converts a string to be put in URL (replaces some characters).\n     "}],"allConstructors":[{"identifier":"private SanitizationHelper()","javadocComment":null}]},{"name":"StdOutConsoleHandler","fullyQualifiedName":"teammates.common.util.StdOutConsoleHandler","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected void setOutputStream(OutputStream out)","name":"setOutputStream","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StringHelper","fullyQualifiedName":"teammates.common.util.StringHelper","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":29,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Checks whether the input string is empty or equals {@code null}.\n     * @param s The string to be checked\n     ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates a string which consists of {@code length} copies of {@code character} without space.\n     ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether the input string matches the regex.\n     * @param input The string to be matched\n     * @param regex The regex  used for the matching\n     ","lineNumber":48,"isOrphan":false},{"type":"LineComment","text":" Important to use the CANON_EQ flag to make sure that canonical characters","lineNumber":54,"isOrphan":true},{"type":"LineComment","text":" such as é is correctly matched regardless of single/double code point encoding","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates a left-indentation of {@code length} units.\n     ","lineNumber":59,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Trims head of the String if it is longer than specified Length.\n     *  E.g., String \"12345678\" with maximumStringLength = 6, returns \"345678\"\n     * @param maximumStringLength - maximum required length of the string\n     * @return String with at most maximumStringLength length\n     ","lineNumber":66,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the HMAC SHA-1 signature for a supplied string.\n     *\n     * @param data The string to be signed\n     * @return The signature value as a hex-string\n     ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies the HMAC SHA-1 signature against a given value.\n     *\n     * @param value The value to be checked\n     * @param signature The signature in hex-string format\n     * @return True if signature matches value\n     ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Encrypts the supplied string.\n     *\n     * @param value the plaintext as a string\n     * @return the ciphertext\n     * @throws RuntimeException if the encryption fails for some reason, such as {@code Cipher} initialization failure.\n     ","lineNumber":114,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Decrypts the supplied string.\n     *\n     * @param message the ciphertext as a hexadecimal string\n     * @return the plaintext\n     * @throws InvalidParametersException if the ciphertext is invalid.\n     * @throws RuntimeException if the decryption fails for any other reason, such as {@code Cipher} initialization failure.\n     ","lineNumber":134,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts and concatenates a list of objects to a single string, separated by line breaks.\n     * The conversion is done by using the {@link Object#toString()} method.\n     * @return Concatenated string.\n     ","lineNumber":158,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts and concatenates a list of objects to a single string, separated by the given delimiter.\n     * The conversion is done by using the {@link Object#toString()} method.\n     * @return Concatenated string.\n     ","lineNumber":167,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts a double value between 0 and 1 to 3dp-string.\n     ","lineNumber":178,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Trims the string and reduces consecutive white spaces to only one space.\n     * Example: \" a   a  \" --> \"a a\".\n     * @return processed string, returns null if parameter is null\n     ","lineNumber":186,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Replaces every character in {@code str} that does not match\n     * {@code regex} with the character {@code replacement}.\n     *\n     * @param str String to be replaced.\n     * @param regex Pattern that every character is to be matched against.\n     * @param replacement Character unmatching characters should be replaced with.\n     * @return String with all unmatching characters replaced; null if input is null.\n     ","lineNumber":198,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts a byte array to hexadecimal string.\n     ","lineNumber":221,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts a hexadecimal string to byte array.\n     ","lineNumber":236,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Trims the string if it is not null.\n     *\n     * @return the trimmed string or null (if the parameter was null).\n     ","lineNumber":246,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts null input to empty string. Non-null inputs will be left as is.\n     * This method is for displaying purpose.\n     *\n     * @return empty string if null, the string itself otherwise\n     ","lineNumber":255,"isOrphan":false}],"allMethods":[{"fullQualified":"public static boolean isEmpty(String s)","name":"isEmpty","type":"boolean","javadoc":"\n     * Checks whether the input string is empty or equals {@code null}.\n     * @param s The string to be checked\n     "},{"fullQualified":" static String generateStringOfLength(int length, char character)","name":"generateStringOfLength","type":"String","javadoc":"\n     * Generates a string which consists of {@code length} copies of {@code character} without space.\n     "},{"fullQualified":"public static boolean isMatching(String input, String regex)","name":"isMatching","type":"boolean","javadoc":"\n     * Checks whether the input string matches the regex.\n     * @param input The string to be matched\n     * @param regex The regex  used for the matching\n     "},{"fullQualified":"public static String getIndent(int length)","name":"getIndent","type":"String","javadoc":"\n     * Generates a left-indentation of {@code length} units.\n     "},{"fullQualified":"public static String truncateHead(String inputString, int maximumStringLength)","name":"truncateHead","type":"String","javadoc":"\n     * Trims head of the String if it is longer than specified Length.\n     *  E.g., String \"12345678\" with maximumStringLength = 6, returns \"345678\"\n     * @param maximumStringLength - maximum required length of the string\n     * @return String with at most maximumStringLength length\n     "},{"fullQualified":"public static String generateSignature(String data)","name":"generateSignature","type":"String","javadoc":"\n     * Generates the HMAC SHA-1 signature for a supplied string.\n     *\n     * @param data The string to be signed\n     * @return The signature value as a hex-string\n     "},{"fullQualified":"public static boolean isCorrectSignature(String value, String signature)","name":"isCorrectSignature","type":"boolean","javadoc":"\n     * Verifies the HMAC SHA-1 signature against a given value.\n     *\n     * @param value The value to be checked\n     * @param signature The signature in hex-string format\n     * @return True if signature matches value\n     "},{"fullQualified":"public static String encrypt(String value)","name":"encrypt","type":"String","javadoc":"\n     * Encrypts the supplied string.\n     *\n     * @param value the plaintext as a string\n     * @return the ciphertext\n     * @throws RuntimeException if the encryption fails for some reason, such as {@code Cipher} initialization failure.\n     "},{"fullQualified":"public static String decrypt(String message) throws InvalidParametersException","name":"decrypt","type":"String","javadoc":"\n     * Decrypts the supplied string.\n     *\n     * @param message the ciphertext as a hexadecimal string\n     * @return the plaintext\n     * @throws InvalidParametersException if the ciphertext is invalid.\n     * @throws RuntimeException if the decryption fails for any other reason, such as {@code Cipher} initialization failure.\n     "},{"fullQualified":"public static String toString(List<T> list)","name":"toString","type":"String","javadoc":"\n     * Converts and concatenates a list of objects to a single string, separated by line breaks.\n     * The conversion is done by using the {@link Object#toString()} method.\n     * @return Concatenated string.\n     "},{"fullQualified":"public static String toString(List<T> list, String delimiter)","name":"toString","type":"String","javadoc":"\n     * Converts and concatenates a list of objects to a single string, separated by the given delimiter.\n     * The conversion is done by using the {@link Object#toString()} method.\n     * @return Concatenated string.\n     "},{"fullQualified":"public static String toDecimalFormatString(double doubleVal)","name":"toDecimalFormatString","type":"String","javadoc":"\n     * Converts a double value between 0 and 1 to 3dp-string.\n     "},{"fullQualified":"public static String removeExtraSpace(String str)","name":"removeExtraSpace","type":"String","javadoc":"\n     * Trims the string and reduces consecutive white spaces to only one space.\n     * Example: \" a   a  \" --> \"a a\".\n     * @return processed string, returns null if parameter is null\n     "},{"fullQualified":"public static String replaceIllegalChars(String str, String regex, char replacement)","name":"replaceIllegalChars","type":"String","javadoc":"\n     * Replaces every character in {@code str} that does not match\n     * {@code regex} with the character {@code replacement}.\n     *\n     * @param str String to be replaced.\n     * @param regex Pattern that every character is to be matched against.\n     * @param replacement Character unmatching characters should be replaced with.\n     * @return String with all unmatching characters replaced; null if input is null.\n     "},{"fullQualified":" static String byteArrayToHexString(byte[] bytes)","name":"byteArrayToHexString","type":"String","javadoc":"\n     * Converts a byte array to hexadecimal string.\n     "},{"fullQualified":"public static byte[] hexStringToByteArray(String s)","name":"hexStringToByteArray","type":"byte[]","javadoc":"\n     * Converts a hexadecimal string to byte array.\n     "},{"fullQualified":"public static String trimIfNotNull(String string)","name":"trimIfNotNull","type":"String","javadoc":"\n     * Trims the string if it is not null.\n     *\n     * @return the trimmed string or null (if the parameter was null).\n     "},{"fullQualified":"public static String convertToEmptyStringIfNull(String str)","name":"convertToEmptyStringIfNull","type":"String","javadoc":"\n     * Converts null input to empty string. Non-null inputs will be left as is.\n     * This method is for displaying purpose.\n     *\n     * @return empty string if null, the string itself otherwise\n     "}],"allConstructors":[{"identifier":"private StringHelper()","javadocComment":null}]},{"name":"TaskWrapper","fullyQualifiedName":"teammates.common.util.TaskWrapper","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getQueueName()","name":"getQueueName","type":"String","javadoc":null},{"fullQualified":"public String getWorkerUrl()","name":"getWorkerUrl","type":"String","javadoc":null},{"fullQualified":"public Map<String, String> getParamMap()","name":"getParamMap","type":"Map<String,String>","javadoc":null},{"fullQualified":"public Object getRequestBody()","name":"getRequestBody","type":"Object","javadoc":null}],"allConstructors":[{"identifier":"public TaskWrapper(String queueName, String workerUrl, Map<String, String> paramMap, Object requestBody)","javadocComment":null}]},{"name":"EmailTemplates","fullyQualifiedName":"teammates.common.util.Templates.EmailTemplates","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"Templates","fullyQualifiedName":"teammates.common.util.Templates","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":11,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Populates the HTML templates by replacing variables in the template string\n     * with the given value strings.\n     * @param template The template html to be populated\n     * @param keyValuePairs Array of a variable, even number of key-value pairs:\n     *                   { \"key1\", \"val1\", \"key2\", \"val2\", ... }\n     * @return The populated template\n     ","lineNumber":14,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Collection of templates of emails to be sent by the system.\n     ","lineNumber":31,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String populateTemplate(String template, String... keyValuePairs)","name":"populateTemplate","type":"String","javadoc":"\n     * Populates the HTML templates by replacing variables in the template string\n     * with the given value strings.\n     * @param template The template html to be populated\n     * @param keyValuePairs Array of a variable, even number of key-value pairs:\n     *                   { \"key1\", \"val1\", \"key2\", \"val2\", ... }\n     * @return The populated template\n     "}],"allConstructors":[{"identifier":"private Templates()","javadocComment":null}]},{"name":"TimeHelper","fullyQualifiedName":"teammates.common.util.TimeHelper","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":19,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns an Instant that represents the nearest hour before the given object.\n     *\n     * <p>The time zone used is assumed to be the default timezone, namely UTC.\n     ","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns an Instant that is offset by a number of days from now.\n     *\n     * @param offsetInDays integer number of days to offset by\n     * @return an Instant offset by {@code offsetInDays} days\n     ","lineNumber":32,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns an Instant that is offset by a number of days before now.\n     *\n     * @param offsetInDays integer number of days to offset by\n     * @return an Instant offset by {@code offsetInDays} days\n     ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Formats a datetime stamp from an {@code instant} using a formatting pattern.\n     *\n     * <p>Note: a formatting pattern containing 'a' (for the period; AM/PM) is treated differently at noon/midday.\n     * Using that pattern with a datetime whose time falls on \"12:00 PM\" will cause it to be formatted as \"12:00 NOON\".</p>\n     *\n     * @param instant  the instant to be formatted\n     * @param timeZone the time zone to compute local datetime\n     * @param pattern  formatting pattern, see Oracle docs for DateTimeFormatter for pattern table\n     * @return the formatted datetime stamp string\n     ","lineNumber":52,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an Instant which is adjusted for midnight time (23:59 and 00:00) at the specified time zone.\n     * The direction of adjustment (23:59 to 00:00 or vice versa) is determined by {@code isForward} parameter.\n     ","lineNumber":76,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns whether the given {@code instant} is being used as a special representation, signifying its face value\n     * should not be used without proper processing.\n     *\n     * <p>A {@code null} instant is not a special time.</p>\n     *\n     * @param instant the instant to test\n     * @return {@code true} if the given instant is used as a special representation, {@code false} otherwise\n     ","lineNumber":93,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Parses an {@code Instant} object from a datetime string in the ISO 8601 format.\n     *\n     * @return the parsed {@code Instant} object\n     * @throws AssertionError if there is a parsing error\n     * @see <a href=\"https://www.w3.org/TR/NOTE-datetime\">https://www.w3.org/TR/NOTE-datetime</a>\n     ","lineNumber":113,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Instant getInstantNearestHourBefore(Instant instant)","name":"getInstantNearestHourBefore","type":"Instant","javadoc":"\n     * Returns an Instant that represents the nearest hour before the given object.\n     *\n     * <p>The time zone used is assumed to be the default timezone, namely UTC.\n     "},{"fullQualified":"public static Instant getInstantDaysOffsetFromNow(long offsetInDays)","name":"getInstantDaysOffsetFromNow","type":"Instant","javadoc":"\n     * Returns an Instant that is offset by a number of days from now.\n     *\n     * @param offsetInDays integer number of days to offset by\n     * @return an Instant offset by {@code offsetInDays} days\n     "},{"fullQualified":"public static Instant getInstantDaysOffsetBeforeNow(long offsetInDays)","name":"getInstantDaysOffsetBeforeNow","type":"Instant","javadoc":"\n     * Returns an Instant that is offset by a number of days before now.\n     *\n     * @param offsetInDays integer number of days to offset by\n     * @return an Instant offset by {@code offsetInDays} days\n     "},{"fullQualified":"public static String formatInstant(Instant instant, String timeZone, String pattern)","name":"formatInstant","type":"String","javadoc":"\n     * Formats a datetime stamp from an {@code instant} using a formatting pattern.\n     *\n     * <p>Note: a formatting pattern containing 'a' (for the period; AM/PM) is treated differently at noon/midday.\n     * Using that pattern with a datetime whose time falls on \"12:00 PM\" will cause it to be formatted as \"12:00 NOON\".</p>\n     *\n     * @param instant  the instant to be formatted\n     * @param timeZone the time zone to compute local datetime\n     * @param pattern  formatting pattern, see Oracle docs for DateTimeFormatter for pattern table\n     * @return the formatted datetime stamp string\n     "},{"fullQualified":"public static Instant getMidnightAdjustedInstantBasedOnZone(Instant instant, String timeZone, boolean isForward)","name":"getMidnightAdjustedInstantBasedOnZone","type":"Instant","javadoc":"\n     * Gets an Instant which is adjusted for midnight time (23:59 and 00:00) at the specified time zone.\n     * The direction of adjustment (23:59 to 00:00 or vice versa) is determined by {@code isForward} parameter.\n     "},{"fullQualified":"public static boolean isSpecialTime(Instant instant)","name":"isSpecialTime","type":"boolean","javadoc":"\n     * Returns whether the given {@code instant} is being used as a special representation, signifying its face value\n     * should not be used without proper processing.\n     *\n     * <p>A {@code null} instant is not a special time.</p>\n     *\n     * @param instant the instant to test\n     * @return {@code true} if the given instant is used as a special representation, {@code false} otherwise\n     "},{"fullQualified":"public static Instant parseInstant(String dateTimeString)","name":"parseInstant","type":"Instant","javadoc":"\n     * Parses an {@code Instant} object from a datetime string in the ISO 8601 format.\n     *\n     * @return the parsed {@code Instant} object\n     * @throws AssertionError if there is a parsing error\n     * @see <a href=\"https://www.w3.org/TR/NOTE-datetime\">https://www.w3.org/TR/NOTE-datetime</a>\n     "}],"allConstructors":[{"identifier":"private TimeHelper()","javadocComment":null}]},{"name":"TzdbResourceZoneRulesProvider","fullyQualifiedName":"teammates.common.util.TzdbResourceZoneRulesProvider","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" Type for ZoneRules. ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":" Type for ZoneOffsetTransition. ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":" Type for ZoneOffsetTransitionRule. ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\n     * All the regions that are available.\n     ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Version Id of this tzdb rules.\n     ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Region to rules mapping.\n     ","lineNumber":50,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates an instance.\n     * Created by the {@code ServiceLoader}.\n     *\n     * @throws ZoneRulesException if unable to load\n     ","lineNumber":55,"isOrphan":false},{"type":"LineComment","text":" forCaching flag is ignored because this is not a dynamic provider","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Loads the rules from a DateInputStream, often in a jar file.\n     *\n     * @param dis  the DateInputStream to load, not null\n     * @throws IOException if an error occurs\n     ","lineNumber":107,"isOrphan":false},{"type":"LineComment","text":" group","lineNumber":117,"isOrphan":false},{"type":"LineComment","text":" versions","lineNumber":122,"isOrphan":false},{"type":"LineComment","text":" regions","lineNumber":127,"isOrphan":false},{"type":"LineComment","text":" rules","lineNumber":134,"isOrphan":false},{"type":"LineComment","text":" link version-region-rules","lineNumber":142,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Modified from {@link java.time.zone.Ser#read(DataInput)}.\n     ","lineNumber":159,"isOrphan":false},{"type":"LineComment","text":" ZoneRules.readExternal(in)","lineNumber":166,"isOrphan":false},{"type":"LineComment","text":" ZoneOffsetTransition.readExternal(in)","lineNumber":168,"isOrphan":false},{"type":"LineComment","text":" ZoneOffsetTransitionRule.readExternal(in)","lineNumber":170,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Modified from {@link java.time.zone.ZoneRules#readExternal(DataInput)}.\n     ","lineNumber":176,"isOrphan":false},{"type":"LineComment","text":" return new ZoneRules(stdTrans, stdOffsets, savTrans, savOffsets, rules);","lineNumber":203,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Modified from {@link java.time.zone.ZoneOffsetTransition#readExternal(DataInput)}.\n     ","lineNumber":225,"isOrphan":false},{"type":"LineComment","text":" return new ZoneOffsetTransition(epochSecond, before, after);","lineNumber":236,"isOrphan":true},{"type":"LineComment","text":" DataInput needs to be read in a specific sequence","lineNumber":229,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Modified from {@link java.time.zone.ZoneOffsetTransitionRule#readExternal(DataInput)}.\n     ","lineNumber":241,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Modified from {@link java.time.zone.Ser#readEpochSec(DataInput)}.\n     ","lineNumber":269,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Modified from {@link java.time.zone.Ser#readOffset(DataInput)}.\n     ","lineNumber":283,"isOrphan":false}],"allMethods":[{"fullQualified":"protected Set<String> provideZoneIds()","name":"provideZoneIds","type":"Set<String>","javadoc":null},{"fullQualified":"protected ZoneRules provideRules(String zoneId, boolean forCaching)","name":"provideRules","type":"ZoneRules","javadoc":null},{"fullQualified":"protected NavigableMap<String, ZoneRules> provideVersions(String zoneId)","name":"provideVersions","type":"NavigableMap<String,ZoneRules>","javadoc":null},{"fullQualified":"private void load(DataInputStream dis) throws IOException","name":"load","type":"void","javadoc":"\n     * Loads the rules from a DateInputStream, often in a jar file.\n     *\n     * @param dis  the DateInputStream to load, not null\n     * @throws IOException if an error occurs\n     "},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"private static Object serRead(DataInput in) throws IOException","name":"serRead","type":"Object","javadoc":"\n     * Modified from {@link java.time.zone.Ser#read(DataInput)}.\n     "},{"fullQualified":"private static ZoneRules zrulesReadExternal(DataInput in) throws IOException","name":"zrulesReadExternal","type":"ZoneRules","javadoc":"\n     * Modified from {@link java.time.zone.ZoneRules#readExternal(DataInput)}.\n     "},{"fullQualified":"private static ZoneOffsetTransition zotReadExternal(DataInput in) throws IOException","name":"zotReadExternal","type":"ZoneOffsetTransition","javadoc":"\n     * Modified from {@link java.time.zone.ZoneOffsetTransition#readExternal(DataInput)}.\n     "},{"fullQualified":"private static ZoneOffsetTransitionRule zotruleReadExternal(DataInput in) throws IOException","name":"zotruleReadExternal","type":"ZoneOffsetTransitionRule","javadoc":"\n     * Modified from {@link java.time.zone.ZoneOffsetTransitionRule#readExternal(DataInput)}.\n     "},{"fullQualified":"private static long serReadEpochSec(DataInput in) throws IOException","name":"serReadEpochSec","type":"long","javadoc":"\n     * Modified from {@link java.time.zone.Ser#readEpochSec(DataInput)}.\n     "},{"fullQualified":"private static ZoneOffset serReadOffset(DataInput in) throws IOException","name":"serReadOffset","type":"ZoneOffset","javadoc":"\n     * Modified from {@link java.time.zone.Ser#readOffset(DataInput)}.\n     "}],"allConstructors":[{"identifier":"public TzdbResourceZoneRulesProvider()","javadocComment":"\n     * Creates an instance.\n     * Created by the {@code ServiceLoader}.\n     *\n     * @throws ZoneRulesException if unable to load\n     "}]},{"name":"Url","fullyQualifiedName":"teammates.common.util.Url","isInterface":false,"codeComments":[{"type":"LineComment","text":" parse and validate the urlString with the built-in URL object","lineNumber":17,"isOrphan":false},{"type":"JavadocComment","text":"\n      * Returns the first part of the URL, including the protocol and\n      * authority (host name + port number if specified) but not the path.<br>\n      * Example:\n      * <ul>\n      * <li><code>new Url(\"http://localhost:8080/index.html\").getBaseUrl()</code>\n      * returns <code>http://localhost:8080</code></li>\n      * <li><code>new Url(\"https://teammatesv4.appspot.com/index.html\").getBaseUrl()</code>\n      * returns <code>https://teammatesv4.appspot.com</code></li>\n      * </ul>\n      ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the URL with the specified key-value pair parameter added.\n     * The parameter will also be sanitized according to URL specification.\n     * Unchanged if either the key or value is null, or the key already exists<br>\n     * Example:\n     * <ul>\n     * <li><code>addParam(\"index.html\",\"action\",\"add\")</code> returns\n     * <code>index.html?action=add</code></li>\n     * <li><code>addParam(\"index.html?action=add\",\"courseid\",\"cs1101\")</code>\n     * returns <code>index.html?action=add&courseid=cs1101</code></li>\n     * <li><code>addParam(\"index.html\",\"message\",null)</code> returns\n     * <code>index.html</code></li>\n     * </ul>\n     ","lineNumber":52,"isOrphan":false},{"type":"LineComment","text":" return the url if any of the key or the value is null or empty","lineNumber":69,"isOrphan":true},{"type":"LineComment","text":" or if the key is already included in the url","lineNumber":70,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the absolute version of the URL by appending the base URL\n     * to the URL input.\n     ","lineNumber":81,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getBaseUrl()","name":"getBaseUrl","type":"String","javadoc":"\n      * Returns the first part of the URL, including the protocol and\n      * authority (host name + port number if specified) but not the path.<br>\n      * Example:\n      * <ul>\n      * <li><code>new Url(\"http://localhost:8080/index.html\").getBaseUrl()</code>\n      * returns <code>http://localhost:8080</code></li>\n      * <li><code>new Url(\"https://teammatesv4.appspot.com/index.html\").getBaseUrl()</code>\n      * returns <code>https://teammatesv4.appspot.com</code></li>\n      * </ul>\n      "},{"fullQualified":"public T withParam(String paramName, String paramValue)","name":"withParam","type":"T","javadoc":null},{"fullQualified":" static String addParamToUrl(String url, String key, String value)","name":"addParamToUrl","type":"String","javadoc":"\n     * Returns the URL with the specified key-value pair parameter added.\n     * The parameter will also be sanitized according to URL specification.\n     * Unchanged if either the key or value is null, or the key already exists<br>\n     * Example:\n     * <ul>\n     * <li><code>addParam(\"index.html\",\"action\",\"add\")</code> returns\n     * <code>index.html?action=add</code></li>\n     * <li><code>addParam(\"index.html?action=add\",\"courseid\",\"cs1101\")</code>\n     * returns <code>index.html?action=add&courseid=cs1101</code></li>\n     * <li><code>addParam(\"index.html\",\"message\",null)</code> returns\n     * <code>index.html</code></li>\n     * </ul>\n     "},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null},{"fullQualified":"public String toAbsoluteString()","name":"toAbsoluteString","type":"String","javadoc":"\n     * Returns the absolute version of the URL by appending the base URL\n     * to the URL input.\n     "}],"allConstructors":[{"identifier":"public Url(String urlString)","javadocComment":null}]},{"name":"EmailGenerator","fullyQualifiedName":"teammates.logic.api.EmailGenerator","isInterface":false,"codeComments":[{"type":"LineComment","text":" status-related strings","lineNumber":40,"isOrphan":false},{"type":"LineComment","text":" feedback action strings","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" prevent initialization","lineNumber":65,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Generates the feedback session opening emails for the given {@code session}.\n     ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the feedback session opening soon emails for the given {@code session}.\n     *\n     * <p>This is useful for e.g. in case the feedback session opening info was set wrongly.\n     ","lineNumber":115,"isOrphan":false},{"type":"LineComment","text":" Notify only course co-owners","lineNumber":127,"isOrphan":false},{"type":"LineComment","text":" If instructor has not joined the course, populate additional notes with information to join course.","lineNumber":143,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the fragment for instructions on how to edit details for feedback session at {@code editUrl}.\n     ","lineNumber":184,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the fragment for instructions on how to view responses for feedback session at {@code reportUrl}.\n     ","lineNumber":192,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the fragment for instructions on how to edit details for feedback session at {@code editUrl} and\n     * how to join the course at {@code joinUrl}.\n     ","lineNumber":200,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the feedback session reminder emails for the given {@code session} for {@code students}\n     * and {@code instructorsToRemind}. In addition, the emails will also be forwarded to {@code instructorsToNotify}.\n     ","lineNumber":211,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the email containing the summary of the feedback sessions\n     * email for the given {@code courseId} for {@code userEmail}.\n     * @param courseId - ID of the course\n     * @param userEmail - Email of student to send feedback session summary to\n     * @param emailType - The email type which corresponds to the reason behind why the links are being resent\n     ","lineNumber":230,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates for the student an recovery email listing the links to submit/view responses for all feedback sessions\n     * under {@code recoveryEmailAddress} in the past 180 days. If no student with {@code recoveryEmailAddress} is\n     * found, generate an email stating that there is no such student in the system. If no feedback sessions are found,\n     * generate an email stating no feedback sessions found.\n     ","lineNumber":343,"isOrphan":false},{"type":"LineComment","text":" Query students' courses first","lineNumber":384,"isOrphan":true},{"type":"LineComment","text":" as a student will likely be in only a small number of courses.","lineNumber":385,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the feedback session closing emails for the given {@code session}.\n     *\n     * <p>Students and instructors with deadline extensions are not notified.\n     ","lineNumber":469,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the feedback session closed emails for the given {@code session}.\n     ","lineNumber":478,"isOrphan":false},{"type":"JavadocComment","text":"\n    * Generates the feedback session closing emails for users with deadline extensions.\n    ","lineNumber":485,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the feedback session published emails for the given {@code session}.\n     ","lineNumber":540,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the feedback session published emails for the given {@code students} and\n     * {@code instructors} in {@code session}.\n     ","lineNumber":547,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the feedback session unpublished emails for the given {@code session}.\n     ","lineNumber":558,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates deadline extension granted emails.\n     ","lineNumber":601,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates deadline extension updated emails.\n     ","lineNumber":615,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates deadline extension revoked emails.\n     ","lineNumber":629,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the new instructor account join email for the given {@code instructor}.\n     ","lineNumber":836,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the course join email for the given {@code student} in {@code course}.\n     ","lineNumber":854,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the course re-join email for the given {@code student} in {@code course}.\n     ","lineNumber":873,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the course join email for the given {@code instructor} in {@code course}.\n     * Also specifies contact information of {@code inviter}.\n     ","lineNumber":893,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the course re-join email for the given {@code instructor} in {@code course}.\n     ","lineNumber":915,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the course registered email for the user with the given details in {@code course}.\n     ","lineNumber":934,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates the logs compilation email for the given {@code logs}.\n     ","lineNumber":999,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates additional contact information for User Email Templates.\n     * @return The contact information after replacing the placeholders.\n     ","lineNumber":1050,"isOrphan":false}],"allMethods":[{"fullQualified":"public static EmailGenerator inst()","name":"inst","type":"EmailGenerator","javadoc":null},{"fullQualified":"public List<EmailWrapper> generateFeedbackSessionOpeningEmails(FeedbackSessionAttributes session)","name":"generateFeedbackSessionOpeningEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates the feedback session opening emails for the given {@code session}.\n     "},{"fullQualified":"private List<EmailWrapper> generateFeedbackSessionOpeningOrClosingEmails(FeedbackSessionAttributes session, EmailType emailType)","name":"generateFeedbackSessionOpeningOrClosingEmails","type":"List<EmailWrapper>","javadoc":null},{"fullQualified":"public List<EmailWrapper> generateFeedbackSessionOpeningSoonEmails(FeedbackSessionAttributes session)","name":"generateFeedbackSessionOpeningSoonEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates the feedback session opening soon emails for the given {@code session}.\n     *\n     * <p>This is useful for e.g. in case the feedback session opening info was set wrongly.\n     "},{"fullQualified":"private List<EmailWrapper> generateFeedbackSessionOpeningSoonOrClosedEmails(FeedbackSessionAttributes session, EmailType emailType)","name":"generateFeedbackSessionOpeningSoonOrClosedEmails","type":"List<EmailWrapper>","javadoc":null},{"fullQualified":"private EmailWrapper generateFeedbackSessionEmailBaseForCoowner(CourseAttributes course, FeedbackSessionAttributes session, InstructorAttributes coOwner, EmailType emailType)","name":"generateFeedbackSessionEmailBaseForCoowner","type":"EmailWrapper","javadoc":null},{"fullQualified":"private String fillUpEditFeedbackSessionDetailsFragment(String editUrl)","name":"fillUpEditFeedbackSessionDetailsFragment","type":"String","javadoc":"\n     * Generates the fragment for instructions on how to edit details for feedback session at {@code editUrl}.\n     "},{"fullQualified":"private String fillUpViewResponsesDetailsFragment(String reportUrl)","name":"fillUpViewResponsesDetailsFragment","type":"String","javadoc":"\n     * Generates the fragment for instructions on how to view responses for feedback session at {@code reportUrl}.\n     "},{"fullQualified":"private String fillUpJoinCourseBeforeEditFeedbackSessionDetailsFragment(String editUrl, String joinUrl)","name":"fillUpJoinCourseBeforeEditFeedbackSessionDetailsFragment","type":"String","javadoc":"\n     * Generates the fragment for instructions on how to edit details for feedback session at {@code editUrl} and\n     * how to join the course at {@code joinUrl}.\n     "},{"fullQualified":"public List<EmailWrapper> generateFeedbackSessionReminderEmails(FeedbackSessionAttributes session, List<StudentAttributes> students, List<InstructorAttributes> instructorsToRemind, InstructorAttributes instructorToNotify)","name":"generateFeedbackSessionReminderEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates the feedback session reminder emails for the given {@code session} for {@code students}\n     * and {@code instructorsToRemind}. In addition, the emails will also be forwarded to {@code instructorsToNotify}.\n     "},{"fullQualified":"public EmailWrapper generateFeedbackSessionSummaryOfCourse(String courseId, String userEmail, EmailType emailType)","name":"generateFeedbackSessionSummaryOfCourse","type":"EmailWrapper","javadoc":"\n     * Generates the email containing the summary of the feedback sessions\n     * email for the given {@code courseId} for {@code userEmail}.\n     * @param courseId - ID of the course\n     * @param userEmail - Email of student to send feedback session summary to\n     * @param emailType - The email type which corresponds to the reason behind why the links are being resent\n     "},{"fullQualified":"public EmailWrapper generateSessionLinksRecoveryEmailForStudent(String recoveryEmailAddress)","name":"generateSessionLinksRecoveryEmailForStudent","type":"EmailWrapper","javadoc":"\n     * Generates for the student an recovery email listing the links to submit/view responses for all feedback sessions\n     * under {@code recoveryEmailAddress} in the past 180 days. If no student with {@code recoveryEmailAddress} is\n     * found, generate an email stating that there is no such student in the system. If no feedback sessions are found,\n     * generate an email stating no feedback sessions found.\n     "},{"fullQualified":"private EmailWrapper generateSessionLinksRecoveryEmailForNonExistentStudent(String recoveryEmailAddress)","name":"generateSessionLinksRecoveryEmailForNonExistentStudent","type":"EmailWrapper","javadoc":null},{"fullQualified":"private EmailWrapper generateSessionLinksRecoveryEmailForExistingStudent(String recoveryEmailAddress, List<StudentAttributes> studentsForEmail)","name":"generateSessionLinksRecoveryEmailForExistingStudent","type":"EmailWrapper","javadoc":null},{"fullQualified":"public List<EmailWrapper> generateFeedbackSessionClosingEmails(FeedbackSessionAttributes session)","name":"generateFeedbackSessionClosingEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates the feedback session closing emails for the given {@code session}.\n     *\n     * <p>Students and instructors with deadline extensions are not notified.\n     "},{"fullQualified":"public List<EmailWrapper> generateFeedbackSessionClosedEmails(FeedbackSessionAttributes session)","name":"generateFeedbackSessionClosedEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates the feedback session closed emails for the given {@code session}.\n     "},{"fullQualified":"public List<EmailWrapper> generateFeedbackSessionClosingWithExtensionEmails(FeedbackSessionAttributes session, List<DeadlineExtensionAttributes> deadlineExtensions)","name":"generateFeedbackSessionClosingWithExtensionEmails","type":"List<EmailWrapper>","javadoc":"\n    * Generates the feedback session closing emails for users with deadline extensions.\n    "},{"fullQualified":"public List<EmailWrapper> generateFeedbackSessionPublishedEmails(FeedbackSessionAttributes session)","name":"generateFeedbackSessionPublishedEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates the feedback session published emails for the given {@code session}.\n     "},{"fullQualified":"public List<EmailWrapper> generateFeedbackSessionPublishedEmails(FeedbackSessionAttributes session, List<StudentAttributes> students, List<InstructorAttributes> instructors, List<InstructorAttributes> instructorsToNotify)","name":"generateFeedbackSessionPublishedEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates the feedback session published emails for the given {@code students} and\n     * {@code instructors} in {@code session}.\n     "},{"fullQualified":"public List<EmailWrapper> generateFeedbackSessionUnpublishedEmails(FeedbackSessionAttributes session)","name":"generateFeedbackSessionUnpublishedEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates the feedback session unpublished emails for the given {@code session}.\n     "},{"fullQualified":"private List<EmailWrapper> generateFeedbackSessionPublishedOrUnpublishedEmails(FeedbackSessionAttributes session, EmailType emailType)","name":"generateFeedbackSessionPublishedOrUnpublishedEmails","type":"List<EmailWrapper>","javadoc":null},{"fullQualified":"private List<EmailWrapper> generateFeedbackSessionPublishedOrUnpublishedEmails(FeedbackSessionAttributes session, List<StudentAttributes> students, List<InstructorAttributes> instructors, List<InstructorAttributes> instructorsToNotify, EmailType emailType)","name":"generateFeedbackSessionPublishedOrUnpublishedEmails","type":"List<EmailWrapper>","javadoc":null},{"fullQualified":"public List<EmailWrapper> generateDeadlineGrantedEmails(CourseAttributes course, FeedbackSessionAttributes session, Map<String, Instant> createdDeadlines, boolean areInstructors)","name":"generateDeadlineGrantedEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates deadline extension granted emails.\n     "},{"fullQualified":"public List<EmailWrapper> generateDeadlineUpdatedEmails(CourseAttributes course, FeedbackSessionAttributes session, Map<String, Instant> updatedDeadlines, Map<String, Instant> oldDeadlines, boolean areInstructors)","name":"generateDeadlineUpdatedEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates deadline extension updated emails.\n     "},{"fullQualified":"public List<EmailWrapper> generateDeadlineRevokedEmails(CourseAttributes course, FeedbackSessionAttributes session, Map<String, Instant> revokedDeadlines, boolean areInstructors)","name":"generateDeadlineRevokedEmails","type":"List<EmailWrapper>","javadoc":"\n     * Generates deadline extension revoked emails.\n     "},{"fullQualified":"private EmailWrapper generateDeadlineExtensionEmail(CourseAttributes course, FeedbackSessionAttributes session, Instant oldEndTime, Instant endTime, EmailType emailType, String userEmail, boolean isInstructor)","name":"generateDeadlineExtensionEmail","type":"EmailWrapper","javadoc":null},{"fullQualified":"private List<EmailWrapper> generateFeedbackSessionEmailBases(CourseAttributes course, FeedbackSessionAttributes session, List<StudentAttributes> students, List<InstructorAttributes> instructors, List<InstructorAttributes> instructorsToNotify, String template, EmailType type, String feedbackAction)","name":"generateFeedbackSessionEmailBases","type":"List<EmailWrapper>","javadoc":null},{"fullQualified":"private EmailWrapper generateFeedbackSessionEmailBaseForStudents(CourseAttributes course, FeedbackSessionAttributes session, StudentAttributes student, String template, EmailType type, String feedbackAction, String additionalContactInformation)","name":"generateFeedbackSessionEmailBaseForStudents","type":"EmailWrapper","javadoc":null},{"fullQualified":"private EmailWrapper generateFeedbackSessionEmailBaseForInstructors(CourseAttributes course, FeedbackSessionAttributes session, InstructorAttributes instructor, String template, EmailType type, String feedbackAction, String additionalContactInformation)","name":"generateFeedbackSessionEmailBaseForInstructors","type":"EmailWrapper","javadoc":null},{"fullQualified":"private EmailWrapper generateFeedbackSessionEmailBaseForNotifiedInstructors(CourseAttributes course, FeedbackSessionAttributes session, InstructorAttributes instructor, String template, EmailType type, String feedbackAction, String additionalContactInformation)","name":"generateFeedbackSessionEmailBaseForNotifiedInstructors","type":"EmailWrapper","javadoc":null},{"fullQualified":"private boolean isYetToJoinCourse(StudentAttributes student)","name":"isYetToJoinCourse","type":"boolean","javadoc":null},{"fullQualified":"private boolean isYetToJoinCourse(InstructorAttributes instructor)","name":"isYetToJoinCourse","type":"boolean","javadoc":null},{"fullQualified":"public EmailWrapper generateNewInstructorAccountJoinEmail(String instructorEmail, String instructorName, String joinUrl)","name":"generateNewInstructorAccountJoinEmail","type":"EmailWrapper","javadoc":"\n     * Generates the new instructor account join email for the given {@code instructor}.\n     "},{"fullQualified":"public EmailWrapper generateStudentCourseJoinEmail(CourseAttributes course, StudentAttributes student)","name":"generateStudentCourseJoinEmail","type":"EmailWrapper","javadoc":"\n     * Generates the course join email for the given {@code student} in {@code course}.\n     "},{"fullQualified":"public EmailWrapper generateStudentCourseRejoinEmailAfterGoogleIdReset(CourseAttributes course, StudentAttributes student)","name":"generateStudentCourseRejoinEmailAfterGoogleIdReset","type":"EmailWrapper","javadoc":"\n     * Generates the course re-join email for the given {@code student} in {@code course}.\n     "},{"fullQualified":"public EmailWrapper generateInstructorCourseJoinEmail(AccountAttributes inviter, InstructorAttributes instructor, CourseAttributes course)","name":"generateInstructorCourseJoinEmail","type":"EmailWrapper","javadoc":"\n     * Generates the course join email for the given {@code instructor} in {@code course}.\n     * Also specifies contact information of {@code inviter}.\n     "},{"fullQualified":"public EmailWrapper generateInstructorCourseRejoinEmailAfterGoogleIdReset(InstructorAttributes instructor, CourseAttributes course)","name":"generateInstructorCourseRejoinEmailAfterGoogleIdReset","type":"EmailWrapper","javadoc":"\n     * Generates the course re-join email for the given {@code instructor} in {@code course}.\n     "},{"fullQualified":"public EmailWrapper generateUserCourseRegisteredEmail(String name, String emailAddress, String googleId, boolean isInstructor, CourseAttributes course)","name":"generateUserCourseRegisteredEmail","type":"EmailWrapper","javadoc":"\n     * Generates the course registered email for the user with the given details in {@code course}.\n     "},{"fullQualified":"private String fillUpStudentJoinFragment(StudentAttributes student)","name":"fillUpStudentJoinFragment","type":"String","javadoc":null},{"fullQualified":"private String fillUpStudentRejoinAfterGoogleIdResetFragment(StudentAttributes student)","name":"fillUpStudentRejoinAfterGoogleIdResetFragment","type":"String","javadoc":null},{"fullQualified":"private String getInstructorCourseJoinUrl(InstructorAttributes instructor)","name":"getInstructorCourseJoinUrl","type":"String","javadoc":null},{"fullQualified":"private String fillUpInstructorJoinFragment(InstructorAttributes instructor)","name":"fillUpInstructorJoinFragment","type":"String","javadoc":null},{"fullQualified":"private String fillUpInstructorRejoinAfterGoogleIdResetFragment(InstructorAttributes instructor)","name":"fillUpInstructorRejoinAfterGoogleIdResetFragment","type":"String","javadoc":null},{"fullQualified":"private String fillUpInstructorPreamble(CourseAttributes course)","name":"fillUpInstructorPreamble","type":"String","javadoc":null},{"fullQualified":"public EmailWrapper generateCompiledLogsEmail(List<ErrorLogEntry> logs)","name":"generateCompiledLogsEmail","type":"EmailWrapper","javadoc":"\n     * Generates the logs compilation email for the given {@code logs}.\n     "},{"fullQualified":"private String generateSevereErrorLogLine(int index, String logMessage, String logLevel, String traceId)","name":"generateSevereErrorLogLine","type":"String","javadoc":null},{"fullQualified":"private EmailWrapper getEmptyEmailAddressedToEmail(String recipient)","name":"getEmptyEmailAddressedToEmail","type":"EmailWrapper","javadoc":null},{"fullQualified":"private String generateCoOwnersEmailsLine(String courseId)","name":"generateCoOwnersEmailsLine","type":"String","javadoc":null},{"fullQualified":"private String getAdditionalContactInformationFragment(CourseAttributes course, boolean isInstructor)","name":"getAdditionalContactInformationFragment","type":"String","javadoc":"\n     * Generates additional contact information for User Email Templates.\n     * @return The contact information after replacing the placeholders.\n     "}],"allConstructors":[{"identifier":"private EmailGenerator()","javadocComment":null}]},{"name":"EmailSender","fullyQualifiedName":"teammates.logic.api.EmailSender","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Sends the given {@code message} and generates a log report.\n     *\n     * @return The HTTP status of the email request.\n     ","lineNumber":48,"isOrphan":false}],"allMethods":[{"fullQualified":"public static EmailSender inst()","name":"inst","type":"EmailSender","javadoc":null},{"fullQualified":"public EmailSendingStatus sendEmail(EmailWrapper message)","name":"sendEmail","type":"EmailSendingStatus","javadoc":"\n     * Sends the given {@code message} and generates a log report.\n     *\n     * @return The HTTP status of the email request.\n     "},{"fullQualified":"private boolean isTestingAccount(String email)","name":"isTestingAccount","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":" EmailSender()","javadocComment":null}]},{"name":"FileStorage","fullyQualifiedName":"teammates.logic.api.FileStorage","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns true if a file with the specified {@code fileKey} exists in the storage.\n     ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the content of the file with the specified {@code fileKey} as bytes.\n     ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the file with the specified {@code fileKey}.\n     ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a file with the specified {@code contentBytes} as content and with type {@code contentType}.\n     ","lineNumber":49,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FileStorage inst()","name":"inst","type":"FileStorage","javadoc":null},{"fullQualified":"public boolean doesFileExist(String fileKey)","name":"doesFileExist","type":"boolean","javadoc":"\n     * Returns true if a file with the specified {@code fileKey} exists in the storage.\n     "},{"fullQualified":"public byte[] getContent(String fileKey)","name":"getContent","type":"byte[]","javadoc":"\n     * Gets the content of the file with the specified {@code fileKey} as bytes.\n     "},{"fullQualified":"public void delete(String fileKey)","name":"delete","type":"void","javadoc":"\n     * Deletes the file with the specified {@code fileKey}.\n     "},{"fullQualified":"public void create(String fileKey, byte[] contentBytes, String contentType)","name":"create","type":"void","javadoc":"\n     * Creates a file with the specified {@code contentBytes} as content and with type {@code contentType}.\n     "}],"allConstructors":[{"identifier":" FileStorage()","javadocComment":null}]},{"name":"Logic","fullyQualifiedName":"teammates.logic.api.Logic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":74,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     ","lineNumber":81,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of accounts with email matching {@code email}.\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates user read status for notification with ID {@code notificationId} and expiry time {@code endTime}.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null. {@code endTime} must be after current moment.\n     ","lineNumber":107,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns active notification for general users and the specified {@code targetUser}.\n     ","lineNumber":123,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a notification by ID.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return Null if no match found.\n     ","lineNumber":134,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a notification.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return created notification\n     * @throws InvalidParametersException if the notification is not valid\n     * @throws EntityAlreadyExistsException if the notification exists in the database\n     ","lineNumber":146,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a notification.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     * @return updated notification\n     * @throws InvalidParametersException if the notification is not valid\n     * @throws EntityDoesNotExistException if the notification does not exist in the database\n     ","lineNumber":161,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes notification by ID.\n     *\n     * <ul>\n     * <li>Fails silently if no such notification.</li>\n     * </ul>\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     ","lineNumber":175,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates/Creates the profile using {@link StudentProfileAttributes.UpdateOptions}.\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated student profile\n     * @throws InvalidParametersException if attributes to update are not valid\n     ","lineNumber":191,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes both instructor and student privileges, as well as the account and associated student profile.\n     *\n     * <ul>\n     * <li>Fails silently if no such account.</li>\n     * </ul>\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     ","lineNumber":208,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that all the given instructors exist in the given course.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @throws EntityDoesNotExistException If some instructor does not exist in the course.\n     ","lineNumber":225,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates an instructor.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the created instructor\n     * @throws InvalidParametersException if the instructor is not valid\n     * @throws EntityAlreadyExistsException if the instructor already exists in the database\n     ","lineNumber":241,"isOrphan":false},{"type":"JavadocComment","text":"\n     * This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search instructors in the whole system.\n     * @return Null if no match found.\n     ","lineNumber":258,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given instructor.\n     *\n     * @see InstructorsLogic#putDocument(InstructorAttributes)\n     ","lineNumber":271,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Update instructor being edited to ensure validity of instructors for the course.\n     *\n     * @see InstructorsLogic#updateToEnsureValidityOfInstructorsForTheCourse(String, InstructorAttributes)\n     ","lineNumber":280,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     ","lineNumber":293,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     ","lineNumber":306,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     ","lineNumber":319,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     ","lineNumber":332,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return Empty list if none found.\n     ","lineNumber":344,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return Empty list if none found.\n     ","lineNumber":363,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithGoogleId}.\n     *\n     * <p>Cascade update the comments, responses and deadline extensions associated with the instructor.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     ","lineNumber":380,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithEmail}.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     ","lineNumber":399,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Make the instructor join the course, i.e. associate the Google ID to the instructor.<br>\n     * Creates an account for the instructor if no existing account is found.\n     * Preconditions: <br>\n     * * Parameters regkey and googleId are non-null.\n     ","lineNumber":416,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes an instructor cascade its associated feedback responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if the student does not exist.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":431,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a course and an associated instructor for the course.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null. <br/>\n     * * {@code instructorGoogleId} already has an account and instructor privileges.\n     ","lineNumber":447,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     ","lineNumber":462,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     ","lineNumber":474,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Courses the given instructors is in except for courses in Recycle Bin.\n     ","lineNumber":483,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Courses in Recycle Bin that the given instructors is in.\n     ","lineNumber":495,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a course by {@link CourseAttributes.UpdateOptions}.\n     *\n     * <p>If the {@code timezone} of the course is changed, cascade the change to its corresponding feedback sessions.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated course\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the course cannot be found\n     ","lineNumber":507,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Changes the archive status of a course for an instructor.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @param courseId The course of which the archive status is to be changed\n     * @param archiveStatus The archive status to be set\n     ","lineNumber":526,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a course cascade its students, instructors, sessions, responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if no such course.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":544,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Moves a course to Recycle Bin by its given corresponding ID.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return the deletion timestamp assigned to the course.\n     ","lineNumber":557,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Restores a course and all data related to the course from Recycle Bin by\n     * its given corresponding ID.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":570,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Search for students. Preconditions: all parameters are non-null.\n     * @param instructors   a list of InstructorAttributes associated to a googleId,\n     *                      used for filtering of search result\n     * @return Null if no match found\n     ","lineNumber":584,"isOrphan":false},{"type":"JavadocComment","text":"\n     * This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search students in the whole system.\n     * @return Null if no match found.\n     ","lineNumber":597,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Null if no match found.\n     ","lineNumber":610,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Null if no match found.\n     ","lineNumber":621,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Null if no match found.\n     ","lineNumber":634,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets student profile associated with the {@code googleId}.\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return null if no match found.\n     ","lineNumber":647,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Empty list if no match found.\n     ","lineNumber":660,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return Empty list if none found.\n     ","lineNumber":671,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of section names for the course with ID courseId.\n     *\n     * <p>Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @see CoursesLogic#getSectionsNameForCourse(String)\n     ","lineNumber":681,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Populates fields that need dynamic generation in a question.\n     *\n     * <p>Currently, only MCQ/MSQ needs to generate choices dynamically.</p>\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters except <code>teamOfEntityDoingQuestion</code> are non-null.\n     *\n     * @param feedbackQuestionAttributes the question to populate\n     * @param emailOfEntityDoingQuestion the email of the entity doing the question\n     * @param teamOfEntityDoingQuestion the team of the entity doing the question. If the entity is an instructor,\n     *                                  it can be {@code null}.\n     ","lineNumber":694,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Resets the googleId associated with the student.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":716,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Regenerates the registration key for the instructor with email address {@code email} in course {@code courseId}.\n     *\n     * @return the instructor attributes with the new registration key.\n     * @throws EntityAlreadyExistsException if the newly generated instructor has the same registration key as the\n     *          original one.\n     * @throws EntityDoesNotExistException if the instructor does not exist.\n     ","lineNumber":729,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Regenerates the registration key for the student with email address {@code email} in course {@code courseId}.\n     *\n     * @return the student attributes with the new registration key.\n     * @throws EntityAlreadyExistsException if the newly generated course student has the same registration key as the\n     *          original one.\n     * @throws EntityDoesNotExistException if the student does not exist.\n     ","lineNumber":746,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Resets the associated googleId of an instructor.\n     ","lineNumber":763,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a student.\n     *\n     * @return the created student.\n     * @throws InvalidParametersException if the student is not valid.\n     * @throws EntityAlreadyExistsException if the student already exists in the database.\n     ","lineNumber":773,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a student by {@link StudentAttributes.UpdateOptions}.\n     *\n     * <p>If email changed, update by recreating the student and cascade update all responses\n     * the student gives/receives as well as any deadline extensions given to the student.\n     *\n     * <p>If team changed, cascade delete all responses the student gives/receives within that team.\n     *\n     * <p>If section changed, cascade update all responses the student gives/receives.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated student\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the student cannot be found\n     * @throws EntityAlreadyExistsException if the student cannot be updated\n     *         by recreation because of an existent student\n     ","lineNumber":788,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Make the student join the course, i.e. associate the Google ID to the student.<br>\n     * Create an account for the student if no existing account is found.\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @param key the registration key\n     ","lineNumber":815,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether an instructor has attempted a feedback session.\n     *\n     * <p>If there is no question for instructors, the feedback session is considered as attempted.</p>\n     ","lineNumber":837,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether a student has attempted a feedback session.\n     *\n     * <p>If there is no question for students, the feedback session is considered as attempted.</p>\n     ","lineNumber":848,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a student cascade its associated feedback responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if the student does not exist.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":860,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes all the students in the course cascade their associated responses, deadline extensions and comments.\n     *\n     * <br/>Preconditions: <br>\n     * * All parameters are non-null.\n     ","lineNumber":875,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Validates sections for any limit violations and teams for any team name violations.\n     *\n     * <p>Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @see StudentsLogic#validateSectionsAndTeams(List, String)\n     ","lineNumber":887,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all students of a team.\n     ","lineNumber":903,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given student.\n     *\n     * @see StudentsLogic#putDocument(StudentAttributes)\n     ","lineNumber":913,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a feedback session.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return created feedback session\n     * @throws InvalidParametersException if the session is not valid\n     * @throws EntityAlreadyExistsException if the session already exist\n     ","lineNumber":922,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback session from the data storage.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return null if not found or in recycle bin.\n     ","lineNumber":939,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback session from the recycle bin.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return null if not found.\n     ","lineNumber":955,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     ","lineNumber":970,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the expected number of submissions for a feedback session.\n     *\n     * <br>Preconditions: <br>\n     * * All parameters are non-null.\n     ","lineNumber":979,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the actual number of submissions for a feedback session.\n     *\n     * <br>Preconditions: <br>\n     * * All parameters are non-null.\n     ","lineNumber":990,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of feedback sessions for instructors.\n     ","lineNumber":1001,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@code List} of feedback sessions in the Recycle Bin for the instructors.\n     * <br>\n     * Omits sessions if the corresponding courses are archived or in Recycle Bin\n     ","lineNumber":1010,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the recipients of a feedback question for student.\n     *\n     * @see FeedbackQuestionsLogic#getRecipientsOfQuestion\n     ","lineNumber":1021,"isOrphan":false},{"type":"LineComment","text":" we do not supply course roster here","lineNumber":1031,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Preconditions: <br>\n     * * All parameters are non-null. <br>\n     *\n     ","lineNumber":1035,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of all questions for the given session that\n     * students can view/submit.\n     ","lineNumber":1045,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a {@code List} of all questions for the given session that\n     * instructor can view/submit.\n     ","lineNumber":1057,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the details of a feedback session by {@link FeedbackSessionAttributes.UpdateOptions}.\n     *\n     * <p>Adjust email sending status if necessary.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated feedback session\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     ","lineNumber":1069,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Publishes a feedback session.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return the published feedback session\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     * @throws InvalidParametersException if session is already published\n     ","lineNumber":1088,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Unpublishes a feedback session.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return the unpublished feedback session\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     * @throws InvalidParametersException\n     *             if the feedback session is not ready to be unpublished.\n     ","lineNumber":1107,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a feedback session cascade to its associated questions, responses, deadline extensions and comments.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":1127,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Soft-deletes a specific session to Recycle Bin.\n     ","lineNumber":1141,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Restores a specific session from Recycle Bin to feedback sessions table.\n     ","lineNumber":1153,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a new feedback question.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return the created question\n     * @throws InvalidParametersException if the question is invalid\n     ","lineNumber":1165,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a feedback question by {@code FeedbackQuestionAttributes.UpdateOptions}.\n     *\n     * <p>Cascade adjust the question number of questions in the same session.\n     *\n     * <p>Cascade adjust the existing response of the question.\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated feedback question\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback question cannot be found\n     ","lineNumber":1181,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a feedback question cascade its responses and comments.\n     *\n     * <p>Silently fail if question does not exist.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":1202,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether there are responses for a question.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":1215,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all questions for a feedback session.<br>\n     * Returns an empty list if they are no questions\n     * for the session.\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     ","lineNumber":1225,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a set of giver identifiers that has at least one response under a feedback session.\n     ","lineNumber":1239,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the session result for a feedback session.\n     *\n     * @see FeedbackResponsesLogic#getSessionResultsForCourse(\n     * String, String, String, String, String, FeedbackResultFetchType)\n     ","lineNumber":1249,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the session result for a feedback session for the given user.\n     *\n     * @see FeedbackResponsesLogic#getSessionResultsForUser(String, String, String, boolean, String)\n     ","lineNumber":1266,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get existing feedback responses from student or his team for the given question.\n     ","lineNumber":1282,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get existing feedback responses from instructor for the given question.\n     ","lineNumber":1293,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a feedback response.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return created feedback response\n     * @throws InvalidParametersException if the response is not valid\n     * @throws EntityAlreadyExistsException if the response already exist\n     ","lineNumber":1310,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a feedback response by {@link FeedbackResponseAttributes.UpdateOptions}.\n     *\n     * <p>Cascade updates its associated feedback response comment\n     * (e.g. associated response ID, giverSection and recipientSection).\n     *\n     * <p>If the giver/recipient field is changed, the response is updated by recreating the response\n     * as question-giver-recipient is the primary key.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated feedback response\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     * @throws EntityAlreadyExistsException if the response cannot be updated\n     *         by recreation because of an existent response\n     ","lineNumber":1331,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a feedback response cascade its associated comments.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":1356,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Create a feedback response comment, and return the created comment.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     ","lineNumber":1367,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets comment associated with the response.\n     *\n     * <p>The comment is given by a feedback participant to explain the response</p>\n     *\n     * @param feedbackResponseId the response id\n     ","lineNumber":1386,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a feedback response comment by {@link FeedbackResponseCommentAttributes.UpdateOptions}.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated comment\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     ","lineNumber":1400,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a comment.\n     ","lineNumber":1418,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns returns a list of sessions that were closed within past hour.\n     *\n     * @see FeedbackSessionsLogic#getFeedbackSessionsClosedWithinThePastHour()\n     ","lineNumber":1425,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of sessions that require automated emails to be sent as they are published.\n     *\n     * @see FeedbackSessionsLogic#getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent()\n     ","lineNumber":1442,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Persists the given data bundle to the database.\n     *\n     * @see DataBundleLogic#persistDataBundle(DataBundle)\n     ","lineNumber":1461,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes the given data bundle from the database.\n     *\n     * @see DataBundleLogic#removeDataBundle(DataBundle)\n     ","lineNumber":1470,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Puts searchable documents from the data bundle to the database.\n     *\n     * @see DataBundleLogic#putDocuments(DataBundle)\n     ","lineNumber":1479,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that all the given students exist in the given course.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @throws EntityDoesNotExistException If some student does not exist in the course.\n     ","lineNumber":1488,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates an account request.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the created account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityAlreadyExistsException if the account request already exists\n     ","lineNumber":1511,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates an account request.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the updated account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityDoesNotExistException if the account request to update does not exist\n     ","lineNumber":1528,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes an account request.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     ","lineNumber":1545,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an account request by unique constraint {@code registrationKey}.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the account request\n     ","lineNumber":1557,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an account request by email address and institute.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the account request\n     ","lineNumber":1571,"isOrphan":false},{"type":"JavadocComment","text":"\n     * This is used by admin to search account requests in the whole system.\n     *\n     * @return A list of {@link AccountRequestAttributes} or {@code null} if no match found.\n     ","lineNumber":1586,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given account request.\n     *\n     * @see AccountRequestsLogic#putDocument(AccountRequestAttributes)\n     ","lineNumber":1598,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a deadline extension.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the updated deadline extension\n     * @throws InvalidParametersException if the updated deadline extension is not valid\n     * @throws EntityDoesNotExistException if the deadline extension to update does not exist\n     ","lineNumber":1627,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a deadline extension.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the created deadline extension\n     * @throws InvalidParametersException if the deadline extension is not valid\n     * @throws EntityAlreadyExistsException if the deadline extension to create already exists\n     ","lineNumber":1644,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a deadline extension.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * <p>Fails silently if the deadline extension doesn't exist.</p>\n     ","lineNumber":1661,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deadline extension by {@code courseId}, {@code feedbackSessionName},\n     * {@code userEmail} and {@code isInstructor}.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the deadline extension if it exists, null otherwise\n     ","lineNumber":1678,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of deadline extensions with end time within the next 24 hours\n     * and possibly need a closing email to be sent.\n     ","lineNumber":1696,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Logic inst()","name":"inst","type":"Logic","javadoc":null},{"fullQualified":"public AccountAttributes getAccount(String googleId)","name":"getAccount","type":"AccountAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public List<AccountAttributes> getAccountsForEmail(String email)","name":"getAccountsForEmail","type":"List<AccountAttributes>","javadoc":"\n     * Returns a list of accounts with email matching {@code email}.\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public List<String> getReadNotificationsId(String googleId)","name":"getReadNotificationsId","type":"List<String>","javadoc":null},{"fullQualified":"public List<String> updateReadNotifications(String googleId, String notificationId, Instant endTime) throws InvalidParametersException, EntityDoesNotExistException","name":"updateReadNotifications","type":"List<String>","javadoc":"\n     * Updates user read status for notification with ID {@code notificationId} and expiry time {@code endTime}.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null. {@code endTime} must be after current moment.\n     "},{"fullQualified":"public String getCourseInstitute(String courseId)","name":"getCourseInstitute","type":"String","javadoc":null},{"fullQualified":"public List<NotificationAttributes> getActiveNotificationsByTargetUser(NotificationTargetUser targetUser)","name":"getActiveNotificationsByTargetUser","type":"List<NotificationAttributes>","javadoc":"\n     * Returns active notification for general users and the specified {@code targetUser}.\n     "},{"fullQualified":"public List<NotificationAttributes> getAllNotifications()","name":"getAllNotifications","type":"List<NotificationAttributes>","javadoc":null},{"fullQualified":"public NotificationAttributes getNotification(String notificationId)","name":"getNotification","type":"NotificationAttributes","javadoc":"\n     * Gets a notification by ID.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return Null if no match found.\n     "},{"fullQualified":"public NotificationAttributes createNotification(NotificationAttributes notification) throws InvalidParametersException, EntityAlreadyExistsException","name":"createNotification","type":"NotificationAttributes","javadoc":"\n     * Creates a notification.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return created notification\n     * @throws InvalidParametersException if the notification is not valid\n     * @throws EntityAlreadyExistsException if the notification exists in the database\n     "},{"fullQualified":"public NotificationAttributes updateNotification(NotificationAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateNotification","type":"NotificationAttributes","javadoc":"\n     * Updates a notification.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     * @return updated notification\n     * @throws InvalidParametersException if the notification is not valid\n     * @throws EntityDoesNotExistException if the notification does not exist in the database\n     "},{"fullQualified":"public void deleteNotification(String notificationId)","name":"deleteNotification","type":"void","javadoc":"\n     * Deletes notification by ID.\n     *\n     * <ul>\n     * <li>Fails silently if no such notification.</li>\n     * </ul>\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public StudentProfileAttributes updateOrCreateStudentProfile(StudentProfileAttributes.UpdateOptions updateOptions) throws InvalidParametersException","name":"updateOrCreateStudentProfile","type":"StudentProfileAttributes","javadoc":"\n     * Updates/Creates the profile using {@link StudentProfileAttributes.UpdateOptions}.\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated student profile\n     * @throws InvalidParametersException if attributes to update are not valid\n     "},{"fullQualified":"public void deleteAccountCascade(String googleId)","name":"deleteAccountCascade","type":"void","javadoc":"\n     * Deletes both instructor and student privileges, as well as the account and associated student profile.\n     *\n     * <ul>\n     * <li>Fails silently if no such account.</li>\n     * </ul>\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public void verifyAllInstructorsExistInCourse(String courseId, Collection<String> instructorEmailAddresses) throws EntityDoesNotExistException","name":"verifyAllInstructorsExistInCourse","type":"void","javadoc":"\n     * Verifies that all the given instructors exist in the given course.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @throws EntityDoesNotExistException If some instructor does not exist in the course.\n     "},{"fullQualified":"public InstructorAttributes createInstructor(InstructorAttributes instructor) throws InvalidParametersException, EntityAlreadyExistsException","name":"createInstructor","type":"InstructorAttributes","javadoc":"\n     * Creates an instructor.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the created instructor\n     * @throws InvalidParametersException if the instructor is not valid\n     * @throws EntityAlreadyExistsException if the instructor already exists in the database\n     "},{"fullQualified":"public List<InstructorAttributes> searchInstructorsInWholeSystem(String queryString) throws SearchServiceException","name":"searchInstructorsInWholeSystem","type":"List<InstructorAttributes>","javadoc":"\n     * This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search instructors in the whole system.\n     * @return Null if no match found.\n     "},{"fullQualified":"public void putInstructorDocument(InstructorAttributes instructor) throws SearchServiceException","name":"putInstructorDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given instructor.\n     *\n     * @see InstructorsLogic#putDocument(InstructorAttributes)\n     "},{"fullQualified":"public void updateToEnsureValidityOfInstructorsForTheCourse(String courseId, InstructorAttributes instructorToEdit)","name":"updateToEnsureValidityOfInstructorsForTheCourse","type":"void","javadoc":"\n     * Update instructor being edited to ensure validity of instructors for the course.\n     *\n     * @see InstructorsLogic#updateToEnsureValidityOfInstructorsForTheCourse(String, InstructorAttributes)\n     "},{"fullQualified":"public InstructorAttributes getInstructorForEmail(String courseId, String email)","name":"getInstructorForEmail","type":"InstructorAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     "},{"fullQualified":"public InstructorAttributes getInstructorById(String courseId, String email)","name":"getInstructorById","type":"InstructorAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     "},{"fullQualified":"public InstructorAttributes getInstructorForGoogleId(String courseId, String googleId)","name":"getInstructorForGoogleId","type":"InstructorAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     "},{"fullQualified":"public InstructorAttributes getInstructorForRegistrationKey(String registrationKey)","name":"getInstructorForRegistrationKey","type":"InstructorAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     "},{"fullQualified":"public List<InstructorAttributes> getInstructorsForGoogleId(String googleId)","name":"getInstructorsForGoogleId","type":"List<InstructorAttributes>","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return Empty list if none found.\n     "},{"fullQualified":"public List<InstructorAttributes> getInstructorsForGoogleId(String googleId, boolean omitArchived)","name":"getInstructorsForGoogleId","type":"List<InstructorAttributes>","javadoc":null},{"fullQualified":"public List<InstructorAttributes> getInstructorsForCourse(String courseId)","name":"getInstructorsForCourse","type":"List<InstructorAttributes>","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return Empty list if none found.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getAllOngoingSessions(Instant rangeStart, Instant rangeEnd)","name":"getAllOngoingSessions","type":"List<FeedbackSessionAttributes>","javadoc":null},{"fullQualified":"public InstructorAttributes updateInstructorCascade(InstructorAttributes.UpdateOptionsWithGoogleId updateOptions) throws InstructorUpdateException, InvalidParametersException, EntityDoesNotExistException","name":"updateInstructorCascade","type":"InstructorAttributes","javadoc":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithGoogleId}.\n     *\n     * <p>Cascade update the comments, responses and deadline extensions associated with the instructor.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     "},{"fullQualified":"public InstructorAttributes updateInstructor(InstructorAttributes.UpdateOptionsWithEmail updateOptions) throws InstructorUpdateException, InvalidParametersException, EntityDoesNotExistException","name":"updateInstructor","type":"InstructorAttributes","javadoc":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithEmail}.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     "},{"fullQualified":"public InstructorAttributes joinCourseForInstructor(String regkey, String googleId) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"joinCourseForInstructor","type":"InstructorAttributes","javadoc":"\n     * Make the instructor join the course, i.e. associate the Google ID to the instructor.<br>\n     * Creates an account for the instructor if no existing account is found.\n     * Preconditions: <br>\n     * * Parameters regkey and googleId are non-null.\n     "},{"fullQualified":"public void deleteInstructorCascade(String courseId, String email)","name":"deleteInstructorCascade","type":"void","javadoc":"\n     * Deletes an instructor cascade its associated feedback responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if the student does not exist.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public void createCourseAndInstructor(String instructorGoogleId, CourseAttributes courseAttributes) throws EntityAlreadyExistsException, InvalidParametersException","name":"createCourseAndInstructor","type":"void","javadoc":"\n     * Creates a course and an associated instructor for the course.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null. <br/>\n     * * {@code instructorGoogleId} already has an account and instructor privileges.\n     "},{"fullQualified":"public CourseAttributes getCourse(String courseId)","name":"getCourse","type":"CourseAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return null if not found.\n     "},{"fullQualified":"public List<CourseAttributes> getCoursesForStudentAccount(String googleId)","name":"getCoursesForStudentAccount","type":"List<CourseAttributes>","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public List<CourseAttributes> getCoursesForInstructor(List<InstructorAttributes> instructorList)","name":"getCoursesForInstructor","type":"List<CourseAttributes>","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Courses the given instructors is in except for courses in Recycle Bin.\n     "},{"fullQualified":"public List<CourseAttributes> getSoftDeletedCoursesForInstructors(List<InstructorAttributes> instructorList)","name":"getSoftDeletedCoursesForInstructors","type":"List<CourseAttributes>","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Courses in Recycle Bin that the given instructors is in.\n     "},{"fullQualified":"public CourseAttributes updateCourseCascade(CourseAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateCourseCascade","type":"CourseAttributes","javadoc":"\n     * Updates a course by {@link CourseAttributes.UpdateOptions}.\n     *\n     * <p>If the {@code timezone} of the course is changed, cascade the change to its corresponding feedback sessions.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated course\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the course cannot be found\n     "},{"fullQualified":"public void setArchiveStatusOfInstructor(String googleId, String courseId, boolean archiveStatus) throws InvalidParametersException, EntityDoesNotExistException","name":"setArchiveStatusOfInstructor","type":"void","javadoc":"\n     * Changes the archive status of a course for an instructor.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @param courseId The course of which the archive status is to be changed\n     * @param archiveStatus The archive status to be set\n     "},{"fullQualified":"public void deleteCourseCascade(String courseId)","name":"deleteCourseCascade","type":"void","javadoc":"\n     * Deletes a course cascade its students, instructors, sessions, responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if no such course.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public Instant moveCourseToRecycleBin(String courseId) throws EntityDoesNotExistException","name":"moveCourseToRecycleBin","type":"Instant","javadoc":"\n     * Moves a course to Recycle Bin by its given corresponding ID.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return the deletion timestamp assigned to the course.\n     "},{"fullQualified":"public void restoreCourseFromRecycleBin(String courseId) throws EntityDoesNotExistException","name":"restoreCourseFromRecycleBin","type":"void","javadoc":"\n     * Restores a course and all data related to the course from Recycle Bin by\n     * its given corresponding ID.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public List<StudentAttributes> searchStudents(String queryString, List<InstructorAttributes> instructors) throws SearchServiceException","name":"searchStudents","type":"List<StudentAttributes>","javadoc":"\n     * Search for students. Preconditions: all parameters are non-null.\n     * @param instructors   a list of InstructorAttributes associated to a googleId,\n     *                      used for filtering of search result\n     * @return Null if no match found\n     "},{"fullQualified":"public List<StudentAttributes> searchStudentsInWholeSystem(String queryString) throws SearchServiceException","name":"searchStudentsInWholeSystem","type":"List<StudentAttributes>","javadoc":"\n     * This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search students in the whole system.\n     * @return Null if no match found.\n     "},{"fullQualified":"public StudentAttributes getStudentForRegistrationKey(String registrationKey)","name":"getStudentForRegistrationKey","type":"StudentAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Null if no match found.\n     "},{"fullQualified":"public StudentAttributes getStudentForEmail(String courseId, String email)","name":"getStudentForEmail","type":"StudentAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Null if no match found.\n     "},{"fullQualified":"public StudentAttributes getStudentForGoogleId(String courseId, String googleId)","name":"getStudentForGoogleId","type":"StudentAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Null if no match found.\n     "},{"fullQualified":"public StudentProfileAttributes getStudentProfile(String googleId)","name":"getStudentProfile","type":"StudentProfileAttributes","javadoc":"\n     * Gets student profile associated with the {@code googleId}.\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return null if no match found.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForGoogleId(String googleId)","name":"getStudentsForGoogleId","type":"List<StudentAttributes>","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @return Empty list if no match found.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForCourse(String courseId)","name":"getStudentsForCourse","type":"List<StudentAttributes>","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @return Empty list if none found.\n     "},{"fullQualified":"public List<String> getSectionNamesForCourse(String courseId) throws EntityDoesNotExistException","name":"getSectionNamesForCourse","type":"List<String>","javadoc":"\n     * Returns a list of section names for the course with ID courseId.\n     *\n     * <p>Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @see CoursesLogic#getSectionsNameForCourse(String)\n     "},{"fullQualified":"public void populateFieldsToGenerateInQuestion(FeedbackQuestionAttributes feedbackQuestionAttributes, String emailOfEntityDoingQuestion, String teamOfEntityDoingQuestion)","name":"populateFieldsToGenerateInQuestion","type":"void","javadoc":"\n     * Populates fields that need dynamic generation in a question.\n     *\n     * <p>Currently, only MCQ/MSQ needs to generate choices dynamically.</p>\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters except <code>teamOfEntityDoingQuestion</code> are non-null.\n     *\n     * @param feedbackQuestionAttributes the question to populate\n     * @param emailOfEntityDoingQuestion the email of the entity doing the question\n     * @param teamOfEntityDoingQuestion the team of the entity doing the question. If the entity is an instructor,\n     *                                  it can be {@code null}.\n     "},{"fullQualified":"public void resetStudentGoogleId(String originalEmail, String courseId) throws EntityDoesNotExistException","name":"resetStudentGoogleId","type":"void","javadoc":"\n     * Resets the googleId associated with the student.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public InstructorAttributes regenerateInstructorRegistrationKey(String courseId, String email) throws EntityDoesNotExistException, EntityAlreadyExistsException","name":"regenerateInstructorRegistrationKey","type":"InstructorAttributes","javadoc":"\n     * Regenerates the registration key for the instructor with email address {@code email} in course {@code courseId}.\n     *\n     * @return the instructor attributes with the new registration key.\n     * @throws EntityAlreadyExistsException if the newly generated instructor has the same registration key as the\n     *          original one.\n     * @throws EntityDoesNotExistException if the instructor does not exist.\n     "},{"fullQualified":"public StudentAttributes regenerateStudentRegistrationKey(String courseId, String email) throws EntityDoesNotExistException, EntityAlreadyExistsException","name":"regenerateStudentRegistrationKey","type":"StudentAttributes","javadoc":"\n     * Regenerates the registration key for the student with email address {@code email} in course {@code courseId}.\n     *\n     * @return the student attributes with the new registration key.\n     * @throws EntityAlreadyExistsException if the newly generated course student has the same registration key as the\n     *          original one.\n     * @throws EntityDoesNotExistException if the student does not exist.\n     "},{"fullQualified":"public void resetInstructorGoogleId(String originalEmail, String courseId) throws EntityDoesNotExistException","name":"resetInstructorGoogleId","type":"void","javadoc":"\n     * Resets the associated googleId of an instructor.\n     "},{"fullQualified":"public StudentAttributes createStudent(StudentAttributes student) throws InvalidParametersException, EntityAlreadyExistsException","name":"createStudent","type":"StudentAttributes","javadoc":"\n     * Creates a student.\n     *\n     * @return the created student.\n     * @throws InvalidParametersException if the student is not valid.\n     * @throws EntityAlreadyExistsException if the student already exists in the database.\n     "},{"fullQualified":"public StudentAttributes updateStudentCascade(StudentAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"updateStudentCascade","type":"StudentAttributes","javadoc":"\n     * Updates a student by {@link StudentAttributes.UpdateOptions}.\n     *\n     * <p>If email changed, update by recreating the student and cascade update all responses\n     * the student gives/receives as well as any deadline extensions given to the student.\n     *\n     * <p>If team changed, cascade delete all responses the student gives/receives within that team.\n     *\n     * <p>If section changed, cascade update all responses the student gives/receives.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated student\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the student cannot be found\n     * @throws EntityAlreadyExistsException if the student cannot be updated\n     *         by recreation because of an existent student\n     "},{"fullQualified":"public StudentAttributes joinCourseForStudent(String key, String googleId) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"joinCourseForStudent","type":"StudentAttributes","javadoc":"\n     * Make the student join the course, i.e. associate the Google ID to the student.<br>\n     * Create an account for the student if no existing account is found.\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     * @param key the registration key\n     "},{"fullQualified":"public List<StudentAttributes> getUnregisteredStudentsForCourse(String courseId)","name":"getUnregisteredStudentsForCourse","type":"List<StudentAttributes>","javadoc":null},{"fullQualified":"public boolean isFeedbackSessionAttemptedByInstructor(FeedbackSessionAttributes fsa, String userEmail)","name":"isFeedbackSessionAttemptedByInstructor","type":"boolean","javadoc":"\n     * Checks whether an instructor has attempted a feedback session.\n     *\n     * <p>If there is no question for instructors, the feedback session is considered as attempted.</p>\n     "},{"fullQualified":"public boolean isFeedbackSessionAttemptedByStudent(FeedbackSessionAttributes fsa, String userEmail, String userTeam)","name":"isFeedbackSessionAttemptedByStudent","type":"boolean","javadoc":"\n     * Checks whether a student has attempted a feedback session.\n     *\n     * <p>If there is no question for students, the feedback session is considered as attempted.</p>\n     "},{"fullQualified":"public void deleteStudentCascade(String courseId, String studentEmail)","name":"deleteStudentCascade","type":"void","javadoc":"\n     * Deletes a student cascade its associated feedback responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if the student does not exist.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public void deleteStudentsInCourseCascade(String courseId, int batchSize)","name":"deleteStudentsInCourseCascade","type":"void","javadoc":"\n     * Deletes all the students in the course cascade their associated responses, deadline extensions and comments.\n     *\n     * <br/>Preconditions: <br>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public void validateSectionsAndTeams(List<StudentAttributes> studentList, String courseId) throws EnrollException","name":"validateSectionsAndTeams","type":"void","javadoc":"\n     * Validates sections for any limit violations and teams for any team name violations.\n     *\n     * <p>Preconditions: <br>\n     * * All parameters are non-null.\n     *\n     * @see StudentsLogic#validateSectionsAndTeams(List, String)\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForTeam(String teamName, String courseId)","name":"getStudentsForTeam","type":"List<StudentAttributes>","javadoc":"\n     * Gets all students of a team.\n     "},{"fullQualified":"public void putStudentDocument(StudentAttributes student) throws SearchServiceException","name":"putStudentDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given student.\n     *\n     * @see StudentsLogic#putDocument(StudentAttributes)\n     "},{"fullQualified":"public FeedbackSessionAttributes createFeedbackSession(FeedbackSessionAttributes feedbackSession) throws EntityAlreadyExistsException, InvalidParametersException","name":"createFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Creates a feedback session.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return created feedback session\n     * @throws InvalidParametersException if the session is not valid\n     * @throws EntityAlreadyExistsException if the session already exist\n     "},{"fullQualified":"public FeedbackSessionAttributes getFeedbackSession(String feedbackSessionName, String courseId)","name":"getFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Gets a feedback session from the data storage.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return null if not found or in recycle bin.\n     "},{"fullQualified":"public FeedbackSessionAttributes getFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId)","name":"getFeedbackSessionFromRecycleBin","type":"FeedbackSessionAttributes","javadoc":"\n     * Gets a feedback session from the recycle bin.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return null if not found.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsForCourse(String courseId)","name":"getFeedbackSessionsForCourse","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public int getExpectedTotalSubmission(FeedbackSessionAttributes fsa)","name":"getExpectedTotalSubmission","type":"int","javadoc":"\n     * Gets the expected number of submissions for a feedback session.\n     *\n     * <br>Preconditions: <br>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public int getActualTotalSubmission(FeedbackSessionAttributes fsa)","name":"getActualTotalSubmission","type":"int","javadoc":"\n     * Gets the actual number of submissions for a feedback session.\n     *\n     * <br>Preconditions: <br>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsListForInstructor(List<InstructorAttributes> instructorList)","name":"getFeedbackSessionsListForInstructor","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of feedback sessions for instructors.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getSoftDeletedFeedbackSessionsListForInstructors(List<InstructorAttributes> instructorList)","name":"getSoftDeletedFeedbackSessionsListForInstructors","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Returns a {@code List} of feedback sessions in the Recycle Bin for the instructors.\n     * <br>\n     * Omits sessions if the corresponding courses are archived or in Recycle Bin\n     "},{"fullQualified":"public Map<String, String> getRecipientsOfQuestion(FeedbackQuestionAttributes question, @Nullable InstructorAttributes instructorGiver, @Nullable StudentAttributes studentGiver)","name":"getRecipientsOfQuestion","type":"Map<String,String>","javadoc":"\n     * Gets the recipients of a feedback question for student.\n     *\n     * @see FeedbackQuestionsLogic#getRecipientsOfQuestion\n     "},{"fullQualified":"public FeedbackQuestionAttributes getFeedbackQuestion(String feedbackQuestionId)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":"\n     * Preconditions: <br>\n     * * All parameters are non-null. <br>\n     *\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForStudents(String feedbackSessionName, String courseId)","name":"getFeedbackQuestionsForStudents","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Gets a list of all questions for the given session that\n     * students can view/submit.\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForInstructors(String feedbackSessionName, String courseId, String instructorEmail)","name":"getFeedbackQuestionsForInstructors","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Gets a {@code List} of all questions for the given session that\n     * instructor can view/submit.\n     "},{"fullQualified":"public FeedbackSessionAttributes updateFeedbackSession(FeedbackSessionAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Updates the details of a feedback session by {@link FeedbackSessionAttributes.UpdateOptions}.\n     *\n     * <p>Adjust email sending status if necessary.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated feedback session\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     "},{"fullQualified":"public FeedbackSessionAttributes publishFeedbackSession(String feedbackSessionName, String courseId) throws EntityDoesNotExistException, InvalidParametersException","name":"publishFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Publishes a feedback session.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return the published feedback session\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     * @throws InvalidParametersException if session is already published\n     "},{"fullQualified":"public FeedbackSessionAttributes unpublishFeedbackSession(String feedbackSessionName, String courseId) throws EntityDoesNotExistException, InvalidParametersException","name":"unpublishFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Unpublishes a feedback session.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return the unpublished feedback session\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     * @throws InvalidParametersException\n     *             if the feedback session is not ready to be unpublished.\n     "},{"fullQualified":"public void deleteFeedbackSessionCascade(String feedbackSessionName, String courseId)","name":"deleteFeedbackSessionCascade","type":"void","javadoc":"\n     * Deletes a feedback session cascade to its associated questions, responses, deadline extensions and comments.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public void moveFeedbackSessionToRecycleBin(String feedbackSessionName, String courseId) throws EntityDoesNotExistException","name":"moveFeedbackSessionToRecycleBin","type":"void","javadoc":"\n     * Soft-deletes a specific session to Recycle Bin.\n     "},{"fullQualified":"public void restoreFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId) throws EntityDoesNotExistException","name":"restoreFeedbackSessionFromRecycleBin","type":"void","javadoc":"\n     * Restores a specific session from Recycle Bin to feedback sessions table.\n     "},{"fullQualified":"public FeedbackQuestionAttributes createFeedbackQuestion(FeedbackQuestionAttributes feedbackQuestion) throws InvalidParametersException","name":"createFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":"\n     * Creates a new feedback question.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return the created question\n     * @throws InvalidParametersException if the question is invalid\n     "},{"fullQualified":"public FeedbackQuestionAttributes updateFeedbackQuestionCascade(FeedbackQuestionAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackQuestionCascade","type":"FeedbackQuestionAttributes","javadoc":"\n     * Updates a feedback question by {@code FeedbackQuestionAttributes.UpdateOptions}.\n     *\n     * <p>Cascade adjust the question number of questions in the same session.\n     *\n     * <p>Cascade adjust the existing response of the question.\n     *\n     * <br/> Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated feedback question\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback question cannot be found\n     "},{"fullQualified":"public void deleteFeedbackQuestionCascade(String questionId)","name":"deleteFeedbackQuestionCascade","type":"void","javadoc":"\n     * Deletes a feedback question cascade its responses and comments.\n     *\n     * <p>Silently fail if question does not exist.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public boolean areThereResponsesForQuestion(String feedbackQuestionId)","name":"areThereResponsesForQuestion","type":"boolean","javadoc":"\n     * Checks whether there are responses for a question.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForSession(String feedbackSessionName, String courseId)","name":"getFeedbackQuestionsForSession","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Gets all questions for a feedback session.<br>\n     * Returns an empty list if they are no questions\n     * for the session.\n     * Preconditions: <br>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public Set<String> getGiverSetThatAnswerFeedbackSession(String courseId, String feedbackSessionName)","name":"getGiverSetThatAnswerFeedbackSession","type":"Set<String>","javadoc":"\n     * Gets a set of giver identifiers that has at least one response under a feedback session.\n     "},{"fullQualified":"public SessionResultsBundle getSessionResultsForCourse(String feedbackSessionName, String courseId, String userEmail, @Nullable String questionId, @Nullable String section, @Nullable FeedbackResultFetchType fetchType)","name":"getSessionResultsForCourse","type":"SessionResultsBundle","javadoc":"\n     * Gets the session result for a feedback session.\n     *\n     * @see FeedbackResponsesLogic#getSessionResultsForCourse(\n     * String, String, String, String, String, FeedbackResultFetchType)\n     "},{"fullQualified":"public SessionResultsBundle getSessionResultsForUser(String feedbackSessionName, String courseId, String userEmail, boolean isInstructor, @Nullable String questionId)","name":"getSessionResultsForUser","type":"SessionResultsBundle","javadoc":"\n     * Gets the session result for a feedback session for the given user.\n     *\n     * @see FeedbackResponsesLogic#getSessionResultsForUser(String, String, String, boolean, String)\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesFromStudentOrTeamForQuestion(FeedbackQuestionAttributes question, StudentAttributes student)","name":"getFeedbackResponsesFromStudentOrTeamForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Get existing feedback responses from student or his team for the given question.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesFromInstructorForQuestion(FeedbackQuestionAttributes question, InstructorAttributes instructorAttributes)","name":"getFeedbackResponsesFromInstructorForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Get existing feedback responses from instructor for the given question.\n     "},{"fullQualified":"public FeedbackResponseAttributes getFeedbackResponse(String feedbackResponseId)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"public FeedbackResponseAttributes createFeedbackResponse(FeedbackResponseAttributes feedbackResponse) throws InvalidParametersException, EntityAlreadyExistsException","name":"createFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":"\n     * Creates a feedback response.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return created feedback response\n     * @throws InvalidParametersException if the response is not valid\n     * @throws EntityAlreadyExistsException if the response already exist\n     "},{"fullQualified":"public boolean hasResponsesForCourse(String courseId)","name":"hasResponsesForCourse","type":"boolean","javadoc":null},{"fullQualified":"public FeedbackResponseAttributes updateFeedbackResponseCascade(FeedbackResponseAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"updateFeedbackResponseCascade","type":"FeedbackResponseAttributes","javadoc":"\n     * Updates a feedback response by {@link FeedbackResponseAttributes.UpdateOptions}.\n     *\n     * <p>Cascade updates its associated feedback response comment\n     * (e.g. associated response ID, giverSection and recipientSection).\n     *\n     * <p>If the giver/recipient field is changed, the response is updated by recreating the response\n     * as question-giver-recipient is the primary key.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated feedback response\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     * @throws EntityAlreadyExistsException if the response cannot be updated\n     *         by recreation because of an existent response\n     "},{"fullQualified":"public void deleteFeedbackResponseCascade(String responseId)","name":"deleteFeedbackResponseCascade","type":"void","javadoc":"\n     * Deletes a feedback response cascade its associated comments.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes createFeedbackResponseComment(FeedbackResponseCommentAttributes feedbackResponseComment) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"createFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Create a feedback response comment, and return the created comment.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseComment(Long feedbackResponseCommentId)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":null},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseCommentForResponseFromParticipant(String feedbackResponseId)","name":"getFeedbackResponseCommentForResponseFromParticipant","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Gets comment associated with the response.\n     *\n     * <p>The comment is given by a feedback participant to explain the response</p>\n     *\n     * @param feedbackResponseId the response id\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes updateFeedbackResponseComment(FeedbackResponseCommentAttributes.UpdateOptions updateOptions) throws EntityDoesNotExistException, InvalidParametersException","name":"updateFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Updates a feedback response comment by {@link FeedbackResponseCommentAttributes.UpdateOptions}.\n     *\n     * <br/>Preconditions: <br/>\n     * * All parameters are non-null.\n     *\n     * @return updated comment\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     "},{"fullQualified":"public void deleteFeedbackResponseComment(long commentId)","name":"deleteFeedbackResponseComment","type":"void","javadoc":"\n     * Deletes a comment.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsClosedWithinThePastHour()","name":"getFeedbackSessionsClosedWithinThePastHour","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Returns returns a list of sessions that were closed within past hour.\n     *\n     * @see FeedbackSessionsLogic#getFeedbackSessionsClosedWithinThePastHour()\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsClosingWithinTimeLimit()","name":"getFeedbackSessionsClosingWithinTimeLimit","type":"List<FeedbackSessionAttributes>","javadoc":null},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsOpeningWithinTimeLimit()","name":"getFeedbackSessionsOpeningWithinTimeLimit","type":"List<FeedbackSessionAttributes>","javadoc":null},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent()","name":"getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Returns a list of sessions that require automated emails to be sent as they are published.\n     *\n     * @see FeedbackSessionsLogic#getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent()\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsWhichNeedOpenEmailsToBeSent()","name":"getFeedbackSessionsWhichNeedOpenEmailsToBeSent","type":"List<FeedbackSessionAttributes>","javadoc":null},{"fullQualified":"public String getSectionForTeam(String courseId, String teamName)","name":"getSectionForTeam","type":"String","javadoc":null},{"fullQualified":"public DataBundle persistDataBundle(DataBundle dataBundle) throws InvalidParametersException","name":"persistDataBundle","type":"DataBundle","javadoc":"\n     * Persists the given data bundle to the database.\n     *\n     * @see DataBundleLogic#persistDataBundle(DataBundle)\n     "},{"fullQualified":"public void removeDataBundle(DataBundle dataBundle)","name":"removeDataBundle","type":"void","javadoc":"\n     * Removes the given data bundle from the database.\n     *\n     * @see DataBundleLogic#removeDataBundle(DataBundle)\n     "},{"fullQualified":"public void putDocuments(DataBundle dataBundle) throws SearchServiceException","name":"putDocuments","type":"void","javadoc":"\n     * Puts searchable documents from the data bundle to the database.\n     *\n     * @see DataBundleLogic#putDocuments(DataBundle)\n     "},{"fullQualified":"public void verifyAllStudentsExistInCourse(String courseId, Collection<String> studentEmailAddresses) throws EntityDoesNotExistException","name":"verifyAllStudentsExistInCourse","type":"void","javadoc":"\n     * Verifies that all the given students exist in the given course.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @throws EntityDoesNotExistException If some student does not exist in the course.\n     "},{"fullQualified":"public boolean isStudentsInSameTeam(String courseId, String student1Email, String student2Email)","name":"isStudentsInSameTeam","type":"boolean","javadoc":null},{"fullQualified":"public AccountRequestAttributes createAccountRequest(AccountRequestAttributes accountRequest) throws InvalidParametersException, EntityAlreadyExistsException","name":"createAccountRequest","type":"AccountRequestAttributes","javadoc":"\n     * Creates an account request.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the created account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityAlreadyExistsException if the account request already exists\n     "},{"fullQualified":"public AccountRequestAttributes updateAccountRequest(AccountRequestAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateAccountRequest","type":"AccountRequestAttributes","javadoc":"\n     * Updates an account request.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the updated account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityDoesNotExistException if the account request to update does not exist\n     "},{"fullQualified":"public void deleteAccountRequest(String email, String institute)","name":"deleteAccountRequest","type":"void","javadoc":"\n     * Deletes an account request.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     "},{"fullQualified":"public AccountRequestAttributes getAccountRequestForRegistrationKey(String registrationKey)","name":"getAccountRequestForRegistrationKey","type":"AccountRequestAttributes","javadoc":"\n     * Gets an account request by unique constraint {@code registrationKey}.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the account request\n     "},{"fullQualified":"public AccountRequestAttributes getAccountRequest(String email, String institute)","name":"getAccountRequest","type":"AccountRequestAttributes","javadoc":"\n     * Gets an account request by email address and institute.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the account request\n     "},{"fullQualified":"public List<AccountRequestAttributes> searchAccountRequestsInWholeSystem(String queryString) throws SearchServiceException","name":"searchAccountRequestsInWholeSystem","type":"List<AccountRequestAttributes>","javadoc":"\n     * This is used by admin to search account requests in the whole system.\n     *\n     * @return A list of {@link AccountRequestAttributes} or {@code null} if no match found.\n     "},{"fullQualified":"public void putAccountRequestDocument(AccountRequestAttributes accountRequest) throws SearchServiceException","name":"putAccountRequestDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given account request.\n     *\n     * @see AccountRequestsLogic#putDocument(AccountRequestAttributes)\n     "},{"fullQualified":"public List<UsageStatisticsAttributes> getUsageStatisticsForTimeRange(Instant startTime, Instant endTime)","name":"getUsageStatisticsForTimeRange","type":"List<UsageStatisticsAttributes>","javadoc":null},{"fullQualified":"public UsageStatisticsAttributes calculateEntitiesStatisticsForTimeRange(Instant startTime, Instant endTime)","name":"calculateEntitiesStatisticsForTimeRange","type":"UsageStatisticsAttributes","javadoc":null},{"fullQualified":"public void createUsageStatistics(UsageStatisticsAttributes attributes) throws EntityAlreadyExistsException, InvalidParametersException","name":"createUsageStatistics","type":"void","javadoc":null},{"fullQualified":"public DeadlineExtensionAttributes updateDeadlineExtension(DeadlineExtensionAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":"\n     * Updates a deadline extension.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the updated deadline extension\n     * @throws InvalidParametersException if the updated deadline extension is not valid\n     * @throws EntityDoesNotExistException if the deadline extension to update does not exist\n     "},{"fullQualified":"public DeadlineExtensionAttributes createDeadlineExtension(DeadlineExtensionAttributes deadlineExtension) throws InvalidParametersException, EntityAlreadyExistsException","name":"createDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":"\n     * Creates a deadline extension.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the created deadline extension\n     * @throws InvalidParametersException if the deadline extension is not valid\n     * @throws EntityAlreadyExistsException if the deadline extension to create already exists\n     "},{"fullQualified":"public void deleteDeadlineExtension(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"deleteDeadlineExtension","type":"void","javadoc":"\n     * Deletes a deadline extension.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * <p>Fails silently if the deadline extension doesn't exist.</p>\n     "},{"fullQualified":"public DeadlineExtensionAttributes getDeadlineExtension(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"getDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":"\n     * Gets a deadline extension by {@code courseId}, {@code feedbackSessionName},\n     * {@code userEmail} and {@code isInstructor}.\n     *\n     * <p>Preconditions:</p>\n     * * All parameters are non-null.\n     *\n     * @return the deadline extension if it exists, null otherwise\n     "},{"fullQualified":"public List<DeadlineExtensionAttributes> getDeadlineExtensionsPossiblyNeedingClosingEmail()","name":"getDeadlineExtensionsPossiblyNeedingClosingEmail","type":"List<DeadlineExtensionAttributes>","javadoc":"\n     * Gets a list of deadline extensions with end time within the next 24 hours\n     * and possibly need a closing email to be sent.\n     "}],"allConstructors":[{"identifier":" Logic()","javadocComment":null}]},{"name":"LogsProcessor","fullyQualifiedName":"teammates.logic.api.LogsProcessor","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Queries and retrieves logs with given parameters.\n     ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a feedback session log.\n     ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the feedback session logs as filtered by the given parameters.\n     * @param email Can be null\n     ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of logs for the event type and extra filters.\n     ","lineNumber":62,"isOrphan":false}],"allMethods":[{"fullQualified":"public static LogsProcessor inst()","name":"inst","type":"LogsProcessor","javadoc":null},{"fullQualified":"public QueryLogsResults queryLogs(QueryLogsParams queryLogsParams)","name":"queryLogs","type":"QueryLogsResults","javadoc":"\n     * Queries and retrieves logs with given parameters.\n     "},{"fullQualified":"public void createFeedbackSessionLog(String courseId, String email, String fsName, String fslType)","name":"createFeedbackSessionLog","type":"void","javadoc":"\n     * Creates a feedback session log.\n     "},{"fullQualified":"public List<FeedbackSessionLogEntry> getFeedbackSessionLogs(String courseId, String email, long startTime, long endTime, String fsName)","name":"getFeedbackSessionLogs","type":"List<FeedbackSessionLogEntry>","javadoc":"\n     * Gets the feedback session logs as filtered by the given parameters.\n     * @param email Can be null\n     "},{"fullQualified":"public int getNumberOfLogsForEvent(Instant startTime, Instant endTime, LogEvent logEvent, String extraFilters)","name":"getNumberOfLogsForEvent","type":"int","javadoc":"\n     * Gets the number of logs for the event type and extra filters.\n     "}],"allConstructors":[{"identifier":" LogsProcessor()","javadocComment":null}]},{"name":"RecaptchaVerifier","fullyQualifiedName":"teammates.logic.api.RecaptchaVerifier","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns true if the {@code captchaResponse} token is verified successfully.\n     ","lineNumber":28,"isOrphan":false}],"allMethods":[{"fullQualified":"public static RecaptchaVerifier inst()","name":"inst","type":"RecaptchaVerifier","javadoc":null},{"fullQualified":"public boolean isVerificationSuccessful(String captchaResponse)","name":"isVerificationSuccessful","type":"boolean","javadoc":"\n     * Returns true if the {@code captchaResponse} token is verified successfully.\n     "}],"allConstructors":[{"identifier":" RecaptchaVerifier()","javadocComment":null}]},{"name":"TaskQueuer","fullyQualifiedName":"teammates.logic.api.TaskQueuer","isInterface":false,"codeComments":[{"type":"LineComment","text":" The following methods are facades to the actual logic for adding tasks to the queue.","lineNumber":41,"isOrphan":true},{"type":"LineComment","text":" Using this method, the actual logic can still be black-boxed","lineNumber":42,"isOrphan":true},{"type":"LineComment","text":" while at the same time allowing this API to be mocked during test.","lineNumber":43,"isOrphan":true},{"type":"LineComment","text":" The following methods are the actual API methods to be used by the client classes","lineNumber":55,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Schedules for feedback session reminders (i.e. student has not submitted responses yet)\n     * for the specified feedback session.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for feedback session reminders (i.e. student/instructor has not submitted responses yet)\n     * for the specified feedback session for the specified group of users.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     * @param usersToRemind the group of users to send the reminders to\n     * @param requestingInstructorId the ID of the instructor who sends the reminder\n     * @param isSendingCopyToInstructor the indicator of whether to send an email copy to the requesting instructor\n     ","lineNumber":75,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for feedback session published email to be sent.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     ","lineNumber":97,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for feedback session publication reminders\n     * for the specified feedback session for the specified group of users.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     * @param usersToEmail the group of users to send the reminders to\n     * @param requestingInstructorId the ID of the instructor who sends the reminder\n     ","lineNumber":112,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for feedback session unpublished email to be sent.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     ","lineNumber":130,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for course registration to be sent to the specified instructor.\n     *\n     * @param inviterGoogleId googleId of instructor or administrator who sends the invitation\n     * @param courseId the target course ID\n     * @param instructorEmail the email address of the invited instructor\n     ","lineNumber":145,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for course registration to be sent to the specified student.\n     *\n     * @param courseId the target course ID\n     * @param studentEmail the email address of the student\n     ","lineNumber":166,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for the given list of emails to be sent.\n     *\n     * @param emails the list of emails to be sent\n     ","lineNumber":182,"isOrphan":false},{"type":"LineComment","text":" Equally spread out the emails to be sent over 1 hour","lineNumber":192,"isOrphan":true},{"type":"LineComment","text":" Sets interval to a maximum of 5 seconds if the interval is too large","lineNumber":193,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for the search indexing of the instructor identified by {@code courseId} and {@code email}.\n     *\n     * @param courseId the course ID of the instructor\n     * @param email the email of the instructor\n     ","lineNumber":205,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for the search indexing of the account request identified by {@code email} and {@code institute}.\n     *\n     * @param email the email associated with the account request\n     * @param institute the institute associated with the account request\n     ","lineNumber":220,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Schedules for the search indexing of the student identified by {@code courseId} and {@code email}.\n     *\n     * @param courseId the course ID of the student\n     * @param email the email of the student\n     ","lineNumber":235,"isOrphan":false}],"allMethods":[{"fullQualified":"public static TaskQueuer inst()","name":"inst","type":"TaskQueuer","javadoc":null},{"fullQualified":"private void addTask(String queueName, String workerUrl, Map<String, String> paramMap, Object requestBody)","name":"addTask","type":"void","javadoc":null},{"fullQualified":" void addDeferredTask(String queueName, String workerUrl, Map<String, String> paramMap, Object requestBody, long countdownTime)","name":"addDeferredTask","type":"void","javadoc":null},{"fullQualified":"public void scheduleFeedbackSessionReminders(String courseId, String feedbackSessionName, String googleIdOfRequestingInstructor)","name":"scheduleFeedbackSessionReminders","type":"void","javadoc":"\n     * Schedules for feedback session reminders (i.e. student has not submitted responses yet)\n     * for the specified feedback session.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     "},{"fullQualified":"public void scheduleFeedbackSessionRemindersForParticularUsers(String courseId, String feedbackSessionName, String[] usersToRemind, String requestingInstructorId, boolean isSendingCopyToInstructor)","name":"scheduleFeedbackSessionRemindersForParticularUsers","type":"void","javadoc":"\n     * Schedules for feedback session reminders (i.e. student/instructor has not submitted responses yet)\n     * for the specified feedback session for the specified group of users.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     * @param usersToRemind the group of users to send the reminders to\n     * @param requestingInstructorId the ID of the instructor who sends the reminder\n     * @param isSendingCopyToInstructor the indicator of whether to send an email copy to the requesting instructor\n     "},{"fullQualified":"public void scheduleFeedbackSessionPublishedEmail(String courseId, String feedbackSessionName)","name":"scheduleFeedbackSessionPublishedEmail","type":"void","javadoc":"\n     * Schedules for feedback session published email to be sent.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     "},{"fullQualified":"public void scheduleFeedbackSessionResendPublishedEmail(String courseId, String feedbackSessionName, String[] usersToEmail, String requestingInstructorId)","name":"scheduleFeedbackSessionResendPublishedEmail","type":"void","javadoc":"\n     * Schedules for feedback session publication reminders\n     * for the specified feedback session for the specified group of users.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     * @param usersToEmail the group of users to send the reminders to\n     * @param requestingInstructorId the ID of the instructor who sends the reminder\n     "},{"fullQualified":"public void scheduleFeedbackSessionUnpublishedEmail(String courseId, String feedbackSessionName)","name":"scheduleFeedbackSessionUnpublishedEmail","type":"void","javadoc":"\n     * Schedules for feedback session unpublished email to be sent.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the name of the feedback session\n     "},{"fullQualified":"public void scheduleCourseRegistrationInviteToInstructor(String inviterGoogleId, String instructorEmail, String courseId, boolean isRejoining)","name":"scheduleCourseRegistrationInviteToInstructor","type":"void","javadoc":"\n     * Schedules for course registration to be sent to the specified instructor.\n     *\n     * @param inviterGoogleId googleId of instructor or administrator who sends the invitation\n     * @param courseId the target course ID\n     * @param instructorEmail the email address of the invited instructor\n     "},{"fullQualified":"public void scheduleCourseRegistrationInviteToStudent(String courseId, String studentEmail, boolean isRejoining)","name":"scheduleCourseRegistrationInviteToStudent","type":"void","javadoc":"\n     * Schedules for course registration to be sent to the specified student.\n     *\n     * @param courseId the target course ID\n     * @param studentEmail the email address of the student\n     "},{"fullQualified":"public void scheduleEmailsForSending(List<EmailWrapper> emails)","name":"scheduleEmailsForSending","type":"void","javadoc":"\n     * Schedules for the given list of emails to be sent.\n     *\n     * @param emails the list of emails to be sent\n     "},{"fullQualified":"public void scheduleInstructorForSearchIndexing(String courseId, String email)","name":"scheduleInstructorForSearchIndexing","type":"void","javadoc":"\n     * Schedules for the search indexing of the instructor identified by {@code courseId} and {@code email}.\n     *\n     * @param courseId the course ID of the instructor\n     * @param email the email of the instructor\n     "},{"fullQualified":"public void scheduleAccountRequestForSearchIndexing(String email, String institute)","name":"scheduleAccountRequestForSearchIndexing","type":"void","javadoc":"\n     * Schedules for the search indexing of the account request identified by {@code email} and {@code institute}.\n     *\n     * @param email the email associated with the account request\n     * @param institute the institute associated with the account request\n     "},{"fullQualified":"public void scheduleStudentForSearchIndexing(String courseId, String email)","name":"scheduleStudentForSearchIndexing","type":"void","javadoc":"\n     * Schedules for the search indexing of the student identified by {@code courseId} and {@code email}.\n     *\n     * @param courseId the course ID of the student\n     * @param email the email of the student\n     "},{"fullQualified":"private void scheduleEmailForSending(EmailWrapper email, long emailDelayTimer)","name":"scheduleEmailForSending","type":"void","javadoc":null}],"allConstructors":[{"identifier":" TaskQueuer()","javadocComment":null}]},{"name":"UserProvision","fullyQualifiedName":"teammates.logic.api.UserProvision","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":20,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets the information of the current logged in user.\n     ","lineNumber":27,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the information of the current masqueraded user.\n     ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the information of a user who has administrator role only.\n     ","lineNumber":65,"isOrphan":false}],"allMethods":[{"fullQualified":"public static UserProvision inst()","name":"inst","type":"UserProvision","javadoc":null},{"fullQualified":"public UserInfo getCurrentUser(UserInfoCookie uic)","name":"getCurrentUser","type":"UserInfo","javadoc":"\n     * Gets the information of the current logged in user.\n     "},{"fullQualified":" UserInfo getCurrentLoggedInUser(UserInfoCookie uic)","name":"getCurrentLoggedInUser","type":"UserInfo","javadoc":null},{"fullQualified":"public UserInfo getMasqueradeUser(String googleId)","name":"getMasqueradeUser","type":"UserInfo","javadoc":"\n     * Gets the information of the current masqueraded user.\n     "},{"fullQualified":"public UserInfo getAdminOnlyUser(String userId)","name":"getAdminOnlyUser","type":"UserInfo","javadoc":"\n     * Gets the information of a user who has administrator role only.\n     "}],"allConstructors":[{"identifier":" UserProvision()","javadocComment":null}]},{"name":"AccountRequestsLogic","fullyQualifiedName":"teammates.logic.core.AccountRequestsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":23,"isOrphan":true},{"type":"LineComment","text":" No dependency to other logic class","lineNumber":31,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Updates an account request.\n     *\n     * @return the updated account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityDoesNotExistException if the account request to update does not exist\n     ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates an account request.\n     *\n     * @return the created account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityAlreadyExistsException if the account request to create already exists\n     ","lineNumber":46,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the account request associated with the email address and institute.\n     *\n     * <p>Fails silently if the account request doesn't exist.</p>\n     ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an account request by email address and institute.\n     *\n     * @return the account request\n     ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an account request by unique constraint {@code registrationKey}.\n     *\n     * @return the account request\n     ","lineNumber":76,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given account request.\n     *\n     * @param accountRequest the account request to be put into documents\n     ","lineNumber":85,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Searches for account requests in the whole system.\n     *\n     * @return A list of {@link AccountRequestAttributes} or {@code null} if no match found.\n     ","lineNumber":94,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of account requests created within a specified time range.\n     ","lineNumber":104,"isOrphan":false}],"allMethods":[{"fullQualified":"public static AccountRequestsLogic inst()","name":"inst","type":"AccountRequestsLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public AccountRequestAttributes updateAccountRequest(AccountRequestAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateAccountRequest","type":"AccountRequestAttributes","javadoc":"\n     * Updates an account request.\n     *\n     * @return the updated account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityDoesNotExistException if the account request to update does not exist\n     "},{"fullQualified":"public AccountRequestAttributes createAccountRequest(AccountRequestAttributes accountRequest) throws InvalidParametersException, EntityAlreadyExistsException","name":"createAccountRequest","type":"AccountRequestAttributes","javadoc":"\n     * Creates an account request.\n     *\n     * @return the created account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityAlreadyExistsException if the account request to create already exists\n     "},{"fullQualified":"public void deleteAccountRequest(String email, String institute)","name":"deleteAccountRequest","type":"void","javadoc":"\n     * Deletes the account request associated with the email address and institute.\n     *\n     * <p>Fails silently if the account request doesn't exist.</p>\n     "},{"fullQualified":"public AccountRequestAttributes getAccountRequest(String email, String institute)","name":"getAccountRequest","type":"AccountRequestAttributes","javadoc":"\n     * Gets an account request by email address and institute.\n     *\n     * @return the account request\n     "},{"fullQualified":"public AccountRequestAttributes getAccountRequestForRegistrationKey(String registrationKey)","name":"getAccountRequestForRegistrationKey","type":"AccountRequestAttributes","javadoc":"\n     * Gets an account request by unique constraint {@code registrationKey}.\n     *\n     * @return the account request\n     "},{"fullQualified":"public void putDocument(AccountRequestAttributes accountRequest) throws SearchServiceException","name":"putDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given account request.\n     *\n     * @param accountRequest the account request to be put into documents\n     "},{"fullQualified":"public List<AccountRequestAttributes> searchAccountRequestsInWholeSystem(String queryString) throws SearchServiceException","name":"searchAccountRequestsInWholeSystem","type":"List<AccountRequestAttributes>","javadoc":"\n     * Searches for account requests in the whole system.\n     *\n     * @return A list of {@link AccountRequestAttributes} or {@code null} if no match found.\n     "},{"fullQualified":" int getNumAccountRequestsByTimeRange(Instant startTime, Instant endTime)","name":"getNumAccountRequestsByTimeRange","type":"int","javadoc":"\n     * Gets the number of account requests created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private AccountRequestsLogic()","javadocComment":null}]},{"name":"AccountsLogic","fullyQualifiedName":"teammates.logic.core.AccountsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":38,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Creates an account.\n     *\n     * @return the created account\n     * @throws InvalidParametersException if the account is not valid\n     * @throws EntityAlreadyExistsException if the account already exists in the database.\n     ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an account.\n     ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets ids of read notifications in an account.\n     ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of accounts with email matching {@code email}.\n     ","lineNumber":84,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Joins the user as a student.\n     ","lineNumber":91,"isOrphan":false},{"type":"LineComment","text":" Register the student","lineNumber":98,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Joins the user as an instructor and sets the institute if it is not null.\n     * If the given institute is null, the instructor is given the institute of an existing instructor of the same course.\n     ","lineNumber":116,"isOrphan":false},{"type":"LineComment","text":" Register the instructor","lineNumber":124,"isOrphan":false},{"type":"LineComment","text":" Update the googleId of the student entity for the instructor which was created from sample data.","lineNumber":150,"isOrphan":false},{"type":"LineComment","text":" Check if this Google ID has already joined this course","lineNumber":191,"isOrphan":false},{"type":"LineComment","text":" Check if this Google ID has already joined this course","lineNumber":226,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes both instructor and student privileges, as well as the account and associated student profile.\n     *\n     * <ul>\n     * <li>Fails silently if no such account.</li>\n     * </ul>\n     ","lineNumber":237,"isOrphan":false},{"type":"LineComment","text":" to prevent orphan course","lineNumber":251,"isOrphan":false},{"type":"LineComment","text":" the instructor is the last instructor in the course","lineNumber":256,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a student account.\n     ","lineNumber":266,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the readNotifications of an account.\n     *\n     * @param googleId google ID of the user who read the notification.\n     * @param notificationId notification to be marked as read.\n     * @param endTime the expiry time of the notification, i.e. notification will not be shown after this time.\n     * @return the account attributes with updated read notifications.\n     * @throws InvalidParametersException if the notification has expired.\n     * @throws EntityDoesNotExistException if account or notification does not exist.\n     ","lineNumber":280,"isOrphan":false},{"type":"LineComment","text":" only keep active notifications in readNotifications","lineNumber":305,"isOrphan":false}],"allMethods":[{"fullQualified":"public static AccountsLogic inst()","name":"inst","type":"AccountsLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":" AccountAttributes createAccount(AccountAttributes accountData) throws InvalidParametersException, EntityAlreadyExistsException","name":"createAccount","type":"AccountAttributes","javadoc":"\n     * Creates an account.\n     *\n     * @return the created account\n     * @throws InvalidParametersException if the account is not valid\n     * @throws EntityAlreadyExistsException if the account already exists in the database.\n     "},{"fullQualified":"public AccountAttributes getAccount(String googleId)","name":"getAccount","type":"AccountAttributes","javadoc":"\n     * Gets an account.\n     "},{"fullQualified":"public List<String> getReadNotificationsId(String googleId)","name":"getReadNotificationsId","type":"List<String>","javadoc":"\n     * Gets ids of read notifications in an account.\n     "},{"fullQualified":"public List<AccountAttributes> getAccountsForEmail(String email)","name":"getAccountsForEmail","type":"List<AccountAttributes>","javadoc":"\n     * Returns a list of accounts with email matching {@code email}.\n     "},{"fullQualified":"public StudentAttributes joinCourseForStudent(String registrationKey, String googleId) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"joinCourseForStudent","type":"StudentAttributes","javadoc":"\n     * Joins the user as a student.\n     "},{"fullQualified":"public InstructorAttributes joinCourseForInstructor(String key, String googleId) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"joinCourseForInstructor","type":"InstructorAttributes","javadoc":"\n     * Joins the user as an instructor and sets the institute if it is not null.\n     * If the given institute is null, the instructor is given the institute of an existing instructor of the same course.\n     "},{"fullQualified":"private InstructorAttributes validateInstructorJoinRequest(String registrationKey, String googleId) throws EntityDoesNotExistException, EntityAlreadyExistsException","name":"validateInstructorJoinRequest","type":"InstructorAttributes","javadoc":null},{"fullQualified":"private StudentAttributes validateStudentJoinRequest(String registrationKey, String googleId) throws EntityDoesNotExistException, EntityAlreadyExistsException","name":"validateStudentJoinRequest","type":"StudentAttributes","javadoc":null},{"fullQualified":"public void deleteAccountCascade(String googleId)","name":"deleteAccountCascade","type":"void","javadoc":"\n     * Deletes both instructor and student privileges, as well as the account and associated student profile.\n     *\n     * <ul>\n     * <li>Fails silently if no such account.</li>\n     * </ul>\n     "},{"fullQualified":"private void createStudentAccount(StudentAttributes student) throws InvalidParametersException, EntityAlreadyExistsException","name":"createStudentAccount","type":"void","javadoc":"\n     * Creates a student account.\n     "},{"fullQualified":"public List<String> updateReadNotifications(String googleId, String notificationId, Instant endTime) throws InvalidParametersException, EntityDoesNotExistException","name":"updateReadNotifications","type":"List<String>","javadoc":"\n     * Updates the readNotifications of an account.\n     *\n     * @param googleId google ID of the user who read the notification.\n     * @param notificationId notification to be marked as read.\n     * @param endTime the expiry time of the notification, i.e. notification will not be shown after this time.\n     * @return the account attributes with updated read notifications.\n     * @throws InvalidParametersException if the notification has expired.\n     * @throws EntityDoesNotExistException if account or notification does not exist.\n     "}],"allConstructors":[{"identifier":"private AccountsLogic()","javadocComment":null}]},{"name":"CoursesLogic","fullyQualifiedName":"teammates.logic.core.CoursesLogic","isInterface":false,"codeComments":[{"type":"BlockComment","text":" Explanation: This class depends on CoursesDb class but no other *Db classes.\n     * That is because reading/writing entities from/to the database is the\n     * responsibility of the matching *Logic class.\n     * However, this class can talk to other *Logic classes. That is because\n     * the logic related to one entity type can involve the logic related to\n     * other entity types.\n     ","lineNumber":35,"isOrphan":true},{"type":"LineComment","text":" prevent initialization","lineNumber":55,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets the institute associated with the course.\n     ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a course.\n     *\n     * @return the created course\n     * @throws InvalidParametersException if the course is not valid\n     * @throws EntityAlreadyExistsException if the course already exists in the database.\n     ","lineNumber":82,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a course and an associated instructor for the course.\n     *\n     * <br/>Preconditions: <br/>\n     * * {@code instructorGoogleId} already has an account and instructor privileges.\n     ","lineNumber":94,"isOrphan":false},{"type":"LineComment","text":" Create the initial instructor for the course","lineNumber":108,"isOrphan":false},{"type":"LineComment","text":" roll back the transaction","lineNumber":121,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the course with the specified ID.\n     ","lineNumber":129,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the course with ID courseId is present.\n     ","lineNumber":136,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Used to trigger an {@link EntityDoesNotExistException} if the course is not present.\n     ","lineNumber":143,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of section names for the course with valid ID courseId.\n     *\n     * @param courseId Course ID of the course\n     ","lineNumber":152,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns team names for a particular courseId.\n     *\n     * <p>Note: This method does not returns any Loner information presently.\n     * Loner information must be returned as we decide to support loners in future.\n     ","lineNumber":175,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns team names for a particular section of a course.\n     *\n     * <p>Note: This method does not returns any Loner information presently.\n     * Loner information must be returned as we decide to support loners in future.\n     ","lineNumber":195,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of {@link CourseAttributes} for all courses a given student is enrolled in.\n     *\n     * @param googleId The Google ID of the student\n     ","lineNumber":216,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of {@link CourseAttributes} for all courses for a given list of instructors\n     * except for courses in Recycle Bin.\n     ","lineNumber":232,"isOrphan":false},{"type":"LineComment","text":" Check that all courseIds queried returned a course.","lineNumber":246,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of {@link CourseAttributes} for soft-deleted courses for a given list of instructors.\n     ","lineNumber":258,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a course by {@link CourseAttributes.UpdateOptions}.\n     *\n     * <p>If the {@code timezone} of the course is changed, cascade the change to its corresponding feedback sessions.\n     *\n     * @return updated course\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the course cannot be found\n     ","lineNumber":282,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a course cascade its students, instructors, sessions, responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if no such course.\n     ","lineNumber":304,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Moves a course to Recycle Bin by its given corresponding ID.\n     * @return the time when the course is moved to the recycle bin\n     ","lineNumber":328,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Restores a course from Recycle Bin by its given corresponding ID.\n     ","lineNumber":337,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of courses created within a specified time range.\n     ","lineNumber":344,"isOrphan":false}],"allMethods":[{"fullQualified":"public static CoursesLogic inst()","name":"inst","type":"CoursesLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public String getCourseInstitute(String courseId)","name":"getCourseInstitute","type":"String","javadoc":"\n     * Gets the institute associated with the course.\n     "},{"fullQualified":" CourseAttributes createCourse(CourseAttributes courseToCreate) throws InvalidParametersException, EntityAlreadyExistsException","name":"createCourse","type":"CourseAttributes","javadoc":"\n     * Creates a course.\n     *\n     * @return the created course\n     * @throws InvalidParametersException if the course is not valid\n     * @throws EntityAlreadyExistsException if the course already exists in the database.\n     "},{"fullQualified":"public void createCourseAndInstructor(String instructorGoogleId, CourseAttributes courseToCreate) throws InvalidParametersException, EntityAlreadyExistsException","name":"createCourseAndInstructor","type":"void","javadoc":"\n     * Creates a course and an associated instructor for the course.\n     *\n     * <br/>Preconditions: <br/>\n     * * {@code instructorGoogleId} already has an account and instructor privileges.\n     "},{"fullQualified":"public CourseAttributes getCourse(String courseId)","name":"getCourse","type":"CourseAttributes","javadoc":"\n     * Gets the course with the specified ID.\n     "},{"fullQualified":"public boolean isCoursePresent(String courseId)","name":"isCoursePresent","type":"boolean","javadoc":"\n     * Returns true if the course with ID courseId is present.\n     "},{"fullQualified":" void verifyCourseIsPresent(String courseId) throws EntityDoesNotExistException","name":"verifyCourseIsPresent","type":"void","javadoc":"\n     * Used to trigger an {@link EntityDoesNotExistException} if the course is not present.\n     "},{"fullQualified":"public List<String> getSectionsNameForCourse(String courseId) throws EntityDoesNotExistException","name":"getSectionsNameForCourse","type":"List<String>","javadoc":"\n     * Returns a list of section names for the course with valid ID courseId.\n     *\n     * @param courseId Course ID of the course\n     "},{"fullQualified":"public List<String> getTeamsForCourse(String courseId) throws EntityDoesNotExistException","name":"getTeamsForCourse","type":"List<String>","javadoc":"\n     * Returns team names for a particular courseId.\n     *\n     * <p>Note: This method does not returns any Loner information presently.\n     * Loner information must be returned as we decide to support loners in future.\n     "},{"fullQualified":"public List<String> getTeamsForSection(String sectionName, String courseId) throws EntityDoesNotExistException","name":"getTeamsForSection","type":"List<String>","javadoc":"\n     * Returns team names for a particular section of a course.\n     *\n     * <p>Note: This method does not returns any Loner information presently.\n     * Loner information must be returned as we decide to support loners in future.\n     "},{"fullQualified":"public List<CourseAttributes> getCoursesForStudentAccount(String googleId)","name":"getCoursesForStudentAccount","type":"List<CourseAttributes>","javadoc":"\n     * Returns a list of {@link CourseAttributes} for all courses a given student is enrolled in.\n     *\n     * @param googleId The Google ID of the student\n     "},{"fullQualified":"public List<CourseAttributes> getCoursesForInstructor(List<InstructorAttributes> instructorList)","name":"getCoursesForInstructor","type":"List<CourseAttributes>","javadoc":"\n     * Returns a list of {@link CourseAttributes} for all courses for a given list of instructors\n     * except for courses in Recycle Bin.\n     "},{"fullQualified":"public List<CourseAttributes> getSoftDeletedCoursesForInstructors(List<InstructorAttributes> instructorList)","name":"getSoftDeletedCoursesForInstructors","type":"List<CourseAttributes>","javadoc":"\n     * Returns a list of {@link CourseAttributes} for soft-deleted courses for a given list of instructors.\n     "},{"fullQualified":"public CourseAttributes updateCourseCascade(CourseAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateCourseCascade","type":"CourseAttributes","javadoc":"\n     * Updates a course by {@link CourseAttributes.UpdateOptions}.\n     *\n     * <p>If the {@code timezone} of the course is changed, cascade the change to its corresponding feedback sessions.\n     *\n     * @return updated course\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the course cannot be found\n     "},{"fullQualified":"public void deleteCourseCascade(String courseId)","name":"deleteCourseCascade","type":"void","javadoc":"\n     * Deletes a course cascade its students, instructors, sessions, responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if no such course.\n     "},{"fullQualified":"public Instant moveCourseToRecycleBin(String courseId) throws EntityDoesNotExistException","name":"moveCourseToRecycleBin","type":"Instant","javadoc":"\n     * Moves a course to Recycle Bin by its given corresponding ID.\n     * @return the time when the course is moved to the recycle bin\n     "},{"fullQualified":"public void restoreCourseFromRecycleBin(String courseId) throws EntityDoesNotExistException","name":"restoreCourseFromRecycleBin","type":"void","javadoc":"\n     * Restores a course from Recycle Bin by its given corresponding ID.\n     "},{"fullQualified":" int getNumCoursesByTimeRange(Instant startTime, Instant endTime)","name":"getNumCoursesByTimeRange","type":"int","javadoc":"\n     * Gets the number of courses created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private CoursesLogic()","javadocComment":null}]},{"name":"DataBundleLogic","fullyQualifiedName":"teammates.logic.core.DataBundleLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":66,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Persists data in the given {@link DataBundle} to the database, including\n     * accounts, account requests, courses, deadline extensions, instructors, students, sessions,\n     * questions, responses, and comments.\n     *\n     * <p>Accounts are generated for students and instructors with Google IDs\n     * if the corresponding accounts are not found in the data bundle.\n     * For question ID injection in responses and comments to work properly, all questions\n     * referenced by responses and comments must be included in the data bundle.\n     *\n     * @throws InvalidParametersException if invalid data is encountered.\n     ","lineNumber":73,"isOrphan":false},{"type":"LineComment","text":" For ensuring only one account per Google ID is created","lineNumber":103,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates document for entities that have document, i.e. searchable.\n     ","lineNumber":169,"isOrphan":false},{"type":"LineComment","text":" query the entity in db first to get the actual data and create document for actual entity","lineNumber":173,"isOrphan":true},{"type":"LineComment","text":" create adhoc account to maintain data integrity","lineNumber":201,"isOrphan":false},{"type":"LineComment","text":" create adhoc account to maintain data integrity","lineNumber":213,"isOrphan":false},{"type":"JavadocComment","text":"\n     * This method is necessary to generate the feedbackQuestionId of the\n     * question the response is for.<br>\n     * Normally, the ID is already generated on creation,\n     * but the json file does not contain the actual response ID. <br>\n     * Therefore the question number corresponding to the created response\n     * should be inserted in the json file in place of the actual response ID.<br>\n     * This method will then generate the correct ID and replace the field.\n     ","lineNumber":245,"isOrphan":false},{"type":"LineComment","text":" question ID already injected","lineNumber":261,"isOrphan":false},{"type":"JavadocComment","text":"\n     * This method is necessary to generate the feedbackQuestionId\n     * and feedbackResponseId of the question and response the comment is for.<br>\n     * Normally, the ID is already generated on creation,\n     * but the json file does not contain the actual response ID. <br>\n     * Therefore the question number and questionNumber%giverEmail%recipient\n     * corresponding to the created comment should be inserted in the json\n     * file in place of the actual ID.<br>\n     * This method will then generate the correct ID and replace the field.\n     ","lineNumber":270,"isOrphan":false},{"type":"LineComment","text":" question ID already injected","lineNumber":287,"isOrphan":false},{"type":"LineComment","text":" format of feedbackResponseId: questionNumber%giverEmail%recipient","lineNumber":294,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the role of {@code instructor} matches its privileges.\n     *\n     * @param instructor\n     *            the {@link InstructorAttributes} of an instructor, cannot be\n     *            {@code null}\n     ","lineNumber":301,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes the items in the data bundle from the database.\n     ","lineNumber":373,"isOrphan":false},{"type":"LineComment","text":" Questions, responses and deadline extensions will be deleted automatically.","lineNumber":378,"isOrphan":true},{"type":"LineComment","text":" We don't attempt to delete them again, to save time.","lineNumber":379,"isOrphan":false}],"allMethods":[{"fullQualified":"public static DataBundleLogic inst()","name":"inst","type":"DataBundleLogic","javadoc":null},{"fullQualified":"public DataBundle persistDataBundle(DataBundle dataBundle) throws InvalidParametersException","name":"persistDataBundle","type":"DataBundle","javadoc":"\n     * Persists data in the given {@link DataBundle} to the database, including\n     * accounts, account requests, courses, deadline extensions, instructors, students, sessions,\n     * questions, responses, and comments.\n     *\n     * <p>Accounts are generated for students and instructors with Google IDs\n     * if the corresponding accounts are not found in the data bundle.\n     * For question ID injection in responses and comments to work properly, all questions\n     * referenced by responses and comments must be included in the data bundle.\n     *\n     * @throws InvalidParametersException if invalid data is encountered.\n     "},{"fullQualified":"private void updateDataBundleValue(List<T> newValues, Map<String, T> oldValues)","name":"updateDataBundleValue","type":"void","javadoc":null},{"fullQualified":"public void putDocuments(DataBundle dataBundle) throws SearchServiceException","name":"putDocuments","type":"void","javadoc":"\n     * Creates document for entities that have document, i.e. searchable.\n     "},{"fullQualified":"private void processInstructors(Collection<InstructorAttributes> instructors, Map<String, AccountAttributes> googleIdAccountMap)","name":"processInstructors","type":"void","javadoc":null},{"fullQualified":"private void processStudents(Collection<StudentAttributes> students, Map<String, AccountAttributes> googleIdAccountMap)","name":"processStudents","type":"void","javadoc":null},{"fullQualified":"private void processQuestions(Collection<FeedbackQuestionAttributes> questions)","name":"processQuestions","type":"void","javadoc":null},{"fullQualified":"private void injectRealIds(Collection<FeedbackResponseAttributes> responses, Collection<FeedbackResponseCommentAttributes> responseComments, List<FeedbackQuestionAttributes> createdQuestions)","name":"injectRealIds","type":"void","javadoc":null},{"fullQualified":"private Map<String, String> makeQuestionIdMap(List<FeedbackQuestionAttributes> createdQuestions)","name":"makeQuestionIdMap","type":"Map<String,String>","javadoc":null},{"fullQualified":"private void injectRealIdsIntoResponses(Collection<FeedbackResponseAttributes> responses, Map<String, String> questionIdMap)","name":"injectRealIdsIntoResponses","type":"void","javadoc":"\n     * This method is necessary to generate the feedbackQuestionId of the\n     * question the response is for.<br>\n     * Normally, the ID is already generated on creation,\n     * but the json file does not contain the actual response ID. <br>\n     * Therefore the question number corresponding to the created response\n     * should be inserted in the json file in place of the actual response ID.<br>\n     * This method will then generate the correct ID and replace the field.\n     "},{"fullQualified":"private void injectRealIdsIntoResponseComments(Collection<FeedbackResponseCommentAttributes> responseComments, Map<String, String> questionIdMap)","name":"injectRealIdsIntoResponseComments","type":"void","javadoc":"\n     * This method is necessary to generate the feedbackQuestionId\n     * and feedbackResponseId of the question and response the comment is for.<br>\n     * Normally, the ID is already generated on creation,\n     * but the json file does not contain the actual response ID. <br>\n     * Therefore the question number and questionNumber%giverEmail%recipient\n     * corresponding to the created comment should be inserted in the json\n     * file in place of the actual ID.<br>\n     * This method will then generate the correct ID and replace the field.\n     "},{"fullQualified":"private void validateInstructorPrivileges(InstructorAttributes instructor)","name":"validateInstructorPrivileges","type":"void","javadoc":"\n     * Checks if the role of {@code instructor} matches its privileges.\n     *\n     * @param instructor\n     *            the {@link InstructorAttributes} of an instructor, cannot be\n     *            {@code null}\n     "},{"fullQualified":"private void populateNullSection(StudentAttributes student)","name":"populateNullSection","type":"void","javadoc":null},{"fullQualified":"private AccountAttributes makeAccount(InstructorAttributes instructor)","name":"makeAccount","type":"AccountAttributes","javadoc":null},{"fullQualified":"private AccountAttributes makeAccount(StudentAttributes student)","name":"makeAccount","type":"AccountAttributes","javadoc":null},{"fullQualified":"private String makeSessionKey(String feedbackSessionName, String courseId)","name":"makeSessionKey","type":"String","javadoc":null},{"fullQualified":"private String makeQuestionKey(String sessionKey, int questionNumber)","name":"makeQuestionKey","type":"String","javadoc":null},{"fullQualified":"private String makeQuestionKey(String sessionKey, String questionNumber)","name":"makeQuestionKey","type":"String","javadoc":null},{"fullQualified":"public void removeDataBundle(DataBundle dataBundle)","name":"removeDataBundle","type":"void","javadoc":"\n     * Removes the items in the data bundle from the database.\n     "},{"fullQualified":"private void deleteCourses(Collection<CourseAttributes> courses)","name":"deleteCourses","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private DataBundleLogic()","javadocComment":null}]},{"name":"DeadlineExtensionsLogic","fullyQualifiedName":"teammates.logic.core.DeadlineExtensionsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":22,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Updates a deadline extension.\n     *\n     * <p>If {@code endTimeOption} is present and {@code sentClosingEmailOption}\n     * is not explicitly set, update {@code sentClosingEmailOption} to false.\n     *\n     * @return the updated deadline extension\n     * @throws InvalidParametersException if the updated deadline extension is not valid\n     * @throws EntityDoesNotExistException if the deadline extension to update does not exist\n     ","lineNumber":29,"isOrphan":false},{"type":"LineComment","text":" reset sentClosingEmail if the session deadline is updated and sentClosingEmailOption is not explicitly set","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates all deadline extensions of a user in a course with new email.\n     ","lineNumber":52,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a deadline extension.\n     *\n     * @return the created deadline extension\n     * @throws InvalidParametersException if the deadline extension is not valid\n     * @throws EntityAlreadyExistsException if the deadline extension to create already exists\n     ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a deadline extension.\n     *\n     * <p>Fails silently if the deadline extension doesn't exist.</p>\n     ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes all deadline extensions for a user in a course.\n     *\n     * <p>Fails silently if the deadline extension doesn't exist.</p>\n     ","lineNumber":82,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes deadline extensions using {@link AttributesDeletionQuery}.\n     ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deadline extension by {@code courseId}, {@code feedbackSessionName},\n     * {@code userEmail} and {@code isInstructor}.\n     *\n     * @return the deadline extension if it exists, null otherwise\n     ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of deadline extensions with end time coming up soon\n     * and possibly need a closing email to be sent.\n     ","lineNumber":119,"isOrphan":false}],"allMethods":[{"fullQualified":"public static DeadlineExtensionsLogic inst()","name":"inst","type":"DeadlineExtensionsLogic","javadoc":null},{"fullQualified":"public DeadlineExtensionAttributes updateDeadlineExtension(DeadlineExtensionAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":"\n     * Updates a deadline extension.\n     *\n     * <p>If {@code endTimeOption} is present and {@code sentClosingEmailOption}\n     * is not explicitly set, update {@code sentClosingEmailOption} to false.\n     *\n     * @return the updated deadline extension\n     * @throws InvalidParametersException if the updated deadline extension is not valid\n     * @throws EntityDoesNotExistException if the deadline extension to update does not exist\n     "},{"fullQualified":"public void updateDeadlineExtensionsWithNewEmail(String courseId, String oldEmail, String newEmail, boolean isInstructor) throws InvalidParametersException","name":"updateDeadlineExtensionsWithNewEmail","type":"void","javadoc":"\n     * Updates all deadline extensions of a user in a course with new email.\n     "},{"fullQualified":"public DeadlineExtensionAttributes createDeadlineExtension(DeadlineExtensionAttributes deadlineExtension) throws InvalidParametersException, EntityAlreadyExistsException","name":"createDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":"\n     * Creates a deadline extension.\n     *\n     * @return the created deadline extension\n     * @throws InvalidParametersException if the deadline extension is not valid\n     * @throws EntityAlreadyExistsException if the deadline extension to create already exists\n     "},{"fullQualified":"public void deleteDeadlineExtension(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"deleteDeadlineExtension","type":"void","javadoc":"\n     * Deletes a deadline extension.\n     *\n     * <p>Fails silently if the deadline extension doesn't exist.</p>\n     "},{"fullQualified":"public void deleteDeadlineExtensions(String courseId, String userEmail, boolean isInstructor)","name":"deleteDeadlineExtensions","type":"void","javadoc":"\n     * Deletes all deadline extensions for a user in a course.\n     *\n     * <p>Fails silently if the deadline extension doesn't exist.</p>\n     "},{"fullQualified":"public void deleteDeadlineExtensions(AttributesDeletionQuery query)","name":"deleteDeadlineExtensions","type":"void","javadoc":"\n     * Deletes deadline extensions using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"public DeadlineExtensionAttributes getDeadlineExtension(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"getDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":"\n     * Gets a deadline extension by {@code courseId}, {@code feedbackSessionName},\n     * {@code userEmail} and {@code isInstructor}.\n     *\n     * @return the deadline extension if it exists, null otherwise\n     "},{"fullQualified":"public List<DeadlineExtensionAttributes> getDeadlineExtensionsPossiblyNeedingClosingEmail()","name":"getDeadlineExtensionsPossiblyNeedingClosingEmail","type":"List<DeadlineExtensionAttributes>","javadoc":"\n     * Gets a list of deadline extensions with end time coming up soon\n     * and possibly need a closing email to be sent.\n     "}],"allConstructors":[{"identifier":"private DeadlineExtensionsLogic()","javadocComment":null}]},{"name":"FeedbackQuestionsLogic","fullyQualifiedName":"teammates.logic.core.FeedbackQuestionsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":53,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Creates a new feedback question.\n     *\n     * @return the created question\n     * @throws InvalidParametersException if the question is invalid\n     ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a single question corresponding to the given parameters. <br><br>\n     * <b>Note:</b><br>\n     * *    This method should only be used if the question already exists in the<br>\n     * database and has an ID already generated.\n     ","lineNumber":86,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a single question corresponding to the given parameters.\n     ","lineNumber":96,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a {@link List} of every FeedbackQuestion in the given session.\n     ","lineNumber":107,"isOrphan":false},{"type":"LineComment","text":" check whether the question numbers are consistent","lineNumber":117,"isOrphan":false},{"type":"LineComment","text":" TODO can be removed once we are sure that question numbers will be consistent","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if there are any questions for the given session that instructors can view/submit.\n     ","lineNumber":143,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a {@code List} of all questions for the given session that instructors can view/submit.\n     ","lineNumber":162,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Filters through the given list of questions and returns a {@code List} of\n     * questions that instructors can view/submit.\n     ","lineNumber":183,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if there are any questions for the given session that students can view/submit.\n     ","lineNumber":202,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a {@code List} of all questions for the given session that students can view/submit.\n     ","lineNumber":212,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Filters through the given list of questions and returns a {@code List} of\n     * questions that students can view/submit.\n     ","lineNumber":230,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if a session has question in either STUDENTS type or TEAMS type.\n     ","lineNumber":249,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if a session has question in a specific giverType.\n     ","lineNumber":257,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the recipients of a feedback question.\n     *\n     * @param question the feedback question\n     * @param instructorGiver can be null for student giver\n     * @param studentGiver can be null for instructor giver\n     * @param courseRoster if provided, the function can be completed without touching database\n     * @return a map which keys are the identifiers of the recipients and values are the names of the recipients\n     ","lineNumber":265,"isOrphan":false},{"type":"LineComment","text":" Ensure student does not evaluate him/herself if it's STUDENTS_EXCLUDING_SELF or","lineNumber":336,"isOrphan":true},{"type":"LineComment","text":" instructor can only see students in allowed sections for him/her","lineNumber":333,"isOrphan":false},{"type":"LineComment","text":" STUDENTS_IN_SAME_SECTION","lineNumber":337,"isOrphan":false},{"type":"LineComment","text":" remove hidden instructors for students","lineNumber":352,"isOrphan":false},{"type":"LineComment","text":" Ensure instructor does not evaluate himself","lineNumber":356,"isOrphan":false},{"type":"LineComment","text":" Ensure student('s team) does not evaluate own team if it's TEAMS_EXCLUDING_SELF or","lineNumber":393,"isOrphan":true},{"type":"LineComment","text":" instructor can only see teams in allowed sections for him/her","lineNumber":390,"isOrphan":false},{"type":"LineComment","text":" TEAMS_IN_SAME_SECTION","lineNumber":394,"isOrphan":false},{"type":"LineComment","text":" recipientEmail doubles as team name in this case.","lineNumber":398,"isOrphan":false},{"type":"LineComment","text":" accepts self feedback too","lineNumber":426,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Builds a complete giver to recipient map for a {@code relatedQuestion}.\n     *\n     * @param relatedQuestion The question to be considered\n     * @param courseRoster the roster in the course\n     * @return a map from giver to recipient for the question.\n     ","lineNumber":439,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets possible giver identifiers for a feedback question.\n     *\n     * @param fqa the feedback question\n     * @param courseRoster roster of all students and instructors\n     * @return a list of giver identifier\n     ","lineNumber":485,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Populates fields that need dynamic generation in a question.\n     *\n     * <p>Currently, only MCQ/MSQ needs to generate choices dynamically.</p>\n     *\n     * @param feedbackQuestionAttributes the question to populate\n     * @param emailOfEntityDoingQuestion the email of the entity doing the question\n     * @param teamOfEntityDoingQuestion the team of the entity doing the question. If the entity is an instructor,\n     *                                  it can be {@code null}.\n     ","lineNumber":526,"isOrphan":false},{"type":"LineComment","text":" other question types","lineNumber":553,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a feedback question by {@code FeedbackQuestionAttributes.UpdateOptions}.\n     *\n     * <p>Cascade adjust the question number of questions in the same session.\n     *\n     * <p>Cascade adjust the existing response of the question.\n     *\n     * @return updated feedback question\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback question cannot be found\n     ","lineNumber":653,"isOrphan":false},{"type":"LineComment","text":" get questions in session before update","lineNumber":678,"isOrphan":false},{"type":"LineComment","text":" update question","lineNumber":684,"isOrphan":false},{"type":"LineComment","text":" shift other feedback questions (generate an empty \"slot\")","lineNumber":688,"isOrphan":false},{"type":"LineComment","text":" adjust responses","lineNumber":692,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Adjust questions between the old and new number,\n     * if the new number is smaller, then shift up (increase qn#) all questions in between.\n     * if the new number is bigger, then shift down(decrease qn#) all questions in between.\n     ","lineNumber":700,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a feedback question cascade its responses and comments.\n     *\n     * <p>Silently fail if question does not exist.\n     ","lineNumber":730,"isOrphan":false},{"type":"LineComment","text":" Silently fail if question does not exist.","lineNumber":740,"isOrphan":false},{"type":"LineComment","text":" cascade delete responses for question.","lineNumber":743,"isOrphan":false},{"type":"LineComment","text":" delete question","lineNumber":749,"isOrphan":false},{"type":"LineComment","text":" adjust question numbers","lineNumber":752,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes questions using {@link AttributesDeletionQuery}.\n     ","lineNumber":758,"isOrphan":false},{"type":"LineComment","text":" Shifts all question numbers after questionNumberToShiftFrom down by one.","lineNumber":765,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackQuestionsLogic inst()","name":"inst","type":"FeedbackQuestionsLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public FeedbackQuestionAttributes createFeedbackQuestion(FeedbackQuestionAttributes fqa) throws InvalidParametersException","name":"createFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":"\n     * Creates a new feedback question.\n     *\n     * @return the created question\n     * @throws InvalidParametersException if the question is invalid\n     "},{"fullQualified":"public FeedbackQuestionAttributes getFeedbackQuestion(String feedbackQuestionId)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":"\n     * Gets a single question corresponding to the given parameters. <br><br>\n     * <b>Note:</b><br>\n     * *    This method should only be used if the question already exists in the<br>\n     * database and has an ID already generated.\n     "},{"fullQualified":"public FeedbackQuestionAttributes getFeedbackQuestion(String feedbackSessionName, String courseId, int questionNumber)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":"\n     * Gets a single question corresponding to the given parameters.\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForSession(String feedbackSessionName, String courseId)","name":"getFeedbackQuestionsForSession","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Gets a {@link List} of every FeedbackQuestion in the given session.\n     "},{"fullQualified":"private boolean areQuestionNumbersConsistent(List<FeedbackQuestionAttributes> questions)","name":"areQuestionNumbersConsistent","type":"boolean","javadoc":null},{"fullQualified":"public boolean hasFeedbackQuestionsForInstructors(FeedbackSessionAttributes fsa, boolean isCreator)","name":"hasFeedbackQuestionsForInstructors","type":"boolean","javadoc":"\n     * Checks if there are any questions for the given session that instructors can view/submit.\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForInstructors(String feedbackSessionName, String courseId, String userEmail)","name":"getFeedbackQuestionsForInstructors","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Gets a {@code List} of all questions for the given session that instructors can view/submit.\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForInstructors(List<FeedbackQuestionAttributes> allQuestions, boolean isCreator)","name":"getFeedbackQuestionsForInstructors","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Filters through the given list of questions and returns a {@code List} of\n     * questions that instructors can view/submit.\n     "},{"fullQualified":"public boolean hasFeedbackQuestionsForStudents(FeedbackSessionAttributes fsa)","name":"hasFeedbackQuestionsForStudents","type":"boolean","javadoc":"\n     * Checks if there are any questions for the given session that students can view/submit.\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForStudents(String feedbackSessionName, String courseId)","name":"getFeedbackQuestionsForStudents","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Gets a {@code List} of all questions for the given session that students can view/submit.\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForStudents(List<FeedbackQuestionAttributes> allQuestions)","name":"getFeedbackQuestionsForStudents","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Filters through the given list of questions and returns a {@code List} of\n     * questions that students can view/submit.\n     "},{"fullQualified":"public boolean sessionHasQuestions(String feedbackSessionName, String courseId)","name":"sessionHasQuestions","type":"boolean","javadoc":"\n     * Returns true if a session has question in either STUDENTS type or TEAMS type.\n     "},{"fullQualified":"public boolean sessionHasQuestionsForGiverType(String feedbackSessionName, String courseId, FeedbackParticipantType giverType)","name":"sessionHasQuestionsForGiverType","type":"boolean","javadoc":"\n     * Returns true if a session has question in a specific giverType.\n     "},{"fullQualified":"public Map<String, String> getRecipientsOfQuestion(FeedbackQuestionAttributes question, @Nullable InstructorAttributes instructorGiver, @Nullable StudentAttributes studentGiver, @Nullable CourseRoster courseRoster)","name":"getRecipientsOfQuestion","type":"Map<String,String>","javadoc":"\n     * Gets the recipients of a feedback question.\n     *\n     * @param question the feedback question\n     * @param instructorGiver can be null for student giver\n     * @param studentGiver can be null for instructor giver\n     * @param courseRoster if provided, the function can be completed without touching database\n     * @return a map which keys are the identifiers of the recipients and values are the names of the recipients\n     "},{"fullQualified":"public Map<String, Set<String>> buildCompleteGiverRecipientMap(FeedbackQuestionAttributes relatedQuestion, CourseRoster courseRoster)","name":"buildCompleteGiverRecipientMap","type":"Map<String,Set<String>>","javadoc":"\n     * Builds a complete giver to recipient map for a {@code relatedQuestion}.\n     *\n     * @param relatedQuestion The question to be considered\n     * @param courseRoster the roster in the course\n     * @return a map from giver to recipient for the question.\n     "},{"fullQualified":"private List<String> getPossibleGivers(FeedbackQuestionAttributes fqa, CourseRoster courseRoster)","name":"getPossibleGivers","type":"List<String>","javadoc":"\n     * Gets possible giver identifiers for a feedback question.\n     *\n     * @param fqa the feedback question\n     * @param courseRoster roster of all students and instructors\n     * @return a list of giver identifier\n     "},{"fullQualified":"public void populateFieldsToGenerateInQuestion(FeedbackQuestionAttributes feedbackQuestionAttributes, String emailOfEntityDoingQuestion, String teamOfEntityDoingQuestion)","name":"populateFieldsToGenerateInQuestion","type":"void","javadoc":"\n     * Populates fields that need dynamic generation in a question.\n     *\n     * <p>Currently, only MCQ/MSQ needs to generate choices dynamically.</p>\n     *\n     * @param feedbackQuestionAttributes the question to populate\n     * @param emailOfEntityDoingQuestion the email of the entity doing the question\n     * @param teamOfEntityDoingQuestion the team of the entity doing the question. If the entity is an instructor,\n     *                                  it can be {@code null}.\n     "},{"fullQualified":"public FeedbackQuestionAttributes updateFeedbackQuestionCascade(FeedbackQuestionAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackQuestionCascade","type":"FeedbackQuestionAttributes","javadoc":"\n     * Updates a feedback question by {@code FeedbackQuestionAttributes.UpdateOptions}.\n     *\n     * <p>Cascade adjust the question number of questions in the same session.\n     *\n     * <p>Cascade adjust the existing response of the question.\n     *\n     * @return updated feedback question\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback question cannot be found\n     "},{"fullQualified":"private void adjustQuestionNumbers(int oldQuestionNumber, int newQuestionNumber, List<FeedbackQuestionAttributes> questions)","name":"adjustQuestionNumbers","type":"void","javadoc":"\n     * Adjust questions between the old and new number,\n     * if the new number is smaller, then shift up (increase qn#) all questions in between.\n     * if the new number is bigger, then shift down(decrease qn#) all questions in between.\n     "},{"fullQualified":"public void deleteFeedbackQuestionCascade(String feedbackQuestionId)","name":"deleteFeedbackQuestionCascade","type":"void","javadoc":"\n     * Deletes a feedback question cascade its responses and comments.\n     *\n     * <p>Silently fail if question does not exist.\n     "},{"fullQualified":"public void deleteFeedbackQuestions(AttributesDeletionQuery query)","name":"deleteFeedbackQuestions","type":"void","javadoc":"\n     * Deletes questions using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"private void shiftQuestionNumbersDown(int questionNumberToShiftFrom, List<FeedbackQuestionAttributes> questionsToShift)","name":"shiftQuestionNumbersDown","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private FeedbackQuestionsLogic()","javadocComment":null}]},{"name":"FeedbackResponseCommentsLogic","fullyQualifiedName":"teammates.logic.core.FeedbackResponseCommentsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":42,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Creates a feedback response comment.\n     *\n     * <p>If the comment is given by feedback participant, ownership of the corresponding response\n     * of the comment is not checked.</p>\n     ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback response comment.\n     ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback response comment by \"fake\" unique constraint response-giver-createdAt.\n     *\n     * <p>The method is only used in testing</p>\n     ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all response comments for a response.\n     ","lineNumber":90,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets comment associated with the response.\n     *\n     * <p>The comment is given by a feedback participant to explain the response</p>\n     *\n     * @param feedbackResponseId the response id\n     ","lineNumber":97,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all feedback response comments for session in a section.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the feedback session name\n     * @param section if null, will retrieve all comments in the session\n     * @return a list of feedback response comments\n     ","lineNumber":109,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all feedback response comments for a question in a section.\n     *\n     * @param questionId the ID of the question\n     * @param section if null, will retrieve all comments for the question\n     * @return a list of feedback response comments\n     ","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates all email fields of feedback response comments with the new email.\n     ","lineNumber":140,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates all common fields of feedback response comments with the same field from its parent response.\n     *\n     * <p>Currently, this method only updates comment's giverSection and receiverSection for a given response.</p>\n     ","lineNumber":148,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a feedback response comment by {@link FeedbackResponseCommentAttributes.UpdateOptions}.\n     *\n     * @return updated comment\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     ","lineNumber":167,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all comments given by a user in a course.\n     ","lineNumber":181,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a comment.\n     ","lineNumber":189,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes comments using {@link AttributesDeletionQuery}.\n     ","lineNumber":196,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the comment's giver name is visible to certain user.\n     ","lineNumber":203,"isOrphan":false},{"type":"LineComment","text":"in the old ver, name is always visible","lineNumber":209,"isOrphan":false},{"type":"LineComment","text":"comment giver can always see","lineNumber":214,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies whether the comment is visible to certain user.\n     * @return true/false\n     ","lineNumber":275,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies if comment giver is registered user/team of course.\n     *\n     * @param courseId id of course\n     * @param commentGiver person/team who gave comment\n     * @param commentGiverType type of comment giver\n     ","lineNumber":372,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackResponseCommentsLogic inst()","name":"inst","type":"FeedbackResponseCommentsLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public FeedbackResponseCommentAttributes createFeedbackResponseComment(FeedbackResponseCommentAttributes frComment) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"createFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Creates a feedback response comment.\n     *\n     * <p>If the comment is given by feedback participant, ownership of the corresponding response\n     * of the comment is not checked.</p>\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseComment(Long feedbackResponseCommentId)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Gets a feedback response comment.\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseComment(String responseId, String giverEmail, Instant creationDate)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Gets a feedback response comment by \"fake\" unique constraint response-giver-createdAt.\n     *\n     * <p>The method is only used in testing</p>\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentForResponse(String feedbackResponseId)","name":"getFeedbackResponseCommentForResponse","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all response comments for a response.\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseCommentForResponseFromParticipant(String feedbackResponseId)","name":"getFeedbackResponseCommentForResponseFromParticipant","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Gets comment associated with the response.\n     *\n     * <p>The comment is given by a feedback participant to explain the response</p>\n     *\n     * @param feedbackResponseId the response id\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentForSessionInSection(String courseId, String feedbackSessionName, @Nullable String section)","name":"getFeedbackResponseCommentForSessionInSection","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all feedback response comments for session in a section.\n     *\n     * @param courseId the course ID of the feedback session\n     * @param feedbackSessionName the feedback session name\n     * @param section if null, will retrieve all comments in the session\n     * @return a list of feedback response comments\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentForQuestionInSection(String questionId, @Nullable String section)","name":"getFeedbackResponseCommentForQuestionInSection","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all feedback response comments for a question in a section.\n     *\n     * @param questionId the ID of the question\n     * @param section if null, will retrieve all comments for the question\n     * @return a list of feedback response comments\n     "},{"fullQualified":"public void updateFeedbackResponseCommentsEmails(String courseId, String oldEmail, String updatedEmail)","name":"updateFeedbackResponseCommentsEmails","type":"void","javadoc":"\n     * Updates all email fields of feedback response comments with the new email.\n     "},{"fullQualified":"public void updateFeedbackResponseCommentsForResponse(String feedbackResponseId) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackResponseCommentsForResponse","type":"void","javadoc":"\n     * Updates all common fields of feedback response comments with the same field from its parent response.\n     *\n     * <p>Currently, this method only updates comment's giverSection and receiverSection for a given response.</p>\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes updateFeedbackResponseComment(FeedbackResponseCommentAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Updates a feedback response comment by {@link FeedbackResponseCommentAttributes.UpdateOptions}.\n     *\n     * @return updated comment\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForGiver(String courseId, String giverEmail)","name":"getFeedbackResponseCommentsForGiver","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all comments given by a user in a course.\n     "},{"fullQualified":"public void deleteFeedbackResponseComment(long commentId)","name":"deleteFeedbackResponseComment","type":"void","javadoc":"\n     * Deletes a comment.\n     "},{"fullQualified":"public void deleteFeedbackResponseComments(AttributesDeletionQuery query)","name":"deleteFeedbackResponseComments","type":"void","javadoc":"\n     * Deletes comments using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"public boolean isNameVisibleToUser(FeedbackResponseCommentAttributes comment, FeedbackResponseAttributes response, String userEmail, CourseRoster roster)","name":"isNameVisibleToUser","type":"boolean","javadoc":"\n     * Returns true if the comment's giver name is visible to certain user.\n     "},{"fullQualified":"private boolean isFeedbackParticipantNameVisibleToUser(FeedbackResponseAttributes response, String userEmail, CourseRoster roster, List<FeedbackParticipantType> showNameTo)","name":"isFeedbackParticipantNameVisibleToUser","type":"boolean","javadoc":null},{"fullQualified":"public boolean isResponseCommentVisibleForUser(String userEmail, boolean isInstructor, StudentAttributes student, Set<String> studentsEmailInTeam, FeedbackResponseAttributes response, FeedbackQuestionAttributes relatedQuestion, FeedbackResponseCommentAttributes relatedComment)","name":"isResponseCommentVisibleForUser","type":"boolean","javadoc":"\n     * Verifies whether the comment is visible to certain user.\n     * @return true/false\n     "},{"fullQualified":"private boolean isVisibleToUserTeam(StudentAttributes student, Set<String> studentsEmailInTeam, FeedbackResponseAttributes response, FeedbackQuestionAttributes relatedQuestion, FeedbackResponseCommentAttributes relatedComment, boolean isUserStudent)","name":"isVisibleToUserTeam","type":"boolean","javadoc":null},{"fullQualified":"private boolean isVisibleToUser(String userEmail, FeedbackResponseAttributes response, FeedbackQuestionAttributes relatedQuestion, FeedbackResponseCommentAttributes relatedComment, boolean isVisibleToGiver, boolean isUserInstructor, boolean isUserStudent)","name":"isVisibleToUser","type":"boolean","javadoc":null},{"fullQualified":"private boolean isResponseCommentVisibleTo(FeedbackQuestionAttributes relatedQuestion, FeedbackResponseCommentAttributes relatedComment, FeedbackParticipantType viewerType)","name":"isResponseCommentVisibleTo","type":"boolean","javadoc":null},{"fullQualified":"private void verifyIsCoursePresent(String courseId) throws EntityDoesNotExistException","name":"verifyIsCoursePresent","type":"void","javadoc":null},{"fullQualified":"private void verifyIsUserOfCourse(String courseId, String commentGiver, FeedbackParticipantType commentGiverType, boolean isCommentFromFeedbackParticipant) throws EntityDoesNotExistException","name":"verifyIsUserOfCourse","type":"void","javadoc":"\n     * Verifies if comment giver is registered user/team of course.\n     *\n     * @param courseId id of course\n     * @param commentGiver person/team who gave comment\n     * @param commentGiverType type of comment giver\n     "},{"fullQualified":"private void verifyIsFeedbackSessionOfCourse(String courseId, String feedbackSessionName) throws EntityDoesNotExistException","name":"verifyIsFeedbackSessionOfCourse","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private FeedbackResponseCommentsLogic()","javadocComment":null}]},{"name":"UniqueResponsesSet","fullyQualifiedName":"teammates.logic.core.FeedbackResponsesLogic.UniqueResponsesSet","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"private void addNewResponses(Collection<FeedbackResponseAttributes> newResponses)","name":"addNewResponses","type":"void","javadoc":null},{"fullQualified":"private void addNewResponse(FeedbackResponseAttributes newResponse)","name":"addNewResponse","type":"void","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> getResponses()","name":"getResponses","type":"List<FeedbackResponseAttributes>","javadoc":null}],"allConstructors":[{"identifier":"private UniqueResponsesSet()","javadocComment":null}]},{"name":"FeedbackResponsesLogic","fullyQualifiedName":"teammates.logic.core.FeedbackResponsesLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":51,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets a set of giver identifiers that has at least one response under a feedback session.\n     ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a feedback response.\n     *\n     * @return created feedback response\n     * @throws InvalidParametersException if the response is not valid\n     * @throws EntityAlreadyExistsException if the response already exist\n     ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback response by its ID.\n     ","lineNumber":84,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback response by its unique key.\n     ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses for a session.\n     ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses given to/from a section in a feedback session in a course.\n     *\n     * @param feedbackSessionName the name if the session\n     * @param courseId the course ID of the session\n     * @param section if null, will retrieve all responses in the session\n     * @param fetchType if not null, will retrieve responses by giver, receiver sections, or both\n     * @return a list of responses\n     ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses for a question.\n     ","lineNumber":126,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether there are responses for a question.\n     ","lineNumber":133,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses given to/from a section for a question.\n     *\n     * @param feedbackQuestionId the ID of the question\n     * @param section if null, will retrieve all responses for the question\n     * @return a list of responses\n     ","lineNumber":140,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses given by an user for a question.\n     ","lineNumber":155,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses received by an user for a question.\n     ","lineNumber":163,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether a giver has responded a session.\n     ","lineNumber":171,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses received by an user for a course.\n     ","lineNumber":179,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses given by an user for a course.\n     ","lineNumber":187,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get existing feedback responses from student or his team for the given\n     * question.\n     ","lineNumber":195,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether the giver name of a response is visible to an user.\n     ","lineNumber":208,"isOrphan":false},{"type":"LineComment","text":" Early return if user is giver","lineNumber":221,"isOrphan":false},{"type":"LineComment","text":" if response is given by team, then anyone in the team can see the response","lineNumber":223,"isOrphan":false},{"type":"LineComment","text":" Refers to Giver's Team Members","lineNumber":252,"isOrphan":false},{"type":"LineComment","text":" Response to team","lineNumber":258,"isOrphan":false},{"type":"LineComment","text":" Response to individual","lineNumber":265,"isOrphan":true},{"type":"LineComment","text":" this is a team name","lineNumber":261,"isOrphan":false},{"type":"LineComment","text":" Response to team; recipient = teamName","lineNumber":272,"isOrphan":false},{"type":"LineComment","text":" this is a team name","lineNumber":275,"isOrphan":false},{"type":"LineComment","text":" Response to individual","lineNumber":280,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the responses of the question are visible to students.\n     ","lineNumber":298,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the responses of the question are visible to instructors.\n     ","lineNumber":325,"isOrphan":false},{"type":"LineComment","text":" load comment(s)","lineNumber":351,"isOrphan":false},{"type":"LineComment","text":" related questions, responses, and comment","lineNumber":360,"isOrphan":false},{"type":"LineComment","text":" all questions are related questions when viewing course-wide result","lineNumber":365,"isOrphan":false},{"type":"LineComment","text":" visibility table for each response and comment","lineNumber":379,"isOrphan":false},{"type":"LineComment","text":" build response","lineNumber":384,"isOrphan":false},{"type":"LineComment","text":" orphan response without corresponding question, ignore it","lineNumber":388,"isOrphan":false},{"type":"LineComment","text":" check visibility of response","lineNumber":391,"isOrphan":false},{"type":"LineComment","text":" if there are viewable responses, the corresponding question becomes related","lineNumber":398,"isOrphan":false},{"type":"LineComment","text":" generate giver/recipient name visibility table","lineNumber":401,"isOrphan":false},{"type":"LineComment","text":" build comment","lineNumber":409,"isOrphan":false},{"type":"LineComment","text":" the comment needs to be relevant to the question and response","lineNumber":413,"isOrphan":false},{"type":"LineComment","text":" check visibility of comment","lineNumber":417,"isOrphan":false},{"type":"LineComment","text":" generate comment giver name visibility table","lineNumber":425,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the session result for a feedback session.\n     *\n     * @param feedbackSessionName the feedback session name\n     * @param courseId the ID of the course\n     * @param instructorEmail the instructor viewing the feedback session\n     * @param questionId if not null, will only return partial bundle for the question\n     * @param section if not null, will only return partial bundle for the section\n     * @param fetchType if not null, will fetch responses by giver, receiver sections, or both\n     * @return the session result bundle\n     ","lineNumber":444,"isOrphan":false},{"type":"LineComment","text":" load question(s)","lineNumber":462,"isOrphan":false},{"type":"LineComment","text":" load response(s)","lineNumber":466,"isOrphan":false},{"type":"LineComment","text":" load all response for instructors and passively filter them later","lineNumber":468,"isOrphan":false},{"type":"LineComment","text":" consider the current viewing user","lineNumber":476,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the session result for a feedback session for the given user.\n     *\n     * @param feedbackSessionName the feedback session name\n     * @param courseId the ID of the course\n     * @param userEmail the user viewing the feedback session\n     * @param isInstructor true if the user is an instructor\n     * @param questionId if not null, will only return partial bundle for the question\n     * @return the session result bundle\n     ","lineNumber":483,"isOrphan":false},{"type":"LineComment","text":" load question(s)","lineNumber":500,"isOrphan":false},{"type":"LineComment","text":" load response(s)","lineNumber":504,"isOrphan":false},{"type":"LineComment","text":" load viewable responses for students/instructors proactively","lineNumber":509,"isOrphan":true},{"type":"LineComment","text":" this is cost-effective as in most of time responses for the whole session will not be viewable to individuals","lineNumber":510,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Builds viewable missing responses for the session for instructor.\n     *\n     * @param instructor the instructor\n     * @param responseGiverVisibilityTable\n     *         the giver visibility table which will be updated with the visibility of missing responses\n     * @param responseRecipientVisibilityTable\n     *         the recipient visibility table which will be updated with the visibility of missing responses\n     * @param relatedQuestionsMap the relevant questions\n     * @param existingResponses existing responses\n     * @param courseRoster the course roster\n     * @param section if not null, will only build missing responses for the section\n     * @return a list of missing responses for the session.\n     ","lineNumber":522,"isOrphan":false},{"type":"LineComment","text":" first get all possible giver recipient pairs","lineNumber":542,"isOrphan":false},{"type":"LineComment","text":" remove the existing responses in those pairs","lineNumber":553,"isOrphan":false},{"type":"LineComment","text":" build dummy responses","lineNumber":564,"isOrphan":false},{"type":"LineComment","text":" giver","lineNumber":573,"isOrphan":false},{"type":"LineComment","text":" recipient","lineNumber":578,"isOrphan":false},{"type":"LineComment","text":" skip responses not in current section","lineNumber":581,"isOrphan":false},{"type":"LineComment","text":" check visibility of the missing response","lineNumber":597,"isOrphan":false},{"type":"LineComment","text":" generate giver/recipient name visibility table","lineNumber":605,"isOrphan":false},{"type":"LineComment","text":" If instructors are not restricted to view the giver's section,","lineNumber":657,"isOrphan":true},{"type":"LineComment","text":" they are allowed to view responses to GENERAL, subject to visibility options","lineNumber":658,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether there are responses for a course.\n     ","lineNumber":673,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a feedback response by {@link FeedbackResponseAttributes.UpdateOptions}.\n     *\n     * <p>Cascade updates its associated feedback response comment\n     * (e.g. associated response ID, giverSection and recipientSection).\n     *\n     * <p>If the giver/recipient field is changed, the response is updated by recreating the response\n     * as question-giver-recipient is the primary key.\n     *\n     * @return updated feedback response\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     * @throws EntityAlreadyExistsException if the response cannot be updated\n     *         by recreation because of an existent response\n     ","lineNumber":680,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates responses for a student when his team changes.\n     *\n     * <p>This is done by deleting responses that are no longer relevant to him in his new team.\n     ","lineNumber":731,"isOrphan":false},{"type":"LineComment","text":" deletes all responses given by the user to team members or given by the user as a representative of a team.","lineNumber":739,"isOrphan":false},{"type":"LineComment","text":" Deletes all responses given by other team members to the user.","lineNumber":750,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates responses for a student when his section changes.\n     ","lineNumber":766,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates responses for a student when his email changes.\n     ","lineNumber":817,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes responses using {@link AttributesDeletionQuery}.\n     ","lineNumber":854,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a feedback response cascade its associated comments.\n     ","lineNumber":861,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes all feedback responses of a question cascade its associated comments.\n     ","lineNumber":872,"isOrphan":false},{"type":"LineComment","text":" delete all responses, comments of the question","lineNumber":876,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes all feedback responses involved an entity cascade its associated comments.\n     *\n     * @param courseId the course id\n     * @param entityEmail the entity email\n     ","lineNumber":884,"isOrphan":false},{"type":"LineComment","text":" delete responses from the entity","lineNumber":891,"isOrphan":false},{"type":"LineComment","text":" delete responses to the entity","lineNumber":898,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns feedback responses given/received by an instructor.\n     ","lineNumber":924,"isOrphan":false},{"type":"LineComment","text":" Add responses that the instructor submitted him/herself","lineNumber":931,"isOrphan":false},{"type":"LineComment","text":" Add responses that user is a receiver of when response is visible to receiver or instructors","lineNumber":938,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns viewable feedback responses for a student.\n     ","lineNumber":950,"isOrphan":false},{"type":"LineComment","text":" Add responses that the student submitted him/herself","lineNumber":957,"isOrphan":false},{"type":"LineComment","text":" Add responses that user is a receiver of when response is visible to receiver","lineNumber":964,"isOrphan":false},{"type":"LineComment","text":" Early return as STUDENTS covers all cases below.","lineNumber":975,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of feedback responses created within a specified time range.\n     ","lineNumber":1007,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Set contains only unique response.\n     ","lineNumber":1014,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackResponsesLogic inst()","name":"inst","type":"FeedbackResponsesLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public Set<String> getGiverSetThatAnswerFeedbackSession(String courseId, String feedbackSessionName)","name":"getGiverSetThatAnswerFeedbackSession","type":"Set<String>","javadoc":"\n     * Gets a set of giver identifiers that has at least one response under a feedback session.\n     "},{"fullQualified":"public FeedbackResponseAttributes createFeedbackResponse(FeedbackResponseAttributes fra) throws InvalidParametersException, EntityAlreadyExistsException","name":"createFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":"\n     * Creates a feedback response.\n     *\n     * @return created feedback response\n     * @throws InvalidParametersException if the response is not valid\n     * @throws EntityAlreadyExistsException if the response already exist\n     "},{"fullQualified":"public FeedbackResponseAttributes getFeedbackResponse(String feedbackResponseId)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":"\n     * Gets a feedback response by its ID.\n     "},{"fullQualified":"public FeedbackResponseAttributes getFeedbackResponse(String feedbackQuestionId, String giverEmail, String recipient)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":"\n     * Gets a feedback response by its unique key.\n     "},{"fullQualified":" List<FeedbackResponseAttributes> getFeedbackResponsesForSession(String feedbackSessionName, String courseId)","name":"getFeedbackResponsesForSession","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses for a session.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForSessionInSection(String feedbackSessionName, String courseId, @Nullable String section, @Nullable FeedbackResultFetchType fetchType)","name":"getFeedbackResponsesForSessionInSection","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses given to/from a section in a feedback session in a course.\n     *\n     * @param feedbackSessionName the name if the session\n     * @param courseId the course ID of the session\n     * @param section if null, will retrieve all responses in the session\n     * @param fetchType if not null, will retrieve responses by giver, receiver sections, or both\n     * @return a list of responses\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForQuestion(String feedbackQuestionId)","name":"getFeedbackResponsesForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses for a question.\n     "},{"fullQualified":"public boolean areThereResponsesForQuestion(String feedbackQuestionId)","name":"areThereResponsesForQuestion","type":"boolean","javadoc":"\n     * Checks whether there are responses for a question.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForQuestionInSection(String feedbackQuestionId, @Nullable String section, FeedbackResultFetchType fetchType)","name":"getFeedbackResponsesForQuestionInSection","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses given to/from a section for a question.\n     *\n     * @param feedbackQuestionId the ID of the question\n     * @param section if null, will retrieve all responses for the question\n     * @return a list of responses\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesFromGiverForQuestion(String feedbackQuestionId, String userEmail)","name":"getFeedbackResponsesFromGiverForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses given by an user for a question.\n     "},{"fullQualified":"private List<FeedbackResponseAttributes> getFeedbackResponsesForReceiverForQuestion(String feedbackQuestionId, String userEmail)","name":"getFeedbackResponsesForReceiverForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses received by an user for a question.\n     "},{"fullQualified":"public boolean hasGiverRespondedForSession(String giverIdentifier, String feedbackSessionName, String courseId)","name":"hasGiverRespondedForSession","type":"boolean","javadoc":"\n     * Checks whether a giver has responded a session.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForReceiverForCourse(String courseId, String userEmail)","name":"getFeedbackResponsesForReceiverForCourse","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses received by an user for a course.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesFromGiverForCourse(String courseId, String userEmail)","name":"getFeedbackResponsesFromGiverForCourse","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses given by an user for a course.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesFromStudentOrTeamForQuestion(FeedbackQuestionAttributes question, StudentAttributes student)","name":"getFeedbackResponsesFromStudentOrTeamForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Get existing feedback responses from student or his team for the given\n     * question.\n     "},{"fullQualified":"public boolean isNameVisibleToUser(FeedbackQuestionAttributes question, FeedbackResponseAttributes response, String userEmail, boolean isInstructor, boolean isGiverName, CourseRoster roster)","name":"isNameVisibleToUser","type":"boolean","javadoc":"\n     * Checks whether the giver name of a response is visible to an user.\n     "},{"fullQualified":"private boolean isFeedbackParticipantNameVisibleToUser(FeedbackQuestionAttributes question, FeedbackResponseAttributes response, String userEmail, boolean isInstructor, boolean isGiverName, CourseRoster roster)","name":"isFeedbackParticipantNameVisibleToUser","type":"boolean","javadoc":null},{"fullQualified":"public boolean isResponseOfFeedbackQuestionVisibleToStudent(FeedbackQuestionAttributes question)","name":"isResponseOfFeedbackQuestionVisibleToStudent","type":"boolean","javadoc":"\n     * Returns true if the responses of the question are visible to students.\n     "},{"fullQualified":"public boolean isResponseOfFeedbackQuestionVisibleToInstructor(FeedbackQuestionAttributes question)","name":"isResponseOfFeedbackQuestionVisibleToInstructor","type":"boolean","javadoc":"\n     * Returns true if the responses of the question are visible to instructors.\n     "},{"fullQualified":"private List<FeedbackQuestionAttributes> getQuestionsForSession(String feedbackSessionName, String courseId, @Nullable String questionId)","name":"getQuestionsForSession","type":"List<FeedbackQuestionAttributes>","javadoc":null},{"fullQualified":"private SessionResultsBundle buildResultsBundle(boolean isCourseWide, String feedbackSessionName, String courseId, String section, String questionId, boolean isInstructor, String userEmail, InstructorAttributes instructor, StudentAttributes student, CourseRoster roster, List<FeedbackQuestionAttributes> allQuestions, List<FeedbackResponseAttributes> allResponses)","name":"buildResultsBundle","type":"SessionResultsBundle","javadoc":null},{"fullQualified":"public SessionResultsBundle getSessionResultsForCourse(String feedbackSessionName, String courseId, String instructorEmail, @Nullable String questionId, @Nullable String section, @Nullable FeedbackResultFetchType fetchType)","name":"getSessionResultsForCourse","type":"SessionResultsBundle","javadoc":"\n     * Gets the session result for a feedback session.\n     *\n     * @param feedbackSessionName the feedback session name\n     * @param courseId the ID of the course\n     * @param instructorEmail the instructor viewing the feedback session\n     * @param questionId if not null, will only return partial bundle for the question\n     * @param section if not null, will only return partial bundle for the section\n     * @param fetchType if not null, will fetch responses by giver, receiver sections, or both\n     * @return the session result bundle\n     "},{"fullQualified":"public SessionResultsBundle getSessionResultsForUser(String feedbackSessionName, String courseId, String userEmail, boolean isInstructor, @Nullable String questionId)","name":"getSessionResultsForUser","type":"SessionResultsBundle","javadoc":"\n     * Gets the session result for a feedback session for the given user.\n     *\n     * @param feedbackSessionName the feedback session name\n     * @param courseId the ID of the course\n     * @param userEmail the user viewing the feedback session\n     * @param isInstructor true if the user is an instructor\n     * @param questionId if not null, will only return partial bundle for the question\n     * @return the session result bundle\n     "},{"fullQualified":"private List<FeedbackResponseAttributes> buildMissingResponses(String courseId, String feedbackSessionName, InstructorAttributes instructor, Map<String, Boolean> responseGiverVisibilityTable, Map<String, Boolean> responseRecipientVisibilityTable, Map<String, FeedbackQuestionAttributes> relatedQuestionsMap, List<FeedbackResponseAttributes> existingResponses, CourseRoster courseRoster, @Nullable String section)","name":"buildMissingResponses","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Builds viewable missing responses for the session for instructor.\n     *\n     * @param instructor the instructor\n     * @param responseGiverVisibilityTable\n     *         the giver visibility table which will be updated with the visibility of missing responses\n     * @param responseRecipientVisibilityTable\n     *         the recipient visibility table which will be updated with the visibility of missing responses\n     * @param relatedQuestionsMap the relevant questions\n     * @param existingResponses existing responses\n     * @param courseRoster the course roster\n     * @param section if not null, will only build missing responses for the section\n     * @return a list of missing responses for the session.\n     "},{"fullQualified":" boolean isResponseVisibleForUser(String userEmail, boolean isInstructor, StudentAttributes student, Set<String> studentsEmailInTeam, FeedbackResponseAttributes response, FeedbackQuestionAttributes relatedQuestion, InstructorAttributes instructor)","name":"isResponseVisibleForUser","type":"boolean","javadoc":null},{"fullQualified":"public boolean hasResponsesForCourse(String courseId)","name":"hasResponsesForCourse","type":"boolean","javadoc":"\n     * Checks whether there are responses for a course.\n     "},{"fullQualified":"public FeedbackResponseAttributes updateFeedbackResponseCascade(FeedbackResponseAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"updateFeedbackResponseCascade","type":"FeedbackResponseAttributes","javadoc":"\n     * Updates a feedback response by {@link FeedbackResponseAttributes.UpdateOptions}.\n     *\n     * <p>Cascade updates its associated feedback response comment\n     * (e.g. associated response ID, giverSection and recipientSection).\n     *\n     * <p>If the giver/recipient field is changed, the response is updated by recreating the response\n     * as question-giver-recipient is the primary key.\n     *\n     * @return updated feedback response\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     * @throws EntityAlreadyExistsException if the response cannot be updated\n     *         by recreation because of an existent response\n     "},{"fullQualified":"public void updateFeedbackResponsesForChangingTeam(String courseId, String userEmail, String oldTeam, String newTeam)","name":"updateFeedbackResponsesForChangingTeam","type":"void","javadoc":"\n     * Updates responses for a student when his team changes.\n     *\n     * <p>This is done by deleting responses that are no longer relevant to him in his new team.\n     "},{"fullQualified":"public void updateFeedbackResponsesForChangingSection(String courseId, String userEmail, String oldSection, String newSection) throws EntityDoesNotExistException, InvalidParametersException","name":"updateFeedbackResponsesForChangingSection","type":"void","javadoc":"\n     * Updates responses for a student when his section changes.\n     "},{"fullQualified":"private void updateSectionOfResponsesToUser(String courseId, String userEmail, String newSection) throws InvalidParametersException, EntityDoesNotExistException","name":"updateSectionOfResponsesToUser","type":"void","javadoc":null},{"fullQualified":"private void updateSectionOfResponsesFromUser(String courseId, String userEmail, String newSection) throws InvalidParametersException, EntityDoesNotExistException","name":"updateSectionOfResponsesFromUser","type":"void","javadoc":null},{"fullQualified":"private boolean isRecipientTypeTeamMembers(FeedbackQuestionAttributes question)","name":"isRecipientTypeTeamMembers","type":"boolean","javadoc":null},{"fullQualified":"public void updateFeedbackResponsesForChangingEmail(String courseId, String oldEmail, String newEmail) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackResponsesForChangingEmail","type":"void","javadoc":"\n     * Updates responses for a student when his email changes.\n     "},{"fullQualified":"public void deleteFeedbackResponses(AttributesDeletionQuery query)","name":"deleteFeedbackResponses","type":"void","javadoc":"\n     * Deletes responses using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"public void deleteFeedbackResponseCascade(String responseId)","name":"deleteFeedbackResponseCascade","type":"void","javadoc":"\n     * Deletes a feedback response cascade its associated comments.\n     "},{"fullQualified":"public void deleteFeedbackResponsesForQuestionCascade(String feedbackQuestionId)","name":"deleteFeedbackResponsesForQuestionCascade","type":"void","javadoc":"\n     * Deletes all feedback responses of a question cascade its associated comments.\n     "},{"fullQualified":"public void deleteFeedbackResponsesInvolvedEntityOfCourseCascade(String courseId, String entityEmail)","name":"deleteFeedbackResponsesInvolvedEntityOfCourseCascade","type":"void","javadoc":"\n     * Deletes all feedback responses involved an entity cascade its associated comments.\n     *\n     * @param courseId the course id\n     * @param entityEmail the entity email\n     "},{"fullQualified":"private List<FeedbackResponseAttributes> getFeedbackResponsesFromTeamForQuestion(String feedbackQuestionId, String courseId, String teamName, @Nullable CourseRoster courseRoster)","name":"getFeedbackResponsesFromTeamForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> getFeedbackResponsesToOrFromInstructorForQuestion(FeedbackQuestionAttributes question, InstructorAttributes instructor)","name":"getFeedbackResponsesToOrFromInstructorForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Returns feedback responses given/received by an instructor.\n     "},{"fullQualified":"private List<FeedbackResponseAttributes> getViewableFeedbackResponsesForStudentForQuestion(FeedbackQuestionAttributes question, StudentAttributes student, CourseRoster courseRoster)","name":"getViewableFeedbackResponsesForStudentForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Returns viewable feedback responses for a student.\n     "},{"fullQualified":" int getNumFeedbackResponsesByTimeRange(Instant startTime, Instant endTime)","name":"getNumFeedbackResponsesByTimeRange","type":"int","javadoc":"\n     * Gets the number of feedback responses created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private FeedbackResponsesLogic()","javadocComment":null}]},{"name":"FeedbackSessionsLogic","fullyQualifiedName":"teammates.logic.core.FeedbackSessionsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":56,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Creates a feedback session.\n     *\n     * @return created feedback session\n     * @throws InvalidParametersException if the session is not valid\n     * @throws EntityAlreadyExistsException if the session already exist\n     ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all ongoing feedback sessions.\n     ","lineNumber":85,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback session from the data storage.\n     *\n     * @return null if not found or in recycle bin.\n     ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback session from the recycle bin.\n     *\n     * @return null if not found.\n     ","lineNumber":101,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all feedback sessions of a course.\n     ","lineNumber":110,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all feedback sessions of a course started after time.\n     ","lineNumber":117,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of feedback sessions for instructors.\n     ","lineNumber":124,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a {@code List} of feedback sessions in the Recycle Bin for the instructors.\n     * <br>\n     * Omits sessions if the corresponding courses are archived or in Recycle Bin\n     ","lineNumber":143,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Criteria: must be published, publishEmail must be enabled and\n     * resultsVisibleTime must be custom.\n     *\n     * @return returns a list of sessions that require automated emails to be\n     *         sent as they are published\n     ","lineNumber":164,"isOrphan":false},{"type":"LineComment","text":" automated emails are required only for custom publish times","lineNumber":177,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of undeleted feedback sessions which start within the last 2 hours\n     * and need an open email to be sent.\n     ","lineNumber":189,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the given email is the creator of the given session.\n     ","lineNumber":209,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether a student has attempted a feedback session.\n     *\n     * <p>If feedback session consists of all team questions, session is attempted by student only\n     * if someone from the team has responded. If feedback session has some individual questions,\n     * session is attempted only if the student has responded to any of the individual questions\n     * (regardless of the completion status of the team questions).</p>\n     ","lineNumber":220,"isOrphan":false},{"type":"LineComment","text":" if there are no questions for student, session is attempted","lineNumber":233,"isOrphan":false},{"type":"LineComment","text":" case where there are some individual questions","lineNumber":237,"isOrphan":false},{"type":"LineComment","text":" case where all are team questions","lineNumber":240,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether an instructor has attempted a feedback session.\n     *\n     * <p>If there is no question for instructors, the feedback session is considered as attempted.</p>\n     ","lineNumber":245,"isOrphan":false},{"type":"LineComment","text":" if there is no question for instructor, session is attempted","lineNumber":255,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the details of a feedback session by {@link FeedbackSessionAttributes.UpdateOptions}.\n     *\n     * <p>Adjust email sending status if necessary.\n     *\n     * @return updated feedback session\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     ","lineNumber":259,"isOrphan":false},{"type":"LineComment","text":" adjust email sending status","lineNumber":283,"isOrphan":true},{"type":"LineComment","text":" reset sentOpenEmail if the session has opened but is being un-opened","lineNumber":285,"isOrphan":true},{"type":"LineComment","text":" reset sentClosedEmail if the session has closed but is being un-closed","lineNumber":296,"isOrphan":true},{"type":"LineComment","text":" reset sentPublishedEmail if the session has been published but is","lineNumber":307,"isOrphan":true},{"type":"LineComment","text":" now, or else leave it as sent if so.","lineNumber":286,"isOrphan":false},{"type":"LineComment","text":" also reset sentOpeningSoonEmail","lineNumber":290,"isOrphan":false},{"type":"LineComment","text":" now, or else leave it as sent if so.","lineNumber":297,"isOrphan":false},{"type":"LineComment","text":" also reset sentClosingEmail","lineNumber":301,"isOrphan":false},{"type":"LineComment","text":" going to be unpublished now, or else leave it as sent if so.","lineNumber":308,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the instructor email address for all their deadlines in the feedback sessions of the given course.\n     ","lineNumber":316,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the student email address for all their deadlines in the feedback sessions of the given course.\n     ","lineNumber":324,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the instructor email address for all their deadlines in the feedback sessions of the given course.\n     ","lineNumber":332,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the student email address for all their deadlines in the feedback sessions of the given course.\n     ","lineNumber":339,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates all feedback sessions of {@code courseId} to have be in {@code courseTimeZone}.\n     ","lineNumber":346,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Publishes a feedback session.\n     *\n     * @return the published feedback session\n     * @throws InvalidParametersException if session is already published\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     ","lineNumber":366,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Unpublishes a feedback session.\n     *\n     * @return the unpublished feedback session\n     * @throws InvalidParametersException if session is already unpublished\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     ","lineNumber":392,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns returns a list of sessions that are going to open in 24 hours.\n     ","lineNumber":418,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns returns a list of sessions that are going to close within the next 24 hours.\n     ","lineNumber":439,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns returns a list of sessions that were closed within past hour.\n     ","lineNumber":460,"isOrphan":false},{"type":"LineComment","text":" is session closed in the past 1 hour","lineNumber":469,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a feedback session cascade to its associated questions, responses, deadline extensions and comments.\n     ","lineNumber":480,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes sessions using {@link AttributesDeletionQuery}.\n     ","lineNumber":496,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Soft-deletes a specific feedback session to Recycle Bin.\n     * @return the time when the feedback session is moved to the recycle bin\n     ","lineNumber":503,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Restores a specific feedback session from Recycle Bin.\n     ","lineNumber":513,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the expected number of submissions for a feedback session.\n     ","lineNumber":521,"isOrphan":false},{"type":"LineComment","text":" Pre-flight check to ensure there are questions for instructors.","lineNumber":531,"isOrphan":false},{"type":"LineComment","text":" Check presence of questions for instructors.","lineNumber":541,"isOrphan":false},{"type":"LineComment","text":" No questions for instructors. There must be questions for creator.","lineNumber":545,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the actual number of submissions for a feedback session.\n     ","lineNumber":555,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the feedback session is viewable by the given user type (students/instructors).\n     ","lineNumber":572,"isOrphan":false},{"type":"LineComment","text":" Allow user to view the feedback session if there are questions for them","lineNumber":576,"isOrphan":false},{"type":"LineComment","text":" Allow user to view the feedback session if there are any question whose responses are visible to the user","lineNumber":581,"isOrphan":false},{"type":"LineComment","text":" We only need one question with visible responses for the entire session to be visible","lineNumber":588,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if there are any questions for the specified user type (students/instructors) to answer.\n     ","lineNumber":597,"isOrphan":false},{"type":"LineComment","text":" Both Exceptions should not be thrown.","lineNumber":648,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackSessionsLogic inst()","name":"inst","type":"FeedbackSessionsLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public FeedbackSessionAttributes createFeedbackSession(FeedbackSessionAttributes fsa) throws InvalidParametersException, EntityAlreadyExistsException","name":"createFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Creates a feedback session.\n     *\n     * @return created feedback session\n     * @throws InvalidParametersException if the session is not valid\n     * @throws EntityAlreadyExistsException if the session already exist\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getAllOngoingSessions(Instant rangeStart, Instant rangeEnd)","name":"getAllOngoingSessions","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets all ongoing feedback sessions.\n     "},{"fullQualified":"public FeedbackSessionAttributes getFeedbackSession(String feedbackSessionName, String courseId)","name":"getFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Gets a feedback session from the data storage.\n     *\n     * @return null if not found or in recycle bin.\n     "},{"fullQualified":"public FeedbackSessionAttributes getFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId)","name":"getFeedbackSessionFromRecycleBin","type":"FeedbackSessionAttributes","javadoc":"\n     * Gets a feedback session from the recycle bin.\n     *\n     * @return null if not found.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsForCourse(String courseId)","name":"getFeedbackSessionsForCourse","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets all feedback sessions of a course.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsForCourseStartingAfter(String courseId, Instant after)","name":"getFeedbackSessionsForCourseStartingAfter","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets all feedback sessions of a course started after time.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsListForInstructor(List<InstructorAttributes> instructorList)","name":"getFeedbackSessionsListForInstructor","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of feedback sessions for instructors.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getSoftDeletedFeedbackSessionsListForInstructors(List<InstructorAttributes> instructorList)","name":"getSoftDeletedFeedbackSessionsListForInstructors","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Returns a {@code List} of feedback sessions in the Recycle Bin for the instructors.\n     * <br>\n     * Omits sessions if the corresponding courses are archived or in Recycle Bin\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent()","name":"getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Criteria: must be published, publishEmail must be enabled and\n     * resultsVisibleTime must be custom.\n     *\n     * @return returns a list of sessions that require automated emails to be\n     *         sent as they are published\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsWhichNeedOpenEmailsToBeSent()","name":"getFeedbackSessionsWhichNeedOpenEmailsToBeSent","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of undeleted feedback sessions which start within the last 2 hours\n     * and need an open email to be sent.\n     "},{"fullQualified":"public boolean isCreatorOfSession(String feedbackSessionName, String courseId, String userEmail)","name":"isCreatorOfSession","type":"boolean","javadoc":"\n     * Returns true if the given email is the creator of the given session.\n     "},{"fullQualified":"public boolean isFeedbackSessionAttemptedByStudent(FeedbackSessionAttributes fsa, String userEmail, String userTeam)","name":"isFeedbackSessionAttemptedByStudent","type":"boolean","javadoc":"\n     * Checks whether a student has attempted a feedback session.\n     *\n     * <p>If feedback session consists of all team questions, session is attempted by student only\n     * if someone from the team has responded. If feedback session has some individual questions,\n     * session is attempted only if the student has responded to any of the individual questions\n     * (regardless of the completion status of the team questions).</p>\n     "},{"fullQualified":"public boolean isFeedbackSessionAttemptedByInstructor(FeedbackSessionAttributes fsa, String userEmail)","name":"isFeedbackSessionAttemptedByInstructor","type":"boolean","javadoc":"\n     * Checks whether an instructor has attempted a feedback session.\n     *\n     * <p>If there is no question for instructors, the feedback session is considered as attempted.</p>\n     "},{"fullQualified":"public FeedbackSessionAttributes updateFeedbackSession(FeedbackSessionAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Updates the details of a feedback session by {@link FeedbackSessionAttributes.UpdateOptions}.\n     *\n     * <p>Adjust email sending status if necessary.\n     *\n     * @return updated feedback session\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     "},{"fullQualified":"public void updateFeedbackSessionsInstructorDeadlinesWithNewEmail(String courseId, String oldEmailAddress, String newEmailAddress)","name":"updateFeedbackSessionsInstructorDeadlinesWithNewEmail","type":"void","javadoc":"\n     * Updates the instructor email address for all their deadlines in the feedback sessions of the given course.\n     "},{"fullQualified":"public void updateFeedbackSessionsStudentDeadlinesWithNewEmail(String courseId, String oldEmailAddress, String newEmailAddress)","name":"updateFeedbackSessionsStudentDeadlinesWithNewEmail","type":"void","javadoc":"\n     * Updates the student email address for all their deadlines in the feedback sessions of the given course.\n     "},{"fullQualified":"public void deleteFeedbackSessionsDeadlinesForInstructor(String courseId, String emailAddress)","name":"deleteFeedbackSessionsDeadlinesForInstructor","type":"void","javadoc":"\n     * Deletes the instructor email address for all their deadlines in the feedback sessions of the given course.\n     "},{"fullQualified":"public void deleteFeedbackSessionsDeadlinesForStudent(String courseId, String emailAddress)","name":"deleteFeedbackSessionsDeadlinesForStudent","type":"void","javadoc":"\n     * Deletes the student email address for all their deadlines in the feedback sessions of the given course.\n     "},{"fullQualified":"public void updateFeedbackSessionsTimeZoneForCourse(String courseId, String courseTimeZone)","name":"updateFeedbackSessionsTimeZoneForCourse","type":"void","javadoc":"\n     * Updates all feedback sessions of {@code courseId} to have be in {@code courseTimeZone}.\n     "},{"fullQualified":"public FeedbackSessionAttributes publishFeedbackSession(String feedbackSessionName, String courseId) throws EntityDoesNotExistException, InvalidParametersException","name":"publishFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Publishes a feedback session.\n     *\n     * @return the published feedback session\n     * @throws InvalidParametersException if session is already published\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     "},{"fullQualified":"public FeedbackSessionAttributes unpublishFeedbackSession(String feedbackSessionName, String courseId) throws EntityDoesNotExistException, InvalidParametersException","name":"unpublishFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Unpublishes a feedback session.\n     *\n     * @return the unpublished feedback session\n     * @throws InvalidParametersException if session is already unpublished\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsOpeningWithinTimeLimit()","name":"getFeedbackSessionsOpeningWithinTimeLimit","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Returns returns a list of sessions that are going to open in 24 hours.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsClosingWithinTimeLimit()","name":"getFeedbackSessionsClosingWithinTimeLimit","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Returns returns a list of sessions that are going to close within the next 24 hours.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsClosedWithinThePastHour()","name":"getFeedbackSessionsClosedWithinThePastHour","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Returns returns a list of sessions that were closed within past hour.\n     "},{"fullQualified":"public void deleteFeedbackSessionCascade(String feedbackSessionName, String courseId)","name":"deleteFeedbackSessionCascade","type":"void","javadoc":"\n     * Deletes a feedback session cascade to its associated questions, responses, deadline extensions and comments.\n     "},{"fullQualified":"public void deleteFeedbackSessions(AttributesDeletionQuery query)","name":"deleteFeedbackSessions","type":"void","javadoc":"\n     * Deletes sessions using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"public Instant moveFeedbackSessionToRecycleBin(String feedbackSessionName, String courseId) throws EntityDoesNotExistException","name":"moveFeedbackSessionToRecycleBin","type":"Instant","javadoc":"\n     * Soft-deletes a specific feedback session to Recycle Bin.\n     * @return the time when the feedback session is moved to the recycle bin\n     "},{"fullQualified":"public void restoreFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId) throws EntityDoesNotExistException","name":"restoreFeedbackSessionFromRecycleBin","type":"void","javadoc":"\n     * Restores a specific feedback session from Recycle Bin.\n     "},{"fullQualified":"public int getExpectedTotalSubmission(FeedbackSessionAttributes fsa)","name":"getExpectedTotalSubmission","type":"int","javadoc":"\n     * Gets the expected number of submissions for a feedback session.\n     "},{"fullQualified":"public int getActualTotalSubmission(FeedbackSessionAttributes fsa)","name":"getActualTotalSubmission","type":"int","javadoc":"\n     * Gets the actual number of submissions for a feedback session.\n     "},{"fullQualified":"private List<FeedbackSessionAttributes> getFeedbackSessionsListForCourse(String courseId)","name":"getFeedbackSessionsListForCourse","type":"List<FeedbackSessionAttributes>","javadoc":null},{"fullQualified":"private List<FeedbackSessionAttributes> getSoftDeletedFeedbackSessionsListForCourse(String courseId)","name":"getSoftDeletedFeedbackSessionsListForCourse","type":"List<FeedbackSessionAttributes>","javadoc":null},{"fullQualified":"public boolean isFeedbackSessionViewableToUserType(FeedbackSessionAttributes session, boolean isInstructor)","name":"isFeedbackSessionViewableToUserType","type":"boolean","javadoc":"\n     * Returns true if the feedback session is viewable by the given user type (students/instructors).\n     "},{"fullQualified":"public boolean isFeedbackSessionForUserTypeToAnswer(FeedbackSessionAttributes session, boolean isInstructor)","name":"isFeedbackSessionForUserTypeToAnswer","type":"boolean","javadoc":"\n     * Returns true if there are any questions for the specified user type (students/instructors) to answer.\n     "},{"fullQualified":"private void updateFeedbackSessionsDeadlinesWithNewEmail(String courseId, String oldEmailAddress, String newEmailAddress, boolean isInstructor)","name":"updateFeedbackSessionsDeadlinesWithNewEmail","type":"void","javadoc":null},{"fullQualified":"private void deleteFeedbackSessionsDeadlinesForUser(String courseId, String emailAddress, boolean isInstructor)","name":"deleteFeedbackSessionsDeadlinesForUser","type":"void","javadoc":null},{"fullQualified":"private void updateFeedbackSessionsDeadlinesForUser(String courseId, String emailAddress, boolean isInstructor, Consumer<Map<String, Instant>> deadlinesUpdater)","name":"updateFeedbackSessionsDeadlinesForUser","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private FeedbackSessionsLogic()","javadocComment":null}]},{"name":"InstructorsLogic","fullyQualifiedName":"teammates.logic.core.InstructorsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":44,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given instructor.\n     *\n     * @param instructor the instructor to be put into documents\n     ","lineNumber":59,"isOrphan":false},{"type":"JavadocComment","text":"\n     * This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search instructors in the whole system.\n     * @return null if no result found\n     ","lineNumber":68,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates an instructor.\n     *\n     * @return the created instructor\n     * @throws InvalidParametersException if the instructor is not valid\n     * @throws EntityAlreadyExistsException if the instructor already exists in the database\n     ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the archive status of an instructor (i.e. whether the instructor\n     * decides to archive the associated course or not).\n     ","lineNumber":91,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if all the given instructors exist in the given course.\n     *\n     * @throws EntityDoesNotExistException If some instructor does not exist in the course.\n     ","lineNumber":104,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an instructor by unique constraint courseId-email.\n     ","lineNumber":118,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an instructor by unique ID.\n     ","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an instructor by unique constraint courseId-googleId.\n     ","lineNumber":132,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an instructor by unique constraint registrationKey.\n     ","lineNumber":139,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets emails of all instructors of a course.\n     ","lineNumber":146,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all instructors of a course.\n     ","lineNumber":156,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all non-archived instructors associated with a googleId.\n     ","lineNumber":166,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all instructors associated with a googleId.\n     *\n     * @param omitArchived whether archived instructors should be omitted or not\n     ","lineNumber":173,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that at least one instructor is displayed to student.\n     *\n     * @throws InstructorUpdateException if there is no instructor displayed to student.\n     ","lineNumber":182,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithGoogleId}.\n     *\n     * <p>Cascade update the comments, responses and deadline extensions associated with the instructor.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     ","lineNumber":199,"isOrphan":false},{"type":"LineComment","text":" cascade responses","lineNumber":229,"isOrphan":false},{"type":"LineComment","text":" cascade comments","lineNumber":265,"isOrphan":false},{"type":"LineComment","text":" cascade deadline extensions","lineNumber":268,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithEmail}.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     ","lineNumber":278,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes instructors using {@link AttributesDeletionQuery}.\n     ","lineNumber":306,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes an instructor cascade its associated feedback responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if the student does not exist.\n     ","lineNumber":313,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes all instructors associated with a googleId and cascade delete its associated feedback responses,\n     * deadline extensions and comments.\n     ","lineNumber":330,"isOrphan":false},{"type":"LineComment","text":" cascade delete instructors","lineNumber":337,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the list of instructors with co-owner privileges in a course.\n     ","lineNumber":343,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Resets the associated googleId of an instructor.\n     ","lineNumber":358,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if there are any other registered instructors that can modify instructors.\n     * If there are none, the instructor currently being edited will be granted the privilege\n     * of modifying instructors automatically.\n     *\n     * @param courseId         Id of the course.\n     * @param instructorToEdit Instructor that will be edited.\n     *                         This may be modified within the method.\n     ","lineNumber":372,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Regenerates the registration key for the instructor with email address {@code email} in course {@code courseId}.\n     *\n     * @return the instructor attributes with the new registration key.\n     * @throws EntityAlreadyExistsException if the newly generated instructor has the same registration key as the\n     *          original one.\n     * @throws EntityDoesNotExistException if the instructor does not exist.\n     ","lineNumber":401,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the user associated with the googleId is an instructor in any course in the system.\n     ","lineNumber":422,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of instructors created within a specified time range.\n     ","lineNumber":429,"isOrphan":false}],"allMethods":[{"fullQualified":"public static InstructorsLogic inst()","name":"inst","type":"InstructorsLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public void putDocument(InstructorAttributes instructor) throws SearchServiceException","name":"putDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given instructor.\n     *\n     * @param instructor the instructor to be put into documents\n     "},{"fullQualified":"public List<InstructorAttributes> searchInstructorsInWholeSystem(String queryString) throws SearchServiceException","name":"searchInstructorsInWholeSystem","type":"List<InstructorAttributes>","javadoc":"\n     * This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search instructors in the whole system.\n     * @return null if no result found\n     "},{"fullQualified":"public InstructorAttributes createInstructor(InstructorAttributes instructorToAdd) throws InvalidParametersException, EntityAlreadyExistsException","name":"createInstructor","type":"InstructorAttributes","javadoc":"\n     * Creates an instructor.\n     *\n     * @return the created instructor\n     * @throws InvalidParametersException if the instructor is not valid\n     * @throws EntityAlreadyExistsException if the instructor already exists in the database\n     "},{"fullQualified":"public void setArchiveStatusOfInstructor(String googleId, String courseId, boolean archiveStatus) throws InvalidParametersException, EntityDoesNotExistException","name":"setArchiveStatusOfInstructor","type":"void","javadoc":"\n     * Sets the archive status of an instructor (i.e. whether the instructor\n     * decides to archive the associated course or not).\n     "},{"fullQualified":"public void verifyAllInstructorsExistInCourse(String courseId, Collection<String> instructorEmailAddresses) throws EntityDoesNotExistException","name":"verifyAllInstructorsExistInCourse","type":"void","javadoc":"\n     * Checks if all the given instructors exist in the given course.\n     *\n     * @throws EntityDoesNotExistException If some instructor does not exist in the course.\n     "},{"fullQualified":"public InstructorAttributes getInstructorForEmail(String courseId, String email)","name":"getInstructorForEmail","type":"InstructorAttributes","javadoc":"\n     * Gets an instructor by unique constraint courseId-email.\n     "},{"fullQualified":"public InstructorAttributes getInstructorById(String courseId, String email)","name":"getInstructorById","type":"InstructorAttributes","javadoc":"\n     * Gets an instructor by unique ID.\n     "},{"fullQualified":"public InstructorAttributes getInstructorForGoogleId(String courseId, String googleId)","name":"getInstructorForGoogleId","type":"InstructorAttributes","javadoc":"\n     * Gets an instructor by unique constraint courseId-googleId.\n     "},{"fullQualified":"public InstructorAttributes getInstructorForRegistrationKey(String registrationKey)","name":"getInstructorForRegistrationKey","type":"InstructorAttributes","javadoc":"\n     * Gets an instructor by unique constraint registrationKey.\n     "},{"fullQualified":"public List<String> getInstructorEmailsForCourse(String courseId)","name":"getInstructorEmailsForCourse","type":"List<String>","javadoc":"\n     * Gets emails of all instructors of a course.\n     "},{"fullQualified":"public List<InstructorAttributes> getInstructorsForCourse(String courseId)","name":"getInstructorsForCourse","type":"List<InstructorAttributes>","javadoc":"\n     * Gets all instructors of a course.\n     "},{"fullQualified":"public List<InstructorAttributes> getInstructorsForGoogleId(String googleId)","name":"getInstructorsForGoogleId","type":"List<InstructorAttributes>","javadoc":"\n     * Gets all non-archived instructors associated with a googleId.\n     "},{"fullQualified":"public List<InstructorAttributes> getInstructorsForGoogleId(String googleId, boolean omitArchived)","name":"getInstructorsForGoogleId","type":"List<InstructorAttributes>","javadoc":"\n     * Gets all instructors associated with a googleId.\n     *\n     * @param omitArchived whether archived instructors should be omitted or not\n     "},{"fullQualified":" void verifyAtLeastOneInstructorIsDisplayed(String courseId, boolean isOriginalInstructorDisplayed, boolean isEditedInstructorDisplayed) throws InstructorUpdateException","name":"verifyAtLeastOneInstructorIsDisplayed","type":"void","javadoc":"\n     * Verifies that at least one instructor is displayed to student.\n     *\n     * @throws InstructorUpdateException if there is no instructor displayed to student.\n     "},{"fullQualified":"public InstructorAttributes updateInstructorByGoogleIdCascade(InstructorAttributes.UpdateOptionsWithGoogleId updateOptions) throws InstructorUpdateException, InvalidParametersException, EntityDoesNotExistException","name":"updateInstructorByGoogleIdCascade","type":"InstructorAttributes","javadoc":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithGoogleId}.\n     *\n     * <p>Cascade update the comments, responses and deadline extensions associated with the instructor.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     "},{"fullQualified":"public InstructorAttributes updateInstructorByEmail(InstructorAttributes.UpdateOptionsWithEmail updateOptions) throws InstructorUpdateException, InvalidParametersException, EntityDoesNotExistException","name":"updateInstructorByEmail","type":"InstructorAttributes","javadoc":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithEmail}.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     "},{"fullQualified":"public void deleteInstructors(AttributesDeletionQuery query)","name":"deleteInstructors","type":"void","javadoc":"\n     * Deletes instructors using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"public void deleteInstructorCascade(String courseId, String email)","name":"deleteInstructorCascade","type":"void","javadoc":"\n     * Deletes an instructor cascade its associated feedback responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if the student does not exist.\n     "},{"fullQualified":"public void deleteInstructorsForGoogleIdCascade(String googleId)","name":"deleteInstructorsForGoogleIdCascade","type":"void","javadoc":"\n     * Deletes all instructors associated with a googleId and cascade delete its associated feedback responses,\n     * deadline extensions and comments.\n     "},{"fullQualified":"public List<InstructorAttributes> getCoOwnersForCourse(String courseId)","name":"getCoOwnersForCourse","type":"List<InstructorAttributes>","javadoc":"\n     * Gets the list of instructors with co-owner privileges in a course.\n     "},{"fullQualified":"public void resetInstructorGoogleId(String originalEmail, String courseId) throws EntityDoesNotExistException","name":"resetInstructorGoogleId","type":"void","javadoc":"\n     * Resets the associated googleId of an instructor.\n     "},{"fullQualified":"public void updateToEnsureValidityOfInstructorsForTheCourse(String courseId, InstructorAttributes instructorToEdit)","name":"updateToEnsureValidityOfInstructorsForTheCourse","type":"void","javadoc":"\n     * Checks if there are any other registered instructors that can modify instructors.\n     * If there are none, the instructor currently being edited will be granted the privilege\n     * of modifying instructors automatically.\n     *\n     * @param courseId         Id of the course.\n     * @param instructorToEdit Instructor that will be edited.\n     *                         This may be modified within the method.\n     "},{"fullQualified":"public InstructorAttributes regenerateInstructorRegistrationKey(String courseId, String email) throws EntityDoesNotExistException, EntityAlreadyExistsException","name":"regenerateInstructorRegistrationKey","type":"InstructorAttributes","javadoc":"\n     * Regenerates the registration key for the instructor with email address {@code email} in course {@code courseId}.\n     *\n     * @return the instructor attributes with the new registration key.\n     * @throws EntityAlreadyExistsException if the newly generated instructor has the same registration key as the\n     *          original one.\n     * @throws EntityDoesNotExistException if the instructor does not exist.\n     "},{"fullQualified":"public boolean isInstructorInAnyCourse(String googleId)","name":"isInstructorInAnyCourse","type":"boolean","javadoc":"\n     * Returns true if the user associated with the googleId is an instructor in any course in the system.\n     "},{"fullQualified":" int getNumInstructorsByTimeRange(Instant startTime, Instant endTime)","name":"getNumInstructorsByTimeRange","type":"int","javadoc":"\n     * Gets the number of instructors created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private InstructorsLogic()","javadocComment":null}]},{"name":"LogicStarter","fullyQualifiedName":"teammates.logic.core.LogicStarter","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Registers dependencies between different logic classes.\n     ","lineNumber":15,"isOrphan":false},{"type":"LineComment","text":" Invoked by Jetty at application startup.","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" Nothing to do","lineNumber":56,"isOrphan":true}],"allMethods":[{"fullQualified":"public static void initializeDependencies()","name":"initializeDependencies","type":"void","javadoc":"\n     * Registers dependencies between different logic classes.\n     "},{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":null},{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":null}],"allConstructors":[]},{"name":"NotificationsLogic","fullyQualifiedName":"teammates.logic.core.NotificationsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":22,"isOrphan":true},{"type":"LineComment","text":" No dependency to other logic class","lineNumber":30,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets notification associated with the {@code notificationId}.\n     *\n     * @return null if no match found.\n     ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all notifications.\n     ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of notifications.\n     *\n     * @return a list of notifications with the specified {@code targetUser}.\n     ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a notification.\n     *\n     * @return the created notification\n     * @throws InvalidParametersException if the notification is not valid\n     * @throws EntityAlreadyExistsException if the notification already exists in the database.\n     ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates/Creates the notification using {@link NotificationAttributes.UpdateOptions}.\n     *\n     * @return updated notification\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if notification cannot be found with given Id\n     ","lineNumber":70,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes notification associated with the {@code notificationId}.\n     *\n     * <p>Fails silently if the notification doesn't exist.</p>\n     ","lineNumber":82,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if a notification associated with {@code notificationId} exists.\n     ","lineNumber":91,"isOrphan":false}],"allMethods":[{"fullQualified":"public static NotificationsLogic inst()","name":"inst","type":"NotificationsLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public NotificationAttributes getNotification(String notificationId)","name":"getNotification","type":"NotificationAttributes","javadoc":"\n     * Gets notification associated with the {@code notificationId}.\n     *\n     * @return null if no match found.\n     "},{"fullQualified":"public List<NotificationAttributes> getAllNotifications()","name":"getAllNotifications","type":"List<NotificationAttributes>","javadoc":"\n     * Gets all notifications.\n     "},{"fullQualified":"public List<NotificationAttributes> getActiveNotificationsByTargetUser(NotificationTargetUser targetUser)","name":"getActiveNotificationsByTargetUser","type":"List<NotificationAttributes>","javadoc":"\n     * Gets a list of notifications.\n     *\n     * @return a list of notifications with the specified {@code targetUser}.\n     "},{"fullQualified":"public NotificationAttributes createNotification(NotificationAttributes notification) throws InvalidParametersException, EntityAlreadyExistsException","name":"createNotification","type":"NotificationAttributes","javadoc":"\n     * Creates a notification.\n     *\n     * @return the created notification\n     * @throws InvalidParametersException if the notification is not valid\n     * @throws EntityAlreadyExistsException if the notification already exists in the database.\n     "},{"fullQualified":"public NotificationAttributes updateNotification(NotificationAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateNotification","type":"NotificationAttributes","javadoc":"\n     * Updates/Creates the notification using {@link NotificationAttributes.UpdateOptions}.\n     *\n     * @return updated notification\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if notification cannot be found with given Id\n     "},{"fullQualified":"public void deleteNotification(String notificationId)","name":"deleteNotification","type":"void","javadoc":"\n     * Deletes notification associated with the {@code notificationId}.\n     *\n     * <p>Fails silently if the notification doesn't exist.</p>\n     "},{"fullQualified":"public boolean doesNotificationExists(String notificationId)","name":"doesNotificationExists","type":"boolean","javadoc":"\n     * Checks if a notification associated with {@code notificationId} exists.\n     "}],"allConstructors":[{"identifier":"private NotificationsLogic()","javadocComment":null}]},{"name":"ProfilesLogic","fullyQualifiedName":"teammates.logic.core.ProfilesLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":17,"isOrphan":true},{"type":"LineComment","text":" No dependency to other logic class","lineNumber":25,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets student profile associated with the {@code googleId}.\n     *\n     * @return null if no match found.\n     ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates/Creates the profile using {@link StudentProfileAttributes.UpdateOptions}.\n     *\n     * @return updated student profile\n     * @throws InvalidParametersException if attributes to update are not valid\n     ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the student profile associated with the {@code googleId}.\n     *\n     * <p>Fails silently if the student profile doesn't exist.</p>\n     ","lineNumber":48,"isOrphan":false}],"allMethods":[{"fullQualified":"public static ProfilesLogic inst()","name":"inst","type":"ProfilesLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public StudentProfileAttributes getStudentProfile(String googleId)","name":"getStudentProfile","type":"StudentProfileAttributes","javadoc":"\n     * Gets student profile associated with the {@code googleId}.\n     *\n     * @return null if no match found.\n     "},{"fullQualified":"public StudentProfileAttributes updateOrCreateStudentProfile(StudentProfileAttributes.UpdateOptions updateOptions) throws InvalidParametersException","name":"updateOrCreateStudentProfile","type":"StudentProfileAttributes","javadoc":"\n     * Updates/Creates the profile using {@link StudentProfileAttributes.UpdateOptions}.\n     *\n     * @return updated student profile\n     * @throws InvalidParametersException if attributes to update are not valid\n     "},{"fullQualified":"public void deleteStudentProfile(String googleId)","name":"deleteStudentProfile","type":"void","javadoc":"\n     * Deletes the student profile associated with the {@code googleId}.\n     *\n     * <p>Fails silently if the student profile doesn't exist.</p>\n     "}],"allConstructors":[{"identifier":"private ProfilesLogic()","javadocComment":null}]},{"name":"StudentsLogic","fullyQualifiedName":"teammates.logic.core.StudentsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":47,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Creates a student.\n     *\n     * @return the created student\n     * @throws InvalidParametersException if the student is not valid\n     * @throws EntityAlreadyExistsException if the student already exists in the database\n     ","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a student by unique constraint courseId-email.\n     ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets list of students by email.\n     ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a student by unique constraint courseId-googleId.\n     ","lineNumber":86,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a student by unique constraint registrationKey.\n     ","lineNumber":93,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all students associated with a googleId.\n     ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the total number of students of a course.\n     ","lineNumber":107,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all students of a course.\n     ","lineNumber":114,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the first {@code batchSize} students of a course.\n     ","lineNumber":121,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all students of a section.\n     ","lineNumber":128,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all students of a team.\n     ","lineNumber":135,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all unregistered students of a course.\n     ","lineNumber":142,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Searches for students.\n     *\n     * @param instructors the constraint that restricts the search result\n     ","lineNumber":149,"isOrphan":false},{"type":"JavadocComment","text":"\n     * This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search students in the whole system.\n     * @return null if no result found\n     ","lineNumber":159,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if all the given students exist in the given course.\n     *\n     * @throws EntityDoesNotExistException If some student does not exist in the course.\n     ","lineNumber":170,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the user associated with the googleId is a student in any course in the system.\n     ","lineNumber":183,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the given student is in the given team of course.\n     ","lineNumber":190,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the two given emails belong to the same team in the given course.\n     ","lineNumber":209,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a student by {@link StudentAttributes.UpdateOptions}.\n     *\n     * <p>If email changed, update by recreating the student and cascade update all responses\n     * the student gives/receives as well as any deadline extensions given to the student.\n     *\n     * <p>If team changed, cascade delete all responses the student gives/receives within that team.\n     *\n     * <p>If section changed, cascade update all responses the student gives/receives.\n     *\n     * @return updated student\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the student cannot be found\n     * @throws EntityAlreadyExistsException if the student cannot be updated\n     *         by recreation because of an existent student\n     ","lineNumber":220,"isOrphan":false},{"type":"LineComment","text":" TODO: check to delete comments for this section/team if the section/team is no longer existent in the course","lineNumber":263,"isOrphan":true},{"type":"LineComment","text":" cascade email change, if any","lineNumber":241,"isOrphan":false},{"type":"LineComment","text":" adjust submissions if moving to a different team","lineNumber":251,"isOrphan":false},{"type":"LineComment","text":" update the new section name in responses","lineNumber":257,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Resets the googleId associated with the student.\n     ","lineNumber":268,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Regenerates the registration key for the student with email address {@code email} in course {@code courseId}.\n     *\n     * @return the student attributes with the new registration key.\n     * @throws EntityAlreadyExistsException if the newly generated course student has the same registration key as the\n     *          original one.\n     * @throws EntityDoesNotExistException if the student does not exist.\n     ","lineNumber":283,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Validates sections for any limit violations and teams for any team name violations.\n     ","lineNumber":304,"isOrphan":false},{"type":"LineComment","text":" no conflicts","lineNumber":311,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the section name for the given team name for the given course.\n     ","lineNumber":340,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the first {@code batchSize} of the remaining students in the course cascade their\n     * associated responses, deadline extensions, and comments.\n     ","lineNumber":419,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a student cascade its associated feedback responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if the student does not exist.\n     ","lineNumber":431,"isOrphan":false},{"type":"LineComment","text":" the student is the only student in the team, delete responses related to the team","lineNumber":444,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes all students associated a googleId and cascade\n     * its associated feedback responses, deadline extensions and comments.\n     ","lineNumber":452,"isOrphan":false},{"type":"LineComment","text":" Cascade delete students","lineNumber":459,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes students using {@link AttributesDeletionQuery}.\n     ","lineNumber":465,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given student.\n     *\n     * @param student the student to be put into documents\n     ","lineNumber":472,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of students created within a specified time range.\n     ","lineNumber":501,"isOrphan":false}],"allMethods":[{"fullQualified":"public static StudentsLogic inst()","name":"inst","type":"StudentsLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public StudentAttributes createStudent(StudentAttributes studentData) throws InvalidParametersException, EntityAlreadyExistsException","name":"createStudent","type":"StudentAttributes","javadoc":"\n     * Creates a student.\n     *\n     * @return the created student\n     * @throws InvalidParametersException if the student is not valid\n     * @throws EntityAlreadyExistsException if the student already exists in the database\n     "},{"fullQualified":"public StudentAttributes getStudentForEmail(String courseId, String email)","name":"getStudentForEmail","type":"StudentAttributes","javadoc":"\n     * Gets a student by unique constraint courseId-email.\n     "},{"fullQualified":"public List<StudentAttributes> getAllStudentsForEmail(String email)","name":"getAllStudentsForEmail","type":"List<StudentAttributes>","javadoc":"\n     * Gets list of students by email.\n     "},{"fullQualified":"public StudentAttributes getStudentForCourseIdAndGoogleId(String courseId, String googleId)","name":"getStudentForCourseIdAndGoogleId","type":"StudentAttributes","javadoc":"\n     * Gets a student by unique constraint courseId-googleId.\n     "},{"fullQualified":"public StudentAttributes getStudentForRegistrationKey(String registrationKey)","name":"getStudentForRegistrationKey","type":"StudentAttributes","javadoc":"\n     * Gets a student by unique constraint registrationKey.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForGoogleId(String googleId)","name":"getStudentsForGoogleId","type":"List<StudentAttributes>","javadoc":"\n     * Gets all students associated with a googleId.\n     "},{"fullQualified":"public int getNumberOfStudentsForCourse(String courseId)","name":"getNumberOfStudentsForCourse","type":"int","javadoc":"\n     * Gets the total number of students of a course.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForCourse(String courseId)","name":"getStudentsForCourse","type":"List<StudentAttributes>","javadoc":"\n     * Gets all students of a course.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForCourse(String courseId, int batchSize)","name":"getStudentsForCourse","type":"List<StudentAttributes>","javadoc":"\n     * Gets the first {@code batchSize} students of a course.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForSection(String sectionName, String courseId)","name":"getStudentsForSection","type":"List<StudentAttributes>","javadoc":"\n     * Gets all students of a section.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForTeam(String teamName, String courseId)","name":"getStudentsForTeam","type":"List<StudentAttributes>","javadoc":"\n     * Gets all students of a team.\n     "},{"fullQualified":"public List<StudentAttributes> getUnregisteredStudentsForCourse(String courseId)","name":"getUnregisteredStudentsForCourse","type":"List<StudentAttributes>","javadoc":"\n     * Gets all unregistered students of a course.\n     "},{"fullQualified":"public List<StudentAttributes> searchStudents(String queryString, List<InstructorAttributes> instructors) throws SearchServiceException","name":"searchStudents","type":"List<StudentAttributes>","javadoc":"\n     * Searches for students.\n     *\n     * @param instructors the constraint that restricts the search result\n     "},{"fullQualified":"public List<StudentAttributes> searchStudentsInWholeSystem(String queryString) throws SearchServiceException","name":"searchStudentsInWholeSystem","type":"List<StudentAttributes>","javadoc":"\n     * This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search students in the whole system.\n     * @return null if no result found\n     "},{"fullQualified":"public void verifyAllStudentsExistInCourse(String courseId, Collection<String> studentEmailAddresses) throws EntityDoesNotExistException","name":"verifyAllStudentsExistInCourse","type":"void","javadoc":"\n     * Checks if all the given students exist in the given course.\n     *\n     * @throws EntityDoesNotExistException If some student does not exist in the course.\n     "},{"fullQualified":"public boolean isStudentInAnyCourse(String googleId)","name":"isStudentInAnyCourse","type":"boolean","javadoc":"\n     * Returns true if the user associated with the googleId is a student in any course in the system.\n     "},{"fullQualified":" boolean isStudentInTeam(String courseId, String teamName, String studentEmail)","name":"isStudentInTeam","type":"boolean","javadoc":"\n     * Returns true if the given student is in the given team of course.\n     "},{"fullQualified":"public boolean isStudentsInSameTeam(String courseId, String student1Email, String student2Email)","name":"isStudentsInSameTeam","type":"boolean","javadoc":"\n     * Returns true if the two given emails belong to the same team in the given course.\n     "},{"fullQualified":"public StudentAttributes updateStudentCascade(StudentAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException","name":"updateStudentCascade","type":"StudentAttributes","javadoc":"\n     * Updates a student by {@link StudentAttributes.UpdateOptions}.\n     *\n     * <p>If email changed, update by recreating the student and cascade update all responses\n     * the student gives/receives as well as any deadline extensions given to the student.\n     *\n     * <p>If team changed, cascade delete all responses the student gives/receives within that team.\n     *\n     * <p>If section changed, cascade update all responses the student gives/receives.\n     *\n     * @return updated student\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the student cannot be found\n     * @throws EntityAlreadyExistsException if the student cannot be updated\n     *         by recreation because of an existent student\n     "},{"fullQualified":"public void resetStudentGoogleId(String originalEmail, String courseId) throws EntityDoesNotExistException","name":"resetStudentGoogleId","type":"void","javadoc":"\n     * Resets the googleId associated with the student.\n     "},{"fullQualified":"public StudentAttributes regenerateStudentRegistrationKey(String courseId, String email) throws EntityDoesNotExistException, EntityAlreadyExistsException","name":"regenerateStudentRegistrationKey","type":"StudentAttributes","javadoc":"\n     * Regenerates the registration key for the student with email address {@code email} in course {@code courseId}.\n     *\n     * @return the student attributes with the new registration key.\n     * @throws EntityAlreadyExistsException if the newly generated course student has the same registration key as the\n     *          original one.\n     * @throws EntityDoesNotExistException if the student does not exist.\n     "},{"fullQualified":"public void validateSectionsAndTeams(List<StudentAttributes> studentList, String courseId) throws EnrollException","name":"validateSectionsAndTeams","type":"void","javadoc":"\n     * Validates sections for any limit violations and teams for any team name violations.\n     "},{"fullQualified":"private List<StudentAttributes> getMergedList(List<StudentAttributes> studentList, String courseId)","name":"getMergedList","type":"List<StudentAttributes>","javadoc":null},{"fullQualified":"public String getSectionForTeam(String courseId, String teamName)","name":"getSectionForTeam","type":"String","javadoc":"\n     * Returns the section name for the given team name for the given course.\n     "},{"fullQualified":"private String getSectionInvalidityInfo(List<StudentAttributes> mergedList)","name":"getSectionInvalidityInfo","type":"String","javadoc":null},{"fullQualified":"private String getTeamInvalidityInfo(List<StudentAttributes> mergedList)","name":"getTeamInvalidityInfo","type":"String","javadoc":null},{"fullQualified":"public void deleteStudentsInCourseCascade(String courseId, int batchSize)","name":"deleteStudentsInCourseCascade","type":"void","javadoc":"\n     * Deletes the first {@code batchSize} of the remaining students in the course cascade their\n     * associated responses, deadline extensions, and comments.\n     "},{"fullQualified":"public void deleteStudentCascade(String courseId, String studentEmail)","name":"deleteStudentCascade","type":"void","javadoc":"\n     * Deletes a student cascade its associated feedback responses, deadline extensions and comments.\n     *\n     * <p>Fails silently if the student does not exist.\n     "},{"fullQualified":"public void deleteStudentsForGoogleIdCascade(String googleId)","name":"deleteStudentsForGoogleIdCascade","type":"void","javadoc":"\n     * Deletes all students associated a googleId and cascade\n     * its associated feedback responses, deadline extensions and comments.\n     "},{"fullQualified":"public void deleteStudents(AttributesDeletionQuery query)","name":"deleteStudents","type":"void","javadoc":"\n     * Deletes students using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"public void putDocument(StudentAttributes student) throws SearchServiceException","name":"putDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given student.\n     *\n     * @param student the student to be put into documents\n     "},{"fullQualified":"private boolean isInEnrollList(StudentAttributes student, List<StudentAttributes> studentInfoList)","name":"isInEnrollList","type":"boolean","javadoc":null},{"fullQualified":"private boolean isTeamChanged(String originalTeam, String newTeam)","name":"isTeamChanged","type":"boolean","javadoc":null},{"fullQualified":"private boolean isSectionChanged(String originalSection, String newSection)","name":"isSectionChanged","type":"boolean","javadoc":null},{"fullQualified":" int getNumStudentsByTimeRange(Instant startTime, Instant endTime)","name":"getNumStudentsByTimeRange","type":"int","javadoc":"\n     * Gets the number of students created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private StudentsLogic()","javadocComment":null}]},{"name":"UsageStatisticsLogic","fullyQualifiedName":"teammates.logic.core.UsageStatisticsLogic","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":30,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets the list of statistics objects between start time and end time.\n     ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Calculates the statistics of created entities for the given time range.\n     ","lineNumber":52,"isOrphan":false},{"type":"LineComment","text":" both startTime and timePeriod do not matter here","lineNumber":62,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a statistics object.\n     *\n     * @return the created statistics object\n     * @throws InvalidParametersException if the statistics object is not valid\n     * @throws EntityAlreadyExistsException if the statistics object already exists in the database\n     ","lineNumber":71,"isOrphan":false}],"allMethods":[{"fullQualified":"public static UsageStatisticsLogic inst()","name":"inst","type":"UsageStatisticsLogic","javadoc":null},{"fullQualified":" void initLogicDependencies()","name":"initLogicDependencies","type":"void","javadoc":null},{"fullQualified":"public List<UsageStatisticsAttributes> getUsageStatisticsForTimeRange(Instant startTime, Instant endTime)","name":"getUsageStatisticsForTimeRange","type":"List<UsageStatisticsAttributes>","javadoc":"\n     * Gets the list of statistics objects between start time and end time.\n     "},{"fullQualified":"public UsageStatisticsAttributes calculateEntitiesStatisticsForTimeRange(Instant startTime, Instant endTime)","name":"calculateEntitiesStatisticsForTimeRange","type":"UsageStatisticsAttributes","javadoc":"\n     * Calculates the statistics of created entities for the given time range.\n     "},{"fullQualified":"public UsageStatisticsAttributes createUsageStatistics(UsageStatisticsAttributes attributes) throws EntityAlreadyExistsException, InvalidParametersException","name":"createUsageStatistics","type":"UsageStatisticsAttributes","javadoc":"\n     * Creates a statistics object.\n     *\n     * @return the created statistics object\n     * @throws InvalidParametersException if the statistics object is not valid\n     * @throws EntityAlreadyExistsException if the statistics object already exists in the database\n     "}],"allConstructors":[{"identifier":"private UsageStatisticsLogic()","javadocComment":null}]},{"name":"EmailSenderService","fullyQualifiedName":"teammates.logic.external.EmailSenderService","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\n     * Parses the {@code wrapper} email object to specific implementations of email object\n     * used by the service.\n     ","lineNumber":12,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sends the email packaged as a {@code wrapper}.\n     ","lineNumber":18,"isOrphan":false}],"allMethods":[{"fullQualified":" Object parseToEmail(EmailWrapper wrapper)","name":"parseToEmail","type":"Object","javadoc":"\n     * Parses the {@code wrapper} email object to specific implementations of email object\n     * used by the service.\n     "},{"fullQualified":" EmailSendingStatus sendEmail(EmailWrapper wrapper) throws EmailSendingException","name":"sendEmail","type":"EmailSendingStatus","javadoc":"\n     * Sends the email packaged as a {@code wrapper}.\n     "}],"allConstructors":[]},{"name":"EmptyEmailService","fullyQualifiedName":"teammates.logic.external.EmptyEmailService","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public EmailWrapper parseToEmail(EmailWrapper wrapper)","name":"parseToEmail","type":"EmailWrapper","javadoc":null},{"fullQualified":"public EmailSendingStatus sendEmail(EmailWrapper wrapper)","name":"sendEmail","type":"EmailSendingStatus","javadoc":null}],"allConstructors":[]},{"name":"EmptyRecaptchaService","fullyQualifiedName":"teammates.logic.external.EmptyRecaptchaService","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean isVerificationSuccessful(String captchaResponse)","name":"isVerificationSuccessful","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"FileStorageService","fullyQualifiedName":"teammates.logic.external.FileStorageService","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns true if a file with the specified {@code fileKey} exists in the storage.\n     ","lineNumber":8,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the content of the file with the specified {@code fileKey} as bytes.\n     ","lineNumber":13,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the file with the specified {@code fileKey}.\n     ","lineNumber":18,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a file with the specified {@code contentBytes} as content and with type {@code contentType}.\n     ","lineNumber":23,"isOrphan":false}],"allMethods":[{"fullQualified":" boolean doesFileExist(String fileKey)","name":"doesFileExist","type":"boolean","javadoc":"\n     * Returns true if a file with the specified {@code fileKey} exists in the storage.\n     "},{"fullQualified":" byte[] getContent(String fileKey)","name":"getContent","type":"byte[]","javadoc":"\n     * Gets the content of the file with the specified {@code fileKey} as bytes.\n     "},{"fullQualified":" void delete(String fileKey)","name":"delete","type":"void","javadoc":"\n     * Deletes the file with the specified {@code fileKey}.\n     "},{"fullQualified":" void create(String fileKey, byte[] contentBytes, String contentType)","name":"create","type":"void","javadoc":"\n     * Creates a file with the specified {@code contentBytes} as content and with type {@code contentType}.\n     "}],"allConstructors":[]},{"name":"LogSearchParams","fullyQualifiedName":"teammates.logic.external.GoogleCloudLoggingService.LogSearchParams","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" static LogSearchParams from(QueryLogsParams queryLogsParams)","name":"from","type":"LogSearchParams","javadoc":null},{"fullQualified":" LogSearchParams addLogName(String logName)","name":"addLogName","type":"LogSearchParams","javadoc":null},{"fullQualified":" LogSearchParams setResourceType(String resourceType)","name":"setResourceType","type":"LogSearchParams","javadoc":null},{"fullQualified":"private LogSearchParams setQueryLogsParams(QueryLogsParams queryLogsParams)","name":"setQueryLogsParams","type":"LogSearchParams","javadoc":null}],"allConstructors":[]},{"name":"GoogleCloudLoggingService","fullyQualifiedName":"teammates.logic.external.GoogleCloudLoggingService","isInterface":false,"codeComments":[{"type":"LineComment","text":" This method is not necessary for production usage because a feedback session log","lineNumber":112,"isOrphan":true},{"type":"LineComment","text":" is already separately created through the standardized logging infrastructure.","lineNumber":113,"isOrphan":true},{"type":"LineComment","text":" However, this method is not removed as it is necessary to assist in local testing.","lineNumber":114,"isOrphan":true},{"type":"LineComment","text":" ignore exception when closing resource","lineNumber":177,"isOrphan":true},{"type":"LineComment","text":" ignore exception when closing resource","lineNumber":190,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Contains params to be used for the searching of logs.\n     ","lineNumber":281,"isOrphan":false}],"allMethods":[{"fullQualified":"public QueryLogsResults queryLogs(QueryLogsParams queryLogsParams)","name":"queryLogs","type":"QueryLogsResults","javadoc":null},{"fullQualified":"private LogSeverity convertSeverity(Severity severity)","name":"convertSeverity","type":"LogSeverity","javadoc":null},{"fullQualified":"public void createFeedbackSessionLog(String courseId, String email, String fsName, String fslType)","name":"createFeedbackSessionLog","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackSessionLogEntry> getFeedbackSessionLogs(String courseId, String email, long startTime, long endTime, String fsName)","name":"getFeedbackSessionLogs","type":"List<FeedbackSessionLogEntry>","javadoc":null},{"fullQualified":"private List<LogEntry> getAllLogEntries(LogSearchParams logSearchParams)","name":"getAllLogEntries","type":"List<LogEntry>","javadoc":null},{"fullQualified":"private Page<LogEntry> getPageLogEntries(LogSearchParams logSearchParams, int pageSize)","name":"getPageLogEntries","type":"Page<LogEntry>","javadoc":null},{"fullQualified":"private List<EntryListOption> convertLogSearchParams(LogSearchParams s, int pageSize)","name":"convertLogSearchParams","type":"List<EntryListOption>","javadoc":null}],"allConstructors":[]},{"name":"GoogleCloudStorageService","fullyQualifiedName":"teammates.logic.external.GoogleCloudStorageService","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void delete(String fileKey)","name":"delete","type":"void","javadoc":null},{"fullQualified":"public void create(String fileKey, byte[] contentBytes, String contentType)","name":"create","type":"void","javadoc":null},{"fullQualified":"public boolean doesFileExist(String fileKey)","name":"doesFileExist","type":"boolean","javadoc":null},{"fullQualified":"public byte[] getContent(String fileKey)","name":"getContent","type":"byte[]","javadoc":null}],"allConstructors":[]},{"name":"GoogleCloudTasksService","fullyQualifiedName":"teammates.logic.external.GoogleCloudTasksService","isInterface":false,"codeComments":[{"type":"LineComment","text":" the value is not important","lineNumber":42,"isOrphan":false}],"allMethods":[{"fullQualified":"public void addDeferredTask(TaskWrapper task, long countdownTime)","name":"addDeferredTask","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GoogleRecaptchaService","fullyQualifiedName":"teammates.logic.external.GoogleRecaptchaService","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" The Google reCAPTCHA API URL to verify the response token. ","lineNumber":22,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean isVerificationSuccessful(String captchaResponse)","name":"isVerificationSuccessful","type":"boolean","javadoc":null},{"fullQualified":" String getApiResponse(String captchaResponse, String secretKey) throws URISyntaxException, IOException","name":"getApiResponse","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public GoogleRecaptchaService(String secretKey)","javadocComment":null}]},{"name":"LocalFileStorageService","fullyQualifiedName":"teammates.logic.external.LocalFileStorageService","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"private static String constructFilePath(String fileKey)","name":"constructFilePath","type":"String","javadoc":null},{"fullQualified":"public void delete(String fileKey)","name":"delete","type":"void","javadoc":null},{"fullQualified":"public void create(String fileKey, byte[] contentBytes, String contentType)","name":"create","type":"void","javadoc":null},{"fullQualified":"public boolean doesFileExist(String fileKey)","name":"doesFileExist","type":"boolean","javadoc":null},{"fullQualified":"public byte[] getContent(String fileKey)","name":"getContent","type":"byte[]","javadoc":null}],"allConstructors":[]},{"name":"LocalLoggingService","fullyQualifiedName":"teammates.logic.external.LocalLoggingService","isInterface":false,"codeComments":[{"type":"LineComment","text":" Timestamp of logs are randomly created to be within the last one hour","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" Page size is set as a small value to test loading of more logs","lineNumber":70,"isOrphan":false}],"allMethods":[{"fullQualified":"private static List<GeneralLogEntry> loadLocalLogEntries()","name":"loadLocalLogEntries","type":"List<GeneralLogEntry>","javadoc":null},{"fullQualified":"public QueryLogsResults queryLogs(QueryLogsParams queryLogsParams)","name":"queryLogs","type":"QueryLogsResults","javadoc":null},{"fullQualified":"private boolean isEventBasedFilterSatisfied(GeneralLogEntry log, QueryLogsParams queryLogsParams)","name":"isEventBasedFilterSatisfied","type":"boolean","javadoc":null},{"fullQualified":"private boolean isExceptionFilterSatisfied(LogDetails details, String exceptionClassFilter)","name":"isExceptionFilterSatisfied","type":"boolean","javadoc":null},{"fullQualified":"private boolean isRequestFilterSatisfied(LogDetails details, String actionClassFilter, String latencyFilter, String statusFilter, String regkeyFilter, String emailFilter, String googleIdFilter)","name":"isRequestFilterSatisfied","type":"boolean","javadoc":null},{"fullQualified":"public void createFeedbackSessionLog(String courseId, String email, String fsName, String fslType)","name":"createFeedbackSessionLog","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackSessionLogEntry> getFeedbackSessionLogs(String courseId, String email, long startTime, long endTime, String fsName)","name":"getFeedbackSessionLogs","type":"List<FeedbackSessionLogEntry>","javadoc":null},{"fullQualified":"private List<GeneralLogEntry> deepCopyLogEntries(List<GeneralLogEntry> logEntries)","name":"deepCopyLogEntries","type":"List<GeneralLogEntry>","javadoc":null}],"allConstructors":[]},{"name":"LocalTaskQueueService","fullyQualifiedName":"teammates.logic.external.LocalTaskQueueService","isInterface":false,"codeComments":[{"type":"LineComment","text":" In dev server, task queues are either not active (i.e. they will not be executed even if queued)","lineNumber":33,"isOrphan":true},{"type":"LineComment","text":" or they will be executed immediately without going through any kind of \"queue\"","lineNumber":34,"isOrphan":true}],"allMethods":[{"fullQualified":"public void addDeferredTask(TaskWrapper task, long countdownTime)","name":"addDeferredTask","type":"void","javadoc":null},{"fullQualified":"private static URI createBasicUri(String url, Map<String, String> params)","name":"createBasicUri","type":"URI","javadoc":null}],"allConstructors":[]},{"name":"LogService","fullyQualifiedName":"teammates.logic.external.LogService","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the list of logs satisfying the given criteria.\n     ","lineNumber":14,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a feedback session log.\n     ","lineNumber":19,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the feedback session logs as filtered by the given parameters.\n     ","lineNumber":24,"isOrphan":false}],"allMethods":[{"fullQualified":" QueryLogsResults queryLogs(QueryLogsParams queryLogsParams)","name":"queryLogs","type":"QueryLogsResults","javadoc":"\n     * Gets the list of logs satisfying the given criteria.\n     "},{"fullQualified":" void createFeedbackSessionLog(String courseId, String email, String fsName, String fslType)","name":"createFeedbackSessionLog","type":"void","javadoc":"\n     * Creates a feedback session log.\n     "},{"fullQualified":" List<FeedbackSessionLogEntry> getFeedbackSessionLogs(String courseId, String email, long startTime, long endTime, String fsName)","name":"getFeedbackSessionLogs","type":"List<FeedbackSessionLogEntry>","javadoc":"\n     * Gets the feedback session logs as filtered by the given parameters.\n     "}],"allConstructors":[]},{"name":"MailgunService","fullyQualifiedName":"teammates.logic.external.MailgunService","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * {@inheritDoc}\n     ","lineNumber":30,"isOrphan":false}],"allMethods":[{"fullQualified":"public FormDataMultiPart parseToEmail(EmailWrapper wrapper)","name":"parseToEmail","type":"FormDataMultiPart","javadoc":"\n     * {@inheritDoc}\n     "},{"fullQualified":"public EmailSendingStatus sendEmail(EmailWrapper wrapper)","name":"sendEmail","type":"EmailSendingStatus","javadoc":null}],"allConstructors":[]},{"name":"MailjetService","fullyQualifiedName":"teammates.logic.external.MailjetService","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * {@inheritDoc}\n     ","lineNumber":30,"isOrphan":false}],"allMethods":[{"fullQualified":"public MailjetRequest parseToEmail(EmailWrapper wrapper)","name":"parseToEmail","type":"MailjetRequest","javadoc":"\n     * {@inheritDoc}\n     "},{"fullQualified":"public EmailSendingStatus sendEmail(EmailWrapper wrapper) throws EmailSendingException","name":"sendEmail","type":"EmailSendingStatus","javadoc":null}],"allConstructors":[]},{"name":"RecaptchaService","fullyQualifiedName":"teammates.logic.external.RecaptchaService","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns true if the {@code captchaResponse} token is verified successfully.\n     ","lineNumber":8,"isOrphan":false}],"allMethods":[{"fullQualified":" boolean isVerificationSuccessful(String captchaResponse)","name":"isVerificationSuccessful","type":"boolean","javadoc":"\n     * Returns true if the {@code captchaResponse} token is verified successfully.\n     "}],"allConstructors":[]},{"name":"SendgridService","fullyQualifiedName":"teammates.logic.external.SendgridService","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * {@inheritDoc}\n     ","lineNumber":30,"isOrphan":false}],"allMethods":[{"fullQualified":"public Mail parseToEmail(EmailWrapper wrapper)","name":"parseToEmail","type":"Mail","javadoc":"\n     * {@inheritDoc}\n     "},{"fullQualified":"public EmailSendingStatus sendEmail(EmailWrapper wrapper) throws EmailSendingException","name":"sendEmail","type":"EmailSendingStatus","javadoc":null}],"allConstructors":[]},{"name":"TaskQueueService","fullyQualifiedName":"teammates.logic.external.TaskQueueService","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\n     * Adds the given task, to be run after the specified time, to the specified queue.\n     *\n     * @param task the task object containing the details of task to be added\n     * @param countdownTime the time delay for the task to be executed\n     ","lineNumber":10,"isOrphan":false}],"allMethods":[{"fullQualified":" void addDeferredTask(TaskWrapper task, long countdownTime)","name":"addDeferredTask","type":"void","javadoc":"\n     * Adds the given task, to be run after the specified time, to the specified queue.\n     *\n     * @param task the task object containing the details of task to be added\n     * @param countdownTime the time delay for the task to be executed\n     "}],"allConstructors":[]},{"name":"Application","fullyQualifiedName":"teammates.main.Application","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":30,"isOrphan":true},{"type":"LineComment","text":" ok to ignore as this is a startup method","lineNumber":33,"isOrphan":false},{"type":"LineComment","text":" By using the server.join() the server thread will join with the current thread.","lineNumber":91,"isOrphan":true},{"type":"LineComment","text":" For dev server, we dynamically add servlet to serve the dev server login page.","lineNumber":48,"isOrphan":true},{"type":"LineComment","text":" Enable Jetty annotation scanning","lineNumber":55,"isOrphan":false},{"type":"LineComment","text":" do nothing","lineNumber":85,"isOrphan":true},{"type":"LineComment","text":" See https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#join-- for more details.","lineNumber":92,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args) throws Exception","name":"main","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private Application()","javadocComment":null}]},{"name":"AccountRequestsDb","fullyQualifiedName":"teammates.storage.api.AccountRequestsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":33,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given account request.\n     ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Searches all account requests in the system.\n     *\n     * <p>This is used by admin to search account requests in the whole system.\n     ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an account request by email and institute.\n     ","lineNumber":66,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates an account request.\n     *\n     * @return the updated account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityDoesNotExistException if the account request cannot be found\n     ","lineNumber":76,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an account request by unique constraint {@code registrationKey}.\n     *\n     * @return the account request or null if no match found\n     ","lineNumber":104,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes an accountRequest.\n     ","lineNumber":130,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes search document for the given account request by using {@code accountRequestUniqueId}.\n     ","lineNumber":141,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of account requests created within a specified time range.\n     ","lineNumber":167,"isOrphan":false}],"allMethods":[{"fullQualified":"public static AccountRequestsDb inst()","name":"inst","type":"AccountRequestsDb","javadoc":null},{"fullQualified":"private AccountRequestSearchManager getSearchManager()","name":"getSearchManager","type":"AccountRequestSearchManager","javadoc":null},{"fullQualified":"public void putDocument(AccountRequestAttributes accountRequest) throws SearchServiceException","name":"putDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given account request.\n     "},{"fullQualified":"public List<AccountRequestAttributes> searchAccountRequestsInWholeSystem(String queryString) throws SearchServiceException","name":"searchAccountRequestsInWholeSystem","type":"List<AccountRequestAttributes>","javadoc":"\n     * Searches all account requests in the system.\n     *\n     * <p>This is used by admin to search account requests in the whole system.\n     "},{"fullQualified":"public AccountRequestAttributes getAccountRequest(String email, String institute)","name":"getAccountRequest","type":"AccountRequestAttributes","javadoc":"\n     * Gets an account request by email and institute.\n     "},{"fullQualified":"public AccountRequestAttributes updateAccountRequest(AccountRequestAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateAccountRequest","type":"AccountRequestAttributes","javadoc":"\n     * Updates an account request.\n     *\n     * @return the updated account request\n     * @throws InvalidParametersException if the account request is not valid\n     * @throws EntityDoesNotExistException if the account request cannot be found\n     "},{"fullQualified":"public AccountRequestAttributes getAccountRequestForRegistrationKey(String registrationKey)","name":"getAccountRequestForRegistrationKey","type":"AccountRequestAttributes","javadoc":"\n     * Gets an account request by unique constraint {@code registrationKey}.\n     *\n     * @return the account request or null if no match found\n     "},{"fullQualified":"private AccountRequest getAccountRequestEntity(String id)","name":"getAccountRequestEntity","type":"AccountRequest","javadoc":null},{"fullQualified":"public void deleteAccountRequest(String email, String institute)","name":"deleteAccountRequest","type":"void","javadoc":"\n     * Deletes an accountRequest.\n     "},{"fullQualified":"public void deleteDocumentByAccountRequestId(String accountRequestUniqueId)","name":"deleteDocumentByAccountRequestId","type":"void","javadoc":"\n     * Removes search document for the given account request by using {@code accountRequestUniqueId}.\n     "},{"fullQualified":" LoadType<AccountRequest> load()","name":"load","type":"LoadType<AccountRequest>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(AccountRequestAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" AccountRequestAttributes makeAttributes(AccountRequest entity)","name":"makeAttributes","type":"AccountRequestAttributes","javadoc":null},{"fullQualified":"public int getNumAccountRequestsByTimeRange(Instant startTime, Instant endTime)","name":"getNumAccountRequestsByTimeRange","type":"int","javadoc":"\n     * Gets the number of account requests created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private AccountRequestsDb()","javadocComment":null}]},{"name":"AccountsDb","fullyQualifiedName":"teammates.storage.api.AccountsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":28,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets an account.\n     ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns a list of accounts with email matching {@code email}.\n     ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates an account with {@link AccountAttributes.UpdateOptions}.\n     *\n     * @return updated account\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if account cannot be found\n     ","lineNumber":55,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes an account.\n     *\n     * <p>Fails silently if there is no such account.\n     ","lineNumber":94,"isOrphan":false}],"allMethods":[{"fullQualified":"public static AccountsDb inst()","name":"inst","type":"AccountsDb","javadoc":null},{"fullQualified":"public AccountAttributes getAccount(String googleId)","name":"getAccount","type":"AccountAttributes","javadoc":"\n     * Gets an account.\n     "},{"fullQualified":"public List<AccountAttributes> getAccountsForEmail(String email)","name":"getAccountsForEmail","type":"List<AccountAttributes>","javadoc":"\n     * Returns a list of accounts with email matching {@code email}.\n     "},{"fullQualified":"public AccountAttributes updateAccount(AccountAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateAccount","type":"AccountAttributes","javadoc":"\n     * Updates an account with {@link AccountAttributes.UpdateOptions}.\n     *\n     * @return updated account\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if account cannot be found\n     "},{"fullQualified":"public void deleteAccount(String googleId)","name":"deleteAccount","type":"void","javadoc":"\n     * Deletes an account.\n     *\n     * <p>Fails silently if there is no such account.\n     "},{"fullQualified":"private Account getAccountEntity(String googleId)","name":"getAccountEntity","type":"Account","javadoc":null},{"fullQualified":" LoadType<Account> load()","name":"load","type":"LoadType<Account>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(AccountAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" AccountAttributes makeAttributes(Account entity)","name":"makeAttributes","type":"AccountAttributes","javadoc":null}],"allConstructors":[{"identifier":"private AccountsDb()","javadocComment":null}]},{"name":"CoursesDb","fullyQualifiedName":"teammates.storage.api.CoursesDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":28,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets a course.\n     ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of courses.\n     ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a course by {@link CourseAttributes.UpdateOptions}.\n     *\n     * @return updated course\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the course cannot be found\n     ","lineNumber":54,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a course.\n     ","lineNumber":98,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Soft-deletes a course by its given corresponding ID.\n     * @return Soft-deletion time of the course.\n     ","lineNumber":107,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Restores a soft-deleted course by its given corresponding ID.\n     ","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of courses created within a specified time range.\n     ","lineNumber":171,"isOrphan":false}],"allMethods":[{"fullQualified":"public static CoursesDb inst()","name":"inst","type":"CoursesDb","javadoc":null},{"fullQualified":"public CourseAttributes getCourse(String courseId)","name":"getCourse","type":"CourseAttributes","javadoc":"\n     * Gets a course.\n     "},{"fullQualified":"public List<CourseAttributes> getCourses(List<String> courseIds)","name":"getCourses","type":"List<CourseAttributes>","javadoc":"\n     * Gets a list of courses.\n     "},{"fullQualified":"public CourseAttributes updateCourse(CourseAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateCourse","type":"CourseAttributes","javadoc":"\n     * Updates a course by {@link CourseAttributes.UpdateOptions}.\n     *\n     * @return updated course\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the course cannot be found\n     "},{"fullQualified":"public void deleteCourse(String courseId)","name":"deleteCourse","type":"void","javadoc":"\n     * Deletes a course.\n     "},{"fullQualified":"public Instant softDeleteCourse(String courseId) throws EntityDoesNotExistException","name":"softDeleteCourse","type":"Instant","javadoc":"\n     * Soft-deletes a course by its given corresponding ID.\n     * @return Soft-deletion time of the course.\n     "},{"fullQualified":"public void restoreDeletedCourse(String courseId) throws EntityDoesNotExistException","name":"restoreDeletedCourse","type":"void","javadoc":"\n     * Restores a soft-deleted course by its given corresponding ID.\n     "},{"fullQualified":" LoadType<Course> load()","name":"load","type":"LoadType<Course>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(CourseAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":"private Course getCourseEntity(String courseId)","name":"getCourseEntity","type":"Course","javadoc":null},{"fullQualified":"private List<Course> getCourseEntities(List<String> courseIds)","name":"getCourseEntities","type":"List<Course>","javadoc":null},{"fullQualified":" CourseAttributes makeAttributes(Course entity)","name":"makeAttributes","type":"CourseAttributes","javadoc":null},{"fullQualified":"public int getNumCoursesByTimeRange(Instant startTime, Instant endTime)","name":"getNumCoursesByTimeRange","type":"int","javadoc":"\n     * Gets the number of courses created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private CoursesDb()","javadocComment":null}]},{"name":"DatastoreEmulatorRunner","fullyQualifiedName":"teammates.storage.api.DatastoreEmulatorRunner","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":17,"isOrphan":true},{"type":"LineComment","text":" default setting","lineNumber":22,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void main(String[] args) throws IOException, InterruptedException","name":"main","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private DatastoreEmulatorRunner()","javadocComment":null}]},{"name":"DeadlineExtensionsDb","fullyQualifiedName":"teammates.storage.api.DeadlineExtensionsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":32,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets a deadline extension by {@code courseId}, {@code feedbackSessionName},\n     * {@code userEmail} and {@code isInstructor}.\n     ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a deadline extension.\n     *\n     * @return the updated deadline extension\n     * @throws InvalidParametersException if the updated deadline extension is not valid\n     * @throws EntityDoesNotExistException if the deadline extension cannot be found\n     ","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":82,"isOrphan":false},{"type":"LineComment","text":" User email updated. Delete and recreate entity.","lineNumber":96,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates all deadline extensions of a user in a course with new email.\n     ","lineNumber":109,"isOrphan":false},{"type":"LineComment","text":" No update necessary","lineNumber":119,"isOrphan":false},{"type":"LineComment","text":" ignore: deadline extension entity already deleted","lineNumber":136,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Deletes a deadline extension.\n     ","lineNumber":145,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes deadline extensions using {@link AttributesDeletionQuery}.\n     ","lineNumber":158,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of deadline extensions with endTime coming up soon\n     * and possibly need a closing email to be sent.\n     ","lineNumber":192,"isOrphan":false}],"allMethods":[{"fullQualified":"public static DeadlineExtensionsDb inst()","name":"inst","type":"DeadlineExtensionsDb","javadoc":null},{"fullQualified":"public DeadlineExtensionAttributes getDeadlineExtension(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"getDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":"\n     * Gets a deadline extension by {@code courseId}, {@code feedbackSessionName},\n     * {@code userEmail} and {@code isInstructor}.\n     "},{"fullQualified":"public DeadlineExtensionAttributes updateDeadlineExtension(DeadlineExtensionAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":"\n     * Updates a deadline extension.\n     *\n     * @return the updated deadline extension\n     * @throws InvalidParametersException if the updated deadline extension is not valid\n     * @throws EntityDoesNotExistException if the deadline extension cannot be found\n     "},{"fullQualified":"public void updateDeadlineExtensionsWithNewEmail(String courseId, String oldEmail, String newEmail, boolean isInstructor) throws InvalidParametersException","name":"updateDeadlineExtensionsWithNewEmail","type":"void","javadoc":"\n     * Updates all deadline extensions of a user in a course with new email.\n     "},{"fullQualified":"private DeadlineExtension getDeadlineExtensionEntity(String id)","name":"getDeadlineExtensionEntity","type":"DeadlineExtension","javadoc":null},{"fullQualified":"public void deleteDeadlineExtension(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"deleteDeadlineExtension","type":"void","javadoc":"\n     * Deletes a deadline extension.\n     "},{"fullQualified":"public void deleteDeadlineExtensions(AttributesDeletionQuery query)","name":"deleteDeadlineExtensions","type":"void","javadoc":"\n     * Deletes deadline extensions using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"private boolean verifyValidDeletionQuery(AttributesDeletionQuery query)","name":"verifyValidDeletionQuery","type":"boolean","javadoc":null},{"fullQualified":"public List<DeadlineExtensionAttributes> getDeadlineExtensionsPossiblyNeedingClosingEmail()","name":"getDeadlineExtensionsPossiblyNeedingClosingEmail","type":"List<DeadlineExtensionAttributes>","javadoc":"\n     * Gets a list of deadline extensions with endTime coming up soon\n     * and possibly need a closing email to be sent.\n     "},{"fullQualified":"private List<DeadlineExtension> getDeadlineExtensionEntitiesPossiblyNeedingClosingEmail()","name":"getDeadlineExtensionEntitiesPossiblyNeedingClosingEmail","type":"List<DeadlineExtension>","javadoc":null},{"fullQualified":" LoadType<DeadlineExtension> load()","name":"load","type":"LoadType<DeadlineExtension>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(DeadlineExtensionAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" DeadlineExtensionAttributes makeAttributes(DeadlineExtension entity)","name":"makeAttributes","type":"DeadlineExtensionAttributes","javadoc":null}],"allConstructors":[{"identifier":"private DeadlineExtensionsDb()","javadocComment":null}]},{"name":"EntitiesDb","fullyQualifiedName":"teammates.storage.api.EntitiesDb","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Error message when trying to create entity that already exist.\n     ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Error message when trying to update entity that does not exist.\n     ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Info message when entity is not saved because it does not change.\n     ","lineNumber":41,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates the entity in the database.\n     *\n     * @return created entity\n     * @throws InvalidParametersException if the entity to create is invalid\n     * @throws EntityAlreadyExistsException if the entity to create already exists\n     ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether there are existing entities in the database.\n     ","lineNumber":87,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Puts an entity in the database without existence checking.\n     *\n     * <p>The document of the associated entity (if applicable) WILL NOT be updated.\n     *\n     * @return created entity\n     * @throws InvalidParametersException if entity to put is not valid\n     ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Puts a collection of entity in the database without existence checking.\n     *\n     * <p>The documents of the associated entities (if applicable) WILL NOT be updated.\n     *\n     * @return created entities\n     * @throws InvalidParametersException if any of entity to add is not valid\n     ","lineNumber":109,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether two values are the same.\n     ","lineNumber":141,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Saves an entity.\n     ","lineNumber":148,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Saves a collection of entities.\n     ","lineNumber":159,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes entity by key.\n     ","lineNumber":170,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes entities by keys.\n     ","lineNumber":178,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts from entity to attributes.\n     ","lineNumber":194,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts a collection of entities to a list of attributes.\n     ","lineNumber":199,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts from entity to attributes.\n     *\n     * @return null if the original entity is null\n     ","lineNumber":210,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a key from a web safe string.\n     ","lineNumber":222,"isOrphan":false}],"allMethods":[{"fullQualified":"public A createEntity(A entityToCreate) throws InvalidParametersException, EntityAlreadyExistsException","name":"createEntity","type":"A","javadoc":"\n     * Creates the entity in the database.\n     *\n     * @return created entity\n     * @throws InvalidParametersException if the entity to create is invalid\n     * @throws EntityAlreadyExistsException if the entity to create already exists\n     "},{"fullQualified":"private A createEntity(A entityToAdd, boolean shouldCheckExistence) throws InvalidParametersException, EntityAlreadyExistsException","name":"createEntity","type":"A","javadoc":null},{"fullQualified":" E convertToEntityForSaving(A entityAttributes) throws EntityAlreadyExistsException","name":"convertToEntityForSaving","type":"E","javadoc":null},{"fullQualified":" abstract boolean hasExistingEntities(A entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":"\n     * Checks whether there are existing entities in the database.\n     "},{"fullQualified":"public A putEntity(A entityToAdd) throws InvalidParametersException","name":"putEntity","type":"A","javadoc":"\n     * Puts an entity in the database without existence checking.\n     *\n     * <p>The document of the associated entity (if applicable) WILL NOT be updated.\n     *\n     * @return created entity\n     * @throws InvalidParametersException if entity to put is not valid\n     "},{"fullQualified":"public List<A> putEntities(Collection<A> entitiesToAdd) throws InvalidParametersException","name":"putEntities","type":"List<A>","javadoc":"\n     * Puts a collection of entity in the database without existence checking.\n     *\n     * <p>The documents of the associated entities (if applicable) WILL NOT be updated.\n     *\n     * @return created entities\n     * @throws InvalidParametersException if any of entity to add is not valid\n     "},{"fullQualified":" boolean hasSameValue(T oldValue, T newValue)","name":"hasSameValue","type":"boolean","javadoc":"\n     * Checks whether two values are the same.\n     "},{"fullQualified":" void saveEntity(E entityToSave)","name":"saveEntity","type":"void","javadoc":"\n     * Saves an entity.\n     "},{"fullQualified":" void saveEntities(Collection<E> entitiesToSave)","name":"saveEntities","type":"void","javadoc":"\n     * Saves a collection of entities.\n     "},{"fullQualified":" void deleteEntity(Key<E> key)","name":"deleteEntity","type":"void","javadoc":"\n     * Deletes entity by key.\n     "},{"fullQualified":" void deleteEntity(List<Key<E>> keys)","name":"deleteEntity","type":"void","javadoc":"\n     * Deletes entities by keys.\n     "},{"fullQualified":" abstract LoadType<E> load()","name":"load","type":"LoadType<E>","javadoc":null},{"fullQualified":" abstract A makeAttributes(E entity)","name":"makeAttributes","type":"A","javadoc":"\n     * Converts from entity to attributes.\n     "},{"fullQualified":" List<A> makeAttributes(Collection<E> entities)","name":"makeAttributes","type":"List<A>","javadoc":"\n     * Converts a collection of entities to a list of attributes.\n     "},{"fullQualified":" A makeAttributesOrNull(E entity)","name":"makeAttributesOrNull","type":"A","javadoc":"\n     * Converts from entity to attributes.\n     *\n     * @return null if the original entity is null\n     "},{"fullQualified":" Optional<Key<E>> makeKeyFromWebSafeString(String webSafeString)","name":"makeKeyFromWebSafeString","type":"Optional<Key<E>>","javadoc":"\n     * Creates a key from a web safe string.\n     "}],"allConstructors":[]},{"name":"FeedbackQuestionsDb","fullyQualifiedName":"teammates.storage.api.FeedbackQuestionsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":28,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets a feedback question by using {@code feedbackQuestionId}.\n     ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback question by using unique constrain: course-session-questionNumber.\n     ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all feedback questions of a session.\n     ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all feedback questions of a session that has certain giver type.\n     ","lineNumber":66,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if there is any feedback questions in a session in a course for the given giver type.\n     ","lineNumber":78,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a feedback question by {@code FeedbackQuestionAttributes.UpdateOptions}.\n     *\n     * @return updated feedback question\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback question cannot be found\n     ","lineNumber":90,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":114,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a feedback question.\n     ","lineNumber":153,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes questions using {@link AttributesDeletionQuery}.\n     ","lineNumber":160,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a question entity if its string key can be decoded.\n     ","lineNumber":177,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback question by using unique constrain: course-session-questionNumber.\n     ","lineNumber":188,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackQuestionsDb inst()","name":"inst","type":"FeedbackQuestionsDb","javadoc":null},{"fullQualified":"public FeedbackQuestionAttributes getFeedbackQuestion(String feedbackQuestionId)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":"\n     * Gets a feedback question by using {@code feedbackQuestionId}.\n     "},{"fullQualified":"public FeedbackQuestionAttributes getFeedbackQuestion(String feedbackSessionName, String courseId, int questionNumber)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":"\n     * Gets a feedback question by using unique constrain: course-session-questionNumber.\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForSession(String feedbackSessionName, String courseId)","name":"getFeedbackQuestionsForSession","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Gets all feedback questions of a session.\n     "},{"fullQualified":"public List<FeedbackQuestionAttributes> getFeedbackQuestionsForGiverType(String feedbackSessionName, String courseId, FeedbackParticipantType giverType)","name":"getFeedbackQuestionsForGiverType","type":"List<FeedbackQuestionAttributes>","javadoc":"\n     * Gets all feedback questions of a session that has certain giver type.\n     "},{"fullQualified":"public boolean hasFeedbackQuestionsForGiverType(String feedbackSessionName, String courseId, FeedbackParticipantType giverType)","name":"hasFeedbackQuestionsForGiverType","type":"boolean","javadoc":"\n     * Checks if there is any feedback questions in a session in a course for the given giver type.\n     "},{"fullQualified":"public FeedbackQuestionAttributes updateFeedbackQuestion(FeedbackQuestionAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":"\n     * Updates a feedback question by {@code FeedbackQuestionAttributes.UpdateOptions}.\n     *\n     * @return updated feedback question\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback question cannot be found\n     "},{"fullQualified":"public void deleteFeedbackQuestion(String feedbackQuestionId)","name":"deleteFeedbackQuestion","type":"void","javadoc":"\n     * Deletes a feedback question.\n     "},{"fullQualified":"public void deleteFeedbackQuestions(AttributesDeletionQuery query)","name":"deleteFeedbackQuestions","type":"void","javadoc":"\n     * Deletes questions using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"private FeedbackQuestion getFeedbackQuestionEntity(String feedbackQuestionId)","name":"getFeedbackQuestionEntity","type":"FeedbackQuestion","javadoc":"\n     * Gets a question entity if its string key can be decoded.\n     "},{"fullQualified":"private FeedbackQuestion getFeedbackQuestionEntity(String feedbackSessionName, String courseId, int questionNumber)","name":"getFeedbackQuestionEntity","type":"FeedbackQuestion","javadoc":"\n     * Gets a feedback question by using unique constrain: course-session-questionNumber.\n     "},{"fullQualified":"private List<FeedbackQuestion> getFeedbackQuestionEntitiesForSession(String feedbackSessionName, String courseId)","name":"getFeedbackQuestionEntitiesForSession","type":"List<FeedbackQuestion>","javadoc":null},{"fullQualified":"private List<FeedbackQuestion> getFeedbackQuestionEntitiesForGiverType(String feedbackSessionName, String courseId, FeedbackParticipantType giverType)","name":"getFeedbackQuestionEntitiesForGiverType","type":"List<FeedbackQuestion>","javadoc":null},{"fullQualified":"private boolean hasFeedbackQuestionEntitiesForGiverType(String feedbackSessionName, String courseId, FeedbackParticipantType giverType)","name":"hasFeedbackQuestionEntitiesForGiverType","type":"boolean","javadoc":null},{"fullQualified":" LoadType<FeedbackQuestion> load()","name":"load","type":"LoadType<FeedbackQuestion>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(FeedbackQuestionAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" FeedbackQuestionAttributes makeAttributes(FeedbackQuestion entity)","name":"makeAttributes","type":"FeedbackQuestionAttributes","javadoc":null}],"allConstructors":[{"identifier":"private FeedbackQuestionsDb()","javadocComment":null}]},{"name":"FeedbackResponseCommentsDb","fullyQualifiedName":"teammates.storage.api.FeedbackResponseCommentsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":37,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets a feedback response comment.\n     ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback response comment by \"fake\" unique constraint response-giver-createdAt.\n     *\n     * <p>The method is only used in testing</p>\n     ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all comments given by a user in a course.\n     ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all response comments for a response.\n     ","lineNumber":75,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets comment associated with the response.\n     *\n     * <p>The comment is given by a feedback participant to explain the response</p>\n     *\n     * @param feedbackResponseId the response id\n     ","lineNumber":84,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all comments in a feedback session of a course.\n     ","lineNumber":97,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all comments of a feedback question of a course.\n     ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all comments which have its corresponding response given to/from a section of a feedback session of a course.\n     ","lineNumber":117,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all comments which have its corresponding response given to/from a section of a feedback question of a course.\n     ","lineNumber":129,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a feedback response comment by {@link FeedbackResponseCommentAttributes.UpdateOptions}.\n     *\n     * @return updated comment\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     ","lineNumber":140,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":165,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the giver email to a new one for all comments in a course.\n     ","lineNumber":196,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the last editor to a new one for all comments in a course.\n     ","lineNumber":218,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a comment.\n     ","lineNumber":242,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes comments using {@link AttributesDeletionQuery}.\n     ","lineNumber":249,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of comments which have a last editor set to the given email.\n     ","lineNumber":293,"isOrphan":false},{"type":"LineComment","text":" creating map to remove duplicates","lineNumber":337,"isOrphan":false},{"type":"LineComment","text":" comment does not have unique constraint","lineNumber":395,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackResponseCommentsDb inst()","name":"inst","type":"FeedbackResponseCommentsDb","javadoc":null},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseComment(long feedbackResponseCommentId)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Gets a feedback response comment.\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseComment(String feedbackResponseId, String commentGiver, Instant createdAt)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Gets a feedback response comment by \"fake\" unique constraint response-giver-createdAt.\n     *\n     * <p>The method is only used in testing</p>\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentForGiver(String courseId, String commentGiver)","name":"getFeedbackResponseCommentForGiver","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all comments given by a user in a course.\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForResponse(String feedbackResponseId)","name":"getFeedbackResponseCommentsForResponse","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all response comments for a response.\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseCommentForResponseFromParticipant(String feedbackResponseId)","name":"getFeedbackResponseCommentForResponseFromParticipant","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Gets comment associated with the response.\n     *\n     * <p>The comment is given by a feedback participant to explain the response</p>\n     *\n     * @param feedbackResponseId the response id\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForSession(String courseId, String feedbackSessionName)","name":"getFeedbackResponseCommentsForSession","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all comments in a feedback session of a course.\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForQuestion(String questionId)","name":"getFeedbackResponseCommentsForQuestion","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all comments of a feedback question of a course.\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForSessionInSection(String courseId, String feedbackSessionName, String section)","name":"getFeedbackResponseCommentsForSessionInSection","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all comments which have its corresponding response given to/from a section of a feedback session of a course.\n     "},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForQuestionInSection(String questionId, String section)","name":"getFeedbackResponseCommentsForQuestionInSection","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Gets all comments which have its corresponding response given to/from a section of a feedback question of a course.\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes updateFeedbackResponseComment(FeedbackResponseCommentAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Updates a feedback response comment by {@link FeedbackResponseCommentAttributes.UpdateOptions}.\n     *\n     * @return updated comment\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     "},{"fullQualified":"public void updateGiverEmailOfFeedbackResponseComments(String courseId, String oldEmail, String updatedEmail)","name":"updateGiverEmailOfFeedbackResponseComments","type":"void","javadoc":"\n     * Updates the giver email to a new one for all comments in a course.\n     "},{"fullQualified":"public void updateLastEditorEmailOfFeedbackResponseComments(String courseId, String oldEmail, String updatedEmail)","name":"updateLastEditorEmailOfFeedbackResponseComments","type":"void","javadoc":"\n     * Updates the last editor to a new one for all comments in a course.\n     "},{"fullQualified":"public void deleteFeedbackResponseComment(long commentId)","name":"deleteFeedbackResponseComment","type":"void","javadoc":"\n     * Deletes a comment.\n     "},{"fullQualified":"public void deleteFeedbackResponseComments(AttributesDeletionQuery query)","name":"deleteFeedbackResponseComments","type":"void","javadoc":"\n     * Deletes comments using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"private FeedbackResponseComment getFeedbackResponseCommentEntity(long feedbackResponseCommentId)","name":"getFeedbackResponseCommentEntity","type":"FeedbackResponseComment","javadoc":null},{"fullQualified":"private FeedbackResponseComment getFeedbackResponseCommentEntity(String feedbackResponseId, String giverEmail, Instant createdAt)","name":"getFeedbackResponseCommentEntity","type":"FeedbackResponseComment","javadoc":null},{"fullQualified":"private List<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForGiverInCourse(String courseId, String giverEmail)","name":"getFeedbackResponseCommentEntitiesForGiverInCourse","type":"List<FeedbackResponseComment>","javadoc":null},{"fullQualified":"private List<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForLastEditorInCourse(String courseId, String lastEditorEmail)","name":"getFeedbackResponseCommentEntitiesForLastEditorInCourse","type":"List<FeedbackResponseComment>","javadoc":"\n     * Gets a list of comments which have a last editor set to the given email.\n     "},{"fullQualified":"private Query<FeedbackResponseComment> getFeedbackResponseCommentsForResponseQuery(String feedbackResponseId)","name":"getFeedbackResponseCommentsForResponseQuery","type":"Query<FeedbackResponseComment>","javadoc":null},{"fullQualified":"private FeedbackResponseComment getFeedbackResponseCommentEntitiesForResponseFromParticipant(String feedbackResponseId)","name":"getFeedbackResponseCommentEntitiesForResponseFromParticipant","type":"FeedbackResponseComment","javadoc":null},{"fullQualified":"private List<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForResponse(String feedbackResponseId)","name":"getFeedbackResponseCommentEntitiesForResponse","type":"List<FeedbackResponseComment>","javadoc":null},{"fullQualified":"private List<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForSession(String courseId, String feedbackSessionName)","name":"getFeedbackResponseCommentEntitiesForSession","type":"List<FeedbackResponseComment>","javadoc":null},{"fullQualified":"private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForQuestion(String questionId)","name":"getFeedbackResponseCommentEntitiesForQuestion","type":"Collection<FeedbackResponseComment>","javadoc":null},{"fullQualified":"private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForQuestionInSection(String questionId, String section)","name":"getFeedbackResponseCommentEntitiesForQuestionInSection","type":"Collection<FeedbackResponseComment>","javadoc":null},{"fullQualified":"private Collection<FeedbackResponseComment> getFeedbackResponseCommentEntitiesForSessionInSection(String courseId, String feedbackSessionName, String section)","name":"getFeedbackResponseCommentEntitiesForSessionInSection","type":"Collection<FeedbackResponseComment>","javadoc":null},{"fullQualified":" LoadType<FeedbackResponseComment> load()","name":"load","type":"LoadType<FeedbackResponseComment>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(FeedbackResponseCommentAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" FeedbackResponseCommentAttributes makeAttributes(FeedbackResponseComment entity)","name":"makeAttributes","type":"FeedbackResponseCommentAttributes","javadoc":null}],"allConstructors":[{"identifier":"private FeedbackResponseCommentsDb()","javadocComment":null}]},{"name":"FeedbackResponsesDb","fullyQualifiedName":"teammates.storage.api.FeedbackResponsesDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":36,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets a set of giver identifiers that has at least one response under a feedback session.\n     ","lineNumber":43,"isOrphan":false},{"type":"LineComment","text":" the following process makes use of the key pattern of feedback response entity","lineNumber":56,"isOrphan":true},{"type":"LineComment","text":" see generateId() in FeedbackResponse.java","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback response.\n     ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback response by unique constraint question-giver-receiver.\n     ","lineNumber":80,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all feedback responses of a question in a specific section.\n     ","lineNumber":95,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all feedback responses for a question.\n     ","lineNumber":107,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether there are responses for a question.\n     ","lineNumber":116,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses of a feedback session in a course.\n     ","lineNumber":129,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses given to/from a section in a feedback session in a course.\n     * Optionally, retrieves by either giver, receiver sections, or both.\n     ","lineNumber":140,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses given by a user for a question.\n     ","lineNumber":155,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses received by a user for a question.\n     ","lineNumber":166,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks whether a user has responses in a session.\n     ","lineNumber":177,"isOrphan":false},{"type":"LineComment","text":" key query is free query","lineNumber":191,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses given to a user in a course.\n     ","lineNumber":196,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses given by a user in a course.\n     ","lineNumber":207,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a feedback response with {@link FeedbackResponseAttributes.UpdateOptions}.\n     *\n     * <p>If the giver/recipient field is changed, the response is updated by recreating the response\n     * as question-giver-recipient is the primary key.\n     *\n     * @return updated feedback response\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     * @throws EntityAlreadyExistsException if the response cannot be updated\n     *         by recreation because of an existent response\n     ","lineNumber":218,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":250,"isOrphan":false},{"type":"LineComment","text":" need to recreate the entity","lineNumber":270,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a feedback response.\n     ","lineNumber":287,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes responses using {@link AttributesDeletionQuery}.\n     ","lineNumber":296,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if there are existing responses in any feedback session in the course.\n     ","lineNumber":316,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of feedback responses created within a specified time range.\n     ","lineNumber":435,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackResponsesDb inst()","name":"inst","type":"FeedbackResponsesDb","javadoc":null},{"fullQualified":"public Set<String> getGiverSetThatAnswerFeedbackSession(String courseId, String feedbackSessionName)","name":"getGiverSetThatAnswerFeedbackSession","type":"Set<String>","javadoc":"\n     * Gets a set of giver identifiers that has at least one response under a feedback session.\n     "},{"fullQualified":"public FeedbackResponseAttributes getFeedbackResponse(String feedbackResponseId)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":"\n     * Gets a feedback response.\n     "},{"fullQualified":"public FeedbackResponseAttributes getFeedbackResponse(String feedbackQuestionId, String giverEmail, String receiverEmail)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":"\n     * Gets a feedback response by unique constraint question-giver-receiver.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForQuestionInSection(String feedbackQuestionId, String section, FeedbackResultFetchType fetchType)","name":"getFeedbackResponsesForQuestionInSection","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all feedback responses of a question in a specific section.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForQuestion(String feedbackQuestionId)","name":"getFeedbackResponsesForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all feedback responses for a question.\n     "},{"fullQualified":"public boolean areThereResponsesForQuestion(String feedbackQuestionId)","name":"areThereResponsesForQuestion","type":"boolean","javadoc":"\n     * Checks whether there are responses for a question.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForSession(String feedbackSessionName, String courseId)","name":"getFeedbackResponsesForSession","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses of a feedback session in a course.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForSessionInSection(String feedbackSessionName, String courseId, String section, FeedbackResultFetchType fetchType)","name":"getFeedbackResponsesForSessionInSection","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses given to/from a section in a feedback session in a course.\n     * Optionally, retrieves by either giver, receiver sections, or both.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesFromGiverForQuestion(String feedbackQuestionId, String giverEmail)","name":"getFeedbackResponsesFromGiverForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses given by a user for a question.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForReceiverForQuestion(String feedbackQuestionId, String receiver)","name":"getFeedbackResponsesForReceiverForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses received by a user for a question.\n     "},{"fullQualified":"public boolean hasResponsesFromGiverInSession(String giverIdentifier, String feedbackSessionName, String courseId)","name":"hasResponsesFromGiverInSession","type":"boolean","javadoc":"\n     * Checks whether a user has responses in a session.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForReceiverForCourse(String courseId, String receiver)","name":"getFeedbackResponsesForReceiverForCourse","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses given to a user in a course.\n     "},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesFromGiverForCourse(String courseId, String giverEmail)","name":"getFeedbackResponsesFromGiverForCourse","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses given by a user in a course.\n     "},{"fullQualified":"public FeedbackResponseAttributes updateFeedbackResponse(FeedbackResponseAttributes.UpdateOptions updateOptions) throws EntityDoesNotExistException, InvalidParametersException, EntityAlreadyExistsException","name":"updateFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":"\n     * Updates a feedback response with {@link FeedbackResponseAttributes.UpdateOptions}.\n     *\n     * <p>If the giver/recipient field is changed, the response is updated by recreating the response\n     * as question-giver-recipient is the primary key.\n     *\n     * @return updated feedback response\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the comment cannot be found\n     * @throws EntityAlreadyExistsException if the response cannot be updated\n     *         by recreation because of an existent response\n     "},{"fullQualified":"public void deleteFeedbackResponse(String responseId)","name":"deleteFeedbackResponse","type":"void","javadoc":"\n     * Deletes a feedback response.\n     "},{"fullQualified":"public void deleteFeedbackResponses(AttributesDeletionQuery query)","name":"deleteFeedbackResponses","type":"void","javadoc":"\n     * Deletes responses using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"public boolean hasFeedbackResponseEntitiesForCourse(String courseId)","name":"hasFeedbackResponseEntitiesForCourse","type":"boolean","javadoc":"\n     * Returns true if there are existing responses in any feedback session in the course.\n     "},{"fullQualified":"private FeedbackResponse getFeedbackResponseEntity(String feedbackResponseId)","name":"getFeedbackResponseEntity","type":"FeedbackResponse","javadoc":null},{"fullQualified":"private Collection<FeedbackResponse> getFeedbackResponseEntitiesForQuestionInSection(String feedbackQuestionId, String section, FeedbackResultFetchType fetchType)","name":"getFeedbackResponseEntitiesForQuestionInSection","type":"Collection<FeedbackResponse>","javadoc":null},{"fullQualified":"private List<FeedbackResponse> getFeedbackResponseEntitiesForQuestion(String feedbackQuestionId)","name":"getFeedbackResponseEntitiesForQuestion","type":"List<FeedbackResponse>","javadoc":null},{"fullQualified":"private List<FeedbackResponse> getFeedbackResponseEntitiesForSession(String feedbackSessionName, String courseId)","name":"getFeedbackResponseEntitiesForSession","type":"List<FeedbackResponse>","javadoc":null},{"fullQualified":"private Collection<FeedbackResponse> getFeedbackResponseEntitiesForSessionInSection(String feedbackSessionName, String courseId, String section, FeedbackResultFetchType fetchType)","name":"getFeedbackResponseEntitiesForSessionInSection","type":"Collection<FeedbackResponse>","javadoc":null},{"fullQualified":"private List<FeedbackResponse> getFeedbackResponseEntitiesFromGiverForQuestion(String feedbackQuestionId, String giverEmail)","name":"getFeedbackResponseEntitiesFromGiverForQuestion","type":"List<FeedbackResponse>","javadoc":null},{"fullQualified":"private List<FeedbackResponse> getFeedbackResponseEntitiesForReceiverForQuestion(String feedbackQuestionId, String receiver)","name":"getFeedbackResponseEntitiesForReceiverForQuestion","type":"List<FeedbackResponse>","javadoc":null},{"fullQualified":"private List<FeedbackResponse> getFeedbackResponseEntitiesForReceiverForCourse(String courseId, String receiver)","name":"getFeedbackResponseEntitiesForReceiverForCourse","type":"List<FeedbackResponse>","javadoc":null},{"fullQualified":"private List<FeedbackResponse> getFeedbackResponseEntitiesFromGiverForCourse(String courseId, String giverEmail)","name":"getFeedbackResponseEntitiesFromGiverForCourse","type":"List<FeedbackResponse>","javadoc":null},{"fullQualified":" LoadType<FeedbackResponse> load()","name":"load","type":"LoadType<FeedbackResponse>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(FeedbackResponseAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" FeedbackResponseAttributes makeAttributes(FeedbackResponse entity)","name":"makeAttributes","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"public int getNumFeedbackResponsesByTimeRange(Instant startTime, Instant endTime)","name":"getNumFeedbackResponsesByTimeRange","type":"int","javadoc":"\n     * Gets the number of feedback responses created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private FeedbackResponsesDb()","javadocComment":null}]},{"name":"FeedbackSessionsDb","fullyQualifiedName":"teammates.storage.api.FeedbackSessionsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":33,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets a list of feedback sessions that is ongoing, i.e. starting before {@code rangeEnd}\n     * and ending after {@code rangeStart}.\n     *\n     * <p>The time window of searching is limited to (range + 30) days (e.g. only sessions starting\n     * before {@code rangeEnd} but not before [{@code rangeStart} - 30 days] will be considered)\n     * to not return excessive amount of results.\n     ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a feedback session that is not soft-deleted.\n     *\n     * @return null if not found or soft-deleted.\n     ","lineNumber":75,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a soft-deleted feedback session.\n     *\n     * @return null if not found or not soft-deleted.\n     ","lineNumber":94,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of all sessions for the given course except those are soft-deleted.\n     ","lineNumber":114,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of all sessions starting from some date for the given course except those are soft-deleted.\n     ","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of sessions for the given course that are soft-deleted.\n     ","lineNumber":134,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of undeleted feedback sessions which start within the last 2 hours\n     * and possibly need an open email to be sent.\n     ","lineNumber":145,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of undeleted feedback sessions which end in the future (2 hour ago onward)\n     * and possibly need a closing email to be sent.\n     ","lineNumber":155,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of undeleted feedback sessions which end in the future (2 hour ago onward)\n     * and possibly need a closed email to be sent.\n     ","lineNumber":165,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of undeleted feedback sessions which open in the future\n     * and possibly need a opening soon email to be sent.\n     ","lineNumber":175,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a list of undeleted published feedback sessions which possibly need a published email\n     * to be sent.\n     ","lineNumber":185,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Update a feedback session by {@link FeedbackSessionAttributes.UpdateOptions}.\n     *\n     * @return updated feedback session\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     ","lineNumber":195,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":220,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Soft-deletes a specific feedback session by its name and course id.\n     *\n     * @return Soft-deletion time of the feedback session.\n     ","lineNumber":279,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Restores a specific soft deleted feedback session.\n     ","lineNumber":301,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a feedback session.\n     ","lineNumber":319,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes sessions using {@link AttributesDeletionQuery}.\n     ","lineNumber":329,"isOrphan":false}],"allMethods":[{"fullQualified":"public static FeedbackSessionsDb inst()","name":"inst","type":"FeedbackSessionsDb","javadoc":null},{"fullQualified":"public List<FeedbackSessionAttributes> getAllOngoingSessions(Instant rangeStart, Instant rangeEnd)","name":"getAllOngoingSessions","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of feedback sessions that is ongoing, i.e. starting before {@code rangeEnd}\n     * and ending after {@code rangeStart}.\n     *\n     * <p>The time window of searching is limited to (range + 30) days (e.g. only sessions starting\n     * before {@code rangeEnd} but not before [{@code rangeStart} - 30 days] will be considered)\n     * to not return excessive amount of results.\n     "},{"fullQualified":"public FeedbackSessionAttributes getFeedbackSession(String courseId, String feedbackSessionName)","name":"getFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Gets a feedback session that is not soft-deleted.\n     *\n     * @return null if not found or soft-deleted.\n     "},{"fullQualified":"public FeedbackSessionAttributes getSoftDeletedFeedbackSession(String courseId, String feedbackSessionName)","name":"getSoftDeletedFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Gets a soft-deleted feedback session.\n     *\n     * @return null if not found or not soft-deleted.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsForCourse(String courseId)","name":"getFeedbackSessionsForCourse","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of all sessions for the given course except those are soft-deleted.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsForCourseStartingAfter(String courseId, Instant after)","name":"getFeedbackSessionsForCourseStartingAfter","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of all sessions starting from some date for the given course except those are soft-deleted.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getSoftDeletedFeedbackSessionsForCourse(String courseId)","name":"getSoftDeletedFeedbackSessionsForCourse","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of sessions for the given course that are soft-deleted.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsPossiblyNeedingOpenEmail()","name":"getFeedbackSessionsPossiblyNeedingOpenEmail","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of undeleted feedback sessions which start within the last 2 hours\n     * and possibly need an open email to be sent.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsPossiblyNeedingClosingEmail()","name":"getFeedbackSessionsPossiblyNeedingClosingEmail","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of undeleted feedback sessions which end in the future (2 hour ago onward)\n     * and possibly need a closing email to be sent.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsPossiblyNeedingClosedEmail()","name":"getFeedbackSessionsPossiblyNeedingClosedEmail","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of undeleted feedback sessions which end in the future (2 hour ago onward)\n     * and possibly need a closed email to be sent.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsPossiblyNeedingOpeningSoonEmail()","name":"getFeedbackSessionsPossiblyNeedingOpeningSoonEmail","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of undeleted feedback sessions which open in the future\n     * and possibly need a opening soon email to be sent.\n     "},{"fullQualified":"public List<FeedbackSessionAttributes> getFeedbackSessionsPossiblyNeedingPublishedEmail()","name":"getFeedbackSessionsPossiblyNeedingPublishedEmail","type":"List<FeedbackSessionAttributes>","javadoc":"\n     * Gets a list of undeleted published feedback sessions which possibly need a published email\n     * to be sent.\n     "},{"fullQualified":"public FeedbackSessionAttributes updateFeedbackSession(FeedbackSessionAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Update a feedback session by {@link FeedbackSessionAttributes.UpdateOptions}.\n     *\n     * @return updated feedback session\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the feedback session cannot be found\n     "},{"fullQualified":"public Instant softDeleteFeedbackSession(String feedbackSessionName, String courseId) throws EntityDoesNotExistException","name":"softDeleteFeedbackSession","type":"Instant","javadoc":"\n     * Soft-deletes a specific feedback session by its name and course id.\n     *\n     * @return Soft-deletion time of the feedback session.\n     "},{"fullQualified":"public void restoreDeletedFeedbackSession(String feedbackSessionName, String courseId) throws EntityDoesNotExistException","name":"restoreDeletedFeedbackSession","type":"void","javadoc":"\n     * Restores a specific soft deleted feedback session.\n     "},{"fullQualified":"public void deleteFeedbackSession(String feedbackSessionName, String courseId)","name":"deleteFeedbackSession","type":"void","javadoc":"\n     * Deletes a feedback session.\n     "},{"fullQualified":"public void deleteFeedbackSessions(AttributesDeletionQuery query)","name":"deleteFeedbackSessions","type":"void","javadoc":"\n     * Deletes sessions using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"private List<FeedbackSession> getFeedbackSessionEntitiesForCourse(String courseId)","name":"getFeedbackSessionEntitiesForCourse","type":"List<FeedbackSession>","javadoc":null},{"fullQualified":"private List<FeedbackSession> getFeedbackSessionEntitiesForCourseStartingAfter(String courseId, Instant after)","name":"getFeedbackSessionEntitiesForCourseStartingAfter","type":"List<FeedbackSession>","javadoc":null},{"fullQualified":"private List<FeedbackSession> getFeedbackSessionEntitiesPossiblyNeedingOpeningSoonEmail()","name":"getFeedbackSessionEntitiesPossiblyNeedingOpeningSoonEmail","type":"List<FeedbackSession>","javadoc":null},{"fullQualified":"private List<FeedbackSession> getFeedbackSessionEntitiesPossiblyNeedingOpenEmail()","name":"getFeedbackSessionEntitiesPossiblyNeedingOpenEmail","type":"List<FeedbackSession>","javadoc":null},{"fullQualified":"private List<FeedbackSession> getFeedbackSessionEntitiesPossiblyNeedingClosingEmail()","name":"getFeedbackSessionEntitiesPossiblyNeedingClosingEmail","type":"List<FeedbackSession>","javadoc":null},{"fullQualified":"private List<FeedbackSession> getFeedbackSessionEntitiesPossiblyNeedingClosedEmail()","name":"getFeedbackSessionEntitiesPossiblyNeedingClosedEmail","type":"List<FeedbackSession>","javadoc":null},{"fullQualified":"private List<FeedbackSession> getFeedbackSessionEntitiesPossiblyNeedingPublishedEmail()","name":"getFeedbackSessionEntitiesPossiblyNeedingPublishedEmail","type":"List<FeedbackSession>","javadoc":null},{"fullQualified":"private FeedbackSession getFeedbackSessionEntity(String feedbackSessionName, String courseId)","name":"getFeedbackSessionEntity","type":"FeedbackSession","javadoc":null},{"fullQualified":" LoadType<FeedbackSession> load()","name":"load","type":"LoadType<FeedbackSession>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(FeedbackSessionAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" FeedbackSessionAttributes makeAttributes(FeedbackSession entity)","name":"makeAttributes","type":"FeedbackSessionAttributes","javadoc":null}],"allConstructors":[{"identifier":"private FeedbackSessionsDb()","javadocComment":null}]},{"name":"InstructorsDb","fullyQualifiedName":"teammates.storage.api.InstructorsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":40,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given instructor.\n     ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes search document for the given instructor by using {@code instructorUniqueId}.\n     ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Regenerates the registration key of an instructor in a course.\n     *\n     * @return the updated instructor\n     * @throws EntityAlreadyExistsException if a new registration key could not be generated\n     ","lineNumber":65,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Searches all instructors in the system.\n     *\n     * <p>This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search instructors in the whole system.\n     ","lineNumber":86,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the given instructors exist in the given course.\n     ","lineNumber":103,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an instructor by unique constraint courseId-email.\n     ","lineNumber":119,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an instructor by unique ID.\n     ","lineNumber":129,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an instructor by unique constraint courseId-googleId.\n     ","lineNumber":139,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an instructor by unique constraint registrationKey.\n     ","lineNumber":149,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all instructors associated with a googleId.\n     *\n     * @param omitArchived whether archived instructors should be omitted or not\n     ","lineNumber":158,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the emails of all instructors of a course.\n     ","lineNumber":169,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all instructors of a course.\n     ","lineNumber":183,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all instructors that will be displayed to students of a course.\n     ","lineNumber":192,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithGoogleId}.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     ","lineNumber":201,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":225,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithEmail}.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     ","lineNumber":256,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":280,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the instructor specified by courseId and email.\n     *\n     * <p>Fails silently if the student does not exist.\n     ","lineNumber":310,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes instructors using {@link AttributesDeletionQuery}.\n     ","lineNumber":330,"isOrphan":false},{"type":"LineComment","text":" If registration key detected is not unique, something is wrong","lineNumber":376,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if there are any instructor entities associated with the googleId.\n     ","lineNumber":389,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Omits instructors with isArchived == omitArchived.\n     * This means that the corresponding course is archived by the instructor.\n     ","lineNumber":404,"isOrphan":false},{"type":"LineComment","text":" cannot use direct key query as email of an instructor can be changed","lineNumber":428,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of instructors created within a specified time range.\n     ","lineNumber":461,"isOrphan":false}],"allMethods":[{"fullQualified":"public static InstructorsDb inst()","name":"inst","type":"InstructorsDb","javadoc":null},{"fullQualified":"private InstructorSearchManager getSearchManager()","name":"getSearchManager","type":"InstructorSearchManager","javadoc":null},{"fullQualified":"public void putDocument(InstructorAttributes instructor) throws SearchServiceException","name":"putDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given instructor.\n     "},{"fullQualified":"public void deleteDocumentByInstructorId(String instructorUniqueId)","name":"deleteDocumentByInstructorId","type":"void","javadoc":"\n     * Removes search document for the given instructor by using {@code instructorUniqueId}.\n     "},{"fullQualified":"public InstructorAttributes regenerateEntityKey(InstructorAttributes originalInstructor) throws EntityAlreadyExistsException","name":"regenerateEntityKey","type":"InstructorAttributes","javadoc":"\n     * Regenerates the registration key of an instructor in a course.\n     *\n     * @return the updated instructor\n     * @throws EntityAlreadyExistsException if a new registration key could not be generated\n     "},{"fullQualified":"public List<InstructorAttributes> searchInstructorsInWholeSystem(String queryString) throws SearchServiceException","name":"searchInstructorsInWholeSystem","type":"List<InstructorAttributes>","javadoc":"\n     * Searches all instructors in the system.\n     *\n     * <p>This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search instructors in the whole system.\n     "},{"fullQualified":"public boolean hasExistingInstructorsInCourse(String courseId, Collection<String> instructorEmailAddresses)","name":"hasExistingInstructorsInCourse","type":"boolean","javadoc":"\n     * Checks if the given instructors exist in the given course.\n     "},{"fullQualified":"public InstructorAttributes getInstructorForEmail(String courseId, String email)","name":"getInstructorForEmail","type":"InstructorAttributes","javadoc":"\n     * Gets an instructor by unique constraint courseId-email.\n     "},{"fullQualified":"public InstructorAttributes getInstructorById(String courseId, String email)","name":"getInstructorById","type":"InstructorAttributes","javadoc":"\n     * Gets an instructor by unique ID.\n     "},{"fullQualified":"public InstructorAttributes getInstructorForGoogleId(String courseId, String googleId)","name":"getInstructorForGoogleId","type":"InstructorAttributes","javadoc":"\n     * Gets an instructor by unique constraint courseId-googleId.\n     "},{"fullQualified":"public InstructorAttributes getInstructorForRegistrationKey(String registrationKey)","name":"getInstructorForRegistrationKey","type":"InstructorAttributes","javadoc":"\n     * Gets an instructor by unique constraint registrationKey.\n     "},{"fullQualified":"public List<InstructorAttributes> getInstructorsForGoogleId(String googleId, boolean omitArchived)","name":"getInstructorsForGoogleId","type":"List<InstructorAttributes>","javadoc":"\n     * Gets all instructors associated with a googleId.\n     *\n     * @param omitArchived whether archived instructors should be omitted or not\n     "},{"fullQualified":"public List<String> getInstructorEmailsForCourse(String courseId)","name":"getInstructorEmailsForCourse","type":"List<String>","javadoc":"\n     * Gets the emails of all instructors of a course.\n     "},{"fullQualified":"public List<InstructorAttributes> getInstructorsForCourse(String courseId)","name":"getInstructorsForCourse","type":"List<InstructorAttributes>","javadoc":"\n     * Gets all instructors of a course.\n     "},{"fullQualified":"public List<InstructorAttributes> getInstructorsDisplayedToStudents(String courseId)","name":"getInstructorsDisplayedToStudents","type":"List<InstructorAttributes>","javadoc":"\n     * Gets all instructors that will be displayed to students of a course.\n     "},{"fullQualified":"public InstructorAttributes updateInstructorByGoogleId(InstructorAttributes.UpdateOptionsWithGoogleId updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateInstructorByGoogleId","type":"InstructorAttributes","javadoc":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithGoogleId}.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     "},{"fullQualified":"public InstructorAttributes updateInstructorByEmail(InstructorAttributes.UpdateOptionsWithEmail updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateInstructorByEmail","type":"InstructorAttributes","javadoc":"\n     * Updates an instructor by {@link InstructorAttributes.UpdateOptionsWithEmail}.\n     *\n     * @return updated instructor\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the instructor cannot be found\n     "},{"fullQualified":"public void deleteInstructor(String courseId, String email)","name":"deleteInstructor","type":"void","javadoc":"\n     * Deletes the instructor specified by courseId and email.\n     *\n     * <p>Fails silently if the student does not exist.\n     "},{"fullQualified":"public void deleteInstructors(AttributesDeletionQuery query)","name":"deleteInstructors","type":"void","javadoc":"\n     * Deletes instructors using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"private Instructor getInstructorEntityForGoogleId(String courseId, String googleId)","name":"getInstructorEntityForGoogleId","type":"Instructor","javadoc":null},{"fullQualified":"private Instructor getInstructorEntityForEmail(String courseId, String email)","name":"getInstructorEntityForEmail","type":"Instructor","javadoc":null},{"fullQualified":"private Instructor getInstructorEntityById(String courseId, String email)","name":"getInstructorEntityById","type":"Instructor","javadoc":null},{"fullQualified":"private List<Instructor> getInstructorEntitiesThatAreDisplayedInCourse(String courseId)","name":"getInstructorEntitiesThatAreDisplayedInCourse","type":"List<Instructor>","javadoc":null},{"fullQualified":"private Instructor getInstructorEntityForRegistrationKey(String key)","name":"getInstructorEntityForRegistrationKey","type":"Instructor","javadoc":null},{"fullQualified":"public boolean hasInstructorsForGoogleId(String googleId)","name":"hasInstructorsForGoogleId","type":"boolean","javadoc":"\n     * Returns true if there are any instructor entities associated with the googleId.\n     "},{"fullQualified":"private Query<Instructor> getInstructorsForGoogleIdQuery(String googleId)","name":"getInstructorsForGoogleIdQuery","type":"Query<Instructor>","javadoc":null},{"fullQualified":"private List<Instructor> getInstructorEntitiesForGoogleId(String googleId)","name":"getInstructorEntitiesForGoogleId","type":"List<Instructor>","javadoc":null},{"fullQualified":"private List<Instructor> getInstructorEntitiesForGoogleId(String googleId, boolean omitArchived)","name":"getInstructorEntitiesForGoogleId","type":"List<Instructor>","javadoc":"\n     * Omits instructors with isArchived == omitArchived.\n     * This means that the corresponding course is archived by the instructor.\n     "},{"fullQualified":"private List<Instructor> getInstructorEntitiesForCourse(String courseId)","name":"getInstructorEntitiesForCourse","type":"List<Instructor>","javadoc":null},{"fullQualified":" LoadType<Instructor> load()","name":"load","type":"LoadType<Instructor>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(InstructorAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" InstructorAttributes makeAttributes(Instructor entity)","name":"makeAttributes","type":"InstructorAttributes","javadoc":null},{"fullQualified":" Instructor convertToEntityForSaving(InstructorAttributes attributes) throws EntityAlreadyExistsException","name":"convertToEntityForSaving","type":"Instructor","javadoc":null},{"fullQualified":"public int getNumInstructorsByTimeRange(Instant startTime, Instant endTime)","name":"getNumInstructorsByTimeRange","type":"int","javadoc":"\n     * Gets the number of instructors created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private InstructorsDb()","javadocComment":null}]},{"name":"NotificationsDb","fullyQualifiedName":"teammates.storage.api.NotificationsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":29,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets a notification by its unique ID.\n     ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all notifications.\n     ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets notifications by {@code targetUser}.\n     *\n     * @return a list of notifications for the specified targetUser.\n     ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a notification with {@link NotificationAttributes.UpdateOptions}.\n     *\n     * @return updated notification\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if notification cannot be found\n     ","lineNumber":85,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a notification by its unique ID.\n     *\n     * <p>Fails silently if there is no such notification.\n     ","lineNumber":114,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if a notification associated with {@code notificationId} exists.\n     ","lineNumber":125,"isOrphan":false}],"allMethods":[{"fullQualified":"public static NotificationsDb inst()","name":"inst","type":"NotificationsDb","javadoc":null},{"fullQualified":"public NotificationAttributes getNotification(String notificationId)","name":"getNotification","type":"NotificationAttributes","javadoc":"\n     * Gets a notification by its unique ID.\n     "},{"fullQualified":"public List<NotificationAttributes> getAllNotifications()","name":"getAllNotifications","type":"List<NotificationAttributes>","javadoc":"\n     * Gets all notifications.\n     "},{"fullQualified":"public List<NotificationAttributes> getActiveNotificationsByTargetUser(NotificationTargetUser targetUser)","name":"getActiveNotificationsByTargetUser","type":"List<NotificationAttributes>","javadoc":"\n     * Gets notifications by {@code targetUser}.\n     *\n     * @return a list of notifications for the specified targetUser.\n     "},{"fullQualified":"public NotificationAttributes updateNotification(NotificationAttributes.UpdateOptions updateOptions) throws InvalidParametersException, EntityDoesNotExistException","name":"updateNotification","type":"NotificationAttributes","javadoc":"\n     * Updates a notification with {@link NotificationAttributes.UpdateOptions}.\n     *\n     * @return updated notification\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if notification cannot be found\n     "},{"fullQualified":"public void deleteNotification(String notificationId)","name":"deleteNotification","type":"void","javadoc":"\n     * Deletes a notification by its unique ID.\n     *\n     * <p>Fails silently if there is no such notification.\n     "},{"fullQualified":"public boolean doesNotificationExists(String notificationId)","name":"doesNotificationExists","type":"boolean","javadoc":"\n     * Checks if a notification associated with {@code notificationId} exists.\n     "},{"fullQualified":"private Notification getNotificationEntity(String notificationId)","name":"getNotificationEntity","type":"Notification","javadoc":null},{"fullQualified":" LoadType<Notification> load()","name":"load","type":"LoadType<Notification>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(NotificationAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" NotificationAttributes makeAttributes(Notification entity)","name":"makeAttributes","type":"NotificationAttributes","javadoc":null}],"allConstructors":[{"identifier":"private NotificationsDb()","javadocComment":null}]},{"name":"OfyHelper","fullyQualifiedName":"teammates.storage.api.OfyHelper","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Register entity classes in Objectify service.\n     ","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" enable the ability to use java.time.Instant to issue query","lineNumber":56,"isOrphan":false},{"type":"LineComment","text":" Invoked by Jetty at application startup.","lineNumber":62,"isOrphan":false},{"type":"LineComment","text":" Nothing to do","lineNumber":69,"isOrphan":true}],"allMethods":[{"fullQualified":"private static void initializeDatastore()","name":"initializeDatastore","type":"void","javadoc":null},{"fullQualified":"public static void registerEntityClasses()","name":"registerEntityClasses","type":"void","javadoc":"\n     * Register entity classes in Objectify service.\n     "},{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":null},{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ProfilesDb","fullyQualifiedName":"teammates.storage.api.ProfilesDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":26,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets the student profile associated with {@code accountGoogleId}.\n     *\n     * @return null if the profile was not found\n     ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates/Creates the profile using {@link StudentProfileAttributes.UpdateOptions}.\n     *\n     * @return updated student profile\n     * @throws InvalidParametersException if attributes to update are not valid\n     ","lineNumber":42,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":66,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the student profile associated with the {@code googleId}.\n     *\n     * <p>Fails silently if the student profile doesn't exist.</p>\n     ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the profile entity associated with the {@code googleId}.\n     *\n     * @return null if entity is not found\n     ","lineNumber":107,"isOrphan":false}],"allMethods":[{"fullQualified":"public static ProfilesDb inst()","name":"inst","type":"ProfilesDb","javadoc":null},{"fullQualified":"public StudentProfileAttributes getStudentProfile(String accountGoogleId)","name":"getStudentProfile","type":"StudentProfileAttributes","javadoc":"\n     * Gets the student profile associated with {@code accountGoogleId}.\n     *\n     * @return null if the profile was not found\n     "},{"fullQualified":"public StudentProfileAttributes updateOrCreateStudentProfile(StudentProfileAttributes.UpdateOptions updateOptions) throws InvalidParametersException","name":"updateOrCreateStudentProfile","type":"StudentProfileAttributes","javadoc":"\n     * Updates/Creates the profile using {@link StudentProfileAttributes.UpdateOptions}.\n     *\n     * @return updated student profile\n     * @throws InvalidParametersException if attributes to update are not valid\n     "},{"fullQualified":"public void deleteStudentProfile(String googleId)","name":"deleteStudentProfile","type":"void","javadoc":"\n     * Deletes the student profile associated with the {@code googleId}.\n     *\n     * <p>Fails silently if the student profile doesn't exist.</p>\n     "},{"fullQualified":"private StudentProfile getStudentProfileEntityFromDb(String googleId)","name":"getStudentProfileEntityFromDb","type":"StudentProfile","javadoc":"\n     * Gets the profile entity associated with the {@code googleId}.\n     *\n     * @return null if entity is not found\n     "},{"fullQualified":" LoadType<StudentProfile> load()","name":"load","type":"LoadType<StudentProfile>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(StudentProfileAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" StudentProfileAttributes makeAttributes(StudentProfile entity)","name":"makeAttributes","type":"StudentProfileAttributes","javadoc":null}],"allConstructors":[{"identifier":"private ProfilesDb()","javadocComment":null}]},{"name":"StudentsDb","fullyQualifiedName":"teammates.storage.api.StudentsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":44,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given student.\n     ","lineNumber":55,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Searches for students.\n     *\n     * @param instructors the constraint that restricts the search result\n     ","lineNumber":62,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Searches all students in the system.\n     *\n     * <p>This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search instructors in the whole system.\n     ","lineNumber":76,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes search document for the given student by using {@code studentUniqueId}.\n     ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Regenerates the registration key of a student in a course.\n     *\n     * @return the updated student\n     * @throws EntityAlreadyExistsException if a new registration key could not be generated\n     ","lineNumber":99,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the given students exist in the given course.\n     ","lineNumber":119,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a student by unique ID courseId-email.\n     ","lineNumber":135,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets list of students by email.\n     ","lineNumber":145,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a student by unique constraint courseId-googleId.\n     ","lineNumber":155,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a student by unique constraint registrationKey.\n     ","lineNumber":170,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all students associated with a googleId.\n     ","lineNumber":179,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the total number of students of a course.\n     ","lineNumber":188,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all students of a course.\n     ","lineNumber":197,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the first {@code batchSize} students of the course.\n     ","lineNumber":206,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all students of a section of a course.\n     ","lineNumber":215,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all students of a team of a course.\n     ","lineNumber":225,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets count of students of a team of a course.\n     ","lineNumber":235,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all unregistered students of a course.\n     ","lineNumber":245,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates a student by {@link StudentAttributes.UpdateOptions}.\n     *\n     * <p>If the student's email is changed, the student is re-created.\n     *\n     * @return updated student\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the student cannot be found\n     * @throws EntityAlreadyExistsException if the student cannot be updated\n     *         by recreation because of an existent student\n     ","lineNumber":262,"isOrphan":false},{"type":"LineComment","text":" delete the old student","lineNumber":294,"isOrphan":false},{"type":"LineComment","text":" update only if change","lineNumber":299,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a student in a course with email.\n     *\n     * <p>Fails silently if there is no such student.\n     ","lineNumber":323,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes students using {@link AttributesDeletionQuery}.\n     ","lineNumber":339,"isOrphan":false},{"type":"LineComment","text":" If registration key detected is not unique, something is wrong","lineNumber":365,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if there are any student entities associated with the googleId.\n     ","lineNumber":396,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of students created within a specified time range.\n     ","lineNumber":470,"isOrphan":false}],"allMethods":[{"fullQualified":"public static StudentsDb inst()","name":"inst","type":"StudentsDb","javadoc":null},{"fullQualified":"private StudentSearchManager getSearchManager()","name":"getSearchManager","type":"StudentSearchManager","javadoc":null},{"fullQualified":"public void putDocument(StudentAttributes student) throws SearchServiceException","name":"putDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given student.\n     "},{"fullQualified":"public List<StudentAttributes> search(String queryString, List<InstructorAttributes> instructors) throws SearchServiceException","name":"search","type":"List<StudentAttributes>","javadoc":"\n     * Searches for students.\n     *\n     * @param instructors the constraint that restricts the search result\n     "},{"fullQualified":"public List<StudentAttributes> searchStudentsInWholeSystem(String queryString) throws SearchServiceException","name":"searchStudentsInWholeSystem","type":"List<StudentAttributes>","javadoc":"\n     * Searches all students in the system.\n     *\n     * <p>This method should be used by admin only since the searching does not restrict the\n     * visibility according to the logged-in user's google ID. This is used by admin to\n     * search instructors in the whole system.\n     "},{"fullQualified":"public void deleteDocumentByStudentId(String studentUniqueId)","name":"deleteDocumentByStudentId","type":"void","javadoc":"\n     * Removes search document for the given student by using {@code studentUniqueId}.\n     "},{"fullQualified":"public StudentAttributes regenerateEntityKey(StudentAttributes originalStudent) throws EntityAlreadyExistsException","name":"regenerateEntityKey","type":"StudentAttributes","javadoc":"\n     * Regenerates the registration key of a student in a course.\n     *\n     * @return the updated student\n     * @throws EntityAlreadyExistsException if a new registration key could not be generated\n     "},{"fullQualified":"public boolean hasExistingStudentsInCourse(String courseId, Collection<String> studentEmailAddresses)","name":"hasExistingStudentsInCourse","type":"boolean","javadoc":"\n     * Checks if the given students exist in the given course.\n     "},{"fullQualified":"public StudentAttributes getStudentForEmail(String courseId, String email)","name":"getStudentForEmail","type":"StudentAttributes","javadoc":"\n     * Gets a student by unique ID courseId-email.\n     "},{"fullQualified":"public List<StudentAttributes> getAllStudentsForEmail(String email)","name":"getAllStudentsForEmail","type":"List<StudentAttributes>","javadoc":"\n     * Gets list of students by email.\n     "},{"fullQualified":"public StudentAttributes getStudentForGoogleId(String courseId, String googleId)","name":"getStudentForGoogleId","type":"StudentAttributes","javadoc":"\n     * Gets a student by unique constraint courseId-googleId.\n     "},{"fullQualified":"public StudentAttributes getStudentForRegistrationKey(String registrationKey)","name":"getStudentForRegistrationKey","type":"StudentAttributes","javadoc":"\n     * Gets a student by unique constraint registrationKey.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForGoogleId(String googleId)","name":"getStudentsForGoogleId","type":"List<StudentAttributes>","javadoc":"\n     * Gets all students associated with a googleId.\n     "},{"fullQualified":"public int getNumberOfStudentsForCourse(String courseId)","name":"getNumberOfStudentsForCourse","type":"int","javadoc":"\n     * Gets the total number of students of a course.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForCourse(String courseId)","name":"getStudentsForCourse","type":"List<StudentAttributes>","javadoc":"\n     * Gets all students of a course.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForCourse(String courseId, int batchSize)","name":"getStudentsForCourse","type":"List<StudentAttributes>","javadoc":"\n     * Gets the first {@code batchSize} students of the course.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForSection(String sectionName, String courseId)","name":"getStudentsForSection","type":"List<StudentAttributes>","javadoc":"\n     * Gets all students of a section of a course.\n     "},{"fullQualified":"public List<StudentAttributes> getStudentsForTeam(String teamName, String courseId)","name":"getStudentsForTeam","type":"List<StudentAttributes>","javadoc":"\n     * Gets all students of a team of a course.\n     "},{"fullQualified":"public int getStudentCountForTeam(String teamName, String courseId)","name":"getStudentCountForTeam","type":"int","javadoc":"\n     * Gets count of students of a team of a course.\n     "},{"fullQualified":"public List<StudentAttributes> getUnregisteredStudentsForCourse(String courseId)","name":"getUnregisteredStudentsForCourse","type":"List<StudentAttributes>","javadoc":"\n     * Gets all unregistered students of a course.\n     "},{"fullQualified":"public StudentAttributes updateStudent(StudentAttributes.UpdateOptions updateOptions) throws EntityDoesNotExistException, InvalidParametersException, EntityAlreadyExistsException","name":"updateStudent","type":"StudentAttributes","javadoc":"\n     * Updates a student by {@link StudentAttributes.UpdateOptions}.\n     *\n     * <p>If the student's email is changed, the student is re-created.\n     *\n     * @return updated student\n     * @throws InvalidParametersException if attributes to update are not valid\n     * @throws EntityDoesNotExistException if the student cannot be found\n     * @throws EntityAlreadyExistsException if the student cannot be updated\n     *         by recreation because of an existent student\n     "},{"fullQualified":"public void deleteStudent(String courseId, String email)","name":"deleteStudent","type":"void","javadoc":"\n     * Deletes a student in a course with email.\n     *\n     * <p>Fails silently if there is no such student.\n     "},{"fullQualified":"public void deleteStudents(AttributesDeletionQuery query)","name":"deleteStudents","type":"void","javadoc":"\n     * Deletes students using {@link AttributesDeletionQuery}.\n     "},{"fullQualified":"private CourseStudent getCourseStudentEntityForEmail(String courseId, String email)","name":"getCourseStudentEntityForEmail","type":"CourseStudent","javadoc":null},{"fullQualified":"private List<CourseStudent> getAllCourseStudentEntitiesForEmail(String email)","name":"getAllCourseStudentEntitiesForEmail","type":"List<CourseStudent>","javadoc":null},{"fullQualified":"private CourseStudent getCourseStudentEntityForRegistrationKey(String registrationKey)","name":"getCourseStudentEntityForRegistrationKey","type":"CourseStudent","javadoc":null},{"fullQualified":"private Query<CourseStudent> getCourseStudentsForCourseQuery(String courseId)","name":"getCourseStudentsForCourseQuery","type":"Query<CourseStudent>","javadoc":null},{"fullQualified":"private Query<CourseStudent> getCourseStudentsForCourseQuery(String courseId, int batchSize)","name":"getCourseStudentsForCourseQuery","type":"Query<CourseStudent>","javadoc":null},{"fullQualified":"private List<CourseStudent> getCourseStudentEntitiesForCourse(String courseId)","name":"getCourseStudentEntitiesForCourse","type":"List<CourseStudent>","javadoc":null},{"fullQualified":"private List<CourseStudent> getCourseStudentEntitiesForCourse(String courseId, int batchSize)","name":"getCourseStudentEntitiesForCourse","type":"List<CourseStudent>","javadoc":null},{"fullQualified":"public boolean hasStudentsForGoogleId(String googleId)","name":"hasStudentsForGoogleId","type":"boolean","javadoc":"\n     * Returns true if there are any student entities associated with the googleId.\n     "},{"fullQualified":"private Query<CourseStudent> getCourseStudentsForGoogleIdQuery(String googleId)","name":"getCourseStudentsForGoogleIdQuery","type":"Query<CourseStudent>","javadoc":null},{"fullQualified":"private List<CourseStudent> getCourseStudentEntitiesForGoogleId(String googleId)","name":"getCourseStudentEntitiesForGoogleId","type":"List<CourseStudent>","javadoc":null},{"fullQualified":"private List<CourseStudent> getCourseStudentEntitiesForTeam(String teamName, String courseId)","name":"getCourseStudentEntitiesForTeam","type":"List<CourseStudent>","javadoc":null},{"fullQualified":"private int getCourseStudentCountForTeam(String teamName, String courseId)","name":"getCourseStudentCountForTeam","type":"int","javadoc":null},{"fullQualified":"private List<CourseStudent> getCourseStudentEntitiesForSection(String sectionName, String courseId)","name":"getCourseStudentEntitiesForSection","type":"List<CourseStudent>","javadoc":null},{"fullQualified":" LoadType<CourseStudent> load()","name":"load","type":"LoadType<CourseStudent>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(StudentAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" StudentAttributes makeAttributes(CourseStudent entity)","name":"makeAttributes","type":"StudentAttributes","javadoc":null},{"fullQualified":" CourseStudent convertToEntityForSaving(StudentAttributes attributes) throws EntityAlreadyExistsException","name":"convertToEntityForSaving","type":"CourseStudent","javadoc":null},{"fullQualified":"public int getNumStudentsByTimeRange(Instant startTime, Instant endTime)","name":"getNumStudentsByTimeRange","type":"int","javadoc":"\n     * Gets the number of students created within a specified time range.\n     "}],"allConstructors":[{"identifier":"private StudentsDb()","javadocComment":null}]},{"name":"UsageStatisticsDb","fullyQualifiedName":"teammates.storage.api.UsageStatisticsDb","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevent initialization","lineNumber":25,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets a list of statistics objects between start time and end time.\n     ","lineNumber":32,"isOrphan":false}],"allMethods":[{"fullQualified":"public static UsageStatisticsDb inst()","name":"inst","type":"UsageStatisticsDb","javadoc":null},{"fullQualified":"public List<UsageStatisticsAttributes> getUsageStatisticsForTimeRange(Instant startTime, Instant endTime)","name":"getUsageStatisticsForTimeRange","type":"List<UsageStatisticsAttributes>","javadoc":"\n     * Gets a list of statistics objects between start time and end time.\n     "},{"fullQualified":" LoadType<UsageStatistics> load()","name":"load","type":"LoadType<UsageStatistics>","javadoc":null},{"fullQualified":" boolean hasExistingEntities(UsageStatisticsAttributes entityToCreate)","name":"hasExistingEntities","type":"boolean","javadoc":null},{"fullQualified":" UsageStatisticsAttributes makeAttributes(UsageStatistics entity)","name":"makeAttributes","type":"UsageStatisticsAttributes","javadoc":null}],"allConstructors":[{"identifier":"private UsageStatisticsDb()","javadocComment":null}]},{"name":"Account","fullyQualifiedName":"teammates.storage.entity.Account","isInterface":false,"codeComments":[{"type":"LineComment","text":" required by Objectify","lineNumber":37,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Instantiates a new account.\n     *\n     * @param googleId the Google ID of the user.\n     * @param name The name of the user.\n     * @param email The official email of the user.\n     * @param readNotifications The notifications that the user has read, stored in a map of ID to end time.\n     ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Retrieves the account's read notifications map.\n     * Returns an empty map if the account does not yet have the readNotifications attribute.\n     ","lineNumber":80,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String googleId)","name":"setGoogleId","type":"void","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public Map<String, Instant> getReadNotifications()","name":"getReadNotifications","type":"Map<String,Instant>","javadoc":"\n     * Retrieves the account's read notifications map.\n     * Returns an empty map if the account does not yet have the readNotifications attribute.\n     "},{"fullQualified":"public void setReadNotifications(Map<String, Instant> readNotifications)","name":"setReadNotifications","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private Account()","javadocComment":null},{"identifier":"public Account(String googleId, String name, String email, Map<String, Instant> readNotifications)","javadocComment":"\n     * Instantiates a new account.\n     *\n     * @param googleId the Google ID of the user.\n     * @param name The name of the user.\n     * @param email The official email of the user.\n     * @param readNotifications The notifications that the user has read, stored in a map of ID to end time.\n     "}]},{"name":"AccountRequest","fullyQualifiedName":"teammates.storage.entity.AccountRequest","isInterface":false,"codeComments":[{"type":"LineComment","text":" required by Objectify","lineNumber":39,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Generates an unique ID for the account request.\n     ","lineNumber":108,"isOrphan":false},{"type":"LineComment","text":" Format: email%institute e.g., adam@gmail.com%TEAMMATES_TEST_INSTITUTE","lineNumber":112,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generate unique registration key for the account request.\n     * The key contains random elements to avoid being guessed.\n     ","lineNumber":116,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":null},{"fullQualified":"public void setId(String id)","name":"setId","type":"void","javadoc":null},{"fullQualified":"public String getRegistrationKey()","name":"getRegistrationKey","type":"String","javadoc":null},{"fullQualified":"public void setRegistrationKey(String registrationKey)","name":"setRegistrationKey","type":"void","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public void setInstitute(String institute)","name":"setInstitute","type":"void","javadoc":null},{"fullQualified":"public Instant getRegisteredAt()","name":"getRegisteredAt","type":"Instant","javadoc":null},{"fullQualified":"public void setRegisteredAt(Instant registeredAt)","name":"setRegisteredAt","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public static String generateId(String email, String institute)","name":"generateId","type":"String","javadoc":"\n     * Generates an unique ID for the account request.\n     "},{"fullQualified":"private String generateRegistrationKey()","name":"generateRegistrationKey","type":"String","javadoc":"\n     * Generate unique registration key for the account request.\n     * The key contains random elements to avoid being guessed.\n     "}],"allConstructors":[{"identifier":"private AccountRequest()","javadocComment":null},{"identifier":"public AccountRequest(String email, String name, String institute)","javadocComment":null}]},{"name":"InstantTranslatorFactory","fullyQualifiedName":"teammates.storage.entity.BaseEntity.InstantTranslatorFactory","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected ValueTranslator<Instant, Timestamp> createValueTranslator(TypeKey<Instant> tk, CreateContext ctx, Path path)","name":"createValueTranslator","type":"ValueTranslator<Instant,Timestamp>","javadoc":null}],"allConstructors":[{"identifier":"public InstantTranslatorFactory()","javadocComment":null}]},{"name":"BaseEntity","fullyQualifiedName":"teammates.storage.entity.BaseEntity","isInterface":false,"codeComments":[{"type":"LineComment","text":" instantiate as child classes","lineNumber":23,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Translates between `java.time.Instant` in entity class and `ValueType.TIMESTAMP` in Google Cloud Datastore.\n     *\n     * <p>See <a href=\"https://github.com/objectify/objectify/blob/v6/src/main/java/com/googlecode/objectify/annotation/Translate.java\">@Translate annotation</a>,\n     * <a href=\"https://github.com/objectify/objectify/blob/v6/src/main/java/com/googlecode/objectify/impl/translate/ValueTranslator.java\">ValueTranslator</a>\n     * and <a href=\"https://github.com/objectify/objectify/blob/v6/src/main/java/com/googlecode/objectify/impl/translate/ValueTranslatorFactory.java\">ValueTranslatorFactory</a></p>\n     ","lineNumber":26,"isOrphan":false}],"allMethods":[],"allConstructors":[{"identifier":" BaseEntity()","javadocComment":null}]},{"name":"Course","fullyQualifiedName":"teammates.storage.entity.Course","isInterface":false,"codeComments":[{"type":"LineComment","text":" required by Objectify","lineNumber":36,"isOrphan":true}],"allMethods":[{"fullQualified":"public String getUniqueId()","name":"getUniqueId","type":"String","javadoc":null},{"fullQualified":"public void setUniqueId(String uniqueId)","name":"setUniqueId","type":"void","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public Instant getDeletedAt()","name":"getDeletedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setDeletedAt(Instant deletedAt)","name":"setDeletedAt","type":"void","javadoc":null},{"fullQualified":"public String getTimeZone()","name":"getTimeZone","type":"String","javadoc":null},{"fullQualified":"public void setTimeZone(String timeZone)","name":"setTimeZone","type":"void","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public void setInstitute(String institute)","name":"setInstitute","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private Course()","javadocComment":null},{"identifier":"public Course(String courseId, String courseName, String courseTimeZone, String institute, Instant createdAt, Instant deletedAt)","javadocComment":null}]},{"name":"CourseStudent","fullyQualifiedName":"teammates.storage.entity.CourseStudent","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * ID of the student.\n     *\n     * @see #generateId(String, String)\n     ","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\n     * The student's Google ID. Links to the Account object.\n     * This can be null if the student hasn't joined the course yet.\n     ","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" required by Objectify","lineNumber":60,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Generates an unique ID for the student.\n     ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the createdAt timestamp.\n     ","lineNumber":90,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the full name of the student.\n     ","lineNumber":130,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the updatedAt timestamp when saving.\n     ","lineNumber":177,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns unique registration key for the student.\n     ","lineNumber":185,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String generateId(String email, String courseId)","name":"generateId","type":"String","javadoc":"\n     * Generates an unique ID for the student.\n     "},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant created)","name":"setCreatedAt","type":"void","javadoc":"\n     * Sets the createdAt timestamp.\n     "},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setLastUpdate(Instant updatedAt)","name":"setLastUpdate","type":"void","javadoc":null},{"fullQualified":"public String getUniqueId()","name":"getUniqueId","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String googleId)","name":"setGoogleId","type":"void","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void setName(String name)","name":"setName","type":"void","javadoc":"\n     * Sets the full name of the student.\n     "},{"fullQualified":"public String getComments()","name":"getComments","type":"String","javadoc":null},{"fullQualified":"public void setComments(String comments)","name":"setComments","type":"void","javadoc":null},{"fullQualified":"public String getRegistrationKey()","name":"getRegistrationKey","type":"String","javadoc":null},{"fullQualified":"public void setRegistrationKey(String registrationKey)","name":"setRegistrationKey","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getTeamName()","name":"getTeamName","type":"String","javadoc":null},{"fullQualified":"public void setTeamName(String teamName)","name":"setTeamName","type":"void","javadoc":null},{"fullQualified":"public String getSectionName()","name":"getSectionName","type":"String","javadoc":null},{"fullQualified":"public void setSectionName(String sectionName)","name":"setSectionName","type":"void","javadoc":null},{"fullQualified":"public void updateLastUpdateTimestamp()","name":"updateLastUpdateTimestamp","type":"void","javadoc":"\n     * Updates the updatedAt timestamp when saving.\n     "},{"fullQualified":"private String generateRegistrationKey()","name":"generateRegistrationKey","type":"String","javadoc":"\n     * Returns unique registration key for the student.\n     "}],"allConstructors":[{"identifier":"private CourseStudent()","javadocComment":null},{"identifier":"public CourseStudent(String email, String name, String googleId, String comments, String courseId, String teamName, String sectionName)","javadocComment":null}]},{"name":"DeadlineExtension","fullyQualifiedName":"teammates.storage.entity.DeadlineExtension","isInterface":false,"codeComments":[{"type":"LineComment","text":" required by Objectify","lineNumber":42,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Updates the updatedAt timestamp when saving.\n     ","lineNumber":129,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates a unique ID for the deadline.\n     ","lineNumber":137,"isOrphan":false},{"type":"LineComment","text":" Format: courseId%feedbackSessionName%userEmail%isInstructor","lineNumber":141,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":null},{"fullQualified":"public void setId(String id)","name":"setId","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public String getUserEmail()","name":"getUserEmail","type":"String","javadoc":null},{"fullQualified":"public void setUserEmail(String userEmail)","name":"setUserEmail","type":"void","javadoc":null},{"fullQualified":"public boolean getIsInstructor()","name":"getIsInstructor","type":"boolean","javadoc":null},{"fullQualified":"public void setIsInstructor(boolean isInstructor)","name":"setIsInstructor","type":"void","javadoc":null},{"fullQualified":"public boolean getSentClosingEmail()","name":"getSentClosingEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentClosingEmail(boolean sentClosingEmail)","name":"setSentClosingEmail","type":"void","javadoc":null},{"fullQualified":"public Instant getEndTime()","name":"getEndTime","type":"Instant","javadoc":null},{"fullQualified":"public void setEndTime(Instant endTime)","name":"setEndTime","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setUpdatedAt(Instant updatedAt)","name":"setUpdatedAt","type":"void","javadoc":null},{"fullQualified":"public void updateLastUpdatedTimestamp()","name":"updateLastUpdatedTimestamp","type":"void","javadoc":"\n     * Updates the updatedAt timestamp when saving.\n     "},{"fullQualified":"public static String generateId(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"generateId","type":"String","javadoc":"\n     * Generates a unique ID for the deadline.\n     "}],"allConstructors":[{"identifier":"private DeadlineExtension()","javadocComment":null},{"identifier":"public DeadlineExtension(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor, boolean sentClosingEmail, Instant endTime)","javadocComment":null}]},{"name":"FeedbackQuestion","fullyQualifiedName":"teammates.storage.entity.FeedbackQuestion","isInterface":false,"codeComments":[{"type":"LineComment","text":" Check for consistency in questionLogic/questionAttributes.","lineNumber":52,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Serialized {@link teammates.common.datatransfer.questions.FeedbackQuestionDetails} stored as a string.\n     *\n     * @see teammates.common.datatransfer.attributes.FeedbackQuestionAttributes#getQuestionDetailsCopy()\n     ","lineNumber":33,"isOrphan":false},{"type":"LineComment","text":" (i.e. if type is own team, numberOfEntities must = 1).","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":" required by Objectify","lineNumber":70,"isOrphan":true},{"type":"LineComment","text":" Auto-generated by Cloud Datastore","lineNumber":83,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the createdAt timestamp of the question.\n     ","lineNumber":108,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the question id.\n     ","lineNumber":120,"isOrphan":false},{"type":"LineComment","text":" Previously (prior to V8.0.0), the keys are generated by Objectify v5 which uses App Engine Datastore API.","lineNumber":126,"isOrphan":true},{"type":"LineComment","text":" Starting from V8.0.0 we use Objectify v6 which uses Cloud Datastore API,","lineNumber":127,"isOrphan":true},{"type":"LineComment","text":" and the produced legacy URL-safe key has additional space character at the end of the string,","lineNumber":128,"isOrphan":true},{"type":"LineComment","text":" resulting in incompatibility with old data.","lineNumber":129,"isOrphan":true},{"type":"LineComment","text":" Last four characters (ogEA) of the base64 encoded string are trimmed for backward compatibility.","lineNumber":130,"isOrphan":true},{"type":"LineComment","text":" Additional changes are needed for production system case, possibly due to very old Datastore instance used.","lineNumber":131,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the updatedAt timestamp when saving.\n     ","lineNumber":238,"isOrphan":false}],"allMethods":[{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant newDate)","name":"setCreatedAt","type":"void","javadoc":"\n     * Sets the createdAt timestamp of the question.\n     "},{"fullQualified":"public void setLastUpdate(Instant newDate)","name":"setLastUpdate","type":"void","javadoc":null},{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":"\n     * Gets the question id.\n     "},{"fullQualified":"public void setFeedbackQuestionId(Long feedbackQuestionId)","name":"setFeedbackQuestionId","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getQuestionText()","name":"getQuestionText","type":"String","javadoc":null},{"fullQualified":"public void setQuestionText(String questionText)","name":"setQuestionText","type":"void","javadoc":null},{"fullQualified":"public String getQuestionDescription()","name":"getQuestionDescription","type":"String","javadoc":null},{"fullQualified":"public void setQuestionDescription(String questionDescription)","name":"setQuestionDescription","type":"void","javadoc":null},{"fullQualified":"public FeedbackQuestionType getQuestionType()","name":"getQuestionType","type":"FeedbackQuestionType","javadoc":null},{"fullQualified":"public void setQuestionType(FeedbackQuestionType questionType)","name":"setQuestionType","type":"void","javadoc":null},{"fullQualified":"public int getQuestionNumber()","name":"getQuestionNumber","type":"int","javadoc":null},{"fullQualified":"public void setQuestionNumber(int questionNumber)","name":"setQuestionNumber","type":"void","javadoc":null},{"fullQualified":"public FeedbackParticipantType getGiverType()","name":"getGiverType","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public void setGiverType(FeedbackParticipantType giverType)","name":"setGiverType","type":"void","javadoc":null},{"fullQualified":"public FeedbackParticipantType getRecipientType()","name":"getRecipientType","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public void setRecipientType(FeedbackParticipantType recipientType)","name":"setRecipientType","type":"void","javadoc":null},{"fullQualified":"public int getNumberOfEntitiesToGiveFeedbackTo()","name":"getNumberOfEntitiesToGiveFeedbackTo","type":"int","javadoc":null},{"fullQualified":"public void setNumberOfEntitiesToGiveFeedbackTo(int numberOfEntitiesToGiveFeedbackTo)","name":"setNumberOfEntitiesToGiveFeedbackTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowResponsesTo()","name":"getShowResponsesTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public void setShowResponsesTo(List<FeedbackParticipantType> showResponsesTo)","name":"setShowResponsesTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowGiverNameTo()","name":"getShowGiverNameTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public void setShowGiverNameTo(List<FeedbackParticipantType> showGiverNameTo)","name":"setShowGiverNameTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowRecipientNameTo()","name":"getShowRecipientNameTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public void setShowRecipientNameTo(List<FeedbackParticipantType> showRecipientNameTo)","name":"setShowRecipientNameTo","type":"void","javadoc":null},{"fullQualified":"public void updateLastUpdateTimestamp()","name":"updateLastUpdateTimestamp","type":"void","javadoc":"\n     * Updates the updatedAt timestamp when saving.\n     "}],"allConstructors":[{"identifier":"private FeedbackQuestion()","javadocComment":null},{"identifier":"public FeedbackQuestion(String feedbackSessionName, String courseId, String questionText, String questionDescription, int questionNumber, FeedbackQuestionType questionType, FeedbackParticipantType giverType, FeedbackParticipantType recipientType, int numberOfEntitiesToGiveFeedbackTo, List<FeedbackParticipantType> showResponsesTo, List<FeedbackParticipantType> showGiverNameTo, List<FeedbackParticipantType> showRecipientNameTo)","javadocComment":null}]},{"name":"FeedbackResponse","fullyQualifiedName":"teammates.storage.entity.FeedbackResponse","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * The unique id of the entity.\n     *\n     * @see #generateId(String, String, String)\n     ","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\n     * {@code giverEmail} does not necessarily contain an email. Depending on the question giver type,\n     * it may contain the giver's email, the team name, \"anonymous\", etc.\n     ","lineNumber":38,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Serialized {@link teammates.common.datatransfer.questions.FeedbackResponseDetails} stored as a string.\n     *\n     * @see teammates.common.datatransfer.attributes.FeedbackResponseAttributes#getResponseDetailsCopy()\n     ","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" required by Objectify","lineNumber":66,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Generates an unique ID for the feedback response.\n     ","lineNumber":87,"isOrphan":false},{"type":"LineComment","text":" Format is feedbackQuestionId%giverEmail%receiver","lineNumber":91,"isOrphan":true},{"type":"LineComment","text":" i.e. if response is feedback for team: qnId%giver@gmail.com%Team1","lineNumber":92,"isOrphan":true},{"type":"LineComment","text":"         if response is feedback for person: qnId%giver@gmail.com%reciever@email.com","lineNumber":93,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the createdAt timestamp of the response.\n     ","lineNumber":181,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the updatedAt timestamp when saving.\n     ","lineNumber":193,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String generateId(String feedbackQuestionId, String giver, String receiver)","name":"generateId","type":"String","javadoc":"\n     * Generates an unique ID for the feedback response.\n     "},{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackQuestionId()","name":"getFeedbackQuestionId","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackQuestionId(String feedbackQuestionId)","name":"setFeedbackQuestionId","type":"void","javadoc":null},{"fullQualified":"public FeedbackQuestionType getFeedbackQuestionType()","name":"getFeedbackQuestionType","type":"FeedbackQuestionType","javadoc":null},{"fullQualified":"public void setFeedbackQuestionType(FeedbackQuestionType feedbackQuestionType)","name":"setFeedbackQuestionType","type":"void","javadoc":null},{"fullQualified":"public String getGiverEmail()","name":"getGiverEmail","type":"String","javadoc":null},{"fullQualified":"public void setGiverEmail(String giverEmail)","name":"setGiverEmail","type":"void","javadoc":null},{"fullQualified":"public String getGiverSection()","name":"getGiverSection","type":"String","javadoc":null},{"fullQualified":"public void setGiverSection(String giverSection)","name":"setGiverSection","type":"void","javadoc":null},{"fullQualified":"public String getRecipientEmail()","name":"getRecipientEmail","type":"String","javadoc":null},{"fullQualified":"public void setRecipientEmail(String receiverEmail)","name":"setRecipientEmail","type":"void","javadoc":null},{"fullQualified":"public String getRecipientSection()","name":"getRecipientSection","type":"String","javadoc":null},{"fullQualified":"public void setRecipientSection(String recipientSection)","name":"setRecipientSection","type":"void","javadoc":null},{"fullQualified":"public String getAnswer()","name":"getAnswer","type":"String","javadoc":null},{"fullQualified":"public void setAnswer(String answer)","name":"setAnswer","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant newDate)","name":"setCreatedAt","type":"void","javadoc":"\n     * Sets the createdAt timestamp of the response.\n     "},{"fullQualified":"public void setLastUpdate(Instant newDate)","name":"setLastUpdate","type":"void","javadoc":null},{"fullQualified":"public void updateLastUpdateTimestamp()","name":"updateLastUpdateTimestamp","type":"void","javadoc":"\n     * Updates the updatedAt timestamp when saving.\n     "}],"allConstructors":[{"identifier":"private FeedbackResponse()","javadocComment":null},{"identifier":"public FeedbackResponse(String feedbackSessionName, String courseId, String feedbackQuestionId, FeedbackQuestionType feedbackQuestionType, String giverEmail, String giverSection, String recipient, String recipientSection, String answer)","javadocComment":null}]},{"name":"FeedbackResponseComment","fullyQualifiedName":"teammates.storage.entity.FeedbackResponseComment","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" The foreign key to locate the Course object. ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":" The foreign key to locate the FeedbackSession object. ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":" The foreign key to locate the FeedbackQuestion object. ","lineNumber":34,"isOrphan":false},{"type":"JavadocComment","text":"\n     * The giver of the comment.\n     *\n     * <p>It is email in case when comment giver is a student or instructor, and team name in case of team.\n     ","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Role of a comment giver.\n     *\n     * <p>Can only be INSTRUCTORS, STUDENTS or TEAMS.\n     ","lineNumber":44,"isOrphan":false},{"type":"JavadocComment","text":" The foreign key to locate the FeedbackResponse object commented on. ","lineNumber":51,"isOrphan":false},{"type":"JavadocComment","text":" Response giver section. ","lineNumber":54,"isOrphan":false},{"type":"JavadocComment","text":" Response receiver section. ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":" True if the comment is given by a feedback participant. ","lineNumber":66,"isOrphan":false},{"type":"JavadocComment","text":" The creation time of this comment. ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":" The comment from giver about the feedback response. ","lineNumber":73,"isOrphan":false},{"type":"JavadocComment","text":" The e-mail of the account that last edited the comment. ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":" The time in which the comment is last edited. ","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" required by Objectify","lineNumber":86,"isOrphan":true},{"type":"LineComment","text":" Auto-generated by Cloud Datastore","lineNumber":94,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Use only if the comment has already persisted in the database and has its ID generated.\n     * @return the feedbackResponseCommentId\n     ","lineNumber":113,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets whether the visibility setting of the comment follow the corresponding question.\n     ","lineNumber":145,"isOrphan":false},{"type":"LineComment","text":" true as the default value if the field is null","lineNumber":150,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the giver email of the response comment.\n     *\n     * @param giverEmail the giverEmail to set.\n     *         This is the email used by the user in the course, not the one associated with the user's google account.\n     ","lineNumber":164,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the giver type of the comment.\n     ","lineNumber":174,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the giver type of the comment.\n     ","lineNumber":181,"isOrphan":false}],"allMethods":[{"fullQualified":"public Long getFeedbackResponseCommentId()","name":"getFeedbackResponseCommentId","type":"Long","javadoc":"\n     * Use only if the comment has already persisted in the database and has its ID generated.\n     * @return the feedbackResponseCommentId\n     "},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public String getFeedbackQuestionId()","name":"getFeedbackQuestionId","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackQuestionId(String feedbackQuestionId)","name":"setFeedbackQuestionId","type":"void","javadoc":null},{"fullQualified":"public boolean getIsVisibilityFollowingFeedbackQuestion()","name":"getIsVisibilityFollowingFeedbackQuestion","type":"boolean","javadoc":"\n     * Gets whether the visibility setting of the comment follow the corresponding question.\n     "},{"fullQualified":"public void setIsVisibilityFollowingFeedbackQuestion(Boolean isVisibilityFollowingFeedbackQuestion)","name":"setIsVisibilityFollowingFeedbackQuestion","type":"void","javadoc":null},{"fullQualified":"public String getGiverEmail()","name":"getGiverEmail","type":"String","javadoc":null},{"fullQualified":"public void setGiverEmail(String giverEmail)","name":"setGiverEmail","type":"void","javadoc":"\n     * Sets the giver email of the response comment.\n     *\n     * @param giverEmail the giverEmail to set.\n     *         This is the email used by the user in the course, not the one associated with the user's google account.\n     "},{"fullQualified":"public FeedbackParticipantType getCommentGiverType()","name":"getCommentGiverType","type":"FeedbackParticipantType","javadoc":"\n     * Gets the giver type of the comment.\n     "},{"fullQualified":"public void setCommentGiverType(FeedbackParticipantType commentGiverType)","name":"setCommentGiverType","type":"void","javadoc":"\n     * Sets the giver type of the comment.\n     "},{"fullQualified":"public void setShowCommentTo(List<FeedbackParticipantType> showCommentTo)","name":"setShowCommentTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowCommentTo()","name":"getShowCommentTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public void setShowGiverNameTo(List<FeedbackParticipantType> showGiverNameTo)","name":"setShowGiverNameTo","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowGiverNameTo()","name":"getShowGiverNameTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public String getFeedbackResponseId()","name":"getFeedbackResponseId","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackResponseId(String feedbackResponseId)","name":"setFeedbackResponseId","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public String getCommentText()","name":"getCommentText","type":"String","javadoc":null},{"fullQualified":"public void setCommentText(String commentText)","name":"setCommentText","type":"void","javadoc":null},{"fullQualified":"public String getGiverSection()","name":"getGiverSection","type":"String","javadoc":null},{"fullQualified":"public void setGiverSection(String giverSection)","name":"setGiverSection","type":"void","javadoc":null},{"fullQualified":"public String getReceiverSection()","name":"getReceiverSection","type":"String","javadoc":null},{"fullQualified":"public void setReceiverSection(String receiverSection)","name":"setReceiverSection","type":"void","javadoc":null},{"fullQualified":"public void setLastEditorEmail(String lastEditorEmail)","name":"setLastEditorEmail","type":"void","javadoc":null},{"fullQualified":"public String getLastEditorEmail()","name":"getLastEditorEmail","type":"String","javadoc":null},{"fullQualified":"public Instant getLastEditedAt()","name":"getLastEditedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setLastEditedAt(Instant lastEditedAt)","name":"setLastEditedAt","type":"void","javadoc":null},{"fullQualified":"public boolean getIsCommentFromFeedbackParticipant()","name":"getIsCommentFromFeedbackParticipant","type":"boolean","javadoc":null},{"fullQualified":"public void setIsCommentFromFeedbackParticipant(boolean isCommentFromFeedbackParticipant)","name":"setIsCommentFromFeedbackParticipant","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private FeedbackResponseComment()","javadocComment":null},{"identifier":"public FeedbackResponseComment(String courseId, String feedbackSessionName, String feedbackQuestionId, String giverEmail, FeedbackParticipantType commentGiverType, String feedbackResponseId, Instant createdAt, String commentText, String giverSection, String receiverSection, List<FeedbackParticipantType> showCommentTo, List<FeedbackParticipantType> showGiverNameTo, String lastEditorEmail, Instant lastEditedAt, boolean isCommentFromFeedbackParticipant, boolean isVisibilityFollowingFeedbackQuestion)","javadocComment":null}]},{"name":"FeedbackSession","fullyQualifiedName":"teammates.storage.entity.FeedbackSession","isInterface":false,"codeComments":[{"type":"LineComment","text":" PMD.UnusedPrivateField and SingularField are suppressed","lineNumber":20,"isOrphan":true},{"type":"LineComment","text":" as feedbackSessionId is persisted to the database","lineNumber":21,"isOrphan":true},{"type":"JavadocComment","text":"\n     * The unique id of the entity.\n     *\n     * @see #generateId(String, String)\n     ","lineNumber":22,"isOrphan":false},{"type":"LineComment","text":" required by Objectify","lineNumber":89,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Generates an unique ID for the feedback session.\n     ","lineNumber":124,"isOrphan":false},{"type":"LineComment","text":" Format is feedbackSessionName%courseId","lineNumber":128,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String generateId(String feedbackSessionName, String courseId)","name":"generateId","type":"String","javadoc":"\n     * Generates an unique ID for the feedback session.\n     "},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public String getCreatorEmail()","name":"getCreatorEmail","type":"String","javadoc":null},{"fullQualified":"public void setCreatorEmail(String creatorId)","name":"setCreatorEmail","type":"void","javadoc":null},{"fullQualified":"public String getInstructions()","name":"getInstructions","type":"String","javadoc":null},{"fullQualified":"public void setInstructions(String instructions)","name":"setInstructions","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedTime()","name":"getCreatedTime","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedTime(Instant createdTime)","name":"setCreatedTime","type":"void","javadoc":null},{"fullQualified":"public Instant getDeletedTime()","name":"getDeletedTime","type":"Instant","javadoc":null},{"fullQualified":"public void setDeletedTime(Instant deletedTime)","name":"setDeletedTime","type":"void","javadoc":null},{"fullQualified":"public Instant getStartTime()","name":"getStartTime","type":"Instant","javadoc":null},{"fullQualified":"public void setStartTime(Instant startTime)","name":"setStartTime","type":"void","javadoc":null},{"fullQualified":"public Instant getEndTime()","name":"getEndTime","type":"Instant","javadoc":null},{"fullQualified":"public void setEndTime(Instant endTime)","name":"setEndTime","type":"void","javadoc":null},{"fullQualified":"public Instant getSessionVisibleFromTime()","name":"getSessionVisibleFromTime","type":"Instant","javadoc":null},{"fullQualified":"public void setSessionVisibleFromTime(Instant sessionVisibleFromTime)","name":"setSessionVisibleFromTime","type":"void","javadoc":null},{"fullQualified":"public Instant getResultsVisibleFromTime()","name":"getResultsVisibleFromTime","type":"Instant","javadoc":null},{"fullQualified":"public void setResultsVisibleFromTime(Instant resultsVisibleFromTime)","name":"setResultsVisibleFromTime","type":"void","javadoc":null},{"fullQualified":"public String getTimeZone()","name":"getTimeZone","type":"String","javadoc":null},{"fullQualified":"public void setTimeZone(String timeZone)","name":"setTimeZone","type":"void","javadoc":null},{"fullQualified":"public long getGracePeriod()","name":"getGracePeriod","type":"long","javadoc":null},{"fullQualified":"public void setGracePeriod(long gracePeriod)","name":"setGracePeriod","type":"void","javadoc":null},{"fullQualified":"public boolean isSentOpeningSoonEmail()","name":"isSentOpeningSoonEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentOpeningSoonEmail(boolean sentOpeningSoonEmail)","name":"setSentOpeningSoonEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isSentOpenEmail()","name":"isSentOpenEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentOpenEmail(boolean sentOpenEmail)","name":"setSentOpenEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isSentClosingEmail()","name":"isSentClosingEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentClosingEmail(boolean sentClosingEmail)","name":"setSentClosingEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isSentClosedEmail()","name":"isSentClosedEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentClosedEmail(boolean sentClosedEmail)","name":"setSentClosedEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isSentPublishedEmail()","name":"isSentPublishedEmail","type":"boolean","javadoc":null},{"fullQualified":"public void setSentPublishedEmail(boolean sentPublishedEmail)","name":"setSentPublishedEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isOpeningEmailEnabled()","name":"isOpeningEmailEnabled","type":"boolean","javadoc":null},{"fullQualified":"public void setIsOpeningEmailEnabled(boolean isOpeningEmailEnabled)","name":"setIsOpeningEmailEnabled","type":"void","javadoc":null},{"fullQualified":"public boolean isClosingEmailEnabled()","name":"isClosingEmailEnabled","type":"boolean","javadoc":null},{"fullQualified":"public void setSendClosingEmail(boolean isClosingEmailEnabled)","name":"setSendClosingEmail","type":"void","javadoc":null},{"fullQualified":"public boolean isPublishedEmailEnabled()","name":"isPublishedEmailEnabled","type":"boolean","javadoc":null},{"fullQualified":"public void setSendPublishedEmail(boolean isPublishedEmailEnabled)","name":"setSendPublishedEmail","type":"void","javadoc":null},{"fullQualified":"public Map<String, Instant> getStudentDeadlines()","name":"getStudentDeadlines","type":"Map<String,Instant>","javadoc":null},{"fullQualified":"public void setStudentDeadlines(Map<String, Instant> studentDeadlines)","name":"setStudentDeadlines","type":"void","javadoc":null},{"fullQualified":"public Map<String, Instant> getInstructorDeadlines()","name":"getInstructorDeadlines","type":"Map<String,Instant>","javadoc":null},{"fullQualified":"public void setInstructorDeadlines(Map<String, Instant> instructorDeadlines)","name":"setInstructorDeadlines","type":"void","javadoc":null},{"fullQualified":"public String toString()","name":"toString","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private FeedbackSession()","javadocComment":null},{"identifier":"public FeedbackSession(String feedbackSessionName, String courseId, String creatorEmail, String instructions, Instant createdTime, Instant deletedTime, Instant startTime, Instant endTime, Instant sessionVisibleFromTime, Instant resultsVisibleFromTime, String timeZone, long gracePeriod, boolean sentOpeningSoonEmail, boolean sentOpenEmail, boolean sentClosingEmail, boolean sentClosedEmail, boolean sentPublishedEmail, boolean isOpeningEmailEnabled, boolean isClosingEmailEnabled, boolean isPublishedEmailEnabled, Map<String, Instant> studentDeadlines, Map<String, Instant> instructorDeadlines)","javadocComment":null}]},{"name":"Instructor","fullyQualifiedName":"teammates.storage.entity.Instructor","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * The unique id of the entity.\n     *\n     * @see #generateId(String, String)\n     ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":"\n     * The Google id of the instructor, used as the foreign key to locate the Account object.\n     ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":" The foreign key to locate the Course object. ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":" Whether the associated course is archived. ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":" The instructor's name used for this course. ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":" The instructor's email used for this course. ","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":" The instructor's registration key used for joining. ","lineNumber":48,"isOrphan":false},{"type":"LineComment","text":" required by Objectify","lineNumber":70,"isOrphan":true},{"type":"LineComment","text":" setId should be called after setting email and courseId","lineNumber":85,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generates an unique ID for the instructor.\n     ","lineNumber":91,"isOrphan":false},{"type":"LineComment","text":" Format: email%courseId e.g., adam@gmail.com%cs1101","lineNumber":95,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the unique ID of the entity (format: email%courseId).\n     ","lineNumber":99,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the unique ID for the instructor entity.\n     *\n     * @param uniqueId\n     *          The unique ID of the entity (format: email%courseId).\n     ","lineNumber":106,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the archived status of the instructor.\n     ","lineNumber":132,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generate unique registration key for the instructor.\n     * The key contains random elements to avoid being guessed.\n     ","lineNumber":167,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns whether the instructor is displayed to students.\n     ","lineNumber":186,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the instructor privileges stored in JSON format.\n     ","lineNumber":208,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the createdAt timestamp.\n     ","lineNumber":223,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the updatedAt timestamp when saving.\n     ","lineNumber":239,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String generateId(String email, String courseId)","name":"generateId","type":"String","javadoc":"\n     * Generates an unique ID for the instructor.\n     "},{"fullQualified":"public String getUniqueId()","name":"getUniqueId","type":"String","javadoc":"\n     * Returns the unique ID of the entity (format: email%courseId).\n     "},{"fullQualified":"public void setUniqueId(String uniqueId)","name":"setUniqueId","type":"void","javadoc":"\n     * Sets the unique ID for the instructor entity.\n     *\n     * @param uniqueId\n     *          The unique ID of the entity (format: email%courseId).\n     "},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String instructorGoogleId)","name":"setGoogleId","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null},{"fullQualified":"public boolean getIsArchived()","name":"getIsArchived","type":"boolean","javadoc":"\n     * Gets the archived status of the instructor.\n     "},{"fullQualified":"public void setIsArchived(boolean isArchived)","name":"setIsArchived","type":"void","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void setName(String instructorName)","name":"setName","type":"void","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String instructorEmail)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public String getRegistrationKey()","name":"getRegistrationKey","type":"String","javadoc":null},{"fullQualified":"public void setRegistrationKey(String key)","name":"setRegistrationKey","type":"void","javadoc":null},{"fullQualified":"private String generateRegistrationKey()","name":"generateRegistrationKey","type":"String","javadoc":"\n     * Generate unique registration key for the instructor.\n     * The key contains random elements to avoid being guessed.\n     "},{"fullQualified":"public String getRole()","name":"getRole","type":"String","javadoc":null},{"fullQualified":"public void setRole(String role)","name":"setRole","type":"void","javadoc":null},{"fullQualified":"public boolean isDisplayedToStudents()","name":"isDisplayedToStudents","type":"boolean","javadoc":"\n     * Returns whether the instructor is displayed to students.\n     "},{"fullQualified":"public void setIsDisplayedToStudents(boolean shouldDisplayToStudents)","name":"setIsDisplayedToStudents","type":"void","javadoc":null},{"fullQualified":"public String getDisplayedName()","name":"getDisplayedName","type":"String","javadoc":null},{"fullQualified":"public void setDisplayedName(String displayedName)","name":"setDisplayedName","type":"void","javadoc":null},{"fullQualified":"public String getInstructorPrivilegesAsText()","name":"getInstructorPrivilegesAsText","type":"String","javadoc":"\n     * Gets the instructor privileges stored in JSON format.\n     "},{"fullQualified":"public void setInstructorPrivilegeAsText(String instructorPrivilegesAsText)","name":"setInstructorPrivilegeAsText","type":"void","javadoc":null},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant created)","name":"setCreatedAt","type":"void","javadoc":"\n     * Sets the createdAt timestamp.\n     "},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setLastUpdate(Instant updatedAt)","name":"setLastUpdate","type":"void","javadoc":null},{"fullQualified":"public void updateLastUpdateTimestamp()","name":"updateLastUpdateTimestamp","type":"void","javadoc":"\n     * Updates the updatedAt timestamp when saving.\n     "}],"allConstructors":[{"identifier":"private Instructor()","javadocComment":null},{"identifier":"public Instructor(String instructorGoogleId, String courseId, boolean isArchived, String instructorName, String instructorEmail, String role, boolean isDisplayedToStudents, String displayedName, String instructorPrivilegesAsText)","javadocComment":null}]},{"name":"Notification","fullyQualifiedName":"teammates.storage.entity.Notification","isInterface":false,"codeComments":[{"type":"LineComment","text":" required by Objectify","lineNumber":49,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Instantiates a new notification, with ID randomly generated and time fields filled automatically.\n     *\n     * @param startTime start time for the notification to be shown to users\n     * @param endTime notifications are hidden from users after endTime\n     * @param style style of the notification (e.g. success, warning, etc.)\n     * @param targetUser student or instructor\n     * @param title title of the notification\n     * @param message message body of the notification\n     ","lineNumber":52,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Instantiates a new notification, with all fields passed in as parameters.\n     * This is mainly for conversion from attributes to entity.\n     ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the notification as shown to the user.\n     * Only allowed to change value from false to true.\n     ","lineNumber":158,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Updates the updatedAt timestamp when saving.\n     ","lineNumber":182,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getNotificationId()","name":"getNotificationId","type":"String","javadoc":null},{"fullQualified":"public Instant getStartTime()","name":"getStartTime","type":"Instant","javadoc":null},{"fullQualified":"public void setStartTime(Instant startTime)","name":"setStartTime","type":"void","javadoc":null},{"fullQualified":"public Instant getEndTime()","name":"getEndTime","type":"Instant","javadoc":null},{"fullQualified":"public void setEndTime(Instant endTime)","name":"setEndTime","type":"void","javadoc":null},{"fullQualified":"public NotificationStyle getStyle()","name":"getStyle","type":"NotificationStyle","javadoc":null},{"fullQualified":"public void setStyle(NotificationStyle style)","name":"setStyle","type":"void","javadoc":null},{"fullQualified":"public NotificationTargetUser getTargetUser()","name":"getTargetUser","type":"NotificationTargetUser","javadoc":null},{"fullQualified":"public void setTargetUser(NotificationTargetUser targetUser)","name":"setTargetUser","type":"void","javadoc":null},{"fullQualified":"public String getTitle()","name":"getTitle","type":"String","javadoc":null},{"fullQualified":"public void setTitle(String title)","name":"setTitle","type":"void","javadoc":null},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null},{"fullQualified":"public void setMessage(String message)","name":"setMessage","type":"void","javadoc":null},{"fullQualified":"public boolean isShown()","name":"isShown","type":"boolean","javadoc":null},{"fullQualified":"public void setShown()","name":"setShown","type":"void","javadoc":"\n     * Sets the notification as shown to the user.\n     * Only allowed to change value from false to true.\n     "},{"fullQualified":"public Instant getCreatedAt()","name":"getCreatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setCreatedAt(Instant createdAt)","name":"setCreatedAt","type":"void","javadoc":null},{"fullQualified":"public Instant getUpdatedAt()","name":"getUpdatedAt","type":"Instant","javadoc":null},{"fullQualified":"public void setUpdatedAt(Instant updatedAt)","name":"setUpdatedAt","type":"void","javadoc":null},{"fullQualified":"public void updateLastUpdateTimestamp()","name":"updateLastUpdateTimestamp","type":"void","javadoc":"\n     * Updates the updatedAt timestamp when saving.\n     "}],"allConstructors":[{"identifier":"private Notification()","javadocComment":null},{"identifier":"public Notification(Instant startTime, Instant endTime, NotificationStyle style, NotificationTargetUser targetUser, String title, String message)","javadocComment":"\n     * Instantiates a new notification, with ID randomly generated and time fields filled automatically.\n     *\n     * @param startTime start time for the notification to be shown to users\n     * @param endTime notifications are hidden from users after endTime\n     * @param style style of the notification (e.g. success, warning, etc.)\n     * @param targetUser student or instructor\n     * @param title title of the notification\n     * @param message message body of the notification\n     "},{"identifier":"public Notification(String notificationId, Instant startTime, Instant endTime, NotificationStyle style, NotificationTargetUser targetUser, String title, String message, boolean shown, Instant createdAt, Instant updatedAt)","javadocComment":"\n     * Instantiates a new notification, with all fields passed in as parameters.\n     * This is mainly for conversion from attributes to entity.\n     "}]},{"name":"StudentProfile","fullyQualifiedName":"teammates.storage.entity.StudentProfile","isInterface":false,"codeComments":[{"type":"LineComment","text":" PMD.UnusedPrivateField and Singular field as suppressed","lineNumber":21,"isOrphan":true},{"type":"LineComment","text":" as this is used by Objectify to specify Account as @Parent entity","lineNumber":22,"isOrphan":false},{"type":"LineComment","text":" only accepts \"male\", \"female\" or \"other\"","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" required by Objectify","lineNumber":50,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Instantiates a new account.\n     *\n     * @param googleId\n     *            the Google ID of the user.\n     * @param shortName\n     *            The shortened name of the user.\n     * @param email\n     *            The long-term (personal) email of the user.\n     * @param institute\n     *            The university/school/institute the student is from (useful\n     *            for exchange students)\n     * @param nationality\n     *            The nationality the student is from (useful for\n     *            exchange/foreign students)\n     * @param gender\n     *            The student's gender. Allows \"other\"\n     * @param moreInfo\n     *            Miscellaneous information, including external profile\n     ","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sets the googleId.\n     ","lineNumber":100,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String googleId)","name":"setGoogleId","type":"void","javadoc":"\n     * Sets the googleId.\n     "},{"fullQualified":"public String getShortName()","name":"getShortName","type":"String","javadoc":null},{"fullQualified":"public void setShortName(String shortName)","name":"setShortName","type":"void","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public void setInstitute(String institute)","name":"setInstitute","type":"void","javadoc":null},{"fullQualified":"public String getNationality()","name":"getNationality","type":"String","javadoc":null},{"fullQualified":"public void setNationality(String nationality)","name":"setNationality","type":"void","javadoc":null},{"fullQualified":"public String getGender()","name":"getGender","type":"String","javadoc":null},{"fullQualified":"public void setGender(String gender)","name":"setGender","type":"void","javadoc":null},{"fullQualified":"public String getMoreInfo()","name":"getMoreInfo","type":"String","javadoc":null},{"fullQualified":"public void setMoreInfo(String moreInfo)","name":"setMoreInfo","type":"void","javadoc":null},{"fullQualified":"public Instant getModifiedDate()","name":"getModifiedDate","type":"Instant","javadoc":null},{"fullQualified":"public void setModifiedDate(Instant modifiedDate)","name":"setModifiedDate","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private StudentProfile()","javadocComment":null},{"identifier":"public StudentProfile(String googleId, String shortName, String email, String institute, String nationality, String gender, String moreInfo)","javadocComment":"\n     * Instantiates a new account.\n     *\n     * @param googleId\n     *            the Google ID of the user.\n     * @param shortName\n     *            The shortened name of the user.\n     * @param email\n     *            The long-term (personal) email of the user.\n     * @param institute\n     *            The university/school/institute the student is from (useful\n     *            for exchange students)\n     * @param nationality\n     *            The nationality the student is from (useful for\n     *            exchange/foreign students)\n     * @param gender\n     *            The student's gender. Allows \"other\"\n     * @param moreInfo\n     *            Miscellaneous information, including external profile\n     "},{"identifier":"public StudentProfile(String googleId)","javadocComment":null}]},{"name":"UsageStatistics","fullyQualifiedName":"teammates.storage.entity.UsageStatistics","isInterface":false,"codeComments":[{"type":"LineComment","text":" required by Objectify","lineNumber":37,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Generates a unique ID for the usage statistics object.\n     ","lineNumber":94,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":null},{"fullQualified":"public Instant getStartTime()","name":"getStartTime","type":"Instant","javadoc":null},{"fullQualified":"public int getTimePeriod()","name":"getTimePeriod","type":"int","javadoc":null},{"fullQualified":"public int getNumResponses()","name":"getNumResponses","type":"int","javadoc":null},{"fullQualified":"public int getNumCourses()","name":"getNumCourses","type":"int","javadoc":null},{"fullQualified":"public int getNumStudents()","name":"getNumStudents","type":"int","javadoc":null},{"fullQualified":"public int getNumInstructors()","name":"getNumInstructors","type":"int","javadoc":null},{"fullQualified":"public int getNumAccountRequests()","name":"getNumAccountRequests","type":"int","javadoc":null},{"fullQualified":"public int getNumEmails()","name":"getNumEmails","type":"int","javadoc":null},{"fullQualified":"public int getNumSubmissions()","name":"getNumSubmissions","type":"int","javadoc":null},{"fullQualified":"public static String generateId(Instant startTime, int timePeriod)","name":"generateId","type":"String","javadoc":"\n     * Generates a unique ID for the usage statistics object.\n     "}],"allConstructors":[{"identifier":"private UsageStatistics()","javadocComment":null},{"identifier":"public UsageStatistics(Instant startTime, int timePeriod, int numResponses, int numCourses, int numStudents, int numInstructors, int numAccountRequests, int numEmails, int numSubmissions)","javadocComment":null}]},{"name":"AccountRequestSearchDocument","fullyQualifiedName":"teammates.storage.search.AccountRequestSearchDocument","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" Map<String, Object> getSearchableFields()","name":"getSearchableFields","type":"Map<String,Object>","javadoc":null}],"allConstructors":[{"identifier":" AccountRequestSearchDocument(AccountRequestAttributes accountRequest)","javadocComment":null}]},{"name":"AccountRequestSearchManager","fullyQualifiedName":"teammates.storage.search.AccountRequestSearchManager","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Searches for account requests.\n     ","lineNumber":48,"isOrphan":false}],"allMethods":[{"fullQualified":" String getCollectionName()","name":"getCollectionName","type":"String","javadoc":null},{"fullQualified":" AccountRequestSearchDocument createDocument(AccountRequestAttributes accountRequest)","name":"createDocument","type":"AccountRequestSearchDocument","javadoc":null},{"fullQualified":" AccountRequestAttributes getAttributeFromDocument(SolrDocument document)","name":"getAttributeFromDocument","type":"AccountRequestAttributes","javadoc":null},{"fullQualified":" void sortResult(List<AccountRequestAttributes> result)","name":"sortResult","type":"void","javadoc":null},{"fullQualified":"public List<AccountRequestAttributes> searchAccountRequests(String queryString) throws SearchServiceException","name":"searchAccountRequests","type":"List<AccountRequestAttributes>","javadoc":"\n     * Searches for account requests.\n     "}],"allConstructors":[{"identifier":"public AccountRequestSearchManager(String searchServiceHost, boolean isResetAllowed)","javadocComment":null}]},{"name":"InstructorSearchDocument","fullyQualifiedName":"teammates.storage.search.InstructorSearchDocument","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" Map<String, Object> getSearchableFields()","name":"getSearchableFields","type":"Map<String,Object>","javadoc":null}],"allConstructors":[{"identifier":" InstructorSearchDocument(InstructorAttributes instructor, CourseAttributes course)","javadocComment":null}]},{"name":"InstructorSearchManager","fullyQualifiedName":"teammates.storage.search.InstructorSearchManager","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Searches for instructors.\n     ","lineNumber":54,"isOrphan":false}],"allMethods":[{"fullQualified":" String getCollectionName()","name":"getCollectionName","type":"String","javadoc":null},{"fullQualified":" InstructorSearchDocument createDocument(InstructorAttributes instructor)","name":"createDocument","type":"InstructorSearchDocument","javadoc":null},{"fullQualified":" InstructorAttributes getAttributeFromDocument(SolrDocument document)","name":"getAttributeFromDocument","type":"InstructorAttributes","javadoc":null},{"fullQualified":" void sortResult(List<InstructorAttributes> result)","name":"sortResult","type":"void","javadoc":null},{"fullQualified":"public List<InstructorAttributes> searchInstructors(String queryString) throws SearchServiceException","name":"searchInstructors","type":"List<InstructorAttributes>","javadoc":"\n     * Searches for instructors.\n     "}],"allConstructors":[{"identifier":"public InstructorSearchManager(String searchServiceHost, boolean isResetAllowed)","javadocComment":null}]},{"name":"SearchDocument","fullyQualifiedName":"teammates.storage.search.SearchDocument","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" abstract Map<String, Object> getSearchableFields()","name":"getSearchableFields","type":"Map<String,Object>","javadoc":null}],"allConstructors":[{"identifier":" SearchDocument(T attribute)","javadocComment":null}]},{"name":"SearchManager","fullyQualifiedName":"teammates.storage.search.SearchManager","isInterface":false,"codeComments":[{"type":"LineComment","text":" timeout for connecting to Solr server","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" timeout for reading data","lineNumber":60,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates or updates search document for the given entity.\n     ","lineNumber":105,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes search documents based on the given keys.\n     ","lineNumber":134,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Resets the data for all collections if, and only if called during component tests.\n     ","lineNumber":157,"isOrphan":false},{"type":"LineComment","text":" Solr special characters: + - && || ! ( ) { } [ ] ^ \" ~ * ? : \\ /","lineNumber":178,"isOrphan":false},{"type":"LineComment","text":" imbalanced double quotes are invalid","lineNumber":198,"isOrphan":false},{"type":"LineComment","text":" use exact match only when there's email-like input","lineNumber":204,"isOrphan":false},{"type":"LineComment","text":" search engine out of sync as SearchManager may fail to delete documents","lineNumber":226,"isOrphan":true},{"type":"LineComment","text":" the chance is low and it is generally not a big problem","lineNumber":227,"isOrphan":false}],"allMethods":[{"fullQualified":" SolrQuery getBasicQuery(String queryString)","name":"getBasicQuery","type":"SolrQuery","javadoc":null},{"fullQualified":" QueryResponse performQuery(SolrQuery query) throws SearchServiceException","name":"performQuery","type":"QueryResponse","javadoc":null},{"fullQualified":" abstract String getCollectionName()","name":"getCollectionName","type":"String","javadoc":null},{"fullQualified":" abstract SearchDocument<T> createDocument(T attribute)","name":"createDocument","type":"SearchDocument<T>","javadoc":null},{"fullQualified":"public void putDocument(T attributes) throws SearchServiceException","name":"putDocument","type":"void","javadoc":"\n     * Creates or updates search document for the given entity.\n     "},{"fullQualified":"public void deleteDocuments(List<String> keys)","name":"deleteDocuments","type":"void","javadoc":"\n     * Removes search documents based on the given keys.\n     "},{"fullQualified":"public void resetCollections()","name":"resetCollections","type":"void","javadoc":"\n     * Resets the data for all collections if, and only if called during component tests.\n     "},{"fullQualified":"private String cleanSpecialChars(String queryString)","name":"cleanSpecialChars","type":"String","javadoc":null},{"fullQualified":" abstract T getAttributeFromDocument(SolrDocument document)","name":"getAttributeFromDocument","type":"T","javadoc":null},{"fullQualified":" abstract void sortResult(List<T> result)","name":"sortResult","type":"void","javadoc":null},{"fullQualified":" List<T> convertDocumentToAttributes(List<SolrDocument> documents)","name":"convertDocumentToAttributes","type":"List<T>","javadoc":null}],"allConstructors":[{"identifier":" SearchManager(String searchServiceHost, boolean isResetAllowed)","javadocComment":null}]},{"name":"SearchManagerFactory","fullyQualifiedName":"teammates.storage.search.SearchManagerFactory","isInterface":false,"codeComments":[{"type":"LineComment","text":" prevents initialization","lineNumber":13,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Registers the instructor search service into the factory.\n     ","lineNumber":20,"isOrphan":false},{"type":"LineComment","text":" ok to ignore as method is only invoked at application startup","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Registers the student search service into the factory.\n     ","lineNumber":34,"isOrphan":false},{"type":"LineComment","text":" ok to ignore as method is only invoked at application startup","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Registers the account request search service into the factory.\n     ","lineNumber":48,"isOrphan":false},{"type":"LineComment","text":" ok to ignore as method is only invoked at application startup","lineNumber":51,"isOrphan":false}],"allMethods":[{"fullQualified":"public static InstructorSearchManager getInstructorSearchManager()","name":"getInstructorSearchManager","type":"InstructorSearchManager","javadoc":null},{"fullQualified":"public static void registerInstructorSearchManager(InstructorSearchManager instructorSearchManager)","name":"registerInstructorSearchManager","type":"void","javadoc":"\n     * Registers the instructor search service into the factory.\n     "},{"fullQualified":"public static StudentSearchManager getStudentSearchManager()","name":"getStudentSearchManager","type":"StudentSearchManager","javadoc":null},{"fullQualified":"public static void registerStudentSearchManager(StudentSearchManager studentSearchManager)","name":"registerStudentSearchManager","type":"void","javadoc":"\n     * Registers the student search service into the factory.\n     "},{"fullQualified":"public static AccountRequestSearchManager getAccountRequestSearchManager()","name":"getAccountRequestSearchManager","type":"AccountRequestSearchManager","javadoc":null},{"fullQualified":"public static void registerAccountRequestSearchManager(AccountRequestSearchManager accountRequestSearchManager)","name":"registerAccountRequestSearchManager","type":"void","javadoc":"\n     * Registers the account request search service into the factory.\n     "}],"allConstructors":[{"identifier":"private SearchManagerFactory()","javadocComment":null}]},{"name":"SearchManagerStarter","fullyQualifiedName":"teammates.storage.search.SearchManagerStarter","isInterface":false,"codeComments":[{"type":"LineComment","text":" Invoked by Jetty at application startup.","lineNumber":15,"isOrphan":false},{"type":"LineComment","text":" Nothing to do","lineNumber":24,"isOrphan":true}],"allMethods":[{"fullQualified":"public void contextInitialized(ServletContextEvent event)","name":"contextInitialized","type":"void","javadoc":null},{"fullQualified":"public void contextDestroyed(ServletContextEvent event)","name":"contextDestroyed","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentSearchDocument","fullyQualifiedName":"teammates.storage.search.StudentSearchDocument","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" Map<String, Object> getSearchableFields()","name":"getSearchableFields","type":"Map<String,Object>","javadoc":null}],"allConstructors":[{"identifier":" StudentSearchDocument(StudentAttributes student, CourseAttributes course)","javadocComment":null}]},{"name":"StudentSearchManager","fullyQualifiedName":"teammates.storage.search.StudentSearchManager","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Searches for students.\n     *\n     * @param instructors the constraint that restricts the search result\n     ","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" Sanity check such that the course ID of the students match exactly.","lineNumber":86,"isOrphan":true},{"type":"LineComment","text":" In ideal case, this check is not expected to do anything,","lineNumber":87,"isOrphan":true},{"type":"LineComment","text":" i.e. the resulting list should be the same as the incoming list.","lineNumber":88,"isOrphan":true}],"allMethods":[{"fullQualified":" String getCollectionName()","name":"getCollectionName","type":"String","javadoc":null},{"fullQualified":" StudentSearchDocument createDocument(StudentAttributes student)","name":"createDocument","type":"StudentSearchDocument","javadoc":null},{"fullQualified":" StudentAttributes getAttributeFromDocument(SolrDocument document)","name":"getAttributeFromDocument","type":"StudentAttributes","javadoc":null},{"fullQualified":" void sortResult(List<StudentAttributes> result)","name":"sortResult","type":"void","javadoc":null},{"fullQualified":"public List<StudentAttributes> searchStudents(String queryString, List<InstructorAttributes> instructors) throws SearchServiceException","name":"searchStudents","type":"List<StudentAttributes>","javadoc":"\n     * Searches for students.\n     *\n     * @param instructors the constraint that restricts the search result\n     "}],"allConstructors":[{"identifier":"public StudentSearchManager(String searchServiceHost, boolean isResetAllowed)","javadocComment":null}]},{"name":"AccountData","fullyQualifiedName":"teammates.ui.output.AccountData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public Map<String, Long> getReadNotifications()","name":"getReadNotifications","type":"Map<String,Long>","javadoc":null}],"allConstructors":[{"identifier":"public AccountData(AccountAttributes accountInfo)","javadocComment":null}]},{"name":"AccountRequestData","fullyQualifiedName":"teammates.ui.output.AccountRequestData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public String getRegistrationKey()","name":"getRegistrationKey","type":"String","javadoc":null},{"fullQualified":"public Long getRegisteredAt()","name":"getRegisteredAt","type":"Long","javadoc":null},{"fullQualified":"public long getCreatedAt()","name":"getCreatedAt","type":"long","javadoc":null}],"allConstructors":[{"identifier":"public AccountRequestData(AccountRequestAttributes accountRequestInfo)","javadocComment":null}]},{"name":"AccountRequestsData","fullyQualifiedName":"teammates.ui.output.AccountRequestsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<AccountRequestData> getAccountRequests()","name":"getAccountRequests","type":"List<AccountRequestData>","javadoc":null},{"fullQualified":"public void setAccountRequests(List<AccountRequestData> accountRequests)","name":"setAccountRequests","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public AccountRequestsData()","javadocComment":null}]},{"name":"AccountsData","fullyQualifiedName":"teammates.ui.output.AccountsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<AccountData> getAccounts()","name":"getAccounts","type":"List<AccountData>","javadoc":null}],"allConstructors":[{"identifier":"public AccountsData(List<AccountAttributes> accountAttributes)","javadocComment":null}]},{"name":"ActionClasses","fullyQualifiedName":"teammates.ui.output.ActionClasses","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<String> getActionClasses()","name":"getActionClasses","type":"List<String>","javadoc":null}],"allConstructors":[{"identifier":"public ActionClasses(List<String> actionClasses)","javadocComment":null}]},{"name":"ApiOutput","fullyQualifiedName":"teammates.ui.output.ApiOutput","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getRequestId()","name":"getRequestId","type":"String","javadoc":null},{"fullQualified":"public void setRequestId(String requestId)","name":"setRequestId","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AuthInfo","fullyQualifiedName":"teammates.ui.output.AuthInfo","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getStudentLoginUrl()","name":"getStudentLoginUrl","type":"String","javadoc":null},{"fullQualified":"public String getInstructorLoginUrl()","name":"getInstructorLoginUrl","type":"String","javadoc":null},{"fullQualified":"public String getAdminLoginUrl()","name":"getAdminLoginUrl","type":"String","javadoc":null},{"fullQualified":"public String getMaintainerLoginUrl()","name":"getMaintainerLoginUrl","type":"String","javadoc":null},{"fullQualified":"public UserInfo getUser()","name":"getUser","type":"UserInfo","javadoc":null},{"fullQualified":"public boolean isMasquerade()","name":"isMasquerade","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public AuthInfo(String studentLoginUrl, String instructorLoginUrl, String adminLoginUrl, String maintainerLoginUrl)","javadocComment":null},{"identifier":"public AuthInfo(UserInfo user, boolean masquerade)","javadocComment":null}]},{"name":"CourseArchiveData","fullyQualifiedName":"teammates.ui.output.CourseArchiveData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public boolean getIsArchived()","name":"getIsArchived","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public CourseArchiveData(String courseId, boolean isArchived)","javadocComment":null}]},{"name":"CourseData","fullyQualifiedName":"teammates.ui.output.CourseData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Hides some attributes to student.\n     ","lineNumber":73,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getCourseName()","name":"getCourseName","type":"String","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public String getTimeZone()","name":"getTimeZone","type":"String","javadoc":null},{"fullQualified":"public long getCreationTimestamp()","name":"getCreationTimestamp","type":"long","javadoc":null},{"fullQualified":"public long getDeletionTimestamp()","name":"getDeletionTimestamp","type":"long","javadoc":null},{"fullQualified":"public InstructorPermissionSet getPrivileges()","name":"getPrivileges","type":"InstructorPermissionSet","javadoc":null},{"fullQualified":"public void setCreationTimestamp(long creationTimestamp)","name":"setCreationTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setDeletionTimestamp(long deletionTimestamp)","name":"setDeletionTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setPrivileges(InstructorPermissionSet privileges)","name":"setPrivileges","type":"void","javadoc":null},{"fullQualified":"public void hideInformationForStudent()","name":"hideInformationForStudent","type":"void","javadoc":"\n     * Hides some attributes to student.\n     "}],"allConstructors":[{"identifier":"public CourseData(CourseAttributes courseAttributes)","javadocComment":null}]},{"name":"CoursesData","fullyQualifiedName":"teammates.ui.output.CoursesData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<CourseData> getCourses()","name":"getCourses","type":"List<CourseData>","javadoc":null}],"allConstructors":[{"identifier":"public CoursesData(List<CourseAttributes> courseAttributesList)","javadocComment":null}]},{"name":"CourseSectionNamesData","fullyQualifiedName":"teammates.ui.output.CourseSectionNamesData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<String> getSectionNames()","name":"getSectionNames","type":"List<String>","javadoc":null}],"allConstructors":[{"identifier":"public CourseSectionNamesData(List<String> sectionNames)","javadocComment":null}]},{"name":"DeadlineExtensionData","fullyQualifiedName":"teammates.ui.output.DeadlineExtensionData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getUserEmail()","name":"getUserEmail","type":"String","javadoc":null},{"fullQualified":"public boolean getIsInstructor()","name":"getIsInstructor","type":"boolean","javadoc":null},{"fullQualified":"public boolean getSentClosingEmail()","name":"getSentClosingEmail","type":"boolean","javadoc":null},{"fullQualified":"public long getEndTime()","name":"getEndTime","type":"long","javadoc":null}],"allConstructors":[{"identifier":"public DeadlineExtensionData(DeadlineExtensionAttributes deadlineExtension)","javadocComment":null}]},{"name":"EmailData","fullyQualifiedName":"teammates.ui.output.EmailData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getRecipient()","name":"getRecipient","type":"String","javadoc":null},{"fullQualified":"public String getSubject()","name":"getSubject","type":"String","javadoc":null},{"fullQualified":"public String getContent()","name":"getContent","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public EmailData(EmailWrapper email)","javadocComment":null}]},{"name":"EnrollErrorResults","fullyQualifiedName":"teammates.ui.output.EnrollStudentsData.EnrollErrorResults","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getErrorMessage()","name":"getErrorMessage","type":"String","javadoc":null},{"fullQualified":"public void setErrorMessage(String errorMessage)","name":"setErrorMessage","type":"void","javadoc":null},{"fullQualified":"public String getStudentEmail()","name":"getStudentEmail","type":"String","javadoc":null},{"fullQualified":"public void setStudentEmail(String studentEmail)","name":"setStudentEmail","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public EnrollErrorResults(String studentEmail, String errorMessage)","javadocComment":null}]},{"name":"EnrollStudentsData","fullyQualifiedName":"teammates.ui.output.EnrollStudentsData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Wrapper class for fail to enroll students.\n     ","lineNumber":34,"isOrphan":false}],"allMethods":[{"fullQualified":"public List<EnrollErrorResults> getUnsuccessfulEnrolls()","name":"getUnsuccessfulEnrolls","type":"List<EnrollErrorResults>","javadoc":null},{"fullQualified":"public void setUnsuccessfulEnrolls(List<EnrollErrorResults> unsuccessfulEnrolls)","name":"setUnsuccessfulEnrolls","type":"void","javadoc":null},{"fullQualified":"public StudentsData getStudentsData()","name":"getStudentsData","type":"StudentsData","javadoc":null},{"fullQualified":"public void setStudentsData(StudentsData studentsData)","name":"setStudentsData","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public EnrollStudentsData(StudentsData studentsData, List<EnrollErrorResults> unsuccessfulEnrolls)","javadocComment":null}]},{"name":"FeedbackQuestionData","fullyQualifiedName":"teammates.ui.output.FeedbackQuestionData","isInterface":false,"codeComments":[{"type":"LineComment","text":" the visibility types are mixed in feedback participant type","lineNumber":62,"isOrphan":true},{"type":"LineComment","text":" specially handling for contribution questions","lineNumber":69,"isOrphan":true},{"type":"LineComment","text":" therefore, we convert them to visibility types","lineNumber":63,"isOrphan":false},{"type":"LineComment","text":" TODO: remove the hack","lineNumber":70,"isOrphan":false},{"type":"LineComment","text":" remove the redundant visibility type as GIVER_TEAM_MEMBERS is just RECIPIENT_TEAM_MEMBERS","lineNumber":75,"isOrphan":true},{"type":"LineComment","text":" contribution question keep the redundancy for legacy reason","lineNumber":76,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts a list of feedback participant type to a list of visibility type.\n     ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Hides some attributes to a student.\n     ","lineNumber":170,"isOrphan":false}],"allMethods":[{"fullQualified":"private List<FeedbackVisibilityType> convertToFeedbackVisibilityType(List<FeedbackParticipantType> feedbackParticipantTypeList)","name":"convertToFeedbackVisibilityType","type":"List<FeedbackVisibilityType>","javadoc":"\n     * Converts a list of feedback participant type to a list of visibility type.\n     "},{"fullQualified":"public String getFeedbackQuestionId()","name":"getFeedbackQuestionId","type":"String","javadoc":null},{"fullQualified":"public int getQuestionNumber()","name":"getQuestionNumber","type":"int","javadoc":null},{"fullQualified":"public void setQuestionNumber(int questionNumber)","name":"setQuestionNumber","type":"void","javadoc":null},{"fullQualified":"public String getQuestionBrief()","name":"getQuestionBrief","type":"String","javadoc":null},{"fullQualified":"public String getQuestionDescription()","name":"getQuestionDescription","type":"String","javadoc":null},{"fullQualified":"public FeedbackQuestionDetails getQuestionDetails()","name":"getQuestionDetails","type":"FeedbackQuestionDetails","javadoc":null},{"fullQualified":"public FeedbackQuestionType getQuestionType()","name":"getQuestionType","type":"FeedbackQuestionType","javadoc":null},{"fullQualified":"public FeedbackParticipantType getGiverType()","name":"getGiverType","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public FeedbackParticipantType getRecipientType()","name":"getRecipientType","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public NumberOfEntitiesToGiveFeedbackToSetting getNumberOfEntitiesToGiveFeedbackToSetting()","name":"getNumberOfEntitiesToGiveFeedbackToSetting","type":"NumberOfEntitiesToGiveFeedbackToSetting","javadoc":null},{"fullQualified":"public Integer getCustomNumberOfEntitiesToGiveFeedbackTo()","name":"getCustomNumberOfEntitiesToGiveFeedbackTo","type":"Integer","javadoc":null},{"fullQualified":"public List<FeedbackVisibilityType> getShowResponsesTo()","name":"getShowResponsesTo","type":"List<FeedbackVisibilityType>","javadoc":null},{"fullQualified":"public List<FeedbackVisibilityType> getShowGiverNameTo()","name":"getShowGiverNameTo","type":"List<FeedbackVisibilityType>","javadoc":null},{"fullQualified":"public List<FeedbackVisibilityType> getShowRecipientNameTo()","name":"getShowRecipientNameTo","type":"List<FeedbackVisibilityType>","javadoc":null},{"fullQualified":"public void hideInformationForStudent()","name":"hideInformationForStudent","type":"void","javadoc":"\n     * Hides some attributes to a student.\n     "}],"allConstructors":[{"identifier":"public FeedbackQuestionData(FeedbackQuestionAttributes feedbackQuestionAttributes)","javadocComment":null}]},{"name":"FeedbackQuestionRecipientData","fullyQualifiedName":"teammates.ui.output.FeedbackQuestionRecipientData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public String getIdentifier()","name":"getIdentifier","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackQuestionRecipientData(String name, String identifier)","javadocComment":null}]},{"name":"FeedbackQuestionRecipientsData","fullyQualifiedName":"teammates.ui.output.FeedbackQuestionRecipientsData","isInterface":false,"codeComments":[{"type":"LineComment","text":" sort by name","lineNumber":21,"isOrphan":false}],"allMethods":[{"fullQualified":"public List<FeedbackQuestionRecipientData> getRecipients()","name":"getRecipients","type":"List<FeedbackQuestionRecipientData>","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackQuestionRecipientsData(Map<String, String> recipients)","javadocComment":null}]},{"name":"FeedbackQuestionsData","fullyQualifiedName":"teammates.ui.output.FeedbackQuestionsData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Normalizes question number in questions by setting question number in sequence (i.e. 1, 2, 3, 4 ...).\n     ","lineNumber":22,"isOrphan":false}],"allMethods":[{"fullQualified":"public List<FeedbackQuestionData> getQuestions()","name":"getQuestions","type":"List<FeedbackQuestionData>","javadoc":null},{"fullQualified":"public void normalizeQuestionNumber()","name":"normalizeQuestionNumber","type":"void","javadoc":"\n     * Normalizes question number in questions by setting question number in sequence (i.e. 1, 2, 3, 4 ...).\n     "}],"allConstructors":[{"identifier":"public FeedbackQuestionsData(List<FeedbackQuestionAttributes> questionAttributesList)","javadocComment":null}]},{"name":"FeedbackResponseCommentData","fullyQualifiedName":"teammates.ui.output.FeedbackResponseCommentData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Converts a list of feedback participant type to a list of comment visibility type.\n     ","lineNumber":38,"isOrphan":false}],"allMethods":[{"fullQualified":"private List<CommentVisibilityType> convertToFeedbackVisibilityType(List<FeedbackParticipantType> feedbackParticipantTypeList)","name":"convertToFeedbackVisibilityType","type":"List<CommentVisibilityType>","javadoc":"\n     * Converts a list of feedback participant type to a list of comment visibility type.\n     "},{"fullQualified":"public String getCommentText()","name":"getCommentText","type":"String","javadoc":null},{"fullQualified":"public long getFeedbackResponseCommentId()","name":"getFeedbackResponseCommentId","type":"long","javadoc":null},{"fullQualified":"public String getFeedbackCommentText()","name":"getFeedbackCommentText","type":"String","javadoc":null},{"fullQualified":"public String getCommentGiver()","name":"getCommentGiver","type":"String","javadoc":null},{"fullQualified":"public List<CommentVisibilityType> getShowGiverNameTo()","name":"getShowGiverNameTo","type":"List<CommentVisibilityType>","javadoc":null},{"fullQualified":"public List<CommentVisibilityType> getShowCommentTo()","name":"getShowCommentTo","type":"List<CommentVisibilityType>","javadoc":null},{"fullQualified":"public long getCreatedAt()","name":"getCreatedAt","type":"long","javadoc":null},{"fullQualified":"public String getLastEditorEmail()","name":"getLastEditorEmail","type":"String","javadoc":null},{"fullQualified":"public long getLastEditedAt()","name":"getLastEditedAt","type":"long","javadoc":null},{"fullQualified":"public boolean isVisibilityFollowingFeedbackQuestion()","name":"isVisibilityFollowingFeedbackQuestion","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackResponseCommentData(FeedbackResponseCommentAttributes frc)","javadocComment":null}]},{"name":"FeedbackResponseData","fullyQualifiedName":"teammates.ui.output.FeedbackResponseData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getFeedbackResponseId()","name":"getFeedbackResponseId","type":"String","javadoc":null},{"fullQualified":"public String getGiverIdentifier()","name":"getGiverIdentifier","type":"String","javadoc":null},{"fullQualified":"public String getRecipientIdentifier()","name":"getRecipientIdentifier","type":"String","javadoc":null},{"fullQualified":"public FeedbackResponseDetails getResponseDetails()","name":"getResponseDetails","type":"FeedbackResponseDetails","javadoc":null},{"fullQualified":"public FeedbackResponseCommentData getGiverComment()","name":"getGiverComment","type":"FeedbackResponseCommentData","javadoc":null},{"fullQualified":"public void setGiverComment(FeedbackResponseCommentData giverComment)","name":"setGiverComment","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackResponseData(FeedbackResponseAttributes feedbackResponseAttributes)","javadocComment":null}]},{"name":"FeedbackResponsesData","fullyQualifiedName":"teammates.ui.output.FeedbackResponsesData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void setResponses(List<FeedbackResponseData> responses)","name":"setResponses","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackResponseData> getResponses()","name":"getResponses","type":"List<FeedbackResponseData>","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackResponsesData(List<FeedbackResponseAttributes> responses)","javadocComment":null},{"identifier":"public FeedbackResponsesData()","javadocComment":null}]},{"name":"FeedbackSessionData","fullyQualifiedName":"teammates.ui.output.FeedbackSessionData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Hides some attributes to student.\n     ","lineNumber":290,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Hides some attributes to instructor without appropriate privilege.\n     ","lineNumber":299,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Hides some attributes for instructor who is submitting feedback session.\n     ","lineNumber":307,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getTimeZone()","name":"getTimeZone","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getInstructions()","name":"getInstructions","type":"String","javadoc":null},{"fullQualified":"public long getSubmissionStartTimestamp()","name":"getSubmissionStartTimestamp","type":"long","javadoc":null},{"fullQualified":"public long getSubmissionEndTimestamp()","name":"getSubmissionEndTimestamp","type":"long","javadoc":null},{"fullQualified":"public long getSubmissionEndWithExtensionTimestamp()","name":"getSubmissionEndWithExtensionTimestamp","type":"long","javadoc":null},{"fullQualified":"public Long getSessionVisibleFromTimestamp()","name":"getSessionVisibleFromTimestamp","type":"Long","javadoc":null},{"fullQualified":"public Long getResultVisibleFromTimestamp()","name":"getResultVisibleFromTimestamp","type":"Long","javadoc":null},{"fullQualified":"public Long getGracePeriod()","name":"getGracePeriod","type":"Long","javadoc":null},{"fullQualified":"public SessionVisibleSetting getSessionVisibleSetting()","name":"getSessionVisibleSetting","type":"SessionVisibleSetting","javadoc":null},{"fullQualified":"public Long getCustomSessionVisibleTimestamp()","name":"getCustomSessionVisibleTimestamp","type":"Long","javadoc":null},{"fullQualified":"public ResponseVisibleSetting getResponseVisibleSetting()","name":"getResponseVisibleSetting","type":"ResponseVisibleSetting","javadoc":null},{"fullQualified":"public Long getCustomResponseVisibleTimestamp()","name":"getCustomResponseVisibleTimestamp","type":"Long","javadoc":null},{"fullQualified":"public FeedbackSessionSubmissionStatus getSubmissionStatus()","name":"getSubmissionStatus","type":"FeedbackSessionSubmissionStatus","javadoc":null},{"fullQualified":"public FeedbackSessionPublishStatus getPublishStatus()","name":"getPublishStatus","type":"FeedbackSessionPublishStatus","javadoc":null},{"fullQualified":"public Boolean getIsClosingEmailEnabled()","name":"getIsClosingEmailEnabled","type":"Boolean","javadoc":null},{"fullQualified":"public Boolean getIsPublishedEmailEnabled()","name":"getIsPublishedEmailEnabled","type":"Boolean","javadoc":null},{"fullQualified":"public Map<String, Long> getStudentDeadlines()","name":"getStudentDeadlines","type":"Map<String,Long>","javadoc":null},{"fullQualified":"public Map<String, Long> getInstructorDeadlines()","name":"getInstructorDeadlines","type":"Map<String,Long>","javadoc":null},{"fullQualified":"public void setSessionVisibleFromTimestamp(Long sessionVisibleFromTimestamp)","name":"setSessionVisibleFromTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setResultVisibleFromTimestamp(Long resultVisibleFromTimestamp)","name":"setResultVisibleFromTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setGracePeriod(Long gracePeriod)","name":"setGracePeriod","type":"void","javadoc":null},{"fullQualified":"public void setSessionVisibleSetting(SessionVisibleSetting sessionVisibleSetting)","name":"setSessionVisibleSetting","type":"void","javadoc":null},{"fullQualified":"public void setCustomSessionVisibleTimestamp(Long customSessionVisibleTimestamp)","name":"setCustomSessionVisibleTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setResponseVisibleSetting(ResponseVisibleSetting responseVisibleSetting)","name":"setResponseVisibleSetting","type":"void","javadoc":null},{"fullQualified":"public void setCustomResponseVisibleTimestamp(Long customResponseVisibleTimestamp)","name":"setCustomResponseVisibleTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setPublishStatus(FeedbackSessionPublishStatus publishStatus)","name":"setPublishStatus","type":"void","javadoc":null},{"fullQualified":"public void setClosingEmailEnabled(Boolean closingEmailEnabled)","name":"setClosingEmailEnabled","type":"void","javadoc":null},{"fullQualified":"public void setPublishedEmailEnabled(Boolean publishedEmailEnabled)","name":"setPublishedEmailEnabled","type":"void","javadoc":null},{"fullQualified":"public long getCreatedAtTimestamp()","name":"getCreatedAtTimestamp","type":"long","javadoc":null},{"fullQualified":"public void setCreatedAtTimestamp(long timestamp)","name":"setCreatedAtTimestamp","type":"void","javadoc":null},{"fullQualified":"public Long getDeletedAtTimestamp()","name":"getDeletedAtTimestamp","type":"Long","javadoc":null},{"fullQualified":"public InstructorPermissionSet getPrivileges()","name":"getPrivileges","type":"InstructorPermissionSet","javadoc":null},{"fullQualified":"public void setPrivileges(InstructorPermissionSet privileges)","name":"setPrivileges","type":"void","javadoc":null},{"fullQualified":"public void setStudentDeadlines(Map<String, Long> studentDeadlines)","name":"setStudentDeadlines","type":"void","javadoc":null},{"fullQualified":"public void setInstructorDeadlines(Map<String, Long> instructorDeadlines)","name":"setInstructorDeadlines","type":"void","javadoc":null},{"fullQualified":"public void hideInformationForStudent()","name":"hideInformationForStudent","type":"void","javadoc":"\n     * Hides some attributes to student.\n     "},{"fullQualified":"public void hideInformationForInstructor()","name":"hideInformationForInstructor","type":"void","javadoc":"\n     * Hides some attributes to instructor without appropriate privilege.\n     "},{"fullQualified":"public void hideInformationForInstructorSubmission()","name":"hideInformationForInstructorSubmission","type":"void","javadoc":"\n     * Hides some attributes for instructor who is submitting feedback session.\n     "},{"fullQualified":"private void hideSessionVisibilityTimestamps()","name":"hideSessionVisibilityTimestamps","type":"void","javadoc":null},{"fullQualified":"private void hideInformationForStudentAndInstructor()","name":"hideInformationForStudentAndInstructor","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSessionData(FeedbackSessionAttributes feedbackSessionAttributes)","javadocComment":null}]},{"name":"FeedbackSessionLogData","fullyQualifiedName":"teammates.ui.output.FeedbackSessionLogData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns all feedback session log entries.\n     ","lineNumber":32,"isOrphan":false}],"allMethods":[{"fullQualified":"public FeedbackSessionData getFeedbackSessionData()","name":"getFeedbackSessionData","type":"FeedbackSessionData","javadoc":null},{"fullQualified":"public List<FeedbackSessionLogEntryData> getFeedbackSessionLogEntries()","name":"getFeedbackSessionLogEntries","type":"List<FeedbackSessionLogEntryData>","javadoc":"\n     * Returns all feedback session log entries.\n     "}],"allConstructors":[{"identifier":"public FeedbackSessionLogData(FeedbackSessionAttributes feedbackSession, List<FeedbackSessionLogEntry> logEntries, Map<String, StudentAttributes> studentsMap)","javadocComment":null}]},{"name":"FeedbackSessionLogEntryData","fullyQualifiedName":"teammates.ui.output.FeedbackSessionLogEntryData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public StudentData getStudentData()","name":"getStudentData","type":"StudentData","javadoc":null},{"fullQualified":"public FeedbackSessionLogType getFeedbackSessionLogType()","name":"getFeedbackSessionLogType","type":"FeedbackSessionLogType","javadoc":null},{"fullQualified":"public long getTimestamp()","name":"getTimestamp","type":"long","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSessionLogEntryData(FeedbackSessionLogEntry logEntry, StudentAttributes student)","javadocComment":null}]},{"name":"FeedbackSessionLogsData","fullyQualifiedName":"teammates.ui.output.FeedbackSessionLogsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<FeedbackSessionLogData> getFeedbackSessionLogs()","name":"getFeedbackSessionLogs","type":"List<FeedbackSessionLogData>","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSessionLogsData(Map<String, List<FeedbackSessionLogEntry>> groupedEntries, Map<String, StudentAttributes> studentsMap, Map<String, FeedbackSessionAttributes> sessionsMap)","javadocComment":null}]},{"name":"FeedbackSessionsData","fullyQualifiedName":"teammates.ui.output.FeedbackSessionsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<FeedbackSessionData> getFeedbackSessions()","name":"getFeedbackSessions","type":"List<FeedbackSessionData>","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSessionsData(List<FeedbackSessionAttributes> feedbackSessionAttributesList)","javadocComment":null}]},{"name":"FeedbackSessionStatsData","fullyQualifiedName":"teammates.ui.output.FeedbackSessionStatsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public int getSubmittedTotal()","name":"getSubmittedTotal","type":"int","javadoc":null},{"fullQualified":"public int getExpectedTotal()","name":"getExpectedTotal","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSessionStatsData(int submittedTotal, int expectedTotal)","javadocComment":null}]},{"name":"FeedbackSessionSubmittedGiverSet","fullyQualifiedName":"teammates.ui.output.FeedbackSessionSubmittedGiverSet","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public Set<String> getGiverIdentifiers()","name":"getGiverIdentifiers","type":"Set<String>","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSessionSubmittedGiverSet(Set<String> giverIdentifiers)","javadocComment":null}]},{"name":"GeneralLogsData","fullyQualifiedName":"teammates.ui.output.GeneralLogsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<GeneralLogEntry> getLogEntries()","name":"getLogEntries","type":"List<GeneralLogEntry>","javadoc":null},{"fullQualified":"public boolean getHasNextPage()","name":"getHasNextPage","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public GeneralLogsData(QueryLogsResults queryResults)","javadocComment":null}]},{"name":"HasResponsesData","fullyQualifiedName":"teammates.ui.output.HasResponsesData","isInterface":false,"codeComments":[{"type":"LineComment","text":" Used for single entry hasResponses check.","lineNumber":12,"isOrphan":false},{"type":"LineComment","text":" Used for multi-session hasResponses check.","lineNumber":14,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Constructor for check for presence of responses.\n     *\n     * @param hasResponses True if has response.\n     ","lineNumber":16,"isOrphan":false},{"type":"LineComment","text":" unused","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Constructor for multi-session check for presence of responses.\n     *\n     * @param hasResponsesBySession Map of session name and whether each has response.\n     ","lineNumber":26,"isOrphan":false},{"type":"LineComment","text":" unused","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Return true if has no response.\n     ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Return a map of session name to whether it has responses.\n     ","lineNumber":43,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean getHasResponses()","name":"getHasResponses","type":"boolean","javadoc":"\n     * Return true if has no response.\n     "},{"fullQualified":"public Map<String, Boolean> getHasResponsesBySessions()","name":"getHasResponsesBySessions","type":"Map<String,Boolean>","javadoc":"\n     * Return a map of session name to whether it has responses.\n     "}],"allConstructors":[{"identifier":"public HasResponsesData(boolean hasResponses)","javadocComment":"\n     * Constructor for check for presence of responses.\n     *\n     * @param hasResponses True if has response.\n     "},{"identifier":"public HasResponsesData(Map<String, Boolean> hasResponsesBySession)","javadocComment":"\n     * Constructor for multi-session check for presence of responses.\n     *\n     * @param hasResponsesBySession Map of session name and whether each has response.\n     "}]},{"name":"InstructorData","fullyQualifiedName":"teammates.ui.output.InstructorData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Adds additional attributes only for search result for admin.\n     *\n     * @param key Registration key\n     * @param institute Institute of the instructor\n     * @param googleId Google ID of the instructor\n     ","lineNumber":108,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String googleId)","name":"setGoogleId","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public InstructorPermissionRole getRole()","name":"getRole","type":"InstructorPermissionRole","javadoc":null},{"fullQualified":"public void setRole(InstructorPermissionRole role)","name":"setRole","type":"void","javadoc":null},{"fullQualified":"public Boolean getIsDisplayedToStudents()","name":"getIsDisplayedToStudents","type":"Boolean","javadoc":null},{"fullQualified":"public void setIsDisplayedToStudents(Boolean displayedToStudents)","name":"setIsDisplayedToStudents","type":"void","javadoc":null},{"fullQualified":"public String getDisplayedToStudentsAs()","name":"getDisplayedToStudentsAs","type":"String","javadoc":null},{"fullQualified":"public void setDisplayedToStudentsAs(String displayedToStudentsAs)","name":"setDisplayedToStudentsAs","type":"void","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public JoinState getJoinState()","name":"getJoinState","type":"JoinState","javadoc":null},{"fullQualified":"public void setJoinState(JoinState joinState)","name":"setJoinState","type":"void","javadoc":null},{"fullQualified":"public String getKey()","name":"getKey","type":"String","javadoc":null},{"fullQualified":"public void setKey(String key)","name":"setKey","type":"void","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public void setInstitute(String institute)","name":"setInstitute","type":"void","javadoc":null},{"fullQualified":"public void addAdditionalInformationForAdminSearch(String key, String institute, String googleId)","name":"addAdditionalInformationForAdminSearch","type":"void","javadoc":"\n     * Adds additional attributes only for search result for admin.\n     *\n     * @param key Registration key\n     * @param institute Institute of the instructor\n     * @param googleId Google ID of the instructor\n     "}],"allConstructors":[{"identifier":"public InstructorData(InstructorAttributes instructorAttributes)","javadocComment":null}]},{"name":"InstructorPrivilegeData","fullyQualifiedName":"teammates.ui.output.InstructorPrivilegeData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public InstructorPrivileges getPrivileges()","name":"getPrivileges","type":"InstructorPrivileges","javadoc":null}],"allConstructors":[{"identifier":"public InstructorPrivilegeData(InstructorPrivileges privileges)","javadocComment":null}]},{"name":"InstructorsData","fullyQualifiedName":"teammates.ui.output.InstructorsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<InstructorData> getInstructors()","name":"getInstructors","type":"List<InstructorData>","javadoc":null},{"fullQualified":"public void setInstructors(List<InstructorData> instructors)","name":"setInstructors","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public InstructorsData()","javadocComment":null},{"identifier":"public InstructorsData(List<InstructorAttributes> instructorAttributesList)","javadocComment":null}]},{"name":"JoinLinkData","fullyQualifiedName":"teammates.ui.output.JoinLinkData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getJoinLink()","name":"getJoinLink","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public JoinLinkData(String joinLink)","javadocComment":null}]},{"name":"JoinStatus","fullyQualifiedName":"teammates.ui.output.JoinStatus","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean getHasJoined()","name":"getHasJoined","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public JoinStatus(boolean hasJoined)","javadocComment":null}]},{"name":"MessageOutput","fullyQualifiedName":"teammates.ui.output.MessageOutput","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public MessageOutput(String message)","javadocComment":null}]},{"name":"NationalitiesData","fullyQualifiedName":"teammates.ui.output.NationalitiesData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<String> getNationalities()","name":"getNationalities","type":"List<String>","javadoc":null}],"allConstructors":[{"identifier":"public NationalitiesData(List<String> nationalities)","javadocComment":null}]},{"name":"NotificationData","fullyQualifiedName":"teammates.ui.output.NotificationData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getNotificationId()","name":"getNotificationId","type":"String","javadoc":null},{"fullQualified":"public long getStartTimestamp()","name":"getStartTimestamp","type":"long","javadoc":null},{"fullQualified":"public long getEndTimestamp()","name":"getEndTimestamp","type":"long","javadoc":null},{"fullQualified":"public long getCreatedAt()","name":"getCreatedAt","type":"long","javadoc":null},{"fullQualified":"public NotificationStyle getStyle()","name":"getStyle","type":"NotificationStyle","javadoc":null},{"fullQualified":"public NotificationTargetUser getTargetUser()","name":"getTargetUser","type":"NotificationTargetUser","javadoc":null},{"fullQualified":"public String getTitle()","name":"getTitle","type":"String","javadoc":null},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null},{"fullQualified":"public boolean isShown()","name":"isShown","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public NotificationData(NotificationAttributes notificationAttributes)","javadocComment":null}]},{"name":"NotificationsData","fullyQualifiedName":"teammates.ui.output.NotificationsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<NotificationData> getNotifications()","name":"getNotifications","type":"List<NotificationData>","javadoc":null}],"allConstructors":[{"identifier":"public NotificationsData(List<NotificationAttributes> notificationAttributesList)","javadocComment":null}]},{"name":"OngoingSession","fullyQualifiedName":"teammates.ui.output.OngoingSession","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the status for a feedback session to be displayed to the user.\n     ","lineNumber":45,"isOrphan":false}],"allMethods":[{"fullQualified":"private String getSessionStatusForShow(FeedbackSessionAttributes fs)","name":"getSessionStatusForShow","type":"String","javadoc":"\n     * Gets the status for a feedback session to be displayed to the user.\n     "},{"fullQualified":"public String getSessionStatus()","name":"getSessionStatus","type":"String","javadoc":null},{"fullQualified":"public String getInstructorHomePageLink()","name":"getInstructorHomePageLink","type":"String","javadoc":null},{"fullQualified":"public long getStartTime()","name":"getStartTime","type":"long","javadoc":null},{"fullQualified":"public long getEndTime()","name":"getEndTime","type":"long","javadoc":null},{"fullQualified":"public String getCreatorEmail()","name":"getCreatorEmail","type":"String","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public OngoingSession(FeedbackSessionAttributes fs, AccountAttributes account)","javadocComment":null}]},{"name":"OngoingSessionsData","fullyQualifiedName":"teammates.ui.output.OngoingSessionsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public int getTotalOngoingSessions()","name":"getTotalOngoingSessions","type":"int","javadoc":null},{"fullQualified":"public int getTotalOpenSessions()","name":"getTotalOpenSessions","type":"int","javadoc":null},{"fullQualified":"public int getTotalClosedSessions()","name":"getTotalClosedSessions","type":"int","javadoc":null},{"fullQualified":"public int getTotalAwaitingSessions()","name":"getTotalAwaitingSessions","type":"int","javadoc":null},{"fullQualified":"public long getTotalInstitutes()","name":"getTotalInstitutes","type":"long","javadoc":null},{"fullQualified":"public Map<String, List<OngoingSession>> getSessions()","name":"getSessions","type":"Map<String,List<OngoingSession>>","javadoc":null},{"fullQualified":"public void setTotalOngoingSessions(int totalOngoingSessions)","name":"setTotalOngoingSessions","type":"void","javadoc":null},{"fullQualified":"public void setTotalOpenSessions(int totalOpenSessions)","name":"setTotalOpenSessions","type":"void","javadoc":null},{"fullQualified":"public void setTotalClosedSessions(int totalClosedSessions)","name":"setTotalClosedSessions","type":"void","javadoc":null},{"fullQualified":"public void setTotalAwaitingSessions(int totalAwaitingSessions)","name":"setTotalAwaitingSessions","type":"void","javadoc":null},{"fullQualified":"public void setTotalInstitutes(long totalInstitutes)","name":"setTotalInstitutes","type":"void","javadoc":null},{"fullQualified":"public void setSessions(Map<String, List<OngoingSession>> sessions)","name":"setSessions","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ReadNotificationsData","fullyQualifiedName":"teammates.ui.output.ReadNotificationsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<String> getReadNotifications()","name":"getReadNotifications","type":"List<String>","javadoc":null}],"allConstructors":[{"identifier":"public ReadNotificationsData(List<String> notificationIds)","javadocComment":null}]},{"name":"RegenerateKeyData","fullyQualifiedName":"teammates.ui.output.RegenerateKeyData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null},{"fullQualified":"public String getNewRegistrationKey()","name":"getNewRegistrationKey","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public RegenerateKeyData(String msg, String key)","javadocComment":null}]},{"name":"RegkeyValidityData","fullyQualifiedName":"teammates.ui.output.RegkeyValidityData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Returns true if the registration key is valid, false otherwise.\n     ","lineNumber":17,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the registration key has been used, false otherwise.\n     ","lineNumber":24,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if access is allowed for the requester by using the registration key, false otherwise.\n     ","lineNumber":31,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean isValid()","name":"isValid","type":"boolean","javadoc":"\n     * Returns true if the registration key is valid, false otherwise.\n     "},{"fullQualified":"public boolean isUsed()","name":"isUsed","type":"boolean","javadoc":"\n     * Returns true if the registration key has been used, false otherwise.\n     "},{"fullQualified":"public boolean isAllowedAccess()","name":"isAllowedAccess","type":"boolean","javadoc":"\n     * Returns true if access is allowed for the requester by using the registration key, false otherwise.\n     "}],"allConstructors":[{"identifier":"public RegkeyValidityData(boolean isValid, boolean isUsed, boolean isAllowedAccess)","javadocComment":null}]},{"name":"SessionLinksRecoveryResponseData","fullyQualifiedName":"teammates.ui.output.SessionLinksRecoveryResponseData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean isEmailSent()","name":"isEmailSent","type":"boolean","javadoc":null},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public SessionLinksRecoveryResponseData(boolean isEmailSent, String message)","javadocComment":null}]},{"name":"QuestionOutput","fullyQualifiedName":"teammates.ui.output.SessionResultsData.QuestionOutput","isInterface":false,"codeComments":[{"type":"LineComment","text":" For student view only","lineNumber":377,"isOrphan":false}],"allMethods":[{"fullQualified":"public FeedbackQuestionData getFeedbackQuestion()","name":"getFeedbackQuestion","type":"FeedbackQuestionData","javadoc":null},{"fullQualified":"public String getQuestionStatistics()","name":"getQuestionStatistics","type":"String","javadoc":null},{"fullQualified":"public List<ResponseOutput> getAllResponses()","name":"getAllResponses","type":"List<ResponseOutput>","javadoc":null},{"fullQualified":"public List<ResponseOutput> getResponsesFromSelf()","name":"getResponsesFromSelf","type":"List<ResponseOutput>","javadoc":null},{"fullQualified":"public List<ResponseOutput> getResponsesToSelf()","name":"getResponsesToSelf","type":"List<ResponseOutput>","javadoc":null},{"fullQualified":"public List<List<ResponseOutput>> getOtherResponses()","name":"getOtherResponses","type":"List<List<ResponseOutput>>","javadoc":null}],"allConstructors":[{"identifier":"private QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes, String questionStatistics)","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.ui.output.SessionResultsData.ResponseOutput.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" Builder withIsMissingResponse(boolean isMissingResponse)","name":"withIsMissingResponse","type":"Builder","javadoc":null},{"fullQualified":" Builder withResponseId(String responseId)","name":"withResponseId","type":"Builder","javadoc":null},{"fullQualified":" Builder withGiver(String giverName)","name":"withGiver","type":"Builder","javadoc":null},{"fullQualified":" Builder withRelatedGiverEmail(@Nullable String relatedGiverEmail)","name":"withRelatedGiverEmail","type":"Builder","javadoc":null},{"fullQualified":" Builder withGiverTeam(String giverTeam)","name":"withGiverTeam","type":"Builder","javadoc":null},{"fullQualified":" Builder withGiverEmail(@Nullable String giverEmail)","name":"withGiverEmail","type":"Builder","javadoc":null},{"fullQualified":" Builder withGiverSection(String giverSection)","name":"withGiverSection","type":"Builder","javadoc":null},{"fullQualified":" Builder withRecipient(String recipientName)","name":"withRecipient","type":"Builder","javadoc":null},{"fullQualified":" Builder withRecipientTeam(String recipientTeam)","name":"withRecipientTeam","type":"Builder","javadoc":null},{"fullQualified":" Builder withRecipientEmail(@Nullable String recipientEmail)","name":"withRecipientEmail","type":"Builder","javadoc":null},{"fullQualified":" Builder withRecipientSection(String recipientSection)","name":"withRecipientSection","type":"Builder","javadoc":null},{"fullQualified":" Builder withResponseDetails(FeedbackResponseDetails responseDetails)","name":"withResponseDetails","type":"Builder","javadoc":null},{"fullQualified":" Builder withParticipantComment(@Nullable CommentOutput participantComment)","name":"withParticipantComment","type":"Builder","javadoc":null},{"fullQualified":" Builder withInstructorComments(List<CommentOutput> instructorComments)","name":"withInstructorComments","type":"Builder","javadoc":null},{"fullQualified":" ResponseOutput build()","name":"build","type":"ResponseOutput","javadoc":null}],"allConstructors":[{"identifier":"private Builder()","javadocComment":null}]},{"name":"ResponseOutput","fullyQualifiedName":"teammates.ui.output.SessionResultsData.ResponseOutput","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n         * Depending on the question giver type, {@code giverIdentifier} may contain the giver's email, any team member's\n         * email or null.\n         ","lineNumber":423,"isOrphan":false},{"type":"LineComment","text":" comments","lineNumber":440,"isOrphan":false},{"type":"LineComment","text":" use builder instead","lineNumber":446,"isOrphan":true},{"type":"JavadocComment","text":"\n         * Returns a builder for {@link ResponseOutput}.\n         ","lineNumber":449,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class for {@link ResponseOutput}.\n         ","lineNumber":516,"isOrphan":false}],"allMethods":[{"fullQualified":" static Builder builder()","name":"builder","type":"Builder","javadoc":"\n         * Returns a builder for {@link ResponseOutput}.\n         "},{"fullQualified":"public boolean isMissingResponse()","name":"isMissingResponse","type":"boolean","javadoc":null},{"fullQualified":"public String getResponseId()","name":"getResponseId","type":"String","javadoc":null},{"fullQualified":"public String getGiver()","name":"getGiver","type":"String","javadoc":null},{"fullQualified":"public String getGiverEmail()","name":"getGiverEmail","type":"String","javadoc":null},{"fullQualified":"public String getRelatedGiverEmail()","name":"getRelatedGiverEmail","type":"String","javadoc":null},{"fullQualified":"public String getGiverTeam()","name":"getGiverTeam","type":"String","javadoc":null},{"fullQualified":"public String getGiverSection()","name":"getGiverSection","type":"String","javadoc":null},{"fullQualified":"public String getRecipient()","name":"getRecipient","type":"String","javadoc":null},{"fullQualified":"public String getRecipientTeam()","name":"getRecipientTeam","type":"String","javadoc":null},{"fullQualified":"public String getRecipientEmail()","name":"getRecipientEmail","type":"String","javadoc":null},{"fullQualified":"public String getRecipientSection()","name":"getRecipientSection","type":"String","javadoc":null},{"fullQualified":"public FeedbackResponseDetails getResponseDetails()","name":"getResponseDetails","type":"FeedbackResponseDetails","javadoc":null},{"fullQualified":"public CommentOutput getParticipantComment()","name":"getParticipantComment","type":"CommentOutput","javadoc":null},{"fullQualified":"public List<CommentOutput> getInstructorComments()","name":"getInstructorComments","type":"List<CommentOutput>","javadoc":null}],"allConstructors":[{"identifier":"private ResponseOutput()","javadocComment":null}]},{"name":"Builder","fullyQualifiedName":"teammates.ui.output.SessionResultsData.CommentOutput.Builder","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" Builder withCommentGiver(@Nullable String commentGiver)","name":"withCommentGiver","type":"Builder","javadoc":null},{"fullQualified":" Builder withCommentGiverName(@Nullable String commentGiverName)","name":"withCommentGiverName","type":"Builder","javadoc":null},{"fullQualified":" Builder withLastEditorEmail(@Nullable String lastEditorEmail)","name":"withLastEditorEmail","type":"Builder","javadoc":null},{"fullQualified":" Builder withLastEditorName(@Nullable String lastEditorName)","name":"withLastEditorName","type":"Builder","javadoc":null},{"fullQualified":" CommentOutput build()","name":"build","type":"CommentOutput","javadoc":null}],"allConstructors":[{"identifier":"private Builder(FeedbackResponseCommentAttributes frc)","javadocComment":null}]},{"name":"CommentOutput","fullyQualifiedName":"teammates.ui.output.SessionResultsData.CommentOutput","isInterface":false,"codeComments":[{"type":"LineComment","text":" use builder instead","lineNumber":613,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Returns a builder for {@link CommentOutput}.\n         ","lineNumber":617,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class for {@link CommentOutput}.\n         ","lineNumber":634,"isOrphan":false}],"allMethods":[{"fullQualified":" static Builder builder(FeedbackResponseCommentAttributes frc)","name":"builder","type":"Builder","javadoc":"\n         * Returns a builder for {@link CommentOutput}.\n         "},{"fullQualified":"public String getCommentGiverName()","name":"getCommentGiverName","type":"String","javadoc":null},{"fullQualified":"public String getLastEditorName()","name":"getLastEditorName","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private CommentOutput(FeedbackResponseCommentAttributes frc)","javadocComment":null}]},{"name":"SessionResultsData","fullyQualifiedName":"teammates.ui.output.SessionResultsData","isInterface":false,"codeComments":[{"type":"LineComment","text":" use factory method instead","lineNumber":36,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Factory method to construct API output for instructor.\n     ","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" put normal responses","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":" put missing responses","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Factory method to construct API output for student.\n     ","lineNumber":67,"isOrphan":false},{"type":"LineComment","text":" we don't need care about the keys of the map here","lineNumber":104,"isOrphan":true},{"type":"LineComment","text":" as only the values of the map will be used","lineNumber":105,"isOrphan":false},{"type":"LineComment","text":" process giver","lineNumber":126,"isOrphan":false},{"type":"LineComment","text":" we don't want student to figure out who is who by using the hash","lineNumber":141,"isOrphan":false},{"type":"LineComment","text":" process recipient","lineNumber":145,"isOrphan":false},{"type":"LineComment","text":" we don't want student to figure out who is who by using the hash","lineNumber":161,"isOrphan":false},{"type":"LineComment","text":" process comments","lineNumber":168,"isOrphan":false},{"type":"LineComment","text":" process giver","lineNumber":208,"isOrphan":false},{"type":"LineComment","text":" remove recipient email as it is a team name","lineNumber":216,"isOrphan":false},{"type":"LineComment","text":" process recipient","lineNumber":233,"isOrphan":false},{"type":"LineComment","text":" remove recipient email as it is a team name","lineNumber":249,"isOrphan":false},{"type":"LineComment","text":" general recipient does not have email","lineNumber":252,"isOrphan":false},{"type":"LineComment","text":" process comments","lineNumber":257,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets giver name of a response from the bundle.\n     *\n     * <p>Anonymized the name if necessary.\n     ","lineNumber":280,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets recipient name of a response from the bundle.\n     *\n     * <p>Anonymized the name if necessary.\n     ","lineNumber":299,"isOrphan":false},{"type":"LineComment","text":" recipient type for self-feedback is the same as the giver type","lineNumber":308,"isOrphan":false},{"type":"LineComment","text":" for general question","lineNumber":315,"isOrphan":false},{"type":"LineComment","text":" participant comment will not need these fields","lineNumber":332,"isOrphan":false},{"type":"JavadocComment","text":"\n     * API output format for questions in session results.\n     ","lineNumber":367,"isOrphan":false},{"type":"LineComment","text":" For student view only","lineNumber":377,"isOrphan":false},{"type":"JavadocComment","text":"\n     * API output format for question responses.\n     ","lineNumber":413,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Depending on the question giver type, {@code giverIdentifier} may contain the giver's email, any team member's\n         * email or null.\n         ","lineNumber":423,"isOrphan":false},{"type":"LineComment","text":" comments","lineNumber":440,"isOrphan":false},{"type":"LineComment","text":" use builder instead","lineNumber":446,"isOrphan":true},{"type":"JavadocComment","text":"\n         * Returns a builder for {@link ResponseOutput}.\n         ","lineNumber":449,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class for {@link ResponseOutput}.\n         ","lineNumber":516,"isOrphan":false},{"type":"JavadocComment","text":"\n     * API output format for response comments.\n     ","lineNumber":602,"isOrphan":false},{"type":"LineComment","text":" use builder instead","lineNumber":613,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Returns a builder for {@link CommentOutput}.\n         ","lineNumber":617,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Builder class for {@link CommentOutput}.\n         ","lineNumber":634,"isOrphan":false}],"allMethods":[{"fullQualified":"public static SessionResultsData initForInstructor(SessionResultsBundle bundle)","name":"initForInstructor","type":"SessionResultsData","javadoc":"\n     * Factory method to construct API output for instructor.\n     "},{"fullQualified":"public static SessionResultsData initForStudent(SessionResultsBundle bundle, StudentAttributes student)","name":"initForStudent","type":"SessionResultsData","javadoc":"\n     * Factory method to construct API output for student.\n     "},{"fullQualified":"private static ResponseOutput buildSingleResponseForStudent(FeedbackResponseAttributes response, SessionResultsBundle bundle, StudentAttributes student)","name":"buildSingleResponseForStudent","type":"ResponseOutput","javadoc":null},{"fullQualified":"private static String removeAnonymousHash(String identifier)","name":"removeAnonymousHash","type":"String","javadoc":null},{"fullQualified":"private static List<ResponseOutput> buildResponsesForInstructor(List<FeedbackResponseAttributes> responses, SessionResultsBundle bundle, boolean areMissingResponses)","name":"buildResponsesForInstructor","type":"List<ResponseOutput>","javadoc":null},{"fullQualified":"private static ResponseOutput buildSingleResponseForInstructor(FeedbackResponseAttributes response, SessionResultsBundle bundle, boolean isMissingResponse)","name":"buildSingleResponseForInstructor","type":"ResponseOutput","javadoc":null},{"fullQualified":"private static String getGiverNameOfResponse(FeedbackResponseAttributes response, SessionResultsBundle bundle)","name":"getGiverNameOfResponse","type":"String","javadoc":"\n     * Gets giver name of a response from the bundle.\n     *\n     * <p>Anonymized the name if necessary.\n     "},{"fullQualified":"private static String getRecipientNameOfResponse(FeedbackResponseAttributes response, SessionResultsBundle bundle)","name":"getRecipientNameOfResponse","type":"String","javadoc":"\n     * Gets recipient name of a response from the bundle.\n     *\n     * <p>Anonymized the name if necessary.\n     "},{"fullQualified":"private static Queue<CommentOutput> buildComments(List<FeedbackResponseCommentAttributes> feedbackResponseComments, SessionResultsBundle bundle)","name":"buildComments","type":"Queue<CommentOutput>","javadoc":null},{"fullQualified":"public List<QuestionOutput> getQuestions()","name":"getQuestions","type":"List<QuestionOutput>","javadoc":null}],"allConstructors":[{"identifier":" SessionResultsData()","javadocComment":null}]},{"name":"StudentData","fullyQualifiedName":"teammates.ui.output.StudentData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Hides some attributes to student.\n     ","lineNumber":100,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Adds additional information only for search result for admin.\n     * @param key The registration key\n     * @param institute The institute of the student\n     * @param googleId The googleId of the student\n     ","lineNumber":108,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public String getGoogleId()","name":"getGoogleId","type":"String","javadoc":null},{"fullQualified":"public String getComments()","name":"getComments","type":"String","javadoc":null},{"fullQualified":"public JoinState getJoinState()","name":"getJoinState","type":"JoinState","javadoc":null},{"fullQualified":"public String getTeamName()","name":"getTeamName","type":"String","javadoc":null},{"fullQualified":"public String getSectionName()","name":"getSectionName","type":"String","javadoc":null},{"fullQualified":"public String getKey()","name":"getKey","type":"String","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public void setGoogleId(String googleId)","name":"setGoogleId","type":"void","javadoc":null},{"fullQualified":"public void setComments(String comments)","name":"setComments","type":"void","javadoc":null},{"fullQualified":"public void setJoinState(JoinState joinState)","name":"setJoinState","type":"void","javadoc":null},{"fullQualified":"public void setKey(String key)","name":"setKey","type":"void","javadoc":null},{"fullQualified":"public void setInstitute(String institute)","name":"setInstitute","type":"void","javadoc":null},{"fullQualified":"public void hideInformationForStudent()","name":"hideInformationForStudent","type":"void","javadoc":"\n     * Hides some attributes to student.\n     "},{"fullQualified":"public void addAdditionalInformationForAdminSearch(String key, String institute, String googleId)","name":"addAdditionalInformationForAdminSearch","type":"void","javadoc":"\n     * Adds additional information only for search result for admin.\n     * @param key The registration key\n     * @param institute The institute of the student\n     * @param googleId The googleId of the student\n     "}],"allConstructors":[{"identifier":"public StudentData(StudentAttributes studentAttributes)","javadocComment":null}]},{"name":"StudentProfileData","fullyQualifiedName":"teammates.ui.output.StudentProfileData","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Hides certain fields when profile is requested by another student.\n     ","lineNumber":56,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getMoreInfo()","name":"getMoreInfo","type":"String","javadoc":null},{"fullQualified":"public Gender getGender()","name":"getGender","type":"Gender","javadoc":null},{"fullQualified":"public String getNationality()","name":"getNationality","type":"String","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getShortName()","name":"getShortName","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public void hideInformationWhenViewedByOtherStudent()","name":"hideInformationWhenViewedByOtherStudent","type":"void","javadoc":"\n     * Hides certain fields when profile is requested by another student.\n     "}],"allConstructors":[{"identifier":"public StudentProfileData(String name, StudentProfileAttributes profileAttributes)","javadocComment":null}]},{"name":"StudentsData","fullyQualifiedName":"teammates.ui.output.StudentsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<StudentData> getStudents()","name":"getStudents","type":"List<StudentData>","javadoc":null},{"fullQualified":"public void setStudents(List<StudentData> students)","name":"setStudents","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public StudentsData()","javadocComment":null},{"identifier":"public StudentsData(List<StudentAttributes> students)","javadocComment":null}]},{"name":"TimeZonesData","fullyQualifiedName":"teammates.ui.output.TimeZonesData","isInterface":false,"codeComments":[{"type":"LineComment","text":" timezone name => offset from UTC in seconds","lineNumber":10,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getVersion()","name":"getVersion","type":"String","javadoc":null},{"fullQualified":"public Map<String, Integer> getOffsets()","name":"getOffsets","type":"Map<String,Integer>","javadoc":null}],"allConstructors":[{"identifier":"public TimeZonesData(String version, Map<String, Integer> offsets)","javadocComment":null}]},{"name":"UsageStatisticsData","fullyQualifiedName":"teammates.ui.output.UsageStatisticsData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public long getStartTime()","name":"getStartTime","type":"long","javadoc":null},{"fullQualified":"public int getTimePeriod()","name":"getTimePeriod","type":"int","javadoc":null},{"fullQualified":"public int getNumResponses()","name":"getNumResponses","type":"int","javadoc":null},{"fullQualified":"public int getNumCourses()","name":"getNumCourses","type":"int","javadoc":null},{"fullQualified":"public int getNumStudents()","name":"getNumStudents","type":"int","javadoc":null},{"fullQualified":"public int getNumInstructors()","name":"getNumInstructors","type":"int","javadoc":null},{"fullQualified":"public int getNumAccountRequests()","name":"getNumAccountRequests","type":"int","javadoc":null},{"fullQualified":"public int getNumEmails()","name":"getNumEmails","type":"int","javadoc":null},{"fullQualified":"public int getNumSubmissions()","name":"getNumSubmissions","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public UsageStatisticsData(UsageStatisticsAttributes attributes)","javadocComment":null}]},{"name":"UsageStatisticsRangeData","fullyQualifiedName":"teammates.ui.output.UsageStatisticsRangeData","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public List<UsageStatisticsData> getResult()","name":"getResult","type":"List<UsageStatisticsData>","javadoc":null}],"allConstructors":[{"identifier":"public UsageStatisticsRangeData(List<UsageStatisticsAttributes> usageStatistics)","javadocComment":null}]},{"name":"AccountCreateRequest","fullyQualifiedName":"teammates.ui.request.AccountCreateRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getInstructorEmail()","name":"getInstructorEmail","type":"String","javadoc":null},{"fullQualified":"public String getInstructorName()","name":"getInstructorName","type":"String","javadoc":null},{"fullQualified":"public String getInstructorInstitution()","name":"getInstructorInstitution","type":"String","javadoc":null},{"fullQualified":"public void setInstructorName(String name)","name":"setInstructorName","type":"void","javadoc":null},{"fullQualified":"public void setInstructorInstitution(String institution)","name":"setInstructorInstitution","type":"void","javadoc":null},{"fullQualified":"public void setInstructorEmail(String instructorEmail)","name":"setInstructorEmail","type":"void","javadoc":null},{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BasicRequest","fullyQualifiedName":"teammates.ui.request.BasicRequest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Validate the request.\n     ","lineNumber":8,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Asserts a condition or throws {@link InvalidHttpRequestBodyException}.\n     ","lineNumber":13,"isOrphan":false}],"allMethods":[{"fullQualified":"public abstract void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":"\n     * Validate the request.\n     "},{"fullQualified":" void assertTrue(boolean condition, String message) throws InvalidHttpRequestBodyException","name":"assertTrue","type":"void","javadoc":"\n     * Asserts a condition or throws {@link InvalidHttpRequestBodyException}.\n     "}],"allConstructors":[]},{"name":"CourseArchiveRequest","fullyQualifiedName":"teammates.ui.request.CourseArchiveRequest","isInterface":false,"codeComments":[{"type":"LineComment","text":"nothing to validate","lineNumber":11,"isOrphan":true}],"allMethods":[{"fullQualified":"public void validate()","name":"validate","type":"void","javadoc":null},{"fullQualified":"public boolean getArchiveStatus()","name":"getArchiveStatus","type":"boolean","javadoc":null},{"fullQualified":"public void setArchiveStatus(boolean archiveStatus)","name":"setArchiveStatus","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CourseBasicRequest","fullyQualifiedName":"teammates.ui.request.CourseBasicRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public String getCourseName()","name":"getCourseName","type":"String","javadoc":null},{"fullQualified":"public void setCourseName(String courseName)","name":"setCourseName","type":"void","javadoc":null},{"fullQualified":"public String getTimeZone()","name":"getTimeZone","type":"String","javadoc":null},{"fullQualified":"public void setTimeZone(String timeZone)","name":"setTimeZone","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CourseCreateRequest","fullyQualifiedName":"teammates.ui.request.CourseCreateRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public void setCourseId(String courseId)","name":"setCourseId","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CourseUpdateRequest","fullyQualifiedName":"teammates.ui.request.CourseUpdateRequest","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"ErrorReportRequest","fullyQualifiedName":"teammates.ui.request.ErrorReportRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public String getContent()","name":"getContent","type":"String","javadoc":null},{"fullQualified":"public String getSubject()","name":"getSubject","type":"String","javadoc":null},{"fullQualified":"public String getRequestId()","name":"getRequestId","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public ErrorReportRequest(String requestId, String subject, String content)","javadocComment":null}]},{"name":"FeedbackQuestionBasicRequest","fullyQualifiedName":"teammates.ui.request.FeedbackQuestionBasicRequest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Get feedback question details.\n     ","lineNumber":67,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get number of entities to give feedback to.\n     ","lineNumber":89,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get feedback participants who can see responses.\n     ","lineNumber":105,"isOrphan":false},{"type":"LineComment","text":" specially handling for contribution questions","lineNumber":112,"isOrphan":true},{"type":"LineComment","text":" TODO: remove the hack","lineNumber":113,"isOrphan":false},{"type":"LineComment","text":" add the redundant participant type OWN_TEAM_MEMBERS even if it is just RECIPIENT_TEAM_MEMBERS","lineNumber":118,"isOrphan":true},{"type":"LineComment","text":" contribution question keep the redundancy for legacy reason","lineNumber":119,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts a list of feedback visibility type to a list of feedback participant type.\n     ","lineNumber":134,"isOrphan":false}],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public int getQuestionNumber()","name":"getQuestionNumber","type":"int","javadoc":null},{"fullQualified":"public String getQuestionDescription()","name":"getQuestionDescription","type":"String","javadoc":null},{"fullQualified":"public FeedbackQuestionDetails getQuestionDetails()","name":"getQuestionDetails","type":"FeedbackQuestionDetails","javadoc":"\n     * Get feedback question details.\n     "},{"fullQualified":"public FeedbackParticipantType getGiverType()","name":"getGiverType","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public FeedbackParticipantType getRecipientType()","name":"getRecipientType","type":"FeedbackParticipantType","javadoc":null},{"fullQualified":"public int getNumberOfEntitiesToGiveFeedbackTo()","name":"getNumberOfEntitiesToGiveFeedbackTo","type":"int","javadoc":"\n     * Get number of entities to give feedback to.\n     "},{"fullQualified":"public List<FeedbackParticipantType> getShowResponsesTo()","name":"getShowResponsesTo","type":"List<FeedbackParticipantType>","javadoc":"\n     * Get feedback participants who can see responses.\n     "},{"fullQualified":"public List<FeedbackParticipantType> getShowGiverNameTo()","name":"getShowGiverNameTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowRecipientNameTo()","name":"getShowRecipientNameTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"private List<FeedbackParticipantType> convertToFeedbackParticipantType(List<FeedbackVisibilityType> feedbackVisibilityTypes)","name":"convertToFeedbackParticipantType","type":"List<FeedbackParticipantType>","javadoc":"\n     * Converts a list of feedback visibility type to a list of feedback participant type.\n     "},{"fullQualified":"public void setQuestionNumber(int questionNumber)","name":"setQuestionNumber","type":"void","javadoc":null},{"fullQualified":"public void setQuestionBrief(String questionBrief)","name":"setQuestionBrief","type":"void","javadoc":null},{"fullQualified":"public void setQuestionDescription(String questionDescription)","name":"setQuestionDescription","type":"void","javadoc":null},{"fullQualified":"public void setQuestionDetails(FeedbackQuestionDetails questionDetails)","name":"setQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void setQuestionType(FeedbackQuestionType questionType)","name":"setQuestionType","type":"void","javadoc":null},{"fullQualified":"public void setGiverType(FeedbackParticipantType giverType)","name":"setGiverType","type":"void","javadoc":null},{"fullQualified":"public void setRecipientType(FeedbackParticipantType recipientType)","name":"setRecipientType","type":"void","javadoc":null},{"fullQualified":"public void setNumberOfEntitiesToGiveFeedbackToSetting(NumberOfEntitiesToGiveFeedbackToSetting numberOfEntitiesToGiveFeedbackToSetting)","name":"setNumberOfEntitiesToGiveFeedbackToSetting","type":"void","javadoc":null},{"fullQualified":"public void setCustomNumberOfEntitiesToGiveFeedbackTo(Integer customNumberOfEntitiesToGiveFeedbackTo)","name":"setCustomNumberOfEntitiesToGiveFeedbackTo","type":"void","javadoc":null},{"fullQualified":"public void setShowResponsesTo(List<FeedbackVisibilityType> showResponsesTo)","name":"setShowResponsesTo","type":"void","javadoc":null},{"fullQualified":"public void setShowGiverNameTo(List<FeedbackVisibilityType> showGiverNameTo)","name":"setShowGiverNameTo","type":"void","javadoc":null},{"fullQualified":"public void setShowRecipientNameTo(List<FeedbackVisibilityType> showRecipientNameTo)","name":"setShowRecipientNameTo","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackQuestionCreateRequest","fullyQualifiedName":"teammates.ui.request.FeedbackQuestionCreateRequest","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"FeedbackQuestionUpdateRequest","fullyQualifiedName":"teammates.ui.request.FeedbackQuestionUpdateRequest","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"FeedbackResponseCommentBasicRequest","fullyQualifiedName":"teammates.ui.request.FeedbackResponseCommentBasicRequest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Converts a list of comment visibility type to a list of feedback participant type.\n     ","lineNumber":44,"isOrphan":false}],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public String getCommentText()","name":"getCommentText","type":"String","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowCommentTo()","name":"getShowCommentTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"public List<FeedbackParticipantType> getShowGiverNameTo()","name":"getShowGiverNameTo","type":"List<FeedbackParticipantType>","javadoc":null},{"fullQualified":"private List<FeedbackParticipantType> convertToFeedbackParticipantType(List<CommentVisibilityType> commentVisibilityTypes)","name":"convertToFeedbackParticipantType","type":"List<FeedbackParticipantType>","javadoc":"\n     * Converts a list of comment visibility type to a list of feedback participant type.\n     "}],"allConstructors":[{"identifier":" FeedbackResponseCommentBasicRequest(String commentText, List<CommentVisibilityType> showCommentTo, List<CommentVisibilityType> showGiverNameTo)","javadocComment":null}]},{"name":"FeedbackResponseCommentCreateRequest","fullyQualifiedName":"teammates.ui.request.FeedbackResponseCommentCreateRequest","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public FeedbackResponseCommentCreateRequest(String commentText, List<CommentVisibilityType> showCommentTo, List<CommentVisibilityType> showGiverNameTo)","javadocComment":null}]},{"name":"FeedbackResponseCommentUpdateRequest","fullyQualifiedName":"teammates.ui.request.FeedbackResponseCommentUpdateRequest","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public FeedbackResponseCommentUpdateRequest(String commentText, List<CommentVisibilityType> showCommentTo, List<CommentVisibilityType> showGiverNameTo)","javadocComment":null}]},{"name":"FeedbackResponseRequest","fullyQualifiedName":"teammates.ui.request.FeedbackResponsesRequest.FeedbackResponseRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public String getRecipient()","name":"getRecipient","type":"String","javadoc":null},{"fullQualified":"public FeedbackResponseDetails getResponseDetails()","name":"getResponseDetails","type":"FeedbackResponseDetails","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackResponseRequest(String recipient, FeedbackResponseDetails responseDetails)","javadocComment":null}]},{"name":"FeedbackResponsesRequest","fullyQualifiedName":"teammates.ui.request.FeedbackResponsesRequest","isInterface":false,"codeComments":[{"type":"LineComment","text":" No validation necessary; each response entities will be validated separately","lineNumber":30,"isOrphan":true},{"type":"JavadocComment","text":"\n     * The basic request of submitting a feedback response.\n     ","lineNumber":33,"isOrphan":false}],"allMethods":[{"fullQualified":"public List<FeedbackResponseRequest> getResponses()","name":"getResponses","type":"List<FeedbackResponseRequest>","javadoc":null},{"fullQualified":"public void setResponses(List<FeedbackResponseRequest> responses)","name":"setResponses","type":"void","javadoc":null},{"fullQualified":"public List<String> getRecipients()","name":"getRecipients","type":"List<String>","javadoc":null},{"fullQualified":"public void validate()","name":"validate","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionBasicRequest","fullyQualifiedName":"teammates.ui.request.FeedbackSessionBasicRequest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the result visible from time of the session.\n     ","lineNumber":49,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the session visible from time.\n     ","lineNumber":65,"isOrphan":false}],"allMethods":[{"fullQualified":"public String getInstructions()","name":"getInstructions","type":"String","javadoc":null},{"fullQualified":"public Instant getSubmissionStartTime()","name":"getSubmissionStartTime","type":"Instant","javadoc":null},{"fullQualified":"public Instant getSubmissionEndTime()","name":"getSubmissionEndTime","type":"Instant","javadoc":null},{"fullQualified":"public Duration getGracePeriod()","name":"getGracePeriod","type":"Duration","javadoc":null},{"fullQualified":"public Instant getResultsVisibleFromTime() throws InvalidHttpRequestBodyException","name":"getResultsVisibleFromTime","type":"Instant","javadoc":"\n     * Gets the result visible from time of the session.\n     "},{"fullQualified":"public Instant getSessionVisibleFromTime() throws InvalidHttpRequestBodyException","name":"getSessionVisibleFromTime","type":"Instant","javadoc":"\n     * Gets the session visible from time.\n     "},{"fullQualified":"public boolean isClosingEmailEnabled()","name":"isClosingEmailEnabled","type":"boolean","javadoc":null},{"fullQualified":"public boolean isPublishedEmailEnabled()","name":"isPublishedEmailEnabled","type":"boolean","javadoc":null},{"fullQualified":"public void setInstructions(String instructions)","name":"setInstructions","type":"void","javadoc":null},{"fullQualified":"public void setSubmissionStartTimestamp(long submissionStartTimestamp)","name":"setSubmissionStartTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setSubmissionEndTimestamp(long submissionEndTimestamp)","name":"setSubmissionEndTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setGracePeriod(long gracePeriod)","name":"setGracePeriod","type":"void","javadoc":null},{"fullQualified":"public void setSessionVisibleSetting(SessionVisibleSetting sessionVisibleSetting)","name":"setSessionVisibleSetting","type":"void","javadoc":null},{"fullQualified":"public void setCustomSessionVisibleTimestamp(Long customSessionVisibleTimestamp)","name":"setCustomSessionVisibleTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setResponseVisibleSetting(ResponseVisibleSetting responseVisibleSetting)","name":"setResponseVisibleSetting","type":"void","javadoc":null},{"fullQualified":"public void setCustomResponseVisibleTimestamp(Long customResponseVisibleTimestamp)","name":"setCustomResponseVisibleTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setClosingEmailEnabled(boolean closingEmailEnabled)","name":"setClosingEmailEnabled","type":"void","javadoc":null},{"fullQualified":"public void setPublishedEmailEnabled(boolean publishedEmailEnabled)","name":"setPublishedEmailEnabled","type":"void","javadoc":null},{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionCreateRequest","fullyQualifiedName":"teammates.ui.request.FeedbackSessionCreateRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getToCopyCourseId()","name":"getToCopyCourseId","type":"String","javadoc":null},{"fullQualified":"public String getToCopySessionName()","name":"getToCopySessionName","type":"String","javadoc":null},{"fullQualified":"public void setFeedbackSessionName(String feedbackSessionName)","name":"setFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public void setToCopyCourseId(String toCopyCourseId)","name":"setToCopyCourseId","type":"void","javadoc":null},{"fullQualified":"public void setToCopySessionName(String toCopySessionName)","name":"setToCopySessionName","type":"void","javadoc":null},{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionRemindRequest","fullyQualifiedName":"teammates.ui.request.FeedbackSessionRemindRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getCourseId()","name":"getCourseId","type":"String","javadoc":null},{"fullQualified":"public String getFeedbackSessionName()","name":"getFeedbackSessionName","type":"String","javadoc":null},{"fullQualified":"public String getRequestingInstructorId()","name":"getRequestingInstructorId","type":"String","javadoc":null},{"fullQualified":"public String[] getUsersToRemind()","name":"getUsersToRemind","type":"String[]","javadoc":null},{"fullQualified":"public boolean getIsSendingCopyToInstructor()","name":"getIsSendingCopyToInstructor","type":"boolean","javadoc":null},{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public FeedbackSessionRemindRequest(String courseId, String feedbackSessionName, String requestingInstructorId, String[] usersToRemind, boolean isSendingCopyToInstructor)","javadocComment":null}]},{"name":"FeedbackSessionRespondentRemindRequest","fullyQualifiedName":"teammates.ui.request.FeedbackSessionRespondentRemindRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String[] getUsersToRemind()","name":"getUsersToRemind","type":"String[]","javadoc":null},{"fullQualified":"public void setUsersToRemind(String[] usersToRemind)","name":"setUsersToRemind","type":"void","javadoc":null},{"fullQualified":"public boolean getIsSendingCopyToInstructor()","name":"getIsSendingCopyToInstructor","type":"boolean","javadoc":null},{"fullQualified":"public void setIsSendingCopyToInstructor(boolean isSendingCopyToInstructor)","name":"setIsSendingCopyToInstructor","type":"void","javadoc":null},{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionUpdateRequest","fullyQualifiedName":"teammates.ui.request.FeedbackSessionUpdateRequest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the deadlines for students.\n     ","lineNumber":15,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the deadlines for instructors.\n     ","lineNumber":24,"isOrphan":false}],"allMethods":[{"fullQualified":"public Map<String, Instant> getStudentDeadlines()","name":"getStudentDeadlines","type":"Map<String,Instant>","javadoc":"\n     * Gets the deadlines for students.\n     "},{"fullQualified":"public Map<String, Instant> getInstructorDeadlines()","name":"getInstructorDeadlines","type":"Map<String,Instant>","javadoc":"\n     * Gets the deadlines for instructors.\n     "},{"fullQualified":"public void setStudentDeadlines(Map<String, Long> studentDeadlines)","name":"setStudentDeadlines","type":"void","javadoc":null},{"fullQualified":"public void setInstructorDeadlines(Map<String, Long> instructorDeadlines)","name":"setInstructorDeadlines","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorCreateRequest","fullyQualifiedName":"teammates.ui.request.InstructorCreateRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public String getId()","name":"getId","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getRoleName()","name":"getRoleName","type":"String","javadoc":null},{"fullQualified":"public String getDisplayName()","name":"getDisplayName","type":"String","javadoc":null},{"fullQualified":"public Boolean getIsDisplayedToStudent()","name":"getIsDisplayedToStudent","type":"Boolean","javadoc":null}],"allConstructors":[{"identifier":"public InstructorCreateRequest(String id, String name, String email, String roleName, String displayName, Boolean isDisplayedToStudent)","javadocComment":null}]},{"name":"InstructorPrivilegeUpdateRequest","fullyQualifiedName":"teammates.ui.request.InstructorPrivilegeUpdateRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public InstructorPrivileges getPrivileges()","name":"getPrivileges","type":"InstructorPrivileges","javadoc":null},{"fullQualified":"public void setPrivileges(InstructorPrivileges privileges)","name":"setPrivileges","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InvalidHttpRequestBodyException","fullyQualifiedName":"teammates.ui.request.InvalidHttpRequestBodyException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public InvalidHttpRequestBodyException(String message)","javadocComment":null},{"identifier":"public InvalidHttpRequestBodyException(InvalidParametersException cause)","javadocComment":null}]},{"name":"MarkNotificationAsReadRequest","fullyQualifiedName":"teammates.ui.request.MarkNotificationAsReadRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public String getNotificationId()","name":"getNotificationId","type":"String","javadoc":null},{"fullQualified":"public Long getEndTimestamp()","name":"getEndTimestamp","type":"Long","javadoc":null},{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public MarkNotificationAsReadRequest(String notificationId, Long endTimestamp)","javadocComment":null}]},{"name":"NotificationBasicRequest","fullyQualifiedName":"teammates.ui.request.NotificationBasicRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public long getStartTimestamp()","name":"getStartTimestamp","type":"long","javadoc":null},{"fullQualified":"public long getEndTimestamp()","name":"getEndTimestamp","type":"long","javadoc":null},{"fullQualified":"public NotificationStyle getStyle()","name":"getStyle","type":"NotificationStyle","javadoc":null},{"fullQualified":"public NotificationTargetUser getTargetUser()","name":"getTargetUser","type":"NotificationTargetUser","javadoc":null},{"fullQualified":"public String getTitle()","name":"getTitle","type":"String","javadoc":null},{"fullQualified":"public String getMessage()","name":"getMessage","type":"String","javadoc":null},{"fullQualified":"public void setStartTimestamp(long startTimestamp)","name":"setStartTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setEndTimestamp(long endTimestamp)","name":"setEndTimestamp","type":"void","javadoc":null},{"fullQualified":"public void setStyle(NotificationStyle style)","name":"setStyle","type":"void","javadoc":null},{"fullQualified":"public void setTargetUser(NotificationTargetUser targetUser)","name":"setTargetUser","type":"void","javadoc":null},{"fullQualified":"public void setTitle(String title)","name":"setTitle","type":"void","javadoc":null},{"fullQualified":"public void setMessage(String message)","name":"setMessage","type":"void","javadoc":null},{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null}],"allConstructors":[]},{"name":"NotificationCreateRequest","fullyQualifiedName":"teammates.ui.request.NotificationCreateRequest","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"NotificationUpdateRequest","fullyQualifiedName":"teammates.ui.request.NotificationUpdateRequest","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[]},{"name":"SendEmailRequest","fullyQualifiedName":"teammates.ui.request.SendEmailRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public EmailWrapper getEmail()","name":"getEmail","type":"EmailWrapper","javadoc":null},{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public SendEmailRequest(EmailWrapper email)","javadocComment":null}]},{"name":"StudentProfileUpdateRequest","fullyQualifiedName":"teammates.ui.request.StudentProfileUpdateRequest","isInterface":false,"codeComments":[{"type":"LineComment","text":" no specific validation needed here.","lineNumber":74,"isOrphan":true}],"allMethods":[{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getExistingNationality()","name":"getExistingNationality","type":"String","javadoc":null},{"fullQualified":"public String getGender()","name":"getGender","type":"String","javadoc":null},{"fullQualified":"public String getInstitute()","name":"getInstitute","type":"String","javadoc":null},{"fullQualified":"public String getNationality()","name":"getNationality","type":"String","javadoc":null},{"fullQualified":"public String getMoreInfo()","name":"getMoreInfo","type":"String","javadoc":null},{"fullQualified":"public String getShortName()","name":"getShortName","type":"String","javadoc":null},{"fullQualified":"public void setInstitute(String institute)","name":"setInstitute","type":"void","javadoc":null},{"fullQualified":"public void setEmail(String email)","name":"setEmail","type":"void","javadoc":null},{"fullQualified":"public void setExistingNationality(String existingNationality)","name":"setExistingNationality","type":"void","javadoc":null},{"fullQualified":"public void setGender(String gender)","name":"setGender","type":"void","javadoc":null},{"fullQualified":"public void setMoreInfo(String moreInfo)","name":"setMoreInfo","type":"void","javadoc":null},{"fullQualified":"public void setNationality(String nationality)","name":"setNationality","type":"void","javadoc":null},{"fullQualified":"public void setShortName(String shortName)","name":"setShortName","type":"void","javadoc":null},{"fullQualified":"public void validate()","name":"validate","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentEnrollRequest","fullyQualifiedName":"teammates.ui.request.StudentsEnrollRequest.StudentEnrollRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getTeam()","name":"getTeam","type":"String","javadoc":null},{"fullQualified":"public String getSection()","name":"getSection","type":"String","javadoc":null},{"fullQualified":"public String getComments()","name":"getComments","type":"String","javadoc":null}],"allConstructors":[{"identifier":"public StudentEnrollRequest(String name, String email, String team, String section, String comments)","javadocComment":null}]},{"name":"StudentsEnrollRequest","fullyQualifiedName":"teammates.ui.request.StudentsEnrollRequest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Initialize to handle users make a http request with empty body.","lineNumber":19,"isOrphan":false},{"type":"JavadocComment","text":"\n     * The request for enrolling a student.\n     ","lineNumber":45,"isOrphan":false}],"allMethods":[{"fullQualified":"public List<StudentEnrollRequest> getStudentEnrollRequests()","name":"getStudentEnrollRequests","type":"List<StudentEnrollRequest>","javadoc":null},{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null}],"allConstructors":[{"identifier":"public StudentsEnrollRequest(List<StudentEnrollRequest> studentEnrollRequests)","javadocComment":null}]},{"name":"StudentUpdateRequest","fullyQualifiedName":"teammates.ui.request.StudentUpdateRequest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void validate() throws InvalidHttpRequestBodyException","name":"validate","type":"void","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public String getEmail()","name":"getEmail","type":"String","javadoc":null},{"fullQualified":"public String getTeam()","name":"getTeam","type":"String","javadoc":null},{"fullQualified":"public String getSection()","name":"getSection","type":"String","javadoc":null},{"fullQualified":"public String getComments()","name":"getComments","type":"String","javadoc":null},{"fullQualified":"public Boolean getIsSessionSummarySendEmail()","name":"getIsSessionSummarySendEmail","type":"Boolean","javadoc":null}],"allConstructors":[{"identifier":"public StudentUpdateRequest(String name, String email, String team, String section, String comments, Boolean isSessionSummarySendEmail)","javadocComment":null}]},{"name":"AuthState","fullyQualifiedName":"teammates.ui.servlets.AuthServlet.AuthState","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" String getNextUrl()","name":"getNextUrl","type":"String","javadoc":null},{"fullQualified":"public String getSessionId()","name":"getSessionId","type":"String","javadoc":null}],"allConstructors":[{"identifier":" AuthState(String nextUrl, String sessionId)","javadocComment":null}]},{"name":"AuthServlet","fullyQualifiedName":"teammates.ui.servlets.AuthServlet","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the authorization code flow to be used across all HTTP servlet requests.\n     ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the redirect URI for the given HTTP servlet request.\n     ","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" one week","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Represents the state object to be persisted during the callback.\n     ","lineNumber":76,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthorizationCodeFlow getAuthorizationFlow() throws IOException","name":"getAuthorizationFlow","type":"AuthorizationCodeFlow","javadoc":"\n     * Gets the authorization code flow to be used across all HTTP servlet requests.\n     "},{"fullQualified":" String getRedirectUri(HttpServletRequest req)","name":"getRedirectUri","type":"String","javadoc":"\n     * Returns the redirect URI for the given HTTP servlet request.\n     "},{"fullQualified":" Cookie getLoginInvalidationCookie()","name":"getLoginInvalidationCookie","type":"Cookie","javadoc":null},{"fullQualified":" Cookie getLoginCookie(UserInfoCookie uic)","name":"getLoginCookie","type":"Cookie","javadoc":null}],"allConstructors":[]},{"name":"DevServerLoginServlet","fullyQualifiedName":"teammates.ui.servlets.DevServerLoginServlet","isInterface":false,"codeComments":[{"type":"LineComment","text":" Prevent HTTP response splitting","lineNumber":29,"isOrphan":false},{"type":"LineComment","text":" Prevent HTTP response splitting","lineNumber":71,"isOrphan":false}],"allMethods":[{"fullQualified":"public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doGet","type":"void","javadoc":null},{"fullQualified":"public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doPost","type":"void","javadoc":null}],"allConstructors":[]},{"name":"HealthCheckServlet","fullyQualifiedName":"teammates.ui.servlets.HealthCheckServlet","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doGet","type":"void","javadoc":null}],"allConstructors":[]},{"name":"LegacyUrlMapper","fullyQualifiedName":"teammates.ui.servlets.LegacyUrlMapper","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doGet","type":"void","javadoc":null}],"allConstructors":[]},{"name":"LoginServlet","fullyQualifiedName":"teammates.ui.servlets.LoginServlet","isInterface":false,"codeComments":[{"type":"LineComment","text":" Prevent HTTP response splitting","lineNumber":33,"isOrphan":false}],"allMethods":[{"fullQualified":"public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doGet","type":"void","javadoc":null}],"allConstructors":[]},{"name":"LogoutServlet","fullyQualifiedName":"teammates.ui.servlets.LogoutServlet","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doGet","type":"void","javadoc":null}],"allConstructors":[]},{"name":"OAuth2CallbackServlet","fullyQualifiedName":"teammates.ui.servlets.OAuth2CallbackServlet","isInterface":false,"codeComments":[{"type":"LineComment","text":" Invalid session ID","lineNumber":61,"isOrphan":false},{"type":"LineComment","text":" if any of the operation fail, googleId is kept at null","lineNumber":88,"isOrphan":false},{"type":"LineComment","text":" invalid google ID","lineNumber":94,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doGet","type":"void","javadoc":null},{"fullQualified":"private void logAndPrintError(HttpServletRequest req, HttpServletResponse resp, int status, String message) throws IOException","name":"logAndPrintError","type":"void","javadoc":null}],"allConstructors":[]},{"name":"OriginCheckFilter","fullyQualifiedName":"teammates.ui.servlets.OriginCheckFilter","isInterface":false,"codeComments":[{"type":"LineComment","text":" nothing to do","lineNumber":54,"isOrphan":true},{"type":"LineComment","text":" The header X-AppEngine-QueueName cannot be spoofed as GAE will strip any user-sent X-AppEngine-QueueName headers.","lineNumber":75,"isOrphan":true},{"type":"LineComment","text":" Can bypass CSRF check with the correct key","lineNumber":70,"isOrphan":false},{"type":"LineComment","text":" Reference: https://cloud.google.com/appengine/docs/standard/java/taskqueue/push/creating-handlers#reading_request_headers","lineNumber":76,"isOrphan":false},{"type":"LineComment","text":" Requests from App Engine are allowed to bypass CSRF check","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" Requests with missing referrer information are given the benefit of the doubt","lineNumber":87,"isOrphan":true},{"type":"LineComment","text":" to accommodate users who choose to disable the HTTP referrer setting in their browser","lineNumber":88,"isOrphan":true},{"type":"LineComment","text":" for privacy reasons","lineNumber":89,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Validates the HTTP referrer against the request URL.\n     * The origin is the base URL of the HTTP referrer, which includes the protocol and authority\n     * (host name + port number if specified).\n     * Similarly, the target is the base URL of the requested action URL.\n     * For the referrer to be considered valid, origin and target must match exactly.\n     * Otherwise, the request is likely to be a CSRF attack, and is considered invalid.\n     *\n     * <p>Example of malicious request originating from embedded image in email:\n     * <pre>\n     * Request URL: https://teammatesv4.appspot.com/page/instructorCourseDelete?courseid=abcdef\n     * Referrer:    https://mail.google.com/mail/u/0/\n     *\n     * Target: https://teammatesv4.appspot.com\n     * Origin: https://mail.google.com\n     * </pre>\n     * Origin does not match target. This request is invalid.</p>\n     *\n     * <p>Example of legitimate request originating from instructor courses page:\n     * <pre>\n     * Request URL: https://teammatesv4.appspot.com/page/instructorCourseDelete?courseid=abcdef\n     * Referrer:    https://teammatesv4.appspot.com/page/instructorCoursesPage\n     *\n     * Target: https://teammatesv4.appspot.com\n     * Origin: https://teammatesv4.appspot.com\n     * </pre>\n     * Origin matches target. This request is valid.</p>\n     ","lineNumber":112,"isOrphan":false},{"type":"LineComment","text":" due to MalformedURLException","lineNumber":144,"isOrphan":false},{"type":"LineComment","text":" Exception to the rule: front-end dev server requesting data from back-end dev server","lineNumber":149,"isOrphan":false},{"type":"LineComment","text":" Newly-created session","lineNumber":165,"isOrphan":false},{"type":"LineComment","text":" nothing to do","lineNumber":186,"isOrphan":true}],"allMethods":[{"fullQualified":"public void init(FilterConfig filterConfig)","name":"init","type":"void","javadoc":null},{"fullQualified":"public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException","name":"doFilter","type":"void","javadoc":null},{"fullQualified":"private boolean isHttpReferrerValid(String referrer, String requestUrl)","name":"isHttpReferrerValid","type":"boolean","javadoc":"\n     * Validates the HTTP referrer against the request URL.\n     * The origin is the base URL of the HTTP referrer, which includes the protocol and authority\n     * (host name + port number if specified).\n     * Similarly, the target is the base URL of the requested action URL.\n     * For the referrer to be considered valid, origin and target must match exactly.\n     * Otherwise, the request is likely to be a CSRF attack, and is considered invalid.\n     *\n     * <p>Example of malicious request originating from embedded image in email:\n     * <pre>\n     * Request URL: https://teammatesv4.appspot.com/page/instructorCourseDelete?courseid=abcdef\n     * Referrer:    https://mail.google.com/mail/u/0/\n     *\n     * Target: https://teammatesv4.appspot.com\n     * Origin: https://mail.google.com\n     * </pre>\n     * Origin does not match target. This request is invalid.</p>\n     *\n     * <p>Example of legitimate request originating from instructor courses page:\n     * <pre>\n     * Request URL: https://teammatesv4.appspot.com/page/instructorCourseDelete?courseid=abcdef\n     * Referrer:    https://teammatesv4.appspot.com/page/instructorCoursesPage\n     *\n     * Target: https://teammatesv4.appspot.com\n     * Origin: https://teammatesv4.appspot.com\n     * </pre>\n     * Origin matches target. This request is valid.</p>\n     "},{"fullQualified":"private String getCsrfTokenErrorIfAny(HttpServletRequest request)","name":"getCsrfTokenErrorIfAny","type":"String","javadoc":null},{"fullQualified":"private void denyAccess(String message, HttpServletRequest request, HttpServletResponse response) throws IOException","name":"denyAccess","type":"void","javadoc":null},{"fullQualified":"public void destroy()","name":"destroy","type":"void","javadoc":null}],"allConstructors":[]},{"name":"RequestTraceFilter","fullyQualifiedName":"teammates.ui.servlets.RequestTraceFilter","isInterface":false,"codeComments":[{"type":"LineComment","text":" nothing to do","lineNumber":32,"isOrphan":true},{"type":"LineComment","text":" The header X-AppEngine-QueueName cannot be spoofed as GAE will strip any user-sent X-AppEngine-QueueName headers.","lineNumber":62,"isOrphan":true},{"type":"LineComment","text":" GAE will terminate an instance if any request exceeds 10 minutes.","lineNumber":66,"isOrphan":true},{"type":"LineComment","text":" For GAE-invoked requests, we set the limit here minus a small grace period of 5 seconds","lineNumber":67,"isOrphan":true},{"type":"LineComment","text":" to ensure that the 10 minutes limit will not be exceeded.","lineNumber":68,"isOrphan":true},{"type":"LineComment","text":" For user-invoked requests, we keep the time limit at 1 minute (as how it was","lineNumber":69,"isOrphan":true},{"type":"LineComment","text":" in the previous GAE runtime environment) in order to not let user wait for excessively long,","lineNumber":70,"isOrphan":true},{"type":"LineComment","text":" Generate random hexadecimal string of length 32","lineNumber":49,"isOrphan":false},{"type":"LineComment","text":" X-Cloud-Trace-Context header is in form of TRACE_ID/SPAN_ID;o=TRACE_TRUE","lineNumber":54,"isOrphan":false},{"type":"LineComment","text":" Reference: https://cloud.google.com/appengine/docs/standard/java/taskqueue/push/creating-handlers#reading_request_headers","lineNumber":63,"isOrphan":false},{"type":"LineComment","text":" as well as a reminder for us to keep optimizing our API response time.","lineNumber":71,"isOrphan":false},{"type":"LineComment","text":" Make sure that all parameters are valid UTF-8","lineNumber":83,"isOrphan":false},{"type":"LineComment","text":" nothing to do","lineNumber":98,"isOrphan":true}],"allMethods":[{"fullQualified":"public void init(FilterConfig filterConfig)","name":"init","type":"void","javadoc":null},{"fullQualified":"public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException","name":"doFilter","type":"void","javadoc":null},{"fullQualified":"public void destroy()","name":"destroy","type":"void","javadoc":null},{"fullQualified":"private void throwError(HttpServletRequest req, HttpServletResponse resp, int statusCode, String message) throws IOException","name":"throwError","type":"void","javadoc":null}],"allConstructors":[]},{"name":"WebApiServlet","fullyQualifiedName":"teammates.ui.servlets.WebApiServlet","isInterface":false,"codeComments":[{"type":"LineComment","text":" used as fallback","lineNumber":56,"isOrphan":false},{"type":"LineComment","text":" The header X-AppEngine-QueueName cannot be spoofed as GAE will strip any user-sent X-AppEngine-QueueName headers.","lineNumber":118,"isOrphan":true},{"type":"LineComment","text":" Reference: https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_app_engine_task_request_headers","lineNumber":119,"isOrphan":false},{"type":"LineComment","text":" Response status is not set to 4XX to 5XX to prevent Cloud Tasks retry mechanism because","lineNumber":125,"isOrphan":true},{"type":"LineComment","text":" if the cause of the exception is improper request URL, no amount of retry is going to help.","lineNumber":126,"isOrphan":true},{"type":"LineComment","text":" The action will be inaccurately marked as \"success\", but the severe log can be used","lineNumber":127,"isOrphan":true},{"type":"LineComment","text":" to trace the origin of the problem.","lineNumber":128,"isOrphan":false}],"allMethods":[{"fullQualified":"public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doGet","type":"void","javadoc":null},{"fullQualified":"public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doPost","type":"void","javadoc":null},{"fullQualified":"public void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doPut","type":"void","javadoc":null},{"fullQualified":"public void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"doDelete","type":"void","javadoc":null},{"fullQualified":"private void invokeServlet(HttpServletRequest req, HttpServletResponse resp) throws IOException","name":"invokeServlet","type":"void","javadoc":null},{"fullQualified":"private void throwErrorBasedOnRequester(HttpServletRequest req, HttpServletResponse resp, Exception e, int statusCode) throws IOException","name":"throwErrorBasedOnRequester","type":"void","javadoc":null},{"fullQualified":"private void throwError(HttpServletResponse resp, int statusCode, String message) throws IOException","name":"throwError","type":"void","javadoc":null}],"allConstructors":[]},{"name":"WebPageServlet","fullyQualifiedName":"teammates.ui.servlets.WebPageServlet","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException","name":"doGet","type":"void","javadoc":null}],"allConstructors":[]},{"name":"WebSecurityHeaderFilter","fullyQualifiedName":"teammates.ui.servlets.WebSecurityHeaderFilter","isInterface":false,"codeComments":[{"type":"LineComment","text":" nothing to do","lineNumber":41,"isOrphan":true},{"type":"LineComment","text":" nothing to do","lineNumber":59,"isOrphan":true}],"allMethods":[{"fullQualified":"public void init(FilterConfig filterConfig)","name":"init","type":"void","javadoc":null},{"fullQualified":"public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException","name":"doFilter","type":"void","javadoc":null},{"fullQualified":"public void destroy()","name":"destroy","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AccountRequestSearchIndexingWorkerAction","fullyQualifiedName":"teammates.ui.webapi.AccountRequestSearchIndexingWorkerAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Set an arbitrary retry code outside of the range 200-299 to trigger automatic retry","lineNumber":24,"isOrphan":false}],"allMethods":[{"fullQualified":"public ActionResult execute()","name":"execute","type":"ActionResult","javadoc":null}],"allConstructors":[]},{"name":"Action","fullyQualifiedName":"teammates.ui.webapi.Action","isInterface":false,"codeComments":[{"type":"LineComment","text":" buffer to store the request body","lineNumber":54,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Initializes the action object based on the HTTP request.\n     ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks if the requesting user has sufficient authority to access the resource.\n     ","lineNumber":89,"isOrphan":false},{"type":"LineComment","text":" Access control level lower than required","lineNumber":100,"isOrphan":false},{"type":"LineComment","text":" All-access pass granted","lineNumber":105,"isOrphan":false},{"type":"LineComment","text":" All other cases: to be dealt in case-by-case basis","lineNumber":109,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the user information of the current user.\n     ","lineNumber":113,"isOrphan":false},{"type":"LineComment","text":" The header X-AppEngine-QueueName cannot be spoofed as GAE will strip any user-sent X-AppEngine-QueueName headers.","lineNumber":143,"isOrphan":true},{"type":"LineComment","text":" Reference: https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_app_engine_task_request_headers","lineNumber":144,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the first value for the specified parameter in the HTTP request, or null if such parameter is not found.\n     ","lineNumber":164,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the first value for the specified parameter expected to be present in the HTTP request.\n     ","lineNumber":171,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the first value for the specified parameter expected to be present in the HTTP request as boolean.\n     ","lineNumber":182,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the first value for the specified parameter expected to be present in the HTTP request as long.\n     ","lineNumber":195,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the request body payload.\n     ","lineNumber":208,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the action has a request body already defined in it.\n     ","lineNumber":218,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deserializes and validates the request body payload.\n     ","lineNumber":233,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the unregistered student by the HTTP param.\n     ","lineNumber":245,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the unregistered instructor by the HTTP param.\n     ","lineNumber":261,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the minimum access control level required to access the resource.\n     ","lineNumber":315,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks the specific access control needs for the resource.\n     ","lineNumber":320,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes the action.\n     ","lineNumber":325,"isOrphan":false}],"allMethods":[{"fullQualified":"public void init(HttpServletRequest req)","name":"init","type":"void","javadoc":"\n     * Initializes the action object based on the HTTP request.\n     "},{"fullQualified":"public void setUserProvision(UserProvision userProvision)","name":"setUserProvision","type":"void","javadoc":null},{"fullQualified":"public void setTaskQueuer(TaskQueuer taskQueuer)","name":"setTaskQueuer","type":"void","javadoc":null},{"fullQualified":"public void setEmailSender(EmailSender emailSender)","name":"setEmailSender","type":"void","javadoc":null},{"fullQualified":"public void setFileStorage(FileStorage fileStorage)","name":"setFileStorage","type":"void","javadoc":null},{"fullQualified":"public void setRecaptchaVerifier(RecaptchaVerifier recaptchaVerifier)","name":"setRecaptchaVerifier","type":"void","javadoc":null},{"fullQualified":"public void setLogsProcessor(LogsProcessor logsProcessor)","name":"setLogsProcessor","type":"void","javadoc":null},{"fullQualified":"public void checkAccessControl() throws UnauthorizedAccessException","name":"checkAccessControl","type":"void","javadoc":"\n     * Checks if the requesting user has sufficient authority to access the resource.\n     "},{"fullQualified":"public RequestLogUser getUserInfoForLogging()","name":"getUserInfoForLogging","type":"RequestLogUser","javadoc":"\n     * Gets the user information of the current user.\n     "},{"fullQualified":"private void initAuthInfo()","name":"initAuthInfo","type":"void","javadoc":null},{"fullQualified":" String getRequestParamValue(String paramName)","name":"getRequestParamValue","type":"String","javadoc":"\n     * Returns the first value for the specified parameter in the HTTP request, or null if such parameter is not found.\n     "},{"fullQualified":" String getNonNullRequestParamValue(String paramName)","name":"getNonNullRequestParamValue","type":"String","javadoc":"\n     * Returns the first value for the specified parameter expected to be present in the HTTP request.\n     "},{"fullQualified":" boolean getBooleanRequestParamValue(String paramName)","name":"getBooleanRequestParamValue","type":"boolean","javadoc":"\n     * Returns the first value for the specified parameter expected to be present in the HTTP request as boolean.\n     "},{"fullQualified":" long getLongRequestParamValue(String paramName)","name":"getLongRequestParamValue","type":"long","javadoc":"\n     * Returns the first value for the specified parameter expected to be present in the HTTP request as long.\n     "},{"fullQualified":"public String getRequestBody()","name":"getRequestBody","type":"String","javadoc":"\n     * Returns the request body payload.\n     "},{"fullQualified":"public boolean hasDefinedRequestBody()","name":"hasDefinedRequestBody","type":"boolean","javadoc":"\n     * Returns true if the action has a request body already defined in it.\n     "},{"fullQualified":" FeedbackSessionAttributes getNonNullFeedbackSession(String feedbackSessionName, String courseId)","name":"getNonNullFeedbackSession","type":"FeedbackSessionAttributes","javadoc":null},{"fullQualified":" T getAndValidateRequestBody(Type typeOfBody) throws InvalidHttpRequestBodyException","name":"getAndValidateRequestBody","type":"T","javadoc":"\n     * Deserializes and validates the request body payload.\n     "},{"fullQualified":" Optional<StudentAttributes> getUnregisteredStudent()","name":"getUnregisteredStudent","type":"Optional<StudentAttributes>","javadoc":"\n     * Gets the unregistered student by the HTTP param.\n     "},{"fullQualified":" Optional<InstructorAttributes> getUnregisteredInstructor()","name":"getUnregisteredInstructor","type":"Optional<InstructorAttributes>","javadoc":"\n     * Gets the unregistered instructor by the HTTP param.\n     "},{"fullQualified":" InstructorAttributes getPossiblyUnregisteredInstructor(String courseId)","name":"getPossiblyUnregisteredInstructor","type":"InstructorAttributes","javadoc":null},{"fullQualified":" StudentAttributes getPossiblyUnregisteredStudent(String courseId)","name":"getPossiblyUnregisteredStudent","type":"StudentAttributes","javadoc":null},{"fullQualified":" InstructorPermissionSet constructInstructorPrivileges(InstructorAttributes instructor, String feedbackSessionName)","name":"constructInstructorPrivileges","type":"InstructorPermissionSet","javadoc":null},{"fullQualified":" abstract AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":"\n     * Gets the minimum access control level required to access the resource.\n     "},{"fullQualified":" abstract void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":"\n     * Checks the specific access control needs for the resource.\n     "},{"fullQualified":"public abstract ActionResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"ActionResult","javadoc":"\n     * Executes the action.\n     "}],"allConstructors":[]},{"name":"ActionFactory","fullyQualifiedName":"teammates.ui.webapi.ActionFactory","isInterface":false,"codeComments":[{"type":"LineComment","text":" Cron jobs; use GET request","lineNumber":144,"isOrphan":true},{"type":"LineComment","text":" Reference: https://cloud.google.com/appengine/docs/standard/java11/scheduling-jobs-with-cron-yaml","lineNumber":145,"isOrphan":true},{"type":"LineComment","text":" Task queue workers; use POST request","lineNumber":157,"isOrphan":true},{"type":"LineComment","text":" Reference: https://cloud.google.com/tasks/docs/creating-appengine-tasks","lineNumber":158,"isOrphan":true},{"type":"LineComment","text":" Even though this is a DELETE action, PUT is used as DELETE does not allow usage of response body","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":" Even though this is a GET action, POST is used in order to get extra protection from CSRF","lineNumber":36,"isOrphan":false},{"type":"LineComment","text":"STUDENTS APIs","lineNumber":74,"isOrphan":false},{"type":"LineComment","text":"STUDENT APIs","lineNumber":79,"isOrphan":false},{"type":"LineComment","text":" NOTIFICATION APIs","lineNumber":84,"isOrphan":false},{"type":"LineComment","text":" NOTIFICATIONS APIs","lineNumber":92,"isOrphan":false},{"type":"LineComment","text":"SEARCH APIs","lineNumber":95,"isOrphan":false},{"type":"LineComment","text":" Logging and tracking","lineNumber":137,"isOrphan":false},{"type":"LineComment","text":" prevent initialization","lineNumber":178,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns the matching {@link Action} object for the URI and method in {@code req}.\n     ","lineNumber":185,"isOrphan":false}],"allMethods":[{"fullQualified":"private static void map(String uri, String method, Class<? extends Action> actionClass)","name":"map","type":"void","javadoc":null},{"fullQualified":"public static Action getAction(HttpServletRequest req, String method) throws ActionMappingException","name":"getAction","type":"Action","javadoc":"\n     * Returns the matching {@link Action} object for the URI and method in {@code req}.\n     "},{"fullQualified":"private static Action getAction(String uri, String method) throws ActionMappingException","name":"getAction","type":"Action","javadoc":null}],"allConstructors":[{"identifier":"private ActionFactory()","javadocComment":null}]},{"name":"ActionMappingException","fullyQualifiedName":"teammates.ui.webapi.ActionMappingException","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public int getStatusCode()","name":"getStatusCode","type":"int","javadoc":null}],"allConstructors":[{"identifier":"public ActionMappingException(String message, int statusCode)","javadocComment":null}]},{"name":"ActionResult","fullyQualifiedName":"teammates.ui.webapi.ActionResult","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Packages and forwards the action result to the HTTP response.\n     ","lineNumber":18,"isOrphan":false}],"allMethods":[{"fullQualified":"public abstract void send(HttpServletResponse resp) throws IOException","name":"send","type":"void","javadoc":"\n     * Packages and forwards the action result to the HTTP response.\n     "},{"fullQualified":"public int getStatusCode()","name":"getStatusCode","type":"int","javadoc":null}],"allConstructors":[{"identifier":" ActionResult(int statusCode)","javadocComment":null}]},{"name":"AdminExceptionTestAction","fullyQualifiedName":"teammates.ui.webapi.AdminExceptionTestAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" deliberately done for testing","lineNumber":32,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"AdminOnlyAction","fullyQualifiedName":"teammates.ui.webapi.AdminOnlyAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ArchiveCourseAction","fullyQualifiedName":"teammates.ui.webapi.ArchiveCourseAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Set the archive status and status shown to user and admin","lineNumber":40,"isOrphan":false},{"type":"LineComment","text":" There should not be any invalid parameter here","lineNumber":43,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"BasicCommentSubmissionAction","fullyQualifiedName":"teammates.ui.webapi.BasicCommentSubmissionAction","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Validates the questionType of the corresponding question.\n     ","lineNumber":17,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Validates comment doesn't exist of corresponding response.\n     ","lineNumber":26,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verify response ownership for student.\n     ","lineNumber":39,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verify response ownership for instructor.\n     ","lineNumber":57,"isOrphan":false}],"allMethods":[{"fullQualified":" void validQuestionForCommentInSubmission(FeedbackQuestionAttributes feedbackQuestion)","name":"validQuestionForCommentInSubmission","type":"void","javadoc":"\n     * Validates the questionType of the corresponding question.\n     "},{"fullQualified":" void verifyCommentNotExist(String feedbackResponseId) throws InvalidOperationException","name":"verifyCommentNotExist","type":"void","javadoc":"\n     * Validates comment doesn't exist of corresponding response.\n     "},{"fullQualified":" void verifyResponseOwnerShipForStudent(StudentAttributes student, FeedbackResponseAttributes response, FeedbackQuestionAttributes question) throws UnauthorizedAccessException","name":"verifyResponseOwnerShipForStudent","type":"void","javadoc":"\n     * Verify response ownership for student.\n     "},{"fullQualified":" void verifyResponseOwnerShipForInstructor(InstructorAttributes instructor, FeedbackResponseAttributes response) throws UnauthorizedAccessException","name":"verifyResponseOwnerShipForInstructor","type":"void","javadoc":"\n     * Verify response ownership for instructor.\n     "}],"allConstructors":[]},{"name":"BasicFeedbackSubmissionAction","fullyQualifiedName":"teammates.ui.webapi.BasicFeedbackSubmissionAction","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Checks whether instructors can see the question.\n     ","lineNumber":16,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that instructor can see the moderated question in moderation request.\n     ","lineNumber":29,"isOrphan":false},{"type":"LineComment","text":" should not moderate question which instructors cannot see","lineNumber":37,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the student involved in the submission process.\n     ","lineNumber":42,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks the access control for student feedback submission.\n     ","lineNumber":58,"isOrphan":false},{"type":"LineComment","text":" Student is associated to a google ID; even if registration key is passed, do not allow access","lineNumber":85,"isOrphan":false},{"type":"LineComment","text":" Logged in student is not the same as the student registered for the given key, do not allow access","lineNumber":88,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the instructor involved in the submission process.\n     ","lineNumber":95,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Checks the access control for instructor feedback submission.\n     ","lineNumber":111,"isOrphan":false},{"type":"LineComment","text":" Instructor is associated to a google ID; even if registration key is passed, do not allow access","lineNumber":135,"isOrphan":false},{"type":"LineComment","text":" Logged in instructor is not the same as the instructor registered for the given key,","lineNumber":138,"isOrphan":true},{"type":"LineComment","text":" do not allow access","lineNumber":139,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that it is not a preview request.\n     ","lineNumber":146,"isOrphan":false},{"type":"LineComment","text":" should not view response under preview mode","lineNumber":152,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the session is open for submission.\n     *\n     * <p>If it is moderation request, omit the check.\n     ","lineNumber":157,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the section of a recipient.\n     ","lineNumber":170,"isOrphan":false}],"allMethods":[{"fullQualified":" boolean canInstructorSeeQuestion(FeedbackQuestionAttributes feedbackQuestion)","name":"canInstructorSeeQuestion","type":"boolean","javadoc":"\n     * Checks whether instructors can see the question.\n     "},{"fullQualified":" void verifyInstructorCanSeeQuestionIfInModeration(FeedbackQuestionAttributes feedbackQuestion) throws UnauthorizedAccessException","name":"verifyInstructorCanSeeQuestionIfInModeration","type":"void","javadoc":"\n     * Verifies that instructor can see the moderated question in moderation request.\n     "},{"fullQualified":" StudentAttributes getStudentOfCourseFromRequest(String courseId)","name":"getStudentOfCourseFromRequest","type":"StudentAttributes","javadoc":"\n     * Gets the student involved in the submission process.\n     "},{"fullQualified":" void checkAccessControlForStudentFeedbackSubmission(StudentAttributes student, FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException","name":"checkAccessControlForStudentFeedbackSubmission","type":"void","javadoc":"\n     * Checks the access control for student feedback submission.\n     "},{"fullQualified":" InstructorAttributes getInstructorOfCourseFromRequest(String courseId)","name":"getInstructorOfCourseFromRequest","type":"InstructorAttributes","javadoc":"\n     * Gets the instructor involved in the submission process.\n     "},{"fullQualified":" void checkAccessControlForInstructorFeedbackSubmission(InstructorAttributes instructor, FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException","name":"checkAccessControlForInstructorFeedbackSubmission","type":"void","javadoc":"\n     * Checks the access control for instructor feedback submission.\n     "},{"fullQualified":" void verifyNotPreview() throws UnauthorizedAccessException","name":"verifyNotPreview","type":"void","javadoc":"\n     * Verifies that it is not a preview request.\n     "},{"fullQualified":" void verifySessionOpenExceptForModeration(FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException","name":"verifySessionOpenExceptForModeration","type":"void","javadoc":"\n     * Verifies that the session is open for submission.\n     *\n     * <p>If it is moderation request, omit the check.\n     "},{"fullQualified":" String getRecipientSection(String courseId, FeedbackParticipantType giverType, FeedbackParticipantType recipientType, String recipientIdentifier)","name":"getRecipientSection","type":"String","javadoc":"\n     * Gets the section of a recipient.\n     "}],"allConstructors":[]},{"name":"BinCourseAction","fullyQualifiedName":"teammates.ui.webapi.BinCourseAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"BinFeedbackSessionAction","fullyQualifiedName":"teammates.ui.webapi.BinFeedbackSessionAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"CalculateUsageStatisticsAction","fullyQualifiedName":"teammates.ui.webapi.CalculateUsageStatisticsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" represents one hour","lineNumber":18,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"CompileLogsAction","fullyQualifiedName":"teammates.ui.webapi.CompileLogsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Sets the range to 6 minutes to slightly overlap the 5 minute email timer","lineNumber":21,"isOrphan":false},{"type":"LineComment","text":" Do not send any emails if there are no severe logs; prevents spamming","lineNumber":35,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"CreateAccountAction","fullyQualifiedName":"teammates.ui.webapi.CreateAccountAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Strategy to Generate New Demo Course Id:","lineNumber":176,"isOrphan":true},{"type":"LineComment","text":" a. keep the part of email before \"@\"","lineNumber":177,"isOrphan":true},{"type":"LineComment","text":"    replace \"@\" with \".\"","lineNumber":178,"isOrphan":true},{"type":"LineComment","text":"    replace email host with their first 3 chars. eg, gmail.com -> gma","lineNumber":179,"isOrphan":true},{"type":"LineComment","text":"    append \"-demo\"","lineNumber":180,"isOrphan":true},{"type":"LineComment","text":"    to sum up: lebron@gmail.com -> lebron.gma-demo","lineNumber":181,"isOrphan":true},{"type":"LineComment","text":"","lineNumber":182,"isOrphan":true},{"type":"LineComment","text":" b. if the generated courseId already exists, create another one by appending a integer to the previous courseId.","lineNumber":183,"isOrphan":true},{"type":"LineComment","text":"    if the newly generate id still exists, increment the id, until we find a feasible one","lineNumber":184,"isOrphan":true},{"type":"LineComment","text":"    eg.","lineNumber":185,"isOrphan":true},{"type":"LineComment","text":"    lebron@gmail.com -> lebron.gma-demo  // already exists!","lineNumber":186,"isOrphan":true},{"type":"LineComment","text":"    lebron@gmail.com -> lebron.gma-demo0 // already exists!","lineNumber":187,"isOrphan":true},{"type":"LineComment","text":"    lebron@gmail.com -> lebron.gma-demo1 // already exists!","lineNumber":188,"isOrphan":true},{"type":"LineComment","text":"    ...","lineNumber":189,"isOrphan":true},{"type":"LineComment","text":"    lebron@gmail.com -> lebron.gma-demo99 // already exists!","lineNumber":190,"isOrphan":true},{"type":"LineComment","text":"    lebron@gmail.com -> lebron.gma-demo100 // found! a feasible id","lineNumber":191,"isOrphan":true},{"type":"LineComment","text":"","lineNumber":192,"isOrphan":true},{"type":"LineComment","text":" c. in any cases(a or b), if generated Id is longer than FieldValidator.COURSE_ID_MAX_LENGTH, shorten the part","lineNumber":193,"isOrphan":true},{"type":"LineComment","text":"    before \"@\" of the initial input email, by continuously removing its last character","lineNumber":194,"isOrphan":true},{"type":"LineComment","text":" Any user can create instructor account as long as the registration key is valid.","lineNumber":42,"isOrphan":true},{"type":"LineComment","text":" Use default timezone instead","lineNumber":51,"isOrphan":false},{"type":"LineComment","text":" There should not be any invalid parameter here","lineNumber":75,"isOrphan":false},{"type":"LineComment","text":" EntityDoesNotExistException should not be thrown as all entities should exist in demo course.","lineNumber":87,"isOrphan":true},{"type":"LineComment","text":" EntityAlreadyExistsException should not be thrown as updated entities should not have","lineNumber":88,"isOrphan":true},{"type":"LineComment","text":" conflict with generated entities in new demo course.","lineNumber":89,"isOrphan":true},{"type":"LineComment","text":" InvalidParametersException should not be thrown as as there should not be any invalid parameters.","lineNumber":90,"isOrphan":false},{"type":"LineComment","text":" EntityDoesNotExistException should not be thrown as existence of account request has been validated before.","lineNumber":101,"isOrphan":true},{"type":"LineComment","text":" InvalidParametersException should not be thrown as there should not be any invalid parameters.","lineNumber":102,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Imports demo course for the new instructor.\n     *\n     * @return the ID of demo course\n     ","lineNumber":114,"isOrphan":false},{"type":"LineComment","text":" Used for start time + visible time for all sessions","lineNumber":125,"isOrphan":false},{"type":"LineComment","text":" Used for end time for sessions already past","lineNumber":127,"isOrphan":false},{"type":"LineComment","text":" Used for result visible time for sessions already past","lineNumber":129,"isOrphan":false},{"type":"LineComment","text":" Used for end time for session still ongoing","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":" Used for timestamp of comments","lineNumber":133,"isOrphan":false},{"type":"LineComment","text":" replace email","lineNumber":137,"isOrphan":false},{"type":"LineComment","text":" replace name","lineNumber":139,"isOrphan":false},{"type":"LineComment","text":" replace course","lineNumber":141,"isOrphan":false},{"type":"LineComment","text":" replace institute","lineNumber":143,"isOrphan":false},{"type":"LineComment","text":" replace timezone","lineNumber":145,"isOrphan":false},{"type":"LineComment","text":" replace dates","lineNumber":147,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generate a course ID for demo course, and if the generated id already exists, try another one.\n     *\n     * @param instructorEmail is the instructor email.\n     * @return generated course id\n     ","lineNumber":196,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generate a course ID for demo course from a given email.\n     *\n     * @param instructorEmail is the instructor email.\n     * @return the first proposed course id. eg.lebron@gmail.com -> lebron.gma-demo\n     ","lineNumber":210,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Generate a course ID for demo course from a given email or a generated course Id.\n     *\n     * <p>Here we check the input string is an email or course Id and handle them accordingly;\n     * check the resulting course id, and if bigger than maximumIdLength, cut it so that it equals maximumIdLength.\n     *\n     * @param instructorEmailOrProposedCourseId is the instructor email or a proposed course id that already exists.\n     * @param maximumIdLength is the maximum resulting id length allowed, above which we will cut the part before \"@\"\n     * @return the proposed course id, e.g.:\n     *         <ul>\n     *         <li>lebron@gmail.com -> lebron.gma-demo</li>\n     *         <li>lebron.gma-demo -> lebron.gma-demo0</li>\n     *         <li>lebron.gma-demo0 -> lebron.gma-demo1</li>\n     *         <li>012345678901234567890123456789.gma-demo9 -> 01234567890123456789012345678.gma-demo10 (being cut)</li>\n     *         </ul>\n     ","lineNumber":228,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Replace time and timezone based on users timezone.\n     * Strings representing instant are adjusted so that they represent the same date and time but in the users timezone.\n     * Timezone is changed to users timezone.\n     ","lineNumber":262,"isOrphan":false},{"type":"LineComment","text":" timezoneString should have been validated in #execute() method already","lineNumber":268,"isOrphan":false},{"type":"LineComment","text":" regex for instant","lineNumber":271,"isOrphan":false},{"type":"LineComment","text":" replace instant with instant adjusted for user's timezone","lineNumber":274,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl()","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private static String getDateString(Instant instant)","name":"getDateString","type":"String","javadoc":null},{"fullQualified":"private String importDemoData(String instructorEmail, String instructorName, String instructorInstitute, String timezone) throws InvalidParametersException","name":"importDemoData","type":"String","javadoc":"\n     * Imports demo course for the new instructor.\n     *\n     * @return the ID of demo course\n     "},{"fullQualified":"private String generateDemoCourseId(String instructorEmail)","name":"generateDemoCourseId","type":"String","javadoc":"\n     * Generate a course ID for demo course, and if the generated id already exists, try another one.\n     *\n     * @param instructorEmail is the instructor email.\n     * @return generated course id\n     "},{"fullQualified":"private String getDemoCourseIdRoot(String instructorEmail)","name":"getDemoCourseIdRoot","type":"String","javadoc":"\n     * Generate a course ID for demo course from a given email.\n     *\n     * @param instructorEmail is the instructor email.\n     * @return the first proposed course id. eg.lebron@gmail.com -> lebron.gma-demo\n     "},{"fullQualified":" String generateNextDemoCourseId(String instructorEmailOrProposedCourseId, int maximumIdLength)","name":"generateNextDemoCourseId","type":"String","javadoc":"\n     * Generate a course ID for demo course from a given email or a generated course Id.\n     *\n     * <p>Here we check the input string is an email or course Id and handle them accordingly;\n     * check the resulting course id, and if bigger than maximumIdLength, cut it so that it equals maximumIdLength.\n     *\n     * @param instructorEmailOrProposedCourseId is the instructor email or a proposed course id that already exists.\n     * @param maximumIdLength is the maximum resulting id length allowed, above which we will cut the part before \"@\"\n     * @return the proposed course id, e.g.:\n     *         <ul>\n     *         <li>lebron@gmail.com -> lebron.gma-demo</li>\n     *         <li>lebron.gma-demo -> lebron.gma-demo0</li>\n     *         <li>lebron.gma-demo0 -> lebron.gma-demo1</li>\n     *         <li>012345678901234567890123456789.gma-demo9 -> 01234567890123456789012345678.gma-demo10 (being cut)</li>\n     *         </ul>\n     "},{"fullQualified":"private String replaceAdjustedTimeAndTimezone(String template, String timezoneString)","name":"replaceAdjustedTimeAndTimezone","type":"String","javadoc":"\n     * Replace time and timezone based on users timezone.\n     * Strings representing instant are adjusted so that they represent the same date and time but in the users timezone.\n     * Timezone is changed to users timezone.\n     "}],"allConstructors":[]},{"name":"CreateAccountRequestAction","fullyQualifiedName":"teammates.ui.webapi.CreateAccountRequestAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" only schedule for search indexing if account request created successfully","lineNumber":31,"isOrphan":false},{"type":"LineComment","text":" Use existing account request","lineNumber":36,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"CreateCourseAction","fullyQualifiedName":"teammates.ui.webapi.CreateCourseAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"CreateFeedbackQuestionAction","fullyQualifiedName":"teammates.ui.webapi.CreateFeedbackQuestionAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" validate questions (giver & recipient)","lineNumber":55,"isOrphan":false},{"type":"LineComment","text":" validate questions (question details)","lineNumber":60,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"CreateFeedbackResponseCommentAction","fullyQualifiedName":"teammates.ui.webapi.CreateFeedbackResponseCommentAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"CreateFeedbackSessionAction","fullyQualifiedName":"teammates.ui.webapi.CreateFeedbackSessionAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private void createFeedbackQuestions(String copyCourseId, String newCourseId, String feedbackSessionName, String oldSessionName)","name":"createFeedbackQuestions","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CreateFeedbackSessionLogAction","fullyQualifiedName":"teammates.ui.webapi.CreateFeedbackSessionLogAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" No specific access control restrictions on creating feedback session logs","lineNumber":22,"isOrphan":true},{"type":"LineComment","text":" Skip rigorous validations to avoid incurring extra db reads and to keep the endpoint light","lineNumber":36,"isOrphan":true},{"type":"LineComment","text":" Necessary to assist local testing. For production usage, this will be a no-op.","lineNumber":38,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl()","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"CreateInstructorAction","fullyQualifiedName":"teammates.ui.webapi.CreateInstructorAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Process adding the instructor and setup status to be shown to user and admin","lineNumber":48,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a new instructor with basic information.\n     * This consists of everything apart from custom privileges.\n     *\n     * @param courseId              Id of the course the instructor is being added to.\n     * @param instructorName        Name of the instructor.\n     * @param instructorEmail       Email of the instructor.\n     * @param instructorRole        Role of the instructor.\n     * @param isDisplayedToStudents Whether the instructor should be visible to students.\n     * @param displayedName         Name to be visible to students.\n     *                                  Should not be {@code null} even if {@code isDisplayedToStudents} is false.\n     * @return An instructor with basic info, excluding custom privileges\n     ","lineNumber":65,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private InstructorAttributes createInstructorWithBasicAttributes(String courseId, String instructorName, String instructorEmail, String instructorRole, boolean isDisplayedToStudents, String displayedName)","name":"createInstructorWithBasicAttributes","type":"InstructorAttributes","javadoc":"\n     * Creates a new instructor with basic information.\n     * This consists of everything apart from custom privileges.\n     *\n     * @param courseId              Id of the course the instructor is being added to.\n     * @param instructorName        Name of the instructor.\n     * @param instructorEmail       Email of the instructor.\n     * @param instructorRole        Role of the instructor.\n     * @param isDisplayedToStudents Whether the instructor should be visible to students.\n     * @param displayedName         Name to be visible to students.\n     *                                  Should not be {@code null} even if {@code isDisplayedToStudents} is false.\n     * @return An instructor with basic info, excluding custom privileges\n     "}],"allConstructors":[]},{"name":"CreateNotificationAction","fullyQualifiedName":"teammates.ui.webapi.CreateNotificationAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Should not happen since UUID is usually unique","lineNumber":43,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DatastoreBackupAction","fullyQualifiedName":"teammates.ui.webapi.DatastoreBackupAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Documentation is wrong; the param name is output_url_prefix instead of outputUrlPrefix","lineNumber":63,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteAccountAction","fullyQualifiedName":"teammates.ui.webapi.DeleteAccountAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteAccountRequestAction","fullyQualifiedName":"teammates.ui.webapi.DeleteAccountRequestAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" instructor is registered","lineNumber":18,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute() throws InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteCourseAction","fullyQualifiedName":"teammates.ui.webapi.DeleteCourseAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteDataBundleAction","fullyQualifiedName":"teammates.ui.webapi.DeleteDataBundleAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteFeedbackQuestionAction","fullyQualifiedName":"teammates.ui.webapi.DeleteFeedbackQuestionAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteFeedbackResponseCommentAction","fullyQualifiedName":"teammates.ui.webapi.DeleteFeedbackResponseCommentAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" giver, allowed by default","lineNumber":69,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteFeedbackSessionAction","fullyQualifiedName":"teammates.ui.webapi.DeleteFeedbackSessionAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteInstructorAction","fullyQualifiedName":"teammates.ui.webapi.DeleteInstructorAction","isInterface":false,"codeComments":[{"type":"LineComment","text":"allow access to admins or instructor with modify permission","lineNumber":20,"isOrphan":false},{"type":"LineComment","text":" Deleting last instructor from the course is not allowed if you're not the admin","lineNumber":53,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if there is at least one joined instructor (other than the instructor to delete)\n     * with the privilege of modifying instructors and at least one instructor visible to the students.\n     *\n     * @param courseId                Id of the course\n     * @param instructorToDeleteEmail Email of the instructor who is being deleted\n     ","lineNumber":65,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private boolean hasAlternativeInstructor(String courseId, String instructorToDeleteEmail)","name":"hasAlternativeInstructor","type":"boolean","javadoc":"\n     * Returns true if there is at least one joined instructor (other than the instructor to delete)\n     * with the privilege of modifying instructors and at least one instructor visible to the students.\n     *\n     * @param courseId                Id of the course\n     * @param instructorToDeleteEmail Email of the instructor who is being deleted\n     "}],"allConstructors":[]},{"name":"DeleteNotificationAction","fullyQualifiedName":"teammates.ui.webapi.DeleteNotificationAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteStudentAction","fullyQualifiedName":"teammates.ui.webapi.DeleteStudentAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" if student is not found, fail silently","lineNumber":48,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteStudentProfilePictureAction","fullyQualifiedName":"teammates.ui.webapi.DeleteStudentProfilePictureAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"DeleteStudentsAction","fullyQualifiedName":"teammates.ui.webapi.DeleteStudentsAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"EnrollStudentsAction","fullyQualifiedName":"teammates.ui.webapi.EnrollStudentsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" The student has been enrolled in the course.","lineNumber":79,"isOrphan":false},{"type":"LineComment","text":" Unsuccessfully enrolled students will not be returned.","lineNumber":93,"isOrphan":false},{"type":"LineComment","text":" The student is new.","lineNumber":98,"isOrphan":false},{"type":"LineComment","text":" Unsuccessfully enrolled students will not be returned.","lineNumber":104,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"EntityNotFoundException","fullyQualifiedName":"teammates.ui.webapi.EntityNotFoundException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public EntityNotFoundException(EntityDoesNotExistException e)","javadocComment":null},{"identifier":"public EntityNotFoundException(String message)","javadocComment":null}]},{"name":"FeedbackSessionClosedRemindersAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionClosedRemindersAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionClosingRemindersAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionClosingRemindersAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" group deadline extensions by courseId and feedbackSessionName","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Remove invalid deadline extensions from the given {@code deadlineExtensions}.\n     *\n     * <p>Deadline Extensions may not be synced up with the deadlines in feedback session.\n     * Treat deadlines in feedback session as the single source of truth and verify their existence before sending emails.\n     ","lineNumber":82,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private List<DeadlineExtensionAttributes> filterValidDeadlineExtensions(List<DeadlineExtensionAttributes> deadlineExtensions, FeedbackSessionAttributes session)","name":"filterValidDeadlineExtensions","type":"List<DeadlineExtensionAttributes>","javadoc":"\n     * Remove invalid deadline extensions from the given {@code deadlineExtensions}.\n     *\n     * <p>Deadline Extensions may not be synced up with the deadlines in feedback session.\n     * Treat deadlines in feedback session as the single source of truth and verify their existence before sending emails.\n     "},{"fullQualified":"private boolean isValidDeadlineExtension(DeadlineExtensionAttributes deadlineExtension, Map<String, Instant> actualDeadlines)","name":"isValidDeadlineExtension","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionOpeningRemindersAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionOpeningRemindersAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionOpeningSoonRemindersAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionOpeningSoonRemindersAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionPublishedEmailWorkerAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionPublishedEmailWorkerAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionPublishedRemindersAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionPublishedRemindersAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionRemindEmailWorkerAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionRemindEmailWorkerAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionRemindParticularUsersEmailWorkerAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionRemindParticularUsersEmailWorkerAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionResendPublishedEmailWorkerAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionResendPublishedEmailWorkerAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionUnpublishedEmailWorkerAction","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionUnpublishedEmailWorkerAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GateKeeper","fullyQualifiedName":"teammates.ui.webapi.GateKeeper","isInterface":false,"codeComments":[{"type":"LineComment","text":" These methods ensures that the nominal user specified has access to a given entity","lineNumber":41,"isOrphan":true},{"type":"LineComment","text":" These methods ensures that the nominal user specified can perform the specified action on a given entity.","lineNumber":274,"isOrphan":true},{"type":"LineComment","text":" prevent initialization","lineNumber":23,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Verifies the user is logged in.\n     ","lineNumber":30,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the specified student can access the specified course.\n     ","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the specified student can access the specified feedback session.\n     ","lineNumber":58,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the specified instructor can access the specified course.\n     ","lineNumber":78,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies the instructor and course are not null, the instructor belongs to\n     * the course and the instructor has the privilege specified by\n     * privilegeName.\n     ","lineNumber":94,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies the instructor and course are not null, the instructor belongs to\n     * the course and the instructor has the privilege specified by\n     * privilegeName for sectionName.\n     ","lineNumber":117,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the specified instructor can access the specified feedback session.\n     ","lineNumber":143,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies the instructor and course are not null, the instructor belongs to\n     * the course and the instructor has the privilege specified by\n     * privilegeName for feedbackSession.\n     ","lineNumber":159,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the specified instructor has specified privilege for a section in the specified feedback session.\n     ","lineNumber":184,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the feedback question is for student to answer.\n     ","lineNumber":208,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the feedback question is for instructor to answer.\n     ","lineNumber":221,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that an instructor has submission privilege of a feedback session.\n     ","lineNumber":234,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that comment is created by feedback participant.\n     *\n     * @param frc comment to be accessed\n     * @param feedbackParticipant email or team of feedback participant\n     ","lineNumber":256,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the action is accessible when the user is either an instructor of the course, a student of the course\n     * or his/her team member.\n     ","lineNumber":283,"isOrphan":false}],"allMethods":[{"fullQualified":"public static GateKeeper inst()","name":"inst","type":"GateKeeper","javadoc":null},{"fullQualified":" void verifyLoggedInUserPrivileges(UserInfo userInfo) throws UnauthorizedAccessException","name":"verifyLoggedInUserPrivileges","type":"void","javadoc":"\n     * Verifies the user is logged in.\n     "},{"fullQualified":" void verifyAccessible(StudentAttributes student, CourseAttributes course) throws UnauthorizedAccessException","name":"verifyAccessible","type":"void","javadoc":"\n     * Verifies that the specified student can access the specified course.\n     "},{"fullQualified":" void verifyAccessible(StudentAttributes student, FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException","name":"verifyAccessible","type":"void","javadoc":"\n     * Verifies that the specified student can access the specified feedback session.\n     "},{"fullQualified":" void verifyAccessible(InstructorAttributes instructor, CourseAttributes course) throws UnauthorizedAccessException","name":"verifyAccessible","type":"void","javadoc":"\n     * Verifies that the specified instructor can access the specified course.\n     "},{"fullQualified":" void verifyAccessible(InstructorAttributes instructor, CourseAttributes course, String privilegeName) throws UnauthorizedAccessException","name":"verifyAccessible","type":"void","javadoc":"\n     * Verifies the instructor and course are not null, the instructor belongs to\n     * the course and the instructor has the privilege specified by\n     * privilegeName.\n     "},{"fullQualified":" void verifyAccessible(InstructorAttributes instructor, CourseAttributes course, String sectionName, String privilegeName) throws UnauthorizedAccessException","name":"verifyAccessible","type":"void","javadoc":"\n     * Verifies the instructor and course are not null, the instructor belongs to\n     * the course and the instructor has the privilege specified by\n     * privilegeName for sectionName.\n     "},{"fullQualified":" void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException","name":"verifyAccessible","type":"void","javadoc":"\n     * Verifies that the specified instructor can access the specified feedback session.\n     "},{"fullQualified":" void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAttributes feedbacksession, String privilegeName) throws UnauthorizedAccessException","name":"verifyAccessible","type":"void","javadoc":"\n     * Verifies the instructor and course are not null, the instructor belongs to\n     * the course and the instructor has the privilege specified by\n     * privilegeName for feedbackSession.\n     "},{"fullQualified":" void verifyAccessible(InstructorAttributes instructor, FeedbackSessionAttributes feedbackSession, String sectionName, String privilegeName) throws UnauthorizedAccessException","name":"verifyAccessible","type":"void","javadoc":"\n     * Verifies that the specified instructor has specified privilege for a section in the specified feedback session.\n     "},{"fullQualified":" void verifyAnswerableForStudent(FeedbackQuestionAttributes feedbackQuestionAttributes) throws UnauthorizedAccessException","name":"verifyAnswerableForStudent","type":"void","javadoc":"\n     * Verifies that the feedback question is for student to answer.\n     "},{"fullQualified":" void verifyAnswerableForInstructor(FeedbackQuestionAttributes feedbackQuestionAttributes) throws UnauthorizedAccessException","name":"verifyAnswerableForInstructor","type":"void","javadoc":"\n     * Verifies that the feedback question is for instructor to answer.\n     "},{"fullQualified":" void verifySessionSubmissionPrivilegeForInstructor(FeedbackSessionAttributes session, InstructorAttributes instructor) throws UnauthorizedAccessException","name":"verifySessionSubmissionPrivilegeForInstructor","type":"void","javadoc":"\n     * Verifies that an instructor has submission privilege of a feedback session.\n     "},{"fullQualified":" void verifyOwnership(FeedbackResponseCommentAttributes frc, String feedbackParticipant) throws UnauthorizedAccessException","name":"verifyOwnership","type":"void","javadoc":"\n     * Verifies that comment is created by feedback participant.\n     *\n     * @param frc comment to be accessed\n     * @param feedbackParticipant email or team of feedback participant\n     "},{"fullQualified":"private void verifyNotNull(Object object, String typeName) throws UnauthorizedAccessException","name":"verifyNotNull","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleForCurrentUserAsInstructorOrTeamMember(String googleId, String courseId, String section, String email) throws UnauthorizedAccessException","name":"verifyAccessibleForCurrentUserAsInstructorOrTeamMember","type":"void","javadoc":"\n     * Verifies that the action is accessible when the user is either an instructor of the course, a student of the course\n     * or his/her team member.\n     "},{"fullQualified":"private void verifyInstructorCanViewProfile(InstructorAttributes instructor, String section) throws UnauthorizedAccessException","name":"verifyInstructorCanViewProfile","type":"void","javadoc":null},{"fullQualified":"private void verifyStudentCanViewProfile(StudentAttributes student, String courseId, String email) throws UnauthorizedAccessException","name":"verifyStudentCanViewProfile","type":"void","javadoc":null}],"allConstructors":[{"identifier":"private GateKeeper()","javadocComment":null}]},{"name":"GenerateEmailAction","fullyQualifiedName":"teammates.ui.webapi.GenerateEmailAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetAccountAction","fullyQualifiedName":"teammates.ui.webapi.GetAccountAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetAccountRequestAction","fullyQualifiedName":"teammates.ui.webapi.GetAccountRequestAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetAccountsAction","fullyQualifiedName":"teammates.ui.webapi.GetAccountsAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetActionClassesAction","fullyQualifiedName":"teammates.ui.webapi.GetActionClassesAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetAuthInfoAction","fullyQualifiedName":"teammates.ui.webapi.GetAuthInfoAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Login information is available to everyone","lineNumber":27,"isOrphan":true}],"allMethods":[{"fullQualified":"public AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl()","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":" String createLoginUrl(String frontendUrl, String nextUrl)","name":"createLoginUrl","type":"String","javadoc":null}],"allConstructors":[]},{"name":"GetCourseAction","fullyQualifiedName":"teammates.ui.webapi.GetCourseAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetCourseJoinStatusAction","fullyQualifiedName":"teammates.ui.webapi.GetCourseJoinStatusAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Any user can use a join link as long as its parameters are valid","lineNumber":21,"isOrphan":true}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl()","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private JsonResult getStudentJoinStatus(String regkey)","name":"getStudentJoinStatus","type":"JsonResult","javadoc":null},{"fullQualified":"private JsonResult getInstructorJoinStatus(String regkey, boolean isCreatingAccount)","name":"getInstructorJoinStatus","type":"JsonResult","javadoc":null},{"fullQualified":"private JsonResult getJoinStatusResult(boolean hasJoined)","name":"getJoinStatusResult","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetCoursesAction","fullyQualifiedName":"teammates.ui.webapi.GetCoursesAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private JsonResult getStudentCourses()","name":"getStudentCourses","type":"JsonResult","javadoc":null},{"fullQualified":"private JsonResult getInstructorCourses()","name":"getInstructorCourses","type":"JsonResult","javadoc":null},{"fullQualified":"private List<CourseAttributes> getCourse(List<InstructorAttributes> instructors)","name":"getCourse","type":"List<CourseAttributes>","javadoc":null},{"fullQualified":"private List<CourseAttributes> getSoftDeletedCourse(List<InstructorAttributes> instructors)","name":"getSoftDeletedCourse","type":"List<CourseAttributes>","javadoc":null}],"allConstructors":[]},{"name":"GetCourseSectionNamesAction","fullyQualifiedName":"teammates.ui.webapi.GetCourseSectionNamesAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetDeadlineExtensionAction","fullyQualifiedName":"teammates.ui.webapi.GetDeadlineExtensionAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackQuestionRecipientsAction","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackQuestionRecipientsAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackQuestionsAction","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackQuestionsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" filter out unmodifiable questions","lineNumber":91,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackResponseCommentAction","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackResponseCommentAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackResponsesAction","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackResponsesAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Only MCQ and MSQ questions can have participant comment","lineNumber":84,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackSessionAction","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackSessionAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private FeedbackSessionData getStudentFeedbackSessionData(FeedbackSessionAttributes session)","name":"getStudentFeedbackSessionData","type":"FeedbackSessionData","javadoc":null},{"fullQualified":"private FeedbackSessionData getInstructorFeedbackSessionData(FeedbackSessionAttributes session)","name":"getInstructorFeedbackSessionData","type":"FeedbackSessionData","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackSessionLogsAction","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackSessionLogsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" TODO: we might want to impose limits on the time range from startTime to endTime","lineNumber":72,"isOrphan":true},{"type":"LineComment","text":" If the feedback session log type retrieved from the log is invalid, ignore the log","lineNumber":97,"isOrphan":false},{"type":"LineComment","text":" If the student email retrieved from the log is invalid, ignore the log","lineNumber":104,"isOrphan":false},{"type":"LineComment","text":" If the feedback session retrieved from the log is invalid, ignore the log","lineNumber":109,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private Map<String, List<FeedbackSessionLogEntry>> groupFeedbackSessionLogEntries(List<FeedbackSessionLogEntry> fsLogEntries)","name":"groupFeedbackSessionLogEntries","type":"Map<String,List<FeedbackSessionLogEntry>>","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackSessionsAction","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackSessionsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" hide session not visible to student","lineNumber":117,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackSessionSubmittedGiverSetAction","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackSessionSubmittedGiverSetAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetHasResponsesAction","fullyQualifiedName":"teammates.ui.webapi.GetHasResponsesAction","isInterface":false,"codeComments":[{"type":"LineComment","text":"An instructor of the feedback session can check responses for questions within it.","lineNumber":34,"isOrphan":false},{"type":"LineComment","text":"prefer question check over course checks","lineNumber":46,"isOrphan":false},{"type":"LineComment","text":"An student can check whether he has submitted responses for a feedback session in his course.","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":" Course has no sessions and therefore no response; access to responses is safe for all.","lineNumber":68,"isOrphan":false},{"type":"LineComment","text":" Verify that all sessions are accessible to the user.","lineNumber":72,"isOrphan":false},{"type":"LineComment","text":" Skip invisible sessions.","lineNumber":75,"isOrphan":false},{"type":"LineComment","text":" Default path for student and admin","lineNumber":93,"isOrphan":false},{"type":"LineComment","text":" check all sessions in the course","lineNumber":97,"isOrphan":false},{"type":"LineComment","text":" Skip invisible sessions.","lineNumber":104,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private JsonResult handleInstructorReq()","name":"handleInstructorReq","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetInstructorAction","fullyQualifiedName":"teammates.ui.webapi.GetInstructorAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetInstructorPrivilegeAction","fullyQualifiedName":"teammates.ui.webapi.GetInstructorPrivilegeAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetInstructorsAction","fullyQualifiedName":"teammates.ui.webapi.GetInstructorsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" get partial details of instructors with information hiding","lineNumber":38,"isOrphan":true},{"type":"LineComment","text":" student should belong to the course","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" get all instructors of a course without information hiding","lineNumber":43,"isOrphan":true},{"type":"LineComment","text":" this need instructor privileges","lineNumber":44,"isOrphan":false},{"type":"LineComment","text":" hide information","lineNumber":68,"isOrphan":false},{"type":"LineComment","text":" get all instructors of a course without information hiding","lineNumber":76,"isOrphan":true},{"type":"LineComment","text":" adds googleId if caller is admin or has the appropriate privilege to modify instructor","lineNumber":77,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetNationalitiesAction","fullyQualifiedName":"teammates.ui.webapi.GetNationalitiesAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Anyone can fetch the nationality data","lineNumber":17,"isOrphan":true}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl()","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetNotificationAction","fullyQualifiedName":"teammates.ui.webapi.GetNotificationAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetNotificationsAction","fullyQualifiedName":"teammates.ui.webapi.GetNotificationsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" if request is from admin and targetUser is not specified, retrieve all notifications","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" retrieve active notification for specified target user","lineNumber":54,"isOrphan":false},{"type":"LineComment","text":" Filter unread notifications","lineNumber":76,"isOrphan":false},{"type":"LineComment","text":" Update shown attribute once a non-admin user fetches unread notifications","lineNumber":87,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetOngoingSessionsAction","fullyQualifiedName":"teammates.ui.webapi.GetOngoingSessionsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" test for bounds","lineNumber":34,"isOrphan":false},{"type":"LineComment","text":" test for bounds","lineNumber":48,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private AccountAttributes getRegisteredInstructorAccountFromInstructors(List<InstructorAttributes> instructors)","name":"getRegisteredInstructorAccountFromInstructors","type":"AccountAttributes","javadoc":null}],"allConstructors":[]},{"name":"GetReadNotificationsAction","fullyQualifiedName":"teammates.ui.webapi.GetReadNotificationsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Any user can get the read notifications for their account.","lineNumber":18,"isOrphan":true}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public ActionResult execute()","name":"execute","type":"ActionResult","javadoc":null}],"allConstructors":[]},{"name":"GetRegkeyValidityAction","fullyQualifiedName":"teammates.ui.webapi.GetRegkeyValidityAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Regkey information is available to everyone","lineNumber":24,"isOrphan":true},{"type":"LineComment","text":" If registration key has not been used, always allow access","lineNumber":54,"isOrphan":false},{"type":"LineComment","text":" If the registration key has been used to register, the logged in user needs to match","lineNumber":58,"isOrphan":true},{"type":"LineComment","text":" Block access to not logged in user and mismatched user","lineNumber":59,"isOrphan":false}],"allMethods":[{"fullQualified":"public AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl()","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetSessionResponseStatsAction","fullyQualifiedName":"teammates.ui.webapi.GetSessionResponseStatsAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetSessionResultsAction","fullyQualifiedName":"teammates.ui.webapi.GetSessionResultsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Allow additional filter by question ID (equivalent to question number) and section name","lineNumber":62,"isOrphan":false},{"type":"LineComment","text":" Section name filter is not applicable here","lineNumber":81,"isOrphan":false},{"type":"LineComment","text":" Build a fake student object, as the results will be displayed as if they are displayed to a student","lineNumber":87,"isOrphan":false},{"type":"LineComment","text":" Section name filter is not applicable here","lineNumber":94,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetStudentAction","fullyQualifiedName":"teammates.ui.webapi.GetStudentAction","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" Message indicating that a student not found. ","lineNumber":14,"isOrphan":false},{"type":"JavadocComment","text":" String indicating ACCESS is not given. ","lineNumber":17,"isOrphan":false},{"type":"LineComment","text":" hide information if not an instructor","lineNumber":80,"isOrphan":false},{"type":"LineComment","text":" add student institute","lineNumber":82,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetStudentProfileAction","fullyQualifiedName":"teammates.ui.webapi.GetStudentProfileAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Student access his own profile","lineNumber":29,"isOrphan":false},{"type":"LineComment","text":" Access someone else's profile","lineNumber":34,"isOrphan":false},{"type":"LineComment","text":" create one on the fly","lineNumber":75,"isOrphan":false},{"type":"LineComment","text":" If student requesting and is not the student's own profile, hide some fields","lineNumber":80,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetStudentProfilePictureAction","fullyQualifiedName":"teammates.ui.webapi.GetStudentProfilePictureAction","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" Indicates ACCESS is not given. ","lineNumber":13,"isOrphan":false},{"type":"LineComment","text":"viewing someone else's photo","lineNumber":31,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public ActionResult execute()","name":"execute","type":"ActionResult","javadoc":null}],"allConstructors":[]},{"name":"GetStudentsAction","fullyQualifiedName":"teammates.ui.webapi.GetStudentsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" request to get all students of a course by instructor","lineNumber":26,"isOrphan":false},{"type":"LineComment","text":" request to get team member by current student","lineNumber":31,"isOrphan":false},{"type":"LineComment","text":" request to get all students of a course by instructor","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" request to get team members by current student","lineNumber":49,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetTimeZonesAction","fullyQualifiedName":"teammates.ui.webapi.GetTimeZonesAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetUsageStatisticsAction","fullyQualifiedName":"teammates.ui.webapi.GetUsageStatisticsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" covering six whole months","lineNumber":16,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"GetUserCookieAction","fullyQualifiedName":"teammates.ui.webapi.GetUserCookieAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"ImageResult","fullyQualifiedName":"teammates.ui.webapi.ImageResult","isInterface":false,"codeComments":[{"type":"LineComment","text":" Replaces \"application/xml\" with \"image/svg+xml\" as guessContentTypeFromStream only guesses the former.","lineNumber":36,"isOrphan":true},{"type":"LineComment","text":" We can do this conversion because \"image/svg+xml\" is the only MIME type based around XML for","lineNumber":37,"isOrphan":true},{"type":"LineComment","text":" image files we accept.","lineNumber":38,"isOrphan":false}],"allMethods":[{"fullQualified":" byte[] getBytes()","name":"getBytes","type":"byte[]","javadoc":null},{"fullQualified":"public void send(HttpServletResponse resp) throws IOException","name":"send","type":"void","javadoc":null}],"allConstructors":[{"identifier":" ImageResult()","javadocComment":null},{"identifier":" ImageResult(byte[] bytes)","javadocComment":null}]},{"name":"InstructorCourseJoinEmailWorkerAction","fullyQualifiedName":"teammates.ui.webapi.InstructorCourseJoinEmailWorkerAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" The instructor is queried using the `id`of instructor as it ensures that the","lineNumber":24,"isOrphan":true},{"type":"LineComment","text":" instructor is retrieved (and not null) even if the index building for","lineNumber":25,"isOrphan":true},{"type":"LineComment","text":" saving the new instructor takes more time in database.","lineNumber":26,"isOrphan":true},{"type":"LineComment","text":" The instructor `id` can be constructed back using (instructorEmail%courseId)","lineNumber":27,"isOrphan":true},{"type":"LineComment","text":" because instructors' email cannot be changed before joining the course.","lineNumber":28,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"InstructorSearchIndexingWorkerAction","fullyQualifiedName":"teammates.ui.webapi.InstructorSearchIndexingWorkerAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Set an arbitrary retry code outside of the range 200-299 to trigger automatic retry","lineNumber":23,"isOrphan":false}],"allMethods":[{"fullQualified":"public ActionResult execute()","name":"execute","type":"ActionResult","javadoc":null}],"allConstructors":[]},{"name":"InvalidHttpParameterException","fullyQualifiedName":"teammates.ui.webapi.InvalidHttpParameterException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public InvalidHttpParameterException(String message)","javadocComment":null},{"identifier":"public InvalidHttpParameterException(InvalidParametersException cause)","javadocComment":null},{"identifier":"public InvalidHttpParameterException(String message, ArithmeticException cause)","javadocComment":null},{"identifier":"public InvalidHttpParameterException(String message, NumberFormatException cause)","javadocComment":null},{"identifier":"public InvalidHttpParameterException(String message, IllegalArgumentException cause)","javadocComment":null}]},{"name":"InvalidOperationException","fullyQualifiedName":"teammates.ui.webapi.InvalidOperationException","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":"public InvalidOperationException(String message)","javadocComment":null},{"identifier":"public InvalidOperationException(EntityAlreadyExistsException cause)","javadocComment":null},{"identifier":"public InvalidOperationException(EnrollException cause)","javadocComment":null},{"identifier":"public InvalidOperationException(InstructorUpdateException cause)","javadocComment":null},{"identifier":"public InvalidOperationException(String message, EntityAlreadyExistsException cause)","javadocComment":null}]},{"name":"JoinCourseAction","fullyQualifiedName":"teammates.ui.webapi.JoinCourseAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Any user can use a join link as long as its parameters are valid","lineNumber":29,"isOrphan":true},{"type":"LineComment","text":" There should not be any invalid parameter here","lineNumber":56,"isOrphan":false},{"type":"LineComment","text":" There should not be any invalid parameter here","lineNumber":76,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl()","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private JsonResult joinCourseForStudent(String regkey) throws InvalidOperationException","name":"joinCourseForStudent","type":"JsonResult","javadoc":null},{"fullQualified":"private JsonResult joinCourseForInstructor(String regkey) throws InvalidOperationException","name":"joinCourseForInstructor","type":"JsonResult","javadoc":null},{"fullQualified":"private void sendJoinEmail(String courseId, String userName, String userEmail, boolean isInstructor)","name":"sendJoinEmail","type":"void","javadoc":null}],"allConstructors":[]},{"name":"JsonResult","fullyQualifiedName":"teammates.ui.webapi.JsonResult","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" ApiOutput getOutput()","name":"getOutput","type":"ApiOutput","javadoc":null},{"fullQualified":"public void send(HttpServletResponse resp) throws IOException","name":"send","type":"void","javadoc":null},{"fullQualified":" List<Cookie> getCookies()","name":"getCookies","type":"List<Cookie>","javadoc":null}],"allConstructors":[{"identifier":" JsonResult(ApiOutput output)","javadocComment":null},{"identifier":" JsonResult(ApiOutput output, List<Cookie> cookies)","javadocComment":null},{"identifier":" JsonResult(String message)","javadocComment":null},{"identifier":"public JsonResult(String message, int statusCode)","javadocComment":null}]},{"name":"MarkNotificationAsReadAction","fullyQualifiedName":"teammates.ui.webapi.MarkNotificationAsReadAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Any user can create a read status for notification.","lineNumber":24,"isOrphan":true}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public ActionResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"ActionResult","javadoc":null}],"allConstructors":[]},{"name":"PostStudentProfilePictureAction","fullyQualifiedName":"teammates.ui.webapi.PostStudentProfilePictureAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"PublishFeedbackSessionAction","fullyQualifiedName":"teammates.ui.webapi.PublishFeedbackSessionAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" If feedback session was already published to begin with, return early","lineNumber":43,"isOrphan":false},{"type":"LineComment","text":" There should not be any invalid parameter here","lineNumber":59,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"PutDataBundleAction","fullyQualifiedName":"teammates.ui.webapi.PutDataBundleAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"PutDataBundleDocumentsAction","fullyQualifiedName":"teammates.ui.webapi.PutDataBundleDocumentsAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"QueryLogsAction","fullyQualifiedName":"teammates.ui.webapi.QueryLogsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" default to logs with INFO level or higher","lineNumber":79,"isOrphan":false},{"type":"LineComment","text":" Always remove text payload message for non-admin maintainers","lineNumber":141,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private void removeSensitiveFields(QueryLogsResults queryResults)","name":"removeSensitiveFields","type":"void","javadoc":null}],"allConstructors":[]},{"name":"RegenerateInstructorKeyAction","fullyQualifiedName":"teammates.ui.webapi.RegenerateInstructorKeyAction","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" Message indicating that the key regeneration was successful, and corresponding email was sent. ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":" Message indicating that the key regeneration was successful, but corresponding email could not be sent. ","lineNumber":30,"isOrphan":false},{"type":"LineComment","text":" No logging here as severe logging is done at the origin of the error","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sends the regenerated course join and feedback session links to the instructor.\n     * @return true if the email was sent successfully, and false otherwise.\n     ","lineNumber":57,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private boolean sendEmail(InstructorAttributes instructor)","name":"sendEmail","type":"boolean","javadoc":"\n     * Sends the regenerated course join and feedback session links to the instructor.\n     * @return true if the email was sent successfully, and false otherwise.\n     "}],"allConstructors":[]},{"name":"RegenerateStudentKeyAction","fullyQualifiedName":"teammates.ui.webapi.RegenerateStudentKeyAction","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" Message indicating that the key regeneration was successful, and corresponding email was sent. ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":" Message indicating that the key regeneration was successful, but corresponding email could not be sent. ","lineNumber":30,"isOrphan":false},{"type":"LineComment","text":" No logging here as severe logging is done at the origin of the error","lineNumber":45,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sends the regenerated course join and feedback session links to the student.\n     * @return true if the email was sent successfully, and false otherwise.\n     ","lineNumber":57,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private boolean sendEmail(StudentAttributes student)","name":"sendEmail","type":"boolean","javadoc":"\n     * Sends the regenerated course join and feedback session links to the student.\n     * @return true if the email was sent successfully, and false otherwise.\n     "}],"allConstructors":[]},{"name":"RemindFeedbackSessionResultAction","fullyQualifiedName":"teammates.ui.webapi.RemindFeedbackSessionResultAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"RemindFeedbackSessionSubmissionAction","fullyQualifiedName":"teammates.ui.webapi.RemindFeedbackSessionSubmissionAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"ResetAccountAction","fullyQualifiedName":"teammates.ui.webapi.ResetAccountAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"ResetAccountRequestAction","fullyQualifiedName":"teammates.ui.webapi.ResetAccountRequestAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" InvalidParametersException should not be thrown as validity of params verified when fetching entity.","lineNumber":42,"isOrphan":true},{"type":"LineComment","text":" EntityDoesNoExistException shuold not be thrown as existence of entity has just been validated.","lineNumber":43,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute() throws InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"RestoreCourseAction","fullyQualifiedName":"teammates.ui.webapi.RestoreCourseAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"RestoreFeedbackSessionAction","fullyQualifiedName":"teammates.ui.webapi.RestoreFeedbackSessionAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"SearchAccountRequestsAction","fullyQualifiedName":"teammates.ui.webapi.SearchAccountRequestsAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"SearchInstructorsAction","fullyQualifiedName":"teammates.ui.webapi.SearchInstructorsAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"SearchStudentsAction","fullyQualifiedName":"teammates.ui.webapi.SearchStudentsAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Only instructors and admins can search for student","lineNumber":25,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"SendEmailWorkerAction","fullyQualifiedName":"teammates.ui.webapi.SendEmailWorkerAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Set an arbitrary retry code outside of the range 200-299 so Cloud Tasks will automatically retry upon failure","lineNumber":21,"isOrphan":false}],"allMethods":[{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"SendErrorReportAction","fullyQualifiedName":"teammates.ui.webapi.SendErrorReportAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Anyone can submit an error report","lineNumber":15,"isOrphan":false},{"type":"LineComment","text":" Anyone can submit an error report","lineNumber":21,"isOrphan":true},{"type":"LineComment","text":" Severe logs will trigger email to the system admin","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the user error report that will be sent to the system admin.\n     ","lineNumber":34,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl()","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":" String getUserErrorReportLogMessage(ErrorReportRequest report)","name":"getUserErrorReportLogMessage","type":"String","javadoc":"\n     * Gets the user error report that will be sent to the system admin.\n     "}],"allConstructors":[]},{"name":"SendJoinReminderEmailAction","fullyQualifiedName":"teammates.ui.webapi.SendJoinReminderEmailAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" this is sending registration emails to all students in the course and we will check if the instructor","lineNumber":40,"isOrphan":true},{"type":"LineComment","text":" canmodifystudent for course level since for modifystudent privilege there is only course level setting for now","lineNumber":41,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"SessionLinksRecoveryAction","fullyQualifiedName":"teammates.ui.webapi.SessionLinksRecoveryAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" no specific access control needed.","lineNumber":23,"isOrphan":true}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl()","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"StudentCourseJoinEmailWorkerAction","fullyQualifiedName":"teammates.ui.webapi.StudentCourseJoinEmailWorkerAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"StudentSearchIndexingWorkerAction","fullyQualifiedName":"teammates.ui.webapi.StudentSearchIndexingWorkerAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Set an arbitrary retry code outside of the range 200-299 to trigger automatic retry","lineNumber":23,"isOrphan":false}],"allMethods":[{"fullQualified":"public ActionResult execute()","name":"execute","type":"ActionResult","javadoc":null}],"allConstructors":[]},{"name":"SubmitFeedbackResponsesAction","fullyQualifiedName":"teammates.ui.webapi.SubmitFeedbackResponsesAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" None of the exceptions should be happening as the responses have been pre-validated","lineNumber":214,"isOrphan":false},{"type":"LineComment","text":" None of the exceptions should be happening as the responses have been pre-validated","lineNumber":223,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"UnauthorizedAccessException","fullyQualifiedName":"teammates.ui.webapi.UnauthorizedAccessException","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Indicates whether the error message will be shown to the user (as the API response).\n     * If this flag is set to \"false\", a generic error message will be displayed instead.\n     * The actual error message is always displayed to admin in the logs.\n     *\n     * <p>As this exception involves access control, the error message need to be redacted\n     * in most cases because the full error message can give clues as to what needs to be done\n     * in order to get the access (which should be unauthorized).\n     * While it is true that there is little that user can do to elevate his/her privilege\n     * even with that knowledge, we still need to do our part.\n     *\n     * <p>There are, however, some cases whereby the error message would be legitimately helpful\n     * to users, e.g. when submitting responses to a feedback session that has not opened yet.\n     * For such cases, it is appropriate to set this flag as \"true\".\n     ","lineNumber":10,"isOrphan":false}],"allMethods":[{"fullQualified":"public boolean isShowErrorMessage()","name":"isShowErrorMessage","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"public UnauthorizedAccessException(String message)","javadocComment":null},{"identifier":"public UnauthorizedAccessException(String message, boolean showErrorMessage)","javadocComment":null}]},{"name":"UnpublishFeedbackSessionAction","fullyQualifiedName":"teammates.ui.webapi.UnpublishFeedbackSessionAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" If feedback session was not published to begin with, return early","lineNumber":43,"isOrphan":false},{"type":"LineComment","text":" There should not be any invalid parameter here","lineNumber":60,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute()","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"UpdateCourseAction","fullyQualifiedName":"teammates.ui.webapi.UpdateCourseAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"UpdateFeedbackQuestionAction","fullyQualifiedName":"teammates.ui.webapi.UpdateFeedbackQuestionAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" update old value based on current request","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" validate questions (giver & recipient)","lineNumber":60,"isOrphan":false},{"type":"LineComment","text":" validate questions (question details)","lineNumber":65,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"UpdateFeedbackResponseCommentAction","fullyQualifiedName":"teammates.ui.webapi.UpdateFeedbackResponseCommentAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" giver, allowed by default","lineNumber":89,"isOrphan":false},{"type":"LineComment","text":" Edit comment text","lineNumber":138,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"UpdateFeedbackSessionAction","fullyQualifiedName":"teammates.ui.webapi.UpdateFeedbackSessionAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" These ensure the existence checks are only done whenever necessary in order to reduce data reads.","lineNumber":66,"isOrphan":false},{"type":"LineComment","text":" Entity existence has been verified before, and this exception should not happen","lineNumber":115,"isOrphan":false},{"type":"LineComment","text":" Revoke deadline extensions","lineNumber":141,"isOrphan":false},{"type":"LineComment","text":" Create deadline extensions","lineNumber":148,"isOrphan":false},{"type":"LineComment","text":" Update deadline extensions","lineNumber":166,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private List<EmailWrapper> processDeadlineExtensions(String courseId, FeedbackSessionAttributes session, Map<String, Instant> oldDeadlines, Map<String, Instant> newDeadlines, boolean areInstructors, boolean notifyUsers)","name":"processDeadlineExtensions","type":"List<EmailWrapper>","javadoc":null}],"allConstructors":[]},{"name":"UpdateInstructorAction","fullyQualifiedName":"teammates.ui.webapi.UpdateInstructorAction","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Creates a new Instructor based on given information.\n     * This consists of everything apart from custom privileges.\n     *\n     * @param courseId              Id of the course the instructor is being added to.\n     * @param instructorId          Id of the instructor.\n     * @param instructorName        Name of the instructor.\n     * @param instructorEmail       Email of the instructor.\n     * @param instructorRole        Role of the instructor.\n     * @param isDisplayedToStudents Whether the instructor should be visible to students.\n     * @param displayedName         Name to be visible to students.\n     *                                  Should not be {@code null} even if {@code isDisplayedToStudents} is false.\n     * @return The edited instructor with updated basic info\n     ","lineNumber":89,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private InstructorAttributes retrieveEditedInstructor(String courseId, String instructorId, String instructorName, String instructorEmail, String instructorRole, boolean isDisplayedToStudents, String displayedName)","name":"retrieveEditedInstructor","type":"InstructorAttributes","javadoc":"\n     * Creates a new Instructor based on given information.\n     * This consists of everything apart from custom privileges.\n     *\n     * @param courseId              Id of the course the instructor is being added to.\n     * @param instructorId          Id of the instructor.\n     * @param instructorName        Name of the instructor.\n     * @param instructorEmail       Email of the instructor.\n     * @param instructorRole        Role of the instructor.\n     * @param isDisplayedToStudents Whether the instructor should be visible to students.\n     * @param displayedName         Name to be visible to students.\n     *                                  Should not be {@code null} even if {@code isDisplayedToStudents} is false.\n     * @return The edited instructor with updated basic info\n     "}],"allConstructors":[]},{"name":"UpdateInstructorPrivilegeAction","fullyQualifiedName":"teammates.ui.webapi.UpdateInstructorPrivilegeAction","isInterface":false,"codeComments":[{"type":"LineComment","text":" Should not happen as only privilege is updated","lineNumber":62,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"UpdateNotificationAction","fullyQualifiedName":"teammates.ui.webapi.UpdateNotificationAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null}],"allConstructors":[]},{"name":"UpdateStudentAction","fullyQualifiedName":"teammates.ui.webapi.UpdateStudentAction","isInterface":false,"codeComments":[{"type":"LineComment","text":"we swap out email before we validate","lineNumber":65,"isOrphan":true},{"type":"LineComment","text":"TODO: this is duct tape at the moment, need to refactor how we do the validation","lineNumber":66,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Sends the feedback session summary as an email.\n     *\n     * @return The true if email was sent successfully or false otherwise.\n     ","lineNumber":105,"isOrphan":false}],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private boolean sendEmail(String courseId, String studentEmail)","name":"sendEmail","type":"boolean","javadoc":"\n     * Sends the feedback session summary as an email.\n     *\n     * @return The true if email was sent successfully or false otherwise.\n     "}],"allConstructors":[]},{"name":"UpdateStudentProfileAction","fullyQualifiedName":"teammates.ui.webapi.UpdateStudentProfileAction","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" AuthType getMinAuthLevel()","name":"getMinAuthLevel","type":"AuthType","javadoc":null},{"fullQualified":" void checkSpecificAccessControl() throws UnauthorizedAccessException","name":"checkSpecificAccessControl","type":"void","javadoc":null},{"fullQualified":"public JsonResult execute() throws InvalidHttpRequestBodyException","name":"execute","type":"JsonResult","javadoc":null},{"fullQualified":"private StudentProfileAttributes extractProfileData(String studentId, StudentProfileUpdateRequest req)","name":"extractProfileData","type":"StudentProfileAttributes","javadoc":null},{"fullQualified":"private StudentProfileAttributes sanitizeProfile(StudentProfileAttributes studentProfile)","name":"sanitizeProfile","type":"StudentProfileAttributes","javadoc":null}],"allConstructors":[]},{"name":"ArchitectureTest","fullyQualifiedName":"teammates.architecture.ArchitectureTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"private static String includeSubpackages(String pack)","name":"includeSubpackages","type":"String","javadoc":null},{"fullQualified":"private static JavaClasses forClasses(String... packageNames)","name":"forClasses","type":"JavaClasses","javadoc":null},{"fullQualified":"public void testArchitecture_uiShouldNotTouchStorage()","name":"testArchitecture_uiShouldNotTouchStorage","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_mainShouldNotTouchProductionCodeExceptCommon()","name":"testArchitecture_mainShouldNotTouchProductionCodeExceptCommon","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_logicShouldNotTouchUi()","name":"testArchitecture_logicShouldNotTouchUi","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_storageShouldNotTouchLogic()","name":"testArchitecture_storageShouldNotTouchLogic","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_storageShouldNotTouchUi()","name":"testArchitecture_storageShouldNotTouchUi","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_commonShouldNotTouchLogic()","name":"testArchitecture_commonShouldNotTouchLogic","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_commonShouldNotTouchStorage()","name":"testArchitecture_commonShouldNotTouchStorage","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_commonShouldNotTouchUi()","name":"testArchitecture_commonShouldNotTouchUi","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_uiShouldNotTouchLogicExceptForApi()","name":"testArchitecture_uiShouldNotTouchLogicExceptForApi","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_ui_onlyWebApiCanTouchOutput()","name":"testArchitecture_ui_onlyWebApiCanTouchOutput","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_ui_onlyWebApiCanTouchRequest()","name":"testArchitecture_ui_onlyWebApiCanTouchRequest","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_ui_apiRequestCanOnlyTouchRequestAndOutput()","name":"testArchitecture_ui_apiRequestCanOnlyTouchRequestAndOutput","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_ui_apiOutputCanOnlyTouchOutput()","name":"testArchitecture_ui_apiOutputCanOnlyTouchOutput","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_ui_controllerShouldBeSelfContained()","name":"testArchitecture_ui_controllerShouldBeSelfContained","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_logic_logicCanOnlyAccessStorageApi()","name":"testArchitecture_logic_logicCanOnlyAccessStorageApi","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_logic_coreLogicCanOnlyAccessItsCorrespondingDb()","name":"testArchitecture_logic_coreLogicCanOnlyAccessItsCorrespondingDb","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_logic_coreLogicShouldNotTouchApiLogic()","name":"testArchitecture_logic_coreLogicShouldNotTouchApiLogic","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_logic_coreLogicShouldNotTouchExternalLogic()","name":"testArchitecture_logic_coreLogicShouldNotTouchExternalLogic","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_logic_externalLogicShouldNotTouchCoreLogic()","name":"testArchitecture_logic_externalLogicShouldNotTouchCoreLogic","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_storage_storageSearchShouldNotTouchStorageEntity()","name":"testArchitecture_storage_storageSearchShouldNotTouchStorageEntity","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_storage_storageEntityShouldNotTouchOtherStoragePackages()","name":"testArchitecture_storage_storageEntityShouldNotTouchOtherStoragePackages","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_testClasses_testCasesShouldBeIndependent()","name":"testArchitecture_testClasses_testCasesShouldBeIndependent","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_testClasses_driverShouldNotHaveAnyDependency()","name":"testArchitecture_testClasses_driverShouldNotHaveAnyDependency","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_e2e_e2eShouldBeSelfContained()","name":"testArchitecture_e2e_e2eShouldBeSelfContained","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_e2e_e2eShouldNotTouchProductionCodeExceptCommon()","name":"testArchitecture_e2e_e2eShouldNotTouchProductionCodeExceptCommon","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_e2e_e2eTestCasesShouldBeIndependentOfEachOther()","name":"testArchitecture_e2e_e2eTestCasesShouldBeIndependentOfEachOther","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_e2e_onlyE2ETestsCanAccessPageObjects()","name":"testArchitecture_e2e_onlyE2ETestsCanAccessPageObjects","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_e2e_utilShouldNotHaveAnyDependency()","name":"testArchitecture_e2e_utilShouldNotHaveAnyDependency","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_lnp_lnpShouldBeSelfContained()","name":"testArchitecture_lnp_lnpShouldBeSelfContained","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_lnp_lnpShouldNotTouchProductionCodeExceptCommonAndRequests()","name":"testArchitecture_lnp_lnpShouldNotTouchProductionCodeExceptCommonAndRequests","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_lnp_lnpTestCasesShouldBeIndependentOfEachOther()","name":"testArchitecture_lnp_lnpTestCasesShouldBeIndependentOfEachOther","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_lnp_lnpShouldNotHaveAnyDependency()","name":"testArchitecture_lnp_lnpShouldNotHaveAnyDependency","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_client_clientShouldBeSelfContained()","name":"testArchitecture_client_clientShouldBeSelfContained","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_client_clientShouldNotTouchUiComponent()","name":"testArchitecture_client_clientShouldNotTouchUiComponent","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_client_connectorShouldNotTouchScripts()","name":"testArchitecture_client_connectorShouldNotTouchScripts","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_client_utilShouldNotHaveAnyDependency()","name":"testArchitecture_client_utilShouldNotHaveAnyDependency","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_loggingApiCanOnlyBeAccessedByLogger()","name":"testArchitecture_externalApi_loggingApiCanOnlyBeAccessedByLogger","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_solrApiCanOnlyBeAccessedBySearchManagerClasses()","name":"testArchitecture_externalApi_solrApiCanOnlyBeAccessedBySearchManagerClasses","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_cloudStorageApiCanOnlyBeAccessedByGcsService()","name":"testArchitecture_externalApi_cloudStorageApiCanOnlyBeAccessedByGcsService","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_cloudTasksApiCanOnlyBeAccessedByCloudTasksService()","name":"testArchitecture_externalApi_cloudTasksApiCanOnlyBeAccessedByCloudTasksService","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_cloudLoggingApiCanOnlyBeAccessedByCloudLoggingService()","name":"testArchitecture_externalApi_cloudLoggingApiCanOnlyBeAccessedByCloudLoggingService","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_objectifyApiCanOnlyBeAccessedBySomePackages()","name":"testArchitecture_externalApi_objectifyApiCanOnlyBeAccessedBySomePackages","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_servletApiCanOnlyBeAccessedBySomePackages()","name":"testArchitecture_externalApi_servletApiCanOnlyBeAccessedBySomePackages","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_jettyApiCanOnlyBeAccessedBySomePackages()","name":"testArchitecture_externalApi_jettyApiCanOnlyBeAccessedBySomePackages","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_assertionApiCanOnlyBeAccessedBySomePackages()","name":"testArchitecture_externalApi_assertionApiCanOnlyBeAccessedBySomePackages","type":"void","javadoc":null},{"fullQualified":"public void testArchitecture_externalApi_seleniumApiCanOnlyBeAccessedByPageObjects()","name":"testArchitecture_externalApi_seleniumApiCanOnlyBeAccessedByPageObjects","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AccountAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" When the two accounts are exact copy of each other","lineNumber":179,"isOrphan":false},{"type":"LineComment","text":" When the two accounts have same values but created at different time","lineNumber":182,"isOrphan":false},{"type":"LineComment","text":" When the two accounts are different","lineNumber":187,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":195,"isOrphan":false},{"type":"LineComment","text":" When the two accounts have same values but created at different time,","lineNumber":206,"isOrphan":true},{"type":"LineComment","text":" When the two accounts are exact copy of each other, they should have the same hash code","lineNumber":203,"isOrphan":false},{"type":"LineComment","text":" they should have the same hash code","lineNumber":207,"isOrphan":false},{"type":"LineComment","text":" When the two accounts have different values, they should have different hash code","lineNumber":211,"isOrphan":false},{"type":"LineComment","text":"invalid name","lineNumber":229,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testGetInvalidStateInfo() throws Exception","name":"testGetInvalidStateInfo","type":"void","javadoc":null},{"fullQualified":"public void testToEntity()","name":"testToEntity","type":"void","javadoc":null},{"fullQualified":"public void testToString()","name":"testToString","type":"void","javadoc":null},{"fullQualified":"public void testSanitizeForSaving()","name":"testSanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValues()","name":"testBuilder_buildNothing_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttributes()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttributes","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullArguments_shouldThrowException()","name":"testBuilder_withNullArguments_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testValueOf()","name":"testValueOf","type":"void","javadoc":null},{"fullQualified":"public void testGetCopy_typicalData_createsCopyCorrectly()","name":"testGetCopy_typicalData_createsCopyCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testGetCopy_allFieldsNull_createsCopyCorrectly()","name":"testGetCopy_allFieldsNull_createsCopyCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError()","name":"testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"private AccountAttributes createInvalidAccountAttributesObject()","name":"createInvalidAccountAttributesObject","type":"AccountAttributes","javadoc":null},{"fullQualified":"private AccountAttributes createValidAccountAttributesObject()","name":"createValidAccountAttributesObject","type":"AccountAttributes","javadoc":null},{"fullQualified":"private AccountAttributes createAccountAttributesToSanitize()","name":"createAccountAttributesToSanitize","type":"AccountAttributes","javadoc":null}],"allConstructors":[]},{"name":"AccountRequestAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.AccountRequestAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" already tested in testValidate() above","lineNumber":105,"isOrphan":true},{"type":"LineComment","text":" already tested in testValidate() above","lineNumber":110,"isOrphan":true},{"type":"LineComment","text":" When the two account requests have same values","lineNumber":124,"isOrphan":false},{"type":"LineComment","text":" When the two account requests are different","lineNumber":129,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":135,"isOrphan":false},{"type":"LineComment","text":" When the two account requests have same values, they should have the same hash code","lineNumber":143,"isOrphan":false},{"type":"LineComment","text":" When the two account requests are different, they should have different hash code","lineNumber":148,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testValueOf_withTypicalData_shouldGenerateAttributesCorrectly()","name":"testValueOf_withTypicalData_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_registeredWithTypicalData_shouldGenerateAttributesCorrectly()","name":"testValueOf_registeredWithTypicalData_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttributes()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttributes","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValues()","name":"testBuilder_buildNothing_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullArguments_shouldThrowException()","name":"testBuilder_withNullArguments_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testValidate() throws Exception","name":"testValidate","type":"void","javadoc":null},{"fullQualified":"public void testGetValidityInfo()","name":"testGetValidityInfo","type":"void","javadoc":null},{"fullQualified":"public void testIsValid()","name":"testIsValid","type":"void","javadoc":null},{"fullQualified":"public void testToString()","name":"testToString","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"private static AccountRequestAttributes getValidAccountRequestAttributesObject()","name":"getValidAccountRequestAttributesObject","type":"AccountRequestAttributes","javadoc":null}],"allConstructors":[]},{"name":"BaseAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.BaseAttributesTest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Tests construction of entity object from attributes.\n     ","lineNumber":10,"isOrphan":false}],"allMethods":[{"fullQualified":"public abstract void testToEntity()","name":"testToEntity","type":"void","javadoc":"\n     * Tests construction of entity object from attributes.\n     "}],"allConstructors":[]},{"name":"CourseAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.CourseAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"already tested in testValidate() above","lineNumber":145,"isOrphan":true},{"type":"LineComment","text":"already tested in testValidate() above","lineNumber":150,"isOrphan":true},{"type":"LineComment","text":" When the two courses have same values","lineNumber":164,"isOrphan":false},{"type":"LineComment","text":" When the two courses are different","lineNumber":169,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":176,"isOrphan":false},{"type":"LineComment","text":" When the two courses have same values, they should have the same hash code","lineNumber":184,"isOrphan":false},{"type":"LineComment","text":" When the two courses are different, they should have different hash code","lineNumber":189,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testValueOf_withTypicalData_shouldGenerateAttributesCorrectly()","name":"testValueOf_withTypicalData_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withInvalidTimezoneStr_shouldFallbackToDefaultTimezone()","name":"testValueOf_withInvalidTimezoneStr_shouldFallbackToDefaultTimezone","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues()","name":"testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttributes()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttributes","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValues()","name":"testBuilder_buildNothing_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullArguments_shouldThrowException()","name":"testBuilder_withNullArguments_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testValidate() throws Exception","name":"testValidate","type":"void","javadoc":null},{"fullQualified":"public void testGetValidityInfo()","name":"testGetValidityInfo","type":"void","javadoc":null},{"fullQualified":"public void testIsValid()","name":"testIsValid","type":"void","javadoc":null},{"fullQualified":"public void testToString()","name":"testToString","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"private static CourseAttributes generateValidCourseAttributesObject()","name":"generateValidCourseAttributesObject","type":"CourseAttributes","javadoc":null}],"allConstructors":[]},{"name":"DeadlineExtensionAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.DeadlineExtensionAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" When the two deadline extensions have same values","lineNumber":203,"isOrphan":false},{"type":"LineComment","text":" When the two deadline extensions are different","lineNumber":208,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":213,"isOrphan":false},{"type":"LineComment","text":" When the two deadline extensions have same values, they should have the same hash code","lineNumber":221,"isOrphan":false},{"type":"LineComment","text":" When the two deadline extensions are different, they should have different hash code","lineNumber":225,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testValueOf_withTypicalData_shouldGenerateAttributesCorrectly()","name":"testValueOf_withTypicalData_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttributes()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttributes","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValues()","name":"testBuilder_buildNothing_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullArguments_shouldThrowException()","name":"testBuilder_withNullArguments_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly()","name":"testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withExistingUpdateOptions_shouldReturnEquivalentDeadlineExtension()","name":"testUpdateOptions_withExistingUpdateOptions_shouldReturnEquivalentDeadlineExtension","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withNullUpdateOptions_shouldThrowAssertionError()","name":"testUpdateOptions_withNullUpdateOptions_shouldThrowAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testValidate() throws Exception","name":"testValidate","type":"void","javadoc":null},{"fullQualified":"public void testToString()","name":"testToString","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"private static DeadlineExtensionAttributes getValidDeadlineExtensionAttributesObject(boolean isInstructor)","name":"getValidDeadlineExtensionAttributesObject","type":"DeadlineExtensionAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackQuestionAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackQuestionAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" .build() will remove irrelevant visibilities options, so the lists showResponsesTo,","lineNumber":170,"isOrphan":true},{"type":"LineComment","text":" showGiverNameTo, and showRecipientNameTo are not the same as the ones in qn","lineNumber":171,"isOrphan":false},{"type":"LineComment","text":" check that other types are not removed","lineNumber":520,"isOrphan":false},{"type":"LineComment","text":" RECEIVER_TEAM_MEMBERS is removed as it is irrelevant visibility","lineNumber":707,"isOrphan":false},{"type":"LineComment","text":" When the two feedback questions are copies of each other","lineNumber":800,"isOrphan":false},{"type":"LineComment","text":" When the two feedback questions have same values but created at different time","lineNumber":805,"isOrphan":false},{"type":"LineComment","text":" When the two feedback questions are different","lineNumber":810,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":818,"isOrphan":false},{"type":"LineComment","text":" When the two feedback questions have same values but created at different time,","lineNumber":831,"isOrphan":true},{"type":"LineComment","text":" When the two feedback questions are copies of each other, they should have the same hash code","lineNumber":826,"isOrphan":false},{"type":"LineComment","text":" they should still have the same hash code","lineNumber":832,"isOrphan":false},{"type":"LineComment","text":" When the two feedback questions are different, they should have different hash code","lineNumber":837,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testToEntity()","name":"testToEntity","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withAllFieldPopulatedFeedbackQuestion_shouldGenerateAttributesCorrectly()","name":"testValueOf_withAllFieldPopulatedFeedbackQuestion_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues()","name":"testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_modificationInAttributes_shouldNotLeakStateToEntity()","name":"testValueOf_modificationInAttributes_shouldNotLeakStateToEntity","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withIrrelevantFeedbackParticipant_shouldGenerateAttributesCorrectly()","name":"testBuilder_withIrrelevantFeedbackParticipant_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_textQuestions_shouldDeserializeCorrectly()","name":"testValueOf_textQuestions_shouldDeserializeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullArguments_shouldThrowException()","name":"testBuilder_withNullArguments_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withDescriptionNull_shouldBuildCorrectAttributes()","name":"testBuilder_withDescriptionNull_shouldBuildCorrectAttributes","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttributes()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttributes","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValues()","name":"testBuilder_buildNothing_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testValidate() throws Exception","name":"testValidate","type":"void","javadoc":null},{"fullQualified":"public void testGetQuestionDetails()","name":"testGetQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void testRemoveIrrelevantVisibilityOptions()","name":"testRemoveIrrelevantVisibilityOptions","type":"void","javadoc":null},{"fullQualified":"public void testGetQuestionDetails_shouldDoDeepCopy()","name":"testGetQuestionDetails_shouldDoDeepCopy","type":"void","javadoc":null},{"fullQualified":"public void testSetQuestionDetails_shouldDoDeepCopy()","name":"testSetQuestionDetails_shouldDoDeepCopy","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly()","name":"testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullDescriptionInput_shouldUpdateAttributeCorrectly()","name":"testUpdateOptionsBuilder_withNullDescriptionInput_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError()","name":"testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"private FeedbackQuestionAttributes getNewFeedbackQuestionAttributes()","name":"getNewFeedbackQuestionAttributes","type":"FeedbackQuestionAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackResponseAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" When the two feedback sessions are exact copies","lineNumber":271,"isOrphan":false},{"type":"LineComment","text":" When the two feedback sessions have same values but created at different time","lineNumber":276,"isOrphan":false},{"type":"LineComment","text":" When the two feedback sessions are different","lineNumber":288,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":300,"isOrphan":false},{"type":"LineComment","text":" When the two feedback sessions have same values but created at different time,","lineNumber":320,"isOrphan":true},{"type":"LineComment","text":" When the two feedback sessions are exact copies, they should have the same hash code","lineNumber":315,"isOrphan":false},{"type":"LineComment","text":" they should still have the same hash code","lineNumber":321,"isOrphan":false},{"type":"LineComment","text":" When the two feedback sessions are different, they should have different hash code","lineNumber":333,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testValueOf_withAllFieldPopulatedFeedbackResponse_shouldGenerateAttributesCorrectly()","name":"testValueOf_withAllFieldPopulatedFeedbackResponse_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues()","name":"testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValue()","name":"testBuilder_buildNothing_shouldUseDefaultValue","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullArguments_shouldThrowException()","name":"testBuilder_withNullArguments_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttributes()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttributes","type":"void","javadoc":null},{"fullQualified":"public void testCopyConstructor_shouldDoDeepCopyOfResponseDetails()","name":"testCopyConstructor_shouldDoDeepCopyOfResponseDetails","type":"void","javadoc":null},{"fullQualified":"public void testGetResponseDetails_shouldDoDeepCopy()","name":"testGetResponseDetails_shouldDoDeepCopy","type":"void","javadoc":null},{"fullQualified":"public void testSetResponseDetails_shouldDoDeepCopy()","name":"testSetResponseDetails_shouldDoDeepCopy","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly()","name":"testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError()","name":"testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackResponseCommentAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Default values for following fields","lineNumber":24,"isOrphan":false},{"type":"LineComment","text":" When the two feedback response comments have same values","lineNumber":349,"isOrphan":false},{"type":"LineComment","text":" When the two feedback response comments are different","lineNumber":355,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":361,"isOrphan":false},{"type":"LineComment","text":" When the two feedback response comments have same values, they should have the same hash code","lineNumber":370,"isOrphan":false},{"type":"LineComment","text":" When the two feedback response comments are different, they should have different hash code","lineNumber":376,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValues()","name":"testBuilder_buildNothing_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullArguments_shouldThrowException()","name":"testBuilder_withNullArguments_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttributes()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttributes","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withAllFieldPopulatedFeedbackResponseComment_shouldGenerateAttributesCorrectly()","name":"testValueOf_withAllFieldPopulatedFeedbackResponseComment_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues()","name":"testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_modificationInAttributes_shouldNotLeakStateToEntity()","name":"testValueOf_modificationInAttributes_shouldNotLeakStateToEntity","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly()","name":"testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError()","name":"testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"private static FeedbackResponseCommentAttributes generateValidFeedbackResponseCommentAttributesObject()","name":"generateValidFeedbackResponseCommentAttributesObject","type":"FeedbackResponseCommentAttributes","javadoc":null},{"fullQualified":"private static FeedbackResponseCommentAttributes generateTypicalFeedbackResponseCommentAttributesObject()","name":"generateTypicalFeedbackResponseCommentAttributesObject","type":"FeedbackResponseCommentAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.FeedbackSessionAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Default values","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":" build update option based on existing update option","lineNumber":440,"isOrphan":false},{"type":"LineComment","text":" When the two feedback sessions are exact copies","lineNumber":490,"isOrphan":false},{"type":"LineComment","text":" When the two feedback sessions have same values but created at different time","lineNumber":495,"isOrphan":false},{"type":"LineComment","text":" When the two feedback sessions are different","lineNumber":500,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":509,"isOrphan":false},{"type":"LineComment","text":" When the two feedback sessions have same values but created at different time,","lineNumber":522,"isOrphan":true},{"type":"LineComment","text":" When the two feedback sessions are exact copies, they should have the same hash code","lineNumber":517,"isOrphan":false},{"type":"LineComment","text":" they should still have the same hash code","lineNumber":523,"isOrphan":false},{"type":"LineComment","text":" When the two feedback sessions are different, they should have different hash code","lineNumber":528,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValues()","name":"testBuilder_buildNothing_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullInput_shouldFailWithAssertionError()","name":"testBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withAllFieldPopulatedFeedbackSession_shouldGenerateAttributesCorrectly()","name":"testValueOf_withAllFieldPopulatedFeedbackSession_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues()","name":"testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectly()","name":"testBuilder_withTypicalData_shouldBuildCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testGetCopy()","name":"testGetCopy","type":"void","javadoc":null},{"fullQualified":"public void testGetCopyForStudent()","name":"testGetCopyForStudent","type":"void","javadoc":null},{"fullQualified":"public void testGetCopyForInstructor()","name":"testGetCopyForInstructor","type":"void","javadoc":null},{"fullQualified":"public void testValidate()","name":"testValidate","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly()","name":"testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError()","name":"testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"private FeedbackSessionAttributes generateTypicalFeedbackSessionAttributesObject()","name":"generateTypicalFeedbackSessionAttributesObject","type":"FeedbackSessionAttributes","javadoc":null}],"allConstructors":[]},{"name":"GenderTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.GenderTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" invalid values","lineNumber":14,"isOrphan":false},{"type":"LineComment","text":" valid values","lineNumber":22,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testGetGenderEnumValue()","name":"testGetGenderEnumValue","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.InstructorAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Check default values for optional params","lineNumber":29,"isOrphan":false},{"type":"LineComment","text":" key remains","lineNumber":115,"isOrphan":false},{"type":"LineComment","text":" regKey should not carried","lineNumber":200,"isOrphan":false},{"type":"LineComment","text":" When the two instructors have same values","lineNumber":473,"isOrphan":false},{"type":"LineComment","text":" When the two instructors are different","lineNumber":478,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":489,"isOrphan":false},{"type":"LineComment","text":" When the two instructors have same values, they should have the same hash code","lineNumber":511,"isOrphan":false},{"type":"LineComment","text":" When the two instructors are different, they should have different hash code","lineNumber":516,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValues()","name":"testBuilder_buildNothing_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullArguments_shouldThrowException()","name":"testBuilder_withNullArguments_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttribute()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttribute","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withAllFieldPopulatedInstructor_shouldGenerateAttributesCorrectly()","name":"testValueOf_withAllFieldPopulatedInstructor_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues()","name":"testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testIsRegistered()","name":"testIsRegistered","type":"void","javadoc":null},{"fullQualified":"public void testToEntity()","name":"testToEntity","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfo() throws Exception","name":"testGetInvalidityInfo","type":"void","javadoc":null},{"fullQualified":"public void testSanitizeForSaving()","name":"testSanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public void testIsAllowedForPrivilege()","name":"testIsAllowedForPrivilege","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsWithEmail_withTypicalData_shouldUpdateAttributeCorrectly()","name":"testUpdateOptionsWithEmail_withTypicalData_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsWithGoogleId_withTypicalData_shouldUpdateAttributeCorrectly()","name":"testUpdateOptionsWithGoogleId_withTypicalData_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError()","name":"testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testGetRegistrationLink()","name":"testGetRegistrationLink","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null}],"allConstructors":[]},{"name":"NotificationAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.NotificationAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" When the two notifications are exact copies","lineNumber":154,"isOrphan":false},{"type":"LineComment","text":" When the two notifications have same values but created at different time","lineNumber":159,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":176,"isOrphan":false},{"type":"LineComment","text":" When the two notifications are exact copies","lineNumber":184,"isOrphan":false},{"type":"LineComment","text":" When the two notifications have same values but created at different time","lineNumber":189,"isOrphan":false},{"type":"LineComment","text":" notification attributes with a different id.","lineNumber":194,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testValueOf_withAllFieldPopulatedNotificationAttributes_shouldGenerateAttributesCorrectly()","name":"testValueOf_withAllFieldPopulatedNotificationAttributes_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullArguments_shouldThrowException()","name":"testBuilder_withNullArguments_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttributes()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttributes","type":"void","javadoc":null},{"fullQualified":"public void testCopyConstructor_shouldDoDeepCopyOfNotificationDetails()","name":"testCopyConstructor_shouldDoDeepCopyOfNotificationDetails","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly()","name":"testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError()","name":"testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"private NotificationAttributes generateTypicalNotificationAttributesObject()","name":"generateTypicalNotificationAttributesObject","type":"NotificationAttributes","javadoc":null},{"fullQualified":"private void verifyNotificationEquals(NotificationAttributes nfa, Notification notification)","name":"verifyNotificationEquals","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Id is not given yet","lineNumber":389,"isOrphan":false},{"type":"LineComment","text":" Id empty","lineNumber":392,"isOrphan":false},{"type":"LineComment","text":" Id given","lineNumber":396,"isOrphan":false},{"type":"LineComment","text":" When the two student objects are the exact same copy","lineNumber":438,"isOrphan":false},{"type":"LineComment","text":" When the two students have same values but created at different time","lineNumber":443,"isOrphan":false},{"type":"LineComment","text":" When the two students are different","lineNumber":448,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":453,"isOrphan":false},{"type":"LineComment","text":" When the two students have same values but created at different time, they should still have","lineNumber":467,"isOrphan":true},{"type":"LineComment","text":" When the two student objects are the exact same copy, they should have the same hash code","lineNumber":462,"isOrphan":false},{"type":"LineComment","text":" the same hash code","lineNumber":468,"isOrphan":false},{"type":"LineComment","text":" When the two students are different, they should have different hash code","lineNumber":473,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testBuilder_buildNothing_shouldUseDefaultValues()","name":"testBuilder_buildNothing_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_nullValues_shouldThrowException()","name":"testBuilder_nullValues_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testGetCopy()","name":"testGetCopy","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withAllFieldPopulatedCourseStudent_shouldGenerateAttributesCorrectly()","name":"testValueOf_withAllFieldPopulatedCourseStudent_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues()","name":"testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildAttributeWithCorrectValue()","name":"testBuilder_withTypicalData_shouldBuildAttributeWithCorrectValue","type":"void","javadoc":null},{"fullQualified":"public void testValidate() throws Exception","name":"testValidate","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly()","name":"testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError()","name":"testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testSortByTeam()","name":"testSortByTeam","type":"void","javadoc":null},{"fullQualified":"public void testSortBySection()","name":"testSortBySection","type":"void","javadoc":null},{"fullQualified":"public void testIsRegistered()","name":"testIsRegistered","type":"void","javadoc":null},{"fullQualified":"public void testToString()","name":"testToString","type":"void","javadoc":null},{"fullQualified":"public void testGetRegistrationLink()","name":"testGetRegistrationLink","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"private CourseStudent generateTypicalStudentObject()","name":"generateTypicalStudentObject","type":"CourseStudent","javadoc":null},{"fullQualified":"private List<StudentAttributes> generateTypicalStudentAttributesList()","name":"generateTypicalStudentAttributesList","type":"List<StudentAttributes>","javadoc":null},{"fullQualified":"private StudentAttributes generateValidStudentAttributesObject()","name":"generateValidStudentAttributesObject","type":"StudentAttributes","javadoc":null}],"allConstructors":[]},{"name":"StudentProfileAttributesTest","fullyQualifiedName":"teammates.common.datatransfer.attributes.StudentProfileAttributesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" -------------------------------------------------------------------------------------------------------","lineNumber":330,"isOrphan":true},{"type":"LineComment","text":" -------------------------------------- Helper Functions","lineNumber":331,"isOrphan":true},{"type":"LineComment","text":" -----------------------------------------------","lineNumber":332,"isOrphan":true},{"type":"LineComment","text":" -------------------------------------------------------------------------------------------------------","lineNumber":333,"isOrphan":true},{"type":"LineComment","text":" the toString must be unique to the values in the object","lineNumber":216,"isOrphan":false},{"type":"LineComment","text":" When the two student profiles are copies of each other","lineNumber":278,"isOrphan":false},{"type":"LineComment","text":" When the two student profiles have same values but created at different time","lineNumber":283,"isOrphan":false},{"type":"LineComment","text":" When the two student profiles are different","lineNumber":295,"isOrphan":false},{"type":"LineComment","text":" When the other object is of different class","lineNumber":300,"isOrphan":false},{"type":"LineComment","text":" When the two student profiles have same values but created at different time,","lineNumber":311,"isOrphan":true},{"type":"LineComment","text":" When the two student profiles are copies of each other, they should have the same hash code","lineNumber":306,"isOrphan":false},{"type":"LineComment","text":" they should still have the same hash code","lineNumber":312,"isOrphan":false},{"type":"LineComment","text":" When the two student profiles are different, they should have different hash code","lineNumber":324,"isOrphan":false},{"type":"LineComment","text":" tests both the constructor and the invalidity info","lineNumber":345,"isOrphan":false}],"allMethods":[{"fullQualified":"public void classSetup()","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNothingPassed_shouldUseDefaultValues()","name":"testBuilder_withNothingPassed_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withNullValuePassed_shouldThrowException()","name":"testBuilder_withNullValuePassed_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_withTypicalData_shouldBuildCorrectAttribute()","name":"testBuilder_withTypicalData_shouldBuildCorrectAttribute","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withAllFieldPopulatedStudentProfile_shouldGenerateAttributesCorrectly()","name":"testValueOf_withAllFieldPopulatedStudentProfile_shouldGenerateAttributesCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues()","name":"testValueOf_withSomeFieldsPopulatedAsNull_shouldUseDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfo() throws Exception","name":"testGetInvalidityInfo","type":"void","javadoc":null},{"fullQualified":"private void testGetInvalidityInfoForValidProfileWithValues()","name":"testGetInvalidityInfoForValidProfileWithValues","type":"void","javadoc":null},{"fullQualified":"private void testGetInvalidityInfoForValidProfileWithEmptyValues()","name":"testGetInvalidityInfoForValidProfileWithEmptyValues","type":"void","javadoc":null},{"fullQualified":"private void testInvalidityInfoForInvalidProfile() throws Exception","name":"testInvalidityInfoForInvalidProfile","type":"void","javadoc":null},{"fullQualified":"public void testSanitizeForSaving()","name":"testSanitizeForSaving","type":"void","javadoc":null},{"fullQualified":"public void testToEntity()","name":"testToEntity","type":"void","javadoc":null},{"fullQualified":"public void testToString()","name":"testToString","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly()","name":"testUpdateOptions_withTypicalUpdateOptions_shouldUpdateAttributeCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError()","name":"testUpdateOptionsBuilder_withNullInput_shouldFailWithAssertionError","type":"void","javadoc":null},{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null},{"fullQualified":"public void testHashCode()","name":"testHashCode","type":"void","javadoc":null},{"fullQualified":"private StudentProfile createStudentProfileFrom(StudentProfileAttributes profile)","name":"createStudentProfileFrom","type":"StudentProfile","javadoc":null},{"fullQualified":"private List<String> generatedExpectedErrorMessages(StudentProfileAttributes profile) throws Exception","name":"generatedExpectedErrorMessages","type":"List<String>","javadoc":null},{"fullQualified":"private StudentProfileAttributes getInvalidStudentProfileAttributes()","name":"getInvalidStudentProfileAttributes","type":"StudentProfileAttributes","javadoc":null},{"fullQualified":"private StudentProfileAttributes getStudentProfileAttributesToSanitize()","name":"getStudentProfileAttributesToSanitize","type":"StudentProfileAttributes","javadoc":null}],"allConstructors":[]},{"name":"AttributesDeletionQueryTest","fullyQualifiedName":"teammates.common.datatransfer.AttributesDeletionQueryTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" nothing inside query","lineNumber":14,"isOrphan":false},{"type":"LineComment","text":" course id with question id","lineNumber":19,"isOrphan":false},{"type":"LineComment","text":" course id with response id","lineNumber":33,"isOrphan":false},{"type":"LineComment","text":" session name without course id","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" session name with question id","lineNumber":54,"isOrphan":false},{"type":"LineComment","text":" session name with response id","lineNumber":77,"isOrphan":false},{"type":"LineComment","text":" question id with response id","lineNumber":100,"isOrphan":false},{"type":"LineComment","text":" build deletion of course","lineNumber":117,"isOrphan":false},{"type":"LineComment","text":" build deletion of session","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":" build deletion of question","lineNumber":145,"isOrphan":false},{"type":"LineComment","text":" build deletion of response","lineNumber":158,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testBuilder_invalidCombination_shouldThrowException()","name":"testBuilder_invalidCombination_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_validCombination_shouldBuildCorrectQuery()","name":"testBuilder_validCombination_shouldBuildCorrectQuery","type":"void","javadoc":null},{"fullQualified":"public void testBuilder_nullInput_shouldThrowException()","name":"testBuilder_nullInput_shouldThrowException","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CourseRosterTest","fullyQualifiedName":"teammates.common.datatransfer.CourseRosterTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void allTests()","name":"allTests","type":"void","javadoc":null},{"fullQualified":"public void testBuildTeamToMembersTable_emptyStudentList_shouldReturnsEmptyMap()","name":"testBuildTeamToMembersTable_emptyStudentList_shouldReturnsEmptyMap","type":"void","javadoc":null},{"fullQualified":"public void testBuildTeamToMembersTable_typicalStudentList_shouldBuildMap()","name":"testBuildTeamToMembersTable_typicalStudentList_shouldBuildMap","type":"void","javadoc":null},{"fullQualified":"public void testGetTeamToMembersTable_typicalCase_shouldGroupTeamCorrectly()","name":"testGetTeamToMembersTable_typicalCase_shouldGroupTeamCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testGetInfoForIdentifier_studentCase_shouldShowCorrectInfo()","name":"testGetInfoForIdentifier_studentCase_shouldShowCorrectInfo","type":"void","javadoc":null},{"fullQualified":"public void testGetInfoForIdentifier_instructorCase_shouldShowCorrectInfo()","name":"testGetInfoForIdentifier_instructorCase_shouldShowCorrectInfo","type":"void","javadoc":null},{"fullQualified":"public void testGetInfoForIdentifier_teamCase_shouldShowCorrectInfo()","name":"testGetInfoForIdentifier_teamCase_shouldShowCorrectInfo","type":"void","javadoc":null},{"fullQualified":"public void testGetInfoForIdentifier_unknownCase_shouldShowCorrectInfo()","name":"testGetInfoForIdentifier_unknownCase_shouldShowCorrectInfo","type":"void","javadoc":null},{"fullQualified":"private List<StudentAttributes> createStudentList(String... studentData)","name":"createStudentList","type":"List<StudentAttributes>","javadoc":null},{"fullQualified":"private List<InstructorAttributes> createInstructorList(String... instructorData)","name":"createInstructorList","type":"List<InstructorAttributes>","javadoc":null}],"allConstructors":[]},{"name":"ErrorLogEntryTest","fullyQualifiedName":"teammates.common.datatransfer.ErrorLogEntryTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testFromLogEntry_noLogDetails_shouldGetTextPayload()","name":"testFromLogEntry_noLogDetails_shouldGetTextPayload","type":"void","javadoc":null},{"fullQualified":"public void testFromLogEntry_logDetailsNotException_shouldGetSerializedPayload()","name":"testFromLogEntry_logDetailsNotException_shouldGetSerializedPayload","type":"void","javadoc":null},{"fullQualified":"public void testFromLogEntry_exceptionLogDetails_shouldGetPrettyPrintedLog()","name":"testFromLogEntry_exceptionLogDetails_shouldGetPrettyPrintedLog","type":"void","javadoc":null},{"fullQualified":"private GeneralLogEntry createTypicalLogEntry()","name":"createTypicalLogEntry","type":"GeneralLogEntry","javadoc":null}],"allConstructors":[]},{"name":"InstructorPrivilegesTest","fullyQualifiedName":"teammates.common.datatransfer.InstructorPrivilegesTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" co-owner: all true","lineNumber":18,"isOrphan":false},{"type":"LineComment","text":" manager: only one false","lineNumber":33,"isOrphan":false},{"type":"LineComment","text":" observer: view only","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" tutor","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":" helper","lineNumber":69,"isOrphan":false},{"type":"LineComment","text":"TODO: more checking for this and the method follows","lineNumber":266,"isOrphan":true},{"type":"LineComment","text":" restore courseLevel to pre-validate","lineNumber":300,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testSetDefault()","name":"testSetDefault","type":"void","javadoc":null},{"fullQualified":"public void testConstructor()","name":"testConstructor","type":"void","javadoc":null},{"fullQualified":"public void testIsPrivilegeNameValid()","name":"testIsPrivilegeNameValid","type":"void","javadoc":null},{"fullQualified":"public void testUpdatePrivilegeInCourseLevel()","name":"testUpdatePrivilegeInCourseLevel","type":"void","javadoc":null},{"fullQualified":"public void testUpdatePrivilegeInSectionLevel()","name":"testUpdatePrivilegeInSectionLevel","type":"void","javadoc":null},{"fullQualified":"public void testUpdatePrivilegeInSessionLevel()","name":"testUpdatePrivilegeInSessionLevel","type":"void","javadoc":null},{"fullQualified":"public void testAddSectionWithDefaultPrivilegesToSectionLevel()","name":"testAddSectionWithDefaultPrivilegesToSectionLevel","type":"void","javadoc":null},{"fullQualified":"public void testIsAllowedForPrivilege()","name":"testIsAllowedForPrivilege","type":"void","javadoc":null},{"fullQualified":"public void testValidatePrivileges()","name":"testValidatePrivileges","type":"void","javadoc":null},{"fullQualified":"public void testHasDefaultPrivileges()","name":"testHasDefaultPrivileges","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackConstantSumQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testValidateResponseDetails_amongRecipientsValidAnswer_shouldReturnEmptyErrorList()","name":"testValidateResponseDetails_amongRecipientsValidAnswer_shouldReturnEmptyErrorList","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_amongRecipientsInvalidAnswer_shouldReturnNonEmptyErrorList()","name":"testValidateResponseDetails_amongRecipientsInvalidAnswer_shouldReturnNonEmptyErrorList","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_amongOptionsValidAnswer_shouldReturnEmptyErrorList()","name":"testValidateResponseDetails_amongOptionsValidAnswer_shouldReturnEmptyErrorList","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_amongOptionsInvalidAnswer_shouldReturnNonEmptyErrorList()","name":"testValidateResponseDetails_amongOptionsInvalidAnswer_shouldReturnNonEmptyErrorList","type":"void","javadoc":null},{"fullQualified":"public void testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse()","name":"testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackContributionQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackContributionQuestionDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testIsInstructorCommentsOnResponsesAllowed_shouldReturnFalse()","name":"testIsInstructorCommentsOnResponsesAllowed_shouldReturnFalse","type":"void","javadoc":null},{"fullQualified":"public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse()","name":"testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse","type":"void","javadoc":null},{"fullQualified":"public void testIsIndividualResponsesShownToStudents_shouldReturnFalse()","name":"testIsIndividualResponsesShownToStudents_shouldReturnFalse","type":"void","javadoc":null},{"fullQualified":"public void testShouldChangesRequireResponseDeletion_sameIsNotSureAllowed_shouldReturnFalse()","name":"testShouldChangesRequireResponseDeletion_sameIsNotSureAllowed_shouldReturnFalse","type":"void","javadoc":null},{"fullQualified":"public void testShouldChangesRequireResponseDeletion_differentIsNotSureAllowed_shouldReturnTrue()","name":"testShouldChangesRequireResponseDeletion_differentIsNotSureAllowed_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_shouldReturnEmptyList()","name":"testValidateQuestionDetails_shouldReturnEmptyList","type":"void","javadoc":null},{"fullQualified":"public void testGetQuestionResultStatisticsJson()","name":"testGetQuestionResultStatisticsJson","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponsesDetails()","name":"testValidateResponsesDetails","type":"void","javadoc":null},{"fullQualified":"public void testValidateGiverRecipientVisibility()","name":"testValidateGiverRecipientVisibility","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackMcqQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackMcqQuestionDetailsTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"duplicate cases that has trailing and leading spaces","lineNumber":94,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testConstructor_defaultConstructor_fieldsShouldHaveCorrectDefaultValues()","name":"testConstructor_defaultConstructor_fieldsShouldHaveCorrectDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_choicesLessThanMinRequirement_errorReturned()","name":"testValidateQuestionDetails_choicesLessThanMinRequirement_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_numberOfChoicesGreaterThanWeights_errorReturned()","name":"testValidateQuestionDetails_numberOfChoicesGreaterThanWeights_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_noValidationError_errorListShouldBeEmpty()","name":"testValidateQuestionDetails_noValidationError_errorListShouldBeEmpty","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_negativeWeights_errorsReturned()","name":"testValidateQuestionDetails_negativeWeights_errorsReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_negativeOtherWeight_errorsReturned()","name":"testValidateQuestionDetails_negativeOtherWeight_errorsReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_duplicateMcqOptions_errorReturned()","name":"testValidateQuestionDetails_duplicateMcqOptions_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackMsqQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackMsqQuestionDetailsTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"duplicate cases that has trailing and leading spaces","lineNumber":104,"isOrphan":false},{"type":"LineComment","text":" 'other' is NOT one of the choices","lineNumber":117,"isOrphan":false},{"type":"LineComment","text":" 'other' is one of the choices","lineNumber":136,"isOrphan":false},{"type":"LineComment","text":" now set other field to empty","lineNumber":166,"isOrphan":false},{"type":"LineComment","text":" typical case: answers not in valid choices","lineNumber":179,"isOrphan":false},{"type":"LineComment","text":" now set choice to be within the valid choices","lineNumber":190,"isOrphan":false},{"type":"LineComment","text":" when other field is enabled, the other field content will become a valid choice","lineNumber":195,"isOrphan":false},{"type":"LineComment","text":" make answer list and other field content consistent","lineNumber":205,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testConstructor_defaultConstructor_fieldsShouldHaveCorrectDefaultValues()","name":"testConstructor_defaultConstructor_fieldsShouldHaveCorrectDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_choicesLessThanMinRequirement_errorReturned()","name":"testValidateQuestionDetails_choicesLessThanMinRequirement_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_numberOfChoicesGreaterThanWeights_errorReturned()","name":"testValidateQuestionDetails_numberOfChoicesGreaterThanWeights_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_noValidationError_errorListShouldBeEmpty()","name":"testValidateQuestionDetails_noValidationError_errorListShouldBeEmpty","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_negativeWeights_errorsReturned()","name":"testValidateQuestionDetails_negativeWeights_errorsReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_negativeOtherWeight_errorsReturned()","name":"testValidateQuestionDetails_negativeOtherWeight_errorsReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_duplicateMsqOptions_errorReturned()","name":"testValidateQuestionDetails_duplicateMsqOptions_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_maxSelectableChoicesMoreThanTotalNumberOfChoice_shouldReturnError()","name":"testValidateQuestionDetails_maxSelectableChoicesMoreThanTotalNumberOfChoice_shouldReturnError","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_maxSelectableChoicesEqualTotalNumberOfChoice_shouldNotReturnError()","name":"testValidateQuestionDetails_maxSelectableChoicesEqualTotalNumberOfChoice_shouldNotReturnError","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_otherAnswerNotChosenButOtherFieldIsNotEmpty_shouldTriggerError()","name":"testValidateResponseDetails_otherAnswerNotChosenButOtherFieldIsNotEmpty_shouldTriggerError","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_choiceNotInValidChoices_shouldTriggerError()","name":"testValidateResponseDetails_choiceNotInValidChoices_shouldTriggerError","type":"void","javadoc":null},{"fullQualified":"public void testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackNumericalScaleQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse()","name":"testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse","type":"void","javadoc":null},{"fullQualified":"public void tesValidateResponseDetails()","name":"tesValidateResponseDetails","type":"void","javadoc":null},{"fullQualified":"public void tesValidateQuestionDetails()","name":"tesValidateQuestionDetails","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackQuestionDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testEquals()","name":"testEquals","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackRankOptionsQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testConstructor_defaultConstructor_fieldsShouldHaveCorrectDefaultValues()","name":"testConstructor_defaultConstructor_fieldsShouldHaveCorrectDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse()","name":"testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_emptyOption_errorReturned()","name":"testValidateQuestionDetails_emptyOption_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_invalidMaxMinOptions_errorReturned()","name":"testValidateQuestionDetails_invalidMaxMinOptions_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_optionSizeInvalid_errorReturned()","name":"testValidateQuestionDetails_optionSizeInvalid_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_optionSizeValid_noError()","name":"testValidateQuestionDetails_optionSizeValid_noError","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_duplicateRankOptions_errorReturned()","name":"testValidateResponseDetails_duplicateRankOptions_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_optionExceedBound_errorReturned()","name":"testValidateResponseDetails_optionExceedBound_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_invalidRankOption_errorReturned()","name":"testValidateResponseDetails_invalidRankOption_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_validRankOption_noError()","name":"testValidateResponseDetails_validRankOption_noError","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_duplicateOptionInDefault_errorReturned()","name":"testValidateResponseDetails_duplicateOptionInDefault_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_duplicateOption_noError()","name":"testValidateResponseDetails_duplicateOption_noError","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackRankQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRankQuestionDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testValidateSetMinOptionsToBeRanked_sameValidValues_shouldReturnTrue()","name":"testValidateSetMinOptionsToBeRanked_sameValidValues_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testValidateSetMaxOptionsToBeRanked_sameValidValues_shouldReturnTrue()","name":"testValidateSetMaxOptionsToBeRanked_sameValidValues_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testValidateSetDuplicatesAllowed_validValues_shouldReturnTrue()","name":"testValidateSetDuplicatesAllowed_validValues_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testValidateDefaultValue_sameValues_shouldReturnTrue()","name":"testValidateDefaultValue_sameValues_shouldReturnTrue","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackRankRecipientsQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRankRecipientsQuestionDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testShouldChangesRequireResponseDeletion_shouldReturnFalse()","name":"testShouldChangesRequireResponseDeletion_shouldReturnFalse","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_shouldReturnEmptyList()","name":"testValidateQuestionDetails_shouldReturnEmptyList","type":"void","javadoc":null},{"fullQualified":"public void tesValidateResponsesDetails()","name":"tesValidateResponsesDetails","type":"void","javadoc":null},{"fullQualified":"public void testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse()","name":"testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse","type":"void","javadoc":null},{"fullQualified":"public void testValidateGiverRecipientVisibility()","name":"testValidateGiverRecipientVisibility","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackResponseDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackResponseDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testGetDeepCopy()","name":"testGetDeepCopy","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackRubricQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackRubricQuestionDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testConstructor_defaultConstructor_fieldsShouldHaveCorrectDefaultValues()","name":"testConstructor_defaultConstructor_fieldsShouldHaveCorrectDefaultValues","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_invalidWeightListSize_errorReturned()","name":"testValidateQuestionDetails_invalidWeightListSize_errorReturned","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails_validWeightListSize_errorListShouldBeEmpty()","name":"testValidateQuestionDetails_validWeightListSize_errorListShouldBeEmpty","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_validAnswer_shouldReturnEmptyErrorList()","name":"testValidateResponseDetails_validAnswer_shouldReturnEmptyErrorList","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponseDetails_invalidAnswer_shouldReturnNonEmptyErrorList()","name":"testValidateResponseDetails_invalidAnswer_shouldReturnNonEmptyErrorList","type":"void","javadoc":null},{"fullQualified":"public void testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse()","name":"testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackTextQuestionDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackTextQuestionDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testShouldChangesRequireResponseDeletion()","name":"testShouldChangesRequireResponseDeletion","type":"void","javadoc":null},{"fullQualified":"public void testValidateQuestionDetails()","name":"testValidateQuestionDetails","type":"void","javadoc":null},{"fullQualified":"public void testValidateResponsesDetails_shouldReturnEmptyList()","name":"testValidateResponsesDetails_shouldReturnEmptyList","type":"void","javadoc":null},{"fullQualified":"public void testValidateGiverRecipientVisibility_shouldReturnEmptyString()","name":"testValidateGiverRecipientVisibility_shouldReturnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue()","name":"testIsInstructorCommentsOnResponsesAllowed_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse()","name":"testIsFeedbackParticipantCommentsOnResponsesAllowed_shouldReturnFalse","type":"void","javadoc":null},{"fullQualified":"public void testIsRichTextOptionTrueByDefault_shouldReturnTrue()","name":"testIsRichTextOptionTrueByDefault_shouldReturnTrue","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackTextResponseDetailsTest","fullyQualifiedName":"teammates.common.datatransfer.questions.FeedbackTextResponseDetailsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testValidateArgumentConstructor_sameValues_shouldReturnTrue()","name":"testValidateArgumentConstructor_sameValues_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testValidateAttributesOfAnswer_nullValue_shouldReturnNull()","name":"testValidateAttributesOfAnswer_nullValue_shouldReturnNull","type":"void","javadoc":null},{"fullQualified":"public void testValidateSanitizedAnswerString_nullValues_shouldReturnTrue()","name":"testValidateSanitizedAnswerString_nullValues_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testValidateSanitizedAnswerString_validValues_shouldReturnTrue()","name":"testValidateSanitizedAnswerString_validValues_shouldReturnTrue","type":"void","javadoc":null},{"fullQualified":"public void testValidateSetAnswer_sameValues_shouldReturnTrue()","name":"testValidateSetAnswer_sameValues_shouldReturnTrue","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SessionResultsBundleTest","fullyQualifiedName":"teammates.common.datatransfer.SessionResultsBundleTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testGetQuestionResponseMap()","name":"testGetQuestionResponseMap","type":"void","javadoc":null},{"fullQualified":"public void testGetQuestionMissingResponseMap()","name":"testGetQuestionMissingResponseMap","type":"void","javadoc":null},{"fullQualified":"public void testIsResponseGiverRecipientVisible_typicalCase_shouldReturnCorrectValues()","name":"testIsResponseGiverRecipientVisible_typicalCase_shouldReturnCorrectValues","type":"void","javadoc":null},{"fullQualified":"public void testIsCommentGiverVisible_typicalCase_shouldReturnCorrectValues()","name":"testIsCommentGiverVisible_typicalCase_shouldReturnCorrectValues","type":"void","javadoc":null},{"fullQualified":"public void testGetAnonName_typicalCase_shouldGenerateCorrectly()","name":"testGetAnonName_typicalCase_shouldGenerateCorrectly","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TeamEvalResultTest","fullyQualifiedName":"teammates.common.datatransfer.TeamEvalResultTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" CHECKSTYLE.ON:SingleSpaceSeparator","lineNumber":348,"isOrphan":true},{"type":"LineComment","text":"--------------------------------------------------------------------","lineNumber":449,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.OFF:SingleSpaceSeparator vertical alignment of values for readability","lineNumber":18,"isOrphan":false},{"type":"LineComment","text":"two-person team","lineNumber":235,"isOrphan":true},{"type":"LineComment","text":"only one person submitted","lineNumber":186,"isOrphan":false},{"type":"LineComment","text":"only one person, submitted for self only","lineNumber":211,"isOrphan":false},{"type":"LineComment","text":"TODO: special treatment for two-person teams?","lineNumber":236,"isOrphan":false},{"type":"LineComment","text":"one-person team","lineNumber":256,"isOrphan":false},{"type":"LineComment","text":"anther interesting mix of values (used in Ui Tests)","lineNumber":262,"isOrphan":false},{"type":"LineComment","text":"mix of special values in filter","lineNumber":436,"isOrphan":false},{"type":"LineComment","text":" target array has special values","lineNumber":442,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testCalculatePoints()","name":"testCalculatePoints","type":"void","javadoc":null},{"fullQualified":"public void testNormalizeValues()","name":"testNormalizeValues","type":"void","javadoc":null},{"fullQualified":"public void testExcludeSelfRatings()","name":"testExcludeSelfRatings","type":"void","javadoc":null},{"fullQualified":"public void testAverageColumns()","name":"testAverageColumns","type":"void","javadoc":null},{"fullQualified":"public void testSum()","name":"testSum","type":"void","javadoc":null},{"fullQualified":"public void testCalculatePerceivedForStudent()","name":"testCalculatePerceivedForStudent","type":"void","javadoc":null},{"fullQualified":"public void testIsSanitized()","name":"testIsSanitized","type":"void","javadoc":null},{"fullQualified":"public void testPurgeValuesCorrespondingToSpecialValuesInFilter()","name":"testPurgeValuesCorrespondingToSpecialValuesInFilter","type":"void","javadoc":null},{"fullQualified":"private void verifyCalculatePoints(int[][] input, int[][] expected)","name":"verifyCalculatePoints","type":"void","javadoc":null},{"fullQualified":"private void verifyPurgeValuesCorrespondingToSpecialValuesInFilter(double[] expected, double[] filterArray, double[] valueArray)","name":"verifyPurgeValuesCorrespondingToSpecialValuesInFilter","type":"void","javadoc":null},{"fullQualified":"private void verifyNormalized(double[] expected, double[] input)","name":"verifyNormalized","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UserInfoCookieTest","fullyQualifiedName":"teammates.common.datatransfer.UserInfoCookieTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testIsValid()","name":"testIsValid","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BuildPropertiesTest","fullyQualifiedName":"teammates.common.util.BuildPropertiesTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void checkPresence()","name":"checkPresence","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FieldValidatorTest","fullyQualifiedName":"teammates.common.util.FieldValidatorTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testGetValidityInfoForNonHtmlField_cleanInput_returnEmptyString()","name":"testGetValidityInfoForNonHtmlField_cleanInput_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetValidityInfoForNonHtmlField_sanitizedInput_returnEmptyString()","name":"testGetValidityInfoForNonHtmlField_sanitizedInput_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetValidityInfoForNonHtmlField_unsanitizedInput_returnErrorString()","name":"testGetValidityInfoForNonHtmlField_unsanitizedInput_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetValidityInfoForSizeCappedPossiblyEmptyString()","name":"testGetValidityInfoForSizeCappedPossiblyEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetValidityInfoForAllowedName()","name":"testGetValidityInfoForAllowedName","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForPersonName_invalid_returnSpecificErrorString()","name":"testGetInvalidityInfoForPersonName_invalid_returnSpecificErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForInstituteName_invalid_returnSpecificErrorString()","name":"testGetInvalidityInfoForInstituteName_invalid_returnSpecificErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNationality_invalid_returnSpecificErrorString()","name":"testGetInvalidityInfoForNationality_invalid_returnSpecificErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNationality_valid_returnEmptyString()","name":"testGetInvalidityInfoForNationality_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTeamName_invalid_returnSpecificErrorString()","name":"testGetInvalidityInfoForTeamName_invalid_returnSpecificErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForSectionName_invalid_returnSpecificErrorString()","name":"testGetInvalidityInfoForSectionName_invalid_returnSpecificErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForCourseName_invalid_returnSpecificErrorString()","name":"testGetInvalidityInfoForCourseName_invalid_returnSpecificErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForFeedbackSessionName_invalid_returnSpecificErrorString()","name":"testGetInvalidityInfoForFeedbackSessionName_invalid_returnSpecificErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForRole_null_throwException()","name":"testGetInvalidityInfoForRole_null_throwException","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForRole_valid_returnEmptyString()","name":"testGetInvalidityInfoForRole_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForRole_invalid_returnErrorString()","name":"testGetInvalidityInfoForRole_invalid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForGoogleId_null_throwException()","name":"testGetInvalidityInfoForGoogleId_null_throwException","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForGoogleId_untrimmedGmailDomain_throwException()","name":"testGetInvalidityInfoForGoogleId_untrimmedGmailDomain_throwException","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForGoogleId_valid_returnEmptyString()","name":"testGetInvalidityInfoForGoogleId_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForGoogleId_invalid_returnErrorString()","name":"testGetInvalidityInfoForGoogleId_invalid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForEmail_null_throwException()","name":"testGetInvalidityInfoForEmail_null_throwException","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForEmail_valid_returnEmptyString()","name":"testGetInvalidityInfoForEmail_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForEmail_invalid_returnErrorString()","name":"testGetInvalidityInfoForEmail_invalid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForCourseId_null_throwException()","name":"testGetInvalidityInfoForCourseId_null_throwException","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForCourseId_valid_returnEmptyString()","name":"testGetInvalidityInfoForCourseId_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForCourseId_invalid_returnErrorString()","name":"testGetInvalidityInfoForCourseId_invalid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForSessionStartAndEnd_valid_returnEmptyString()","name":"testGetInvalidityInfoForTimeForSessionStartAndEnd_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForSessionStartAndEnd_invalid_returnErrorString()","name":"testGetInvalidityInfoForTimeForSessionStartAndEnd_invalid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForVisibilityStartAndSessionStart_valid_returnEmptyString()","name":"testGetInvalidityInfoForTimeForVisibilityStartAndSessionStart_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForVisibilityStartAndSessionStart_invalid_returnErrorString()","name":"testGetInvalidityInfoForTimeForVisibilityStartAndSessionStart_invalid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForVisibilityStartAndResultsPublish_valid_returnEmptyString()","name":"testGetInvalidityInfoForTimeForVisibilityStartAndResultsPublish_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForVisibilityStartAndResultsPublish_invalid_returnErrorString()","name":"testGetInvalidityInfoForTimeForVisibilityStartAndResultsPublish_invalid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForSessionEndAndExtendedDeadlines_valid_returnEmptyString()","name":"testGetInvalidityInfoForTimeForSessionEndAndExtendedDeadlines_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForSessionEndAndExtendedDeadlines_invalid_returnErrorString()","name":"testGetInvalidityInfoForTimeForSessionEndAndExtendedDeadlines_invalid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForNotificationStartAndEnd_valid_returnEmptyString()","name":"testGetInvalidityInfoForTimeForNotificationStartAndEnd_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForTimeForNotificationStartAndEnd_inValid_returnErrorString()","name":"testGetInvalidityInfoForTimeForNotificationStartAndEnd_inValid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNotificationTitle_valid_returnEmptyString()","name":"testGetInvalidityInfoForNotificationTitle_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNotificationTitle_inValid_returnErrorString()","name":"testGetInvalidityInfoForNotificationTitle_inValid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNotificationBody_valid_returnEmptyString()","name":"testGetInvalidityInfoForNotificationBody_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNotificationBody_inValid_returnErrorString()","name":"testGetInvalidityInfoForNotificationBody_inValid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNotificationStyle_valid_returnEmptyString()","name":"testGetInvalidityInfoForNotificationStyle_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNotificationStyle_inValid_returnErrorString()","name":"testGetInvalidityInfoForNotificationStyle_inValid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNotificationTargetUser_valid_returnEmptyString()","name":"testGetInvalidityInfoForNotificationTargetUser_valid_returnEmptyString","type":"void","javadoc":null},{"fullQualified":"public void testGetInvalidityInfoForNotificationTargetUser_inValid_returnErrorString()","name":"testGetInvalidityInfoForNotificationTargetUser_inValid_returnErrorString","type":"void","javadoc":null},{"fullQualified":"public void testRegexName()","name":"testRegexName","type":"void","javadoc":null},{"fullQualified":"public void testRegexEmail()","name":"testRegexEmail","type":"void","javadoc":null},{"fullQualified":"public void testRegexCourseId()","name":"testRegexCourseId","type":"void","javadoc":null},{"fullQualified":"public void testRegexGoogleIdNonEmail()","name":"testRegexGoogleIdNonEmail","type":"void","javadoc":null}],"allConstructors":[]},{"name":"JsonUtilsTest","fullyQualifiedName":"teammates.common.util.JsonUtilsTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testFeedbackQuestionDetailsAdaptor_withComposedQuestionDetails_shouldSerializeToConcreteClass()","name":"testFeedbackQuestionDetailsAdaptor_withComposedQuestionDetails_shouldSerializeToConcreteClass","type":"void","javadoc":null},{"fullQualified":"public void testFeedbackResponseDetailsAdaptor_withComposedResponseDetails_shouldSerializeToConcreteClass()","name":"testFeedbackResponseDetailsAdaptor_withComposedResponseDetails_shouldSerializeToConcreteClass","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SanitizationHelperTest","fullyQualifiedName":"teammates.common.util.SanitizationHelperTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" tested as name","lineNumber":41,"isOrphan":true},{"type":"LineComment","text":" tested as email","lineNumber":46,"isOrphan":true}],"allMethods":[{"fullQualified":"public void testSanitizeGoogleId()","name":"testSanitizeGoogleId","type":"void","javadoc":null},{"fullQualified":"public void testSanitizeEmail()","name":"testSanitizeEmail","type":"void","javadoc":null},{"fullQualified":"public void testSanitizeName()","name":"testSanitizeName","type":"void","javadoc":null},{"fullQualified":"public void testSanitizeTitle()","name":"testSanitizeTitle","type":"void","javadoc":null},{"fullQualified":"public void testSanitizeTextField()","name":"testSanitizeTextField","type":"void","javadoc":null},{"fullQualified":"public void testSanitizeForHtml()","name":"testSanitizeForHtml","type":"void","javadoc":null},{"fullQualified":"private void sanitizeHtml_receivesNull_returnsNull()","name":"sanitizeHtml_receivesNull_returnsNull","type":"void","javadoc":null},{"fullQualified":"private void sanitizeHtml_receivesCodeInjection_returnsSanitized()","name":"sanitizeHtml_receivesCodeInjection_returnsSanitized","type":"void","javadoc":null},{"fullQualified":"private void sanitizeHtml_receivesSanitized_returnsUnchanged()","name":"sanitizeHtml_receivesSanitized_returnsUnchanged","type":"void","javadoc":null},{"fullQualified":"public void testSanitizeForRichText()","name":"testSanitizeForRichText","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StringHelperExtension","fullyQualifiedName":"teammates.common.util.StringHelperExtension","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":9,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Generates an arbitrary string of given length.\n     * @param length of string to be be generated\n     * @return generated string\n     ","lineNumber":12,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String generateStringOfLength(int length)","name":"generateStringOfLength","type":"String","javadoc":"\n     * Generates an arbitrary string of given length.\n     * @param length of string to be be generated\n     * @return generated string\n     "}],"allConstructors":[{"identifier":"private StringHelperExtension()","javadocComment":null}]},{"name":"StringHelperTest","fullyQualifiedName":"teammates.common.util.StringHelperTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"plaintext is less than 1 block long","lineNumber":75,"isOrphan":false},{"type":"LineComment","text":"plaintext is equal to 1 block","lineNumber":79,"isOrphan":false},{"type":"LineComment","text":"plaintext is more than 1 block long","lineNumber":83,"isOrphan":false},{"type":"JavadocComment","text":"\n    * Verifies that encrypting with and without specifying algorithm parameters produce the same ciphertext.\n    * This ensures parameters being specified for encryption are the same as the defaults.\n    *\n    * @param plaintext the plaintext to encrypt, as a hexadecimal string.\n    ","lineNumber":88,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Encrypts plaintext without specifying mode and padding scheme during  {@link Cipher} initialization.\n     *\n     * @param plaintext the plaintext to encrypt as a hexadecimal string\n     * @return ciphertext the ciphertext as a hexadecimal string.\n     ","lineNumber":100,"isOrphan":false},{"type":"LineComment","text":" The decrypt function converts a hex string into an array of bytes before decryption.","lineNumber":125,"isOrphan":true},{"type":"LineComment","text":" E.g AF is the byte 10101111","lineNumber":126,"isOrphan":true},{"type":"LineComment","text":" AES requires the length of data to be multiples of 128 bits.","lineNumber":130,"isOrphan":true},{"type":"LineComment","text":" Hence, non-hex strings should fail to decrypt.","lineNumber":127,"isOrphan":false},{"type":"LineComment","text":" Hence, decryption should fail  for inputs of 120 and 136 bits.","lineNumber":131,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testIsEmpty()","name":"testIsEmpty","type":"void","javadoc":null},{"fullQualified":"public void testGenerateStringOfLength()","name":"testGenerateStringOfLength","type":"void","javadoc":null},{"fullQualified":"public void testIsMatching()","name":"testIsMatching","type":"void","javadoc":null},{"fullQualified":"public void testToString()","name":"testToString","type":"void","javadoc":null},{"fullQualified":"public void testKeyEncryption() throws Exception","name":"testKeyEncryption","type":"void","javadoc":null},{"fullQualified":"public void testDefaultAesCipherParams() throws Exception","name":"testDefaultAesCipherParams","type":"void","javadoc":null},{"fullQualified":"private static void assertEncryptionUsesExpectedDefaultParams(String plaintext) throws Exception","name":"assertEncryptionUsesExpectedDefaultParams","type":"void","javadoc":"\n    * Verifies that encrypting with and without specifying algorithm parameters produce the same ciphertext.\n    * This ensures parameters being specified for encryption are the same as the defaults.\n    *\n    * @param plaintext the plaintext to encrypt, as a hexadecimal string.\n    "},{"fullQualified":"private static String encryptWithoutSpecifyingAlgorithmParams(String plaintext) throws Exception","name":"encryptWithoutSpecifyingAlgorithmParams","type":"String","javadoc":"\n     * Encrypts plaintext without specifying mode and padding scheme during  {@link Cipher} initialization.\n     *\n     * @param plaintext the plaintext to encrypt as a hexadecimal string\n     * @return ciphertext the ciphertext as a hexadecimal string.\n     "},{"fullQualified":"private static String generateSignature(String data) throws Exception","name":"generateSignature","type":"String","javadoc":null},{"fullQualified":"public void testDecryptingInvalidCiphertextThrowsException()","name":"testDecryptingInvalidCiphertextThrowsException","type":"void","javadoc":null},{"fullQualified":"public void testRemoveExtraSpace()","name":"testRemoveExtraSpace","type":"void","javadoc":null},{"fullQualified":"public void testReplaceIllegalChars()","name":"testReplaceIllegalChars","type":"void","javadoc":null},{"fullQualified":"public void testConvertToEmptyStringIfNull()","name":"testConvertToEmptyStringIfNull","type":"void","javadoc":null},{"fullQualified":"public void testTruncateHead()","name":"testTruncateHead","type":"void","javadoc":null},{"fullQualified":"public void testSignatureGeneration() throws Exception","name":"testSignatureGeneration","type":"void","javadoc":null},{"fullQualified":"public void testSignatureVerification()","name":"testSignatureVerification","type":"void","javadoc":null}],"allConstructors":[]},{"name":"TimeHelperExtension","fullyQualifiedName":"teammates.common.util.TimeHelperExtension","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":12,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Returns an java.time.Instant object that is offset by a number of minutes from now.\n     * @param offsetInMinutes number of minutes offset by (integer).\n     * @return java.time.Instant offset by offsetInMinutes minutes from now.\n     ","lineNumber":15,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns an java.time.Instant object that is offset by a number of hours from now.\n     * @param offsetInHours number of hours offset by (integer).\n     * @return java.time.Instant offset by offsetInHours hours from now.\n     ","lineNumber":24,"isOrphan":false}],"allMethods":[{"fullQualified":"public static Instant getInstantMinutesOffsetFromNow(long offsetInMinutes)","name":"getInstantMinutesOffsetFromNow","type":"Instant","javadoc":"\n     * Returns an java.time.Instant object that is offset by a number of minutes from now.\n     * @param offsetInMinutes number of minutes offset by (integer).\n     * @return java.time.Instant offset by offsetInMinutes minutes from now.\n     "},{"fullQualified":"public static Instant getInstantHoursOffsetFromNow(long offsetInHours)","name":"getInstantHoursOffsetFromNow","type":"Instant","javadoc":"\n     * Returns an java.time.Instant object that is offset by a number of hours from now.\n     * @param offsetInHours number of hours offset by (integer).\n     * @return java.time.Instant offset by offsetInHours hours from now.\n     "}],"allConstructors":[{"identifier":"private TimeHelperExtension()","javadocComment":null}]},{"name":"TimeHelperTest","fullyQualifiedName":"teammates.common.util.TimeHelperTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testEndOfYearDates()","name":"testEndOfYearDates","type":"void","javadoc":null},{"fullQualified":"public void testFormatDateTimeForDisplay()","name":"testFormatDateTimeForDisplay","type":"void","javadoc":null},{"fullQualified":"public void testGetMidnightAdjustedInstantBasedOnZone()","name":"testGetMidnightAdjustedInstantBasedOnZone","type":"void","javadoc":null},{"fullQualified":"public void testGetInstantNearestHourBefore()","name":"testGetInstantNearestHourBefore","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UrlTest","fullyQualifiedName":"teammates.common.util.UrlTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testToString()","name":"testToString","type":"void","javadoc":null},{"fullQualified":"public void testAppendParameters()","name":"testAppendParameters","type":"void","javadoc":null},{"fullQualified":"public void testAppUrlAssertion()","name":"testAppUrlAssertion","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BaseLogicTest","fullyQualifiedName":"teammates.logic.api.BaseLogicTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void baseClassSetup()","name":"baseClassSetup","type":"void","javadoc":null},{"fullQualified":" void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"EmailGeneratorTest","fullyQualifiedName":"teammates.logic.api.EmailGeneratorTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" opened and unpublished.","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" closed and unpublished","lineNumber":54,"isOrphan":false},{"type":"LineComment","text":" opened and published.","lineNumber":60,"isOrphan":false},{"type":"LineComment","text":" closed and published","lineNumber":65,"isOrphan":false},{"type":"LineComment","text":" 5 instructors, 6 students, and 3 co-owner in session","lineNumber":175,"isOrphan":true},{"type":"LineComment","text":" 2 instructors and 3 students with deadline extensions do not need to be notified","lineNumber":176,"isOrphan":true},{"type":"LineComment","text":" 5 instructors, 6 students, and 3 co-owner instructors to be notified","lineNumber":143,"isOrphan":false},{"type":"LineComment","text":" (5 instructors, 6 students reminded) and (1 instructor to be notified)","lineNumber":158,"isOrphan":false},{"type":"LineComment","text":" Verify the student reminder email","lineNumber":164,"isOrphan":false},{"type":"LineComment","text":" Verify the student email copy send to the instructor","lineNumber":166,"isOrphan":false},{"type":"LineComment","text":" Verify the instructor reminder email","lineNumber":169,"isOrphan":false},{"type":"LineComment","text":" 3 instructors, 3 students, and 3 co-owner to be notified","lineNumber":177,"isOrphan":false},{"type":"LineComment","text":" this instructor email has been given co-owner privileges in the test file and has joined","lineNumber":197,"isOrphan":false},{"type":"LineComment","text":" this instructor email has been given co-owner privileges in the test file but has not joined","lineNumber":213,"isOrphan":false},{"type":"LineComment","text":" 5 instructors, 6 students, and 3 co-owner instructors to be notified","lineNumber":230,"isOrphan":false},{"type":"LineComment","text":" 5 instructors, 6 students, and 3 co-owner instructors to be notified","lineNumber":244,"isOrphan":false},{"type":"LineComment","text":" InstructorAttributes sanitizes name before saving","lineNumber":576,"isOrphan":false},{"type":"LineComment","text":" check recipient","lineNumber":733,"isOrphan":false},{"type":"LineComment","text":" check subject","lineNumber":736,"isOrphan":false},{"type":"LineComment","text":" check sender name","lineNumber":739,"isOrphan":false},{"type":"LineComment","text":" check sender email","lineNumber":742,"isOrphan":false},{"type":"LineComment","text":" check reply to address","lineNumber":745,"isOrphan":false},{"type":"LineComment","text":" check email body for expected content","lineNumber":750,"isOrphan":false},{"type":"LineComment","text":" check email body for no left placeholders","lineNumber":753,"isOrphan":false}],"allMethods":[{"fullQualified":"public void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testGenerateSessionLinksRecoveryEmail() throws Exception","name":"testGenerateSessionLinksRecoveryEmail","type":"void","javadoc":null},{"fullQualified":"public void testGenerateFeedbackSessionEmails() throws Exception","name":"testGenerateFeedbackSessionEmails","type":"void","javadoc":null},{"fullQualified":"public void testGenerateFeedbackSessionEmails_testUsersWithDeadlineExtensions() throws Exception","name":"testGenerateFeedbackSessionEmails_testUsersWithDeadlineExtensions","type":"void","javadoc":null},{"fullQualified":"public void testGenerateFeedbackSessionEmails_testSanitization() throws Exception","name":"testGenerateFeedbackSessionEmails_testSanitization","type":"void","javadoc":null},{"fullQualified":"public void testGenerateInstructorJoinEmail() throws Exception","name":"testGenerateInstructorJoinEmail","type":"void","javadoc":null},{"fullQualified":"public void testGenerateFeedbackSessionSummaryOfCourse_noSessionLinksFound() throws Exception","name":"testGenerateFeedbackSessionSummaryOfCourse_noSessionLinksFound","type":"void","javadoc":null},{"fullQualified":"public void testGenerateInstructorJoinEmail_testSanitization() throws Exception","name":"testGenerateInstructorJoinEmail_testSanitization","type":"void","javadoc":null},{"fullQualified":"public void testGenerateStudentCourseJoinEmail() throws Exception","name":"testGenerateStudentCourseJoinEmail","type":"void","javadoc":null},{"fullQualified":"public void testGenerateStudentCourseJoinEmail_testSanitization() throws Exception","name":"testGenerateStudentCourseJoinEmail_testSanitization","type":"void","javadoc":null},{"fullQualified":"public void testGenerateUserCourseRegisterEmail() throws Exception","name":"testGenerateUserCourseRegisterEmail","type":"void","javadoc":null},{"fullQualified":"public void testGenerateCompiledLogsEmail() throws Exception","name":"testGenerateCompiledLogsEmail","type":"void","javadoc":null},{"fullQualified":"private void verifyEmail(EmailWrapper email, String recipient, String subject, String emailContentFilePath) throws Exception","name":"verifyEmail","type":"void","javadoc":null},{"fullQualified":"private void verifyEmailReceivedCorrectly(List<EmailWrapper> actualEmails, String recipient, String subject, String emailContentFilePath) throws Exception","name":"verifyEmailReceivedCorrectly","type":"void","javadoc":null}],"allConstructors":[]},{"name":"EmailSenderTest","fullyQualifiedName":"teammates.logic.api.EmailSenderTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" no test data used in this test","lineNumber":27,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"private EmailWrapper getTypicalEmailWrapper()","name":"getTypicalEmailWrapper","type":"EmailWrapper","javadoc":null},{"fullQualified":"public void testConvertToSendgrid()","name":"testConvertToSendgrid","type":"void","javadoc":null},{"fullQualified":"public void testConvertToMailgun() throws Exception","name":"testConvertToMailgun","type":"void","javadoc":null},{"fullQualified":"public void testConvertToMailjet()","name":"testConvertToMailjet","type":"void","javadoc":null}],"allConstructors":[]},{"name":"LogicExtension","fullyQualifiedName":"teammates.logic.api.LogicExtension","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public FeedbackQuestionAttributes getFeedbackQuestion(String feedbackSessionName, String courseId, int questionNumber)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":null},{"fullQualified":"public FeedbackResponseAttributes getFeedbackResponse(String feedbackQuestionId, String giverEmail, String recipient)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseComment(String responseId, String giverEmail, Instant creationDate)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":null},{"fullQualified":"public List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentForResponse(String responseId)","name":"getFeedbackResponseCommentForResponse","type":"List<FeedbackResponseCommentAttributes>","javadoc":null},{"fullQualified":"public List<FeedbackResponseAttributes> getFeedbackResponsesForQuestion(String feedbackQuestionId)","name":"getFeedbackResponsesForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":null}],"allConstructors":[]},{"name":"MockEmailSender","fullyQualifiedName":"teammates.logic.api.MockEmailSender","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the emails sent.\n     ","lineNumber":27,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Clears the list of emails sent.\n     ","lineNumber":34,"isOrphan":false}],"allMethods":[{"fullQualified":"public EmailSendingStatus sendEmail(EmailWrapper email)","name":"sendEmail","type":"EmailSendingStatus","javadoc":null},{"fullQualified":"public List<EmailWrapper> getEmailsSent()","name":"getEmailsSent","type":"List<EmailWrapper>","javadoc":"\n     * Gets the emails sent.\n     "},{"fullQualified":"public void clearEmails()","name":"clearEmails","type":"void","javadoc":"\n     * Clears the list of emails sent.\n     "}],"allConstructors":[]},{"name":"MockFileStorage","fullyQualifiedName":"teammates.logic.api.MockFileStorage","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean doesFileExist(String fileKey)","name":"doesFileExist","type":"boolean","javadoc":null},{"fullQualified":"public byte[] getContent(String fileKey)","name":"getContent","type":"byte[]","javadoc":null},{"fullQualified":"public void delete(String fileKey)","name":"delete","type":"void","javadoc":null},{"fullQualified":"public void create(String fileKey, byte[] contentBytes, String contentType)","name":"create","type":"void","javadoc":null}],"allConstructors":[]},{"name":"MockLogsProcessor","fullyQualifiedName":"teammates.logic.api.MockLogsProcessor","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Simulates insertion of feedback session logs.\n     ","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Simulates insertion of general INFO logs.\n     ","lineNumber":31,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Simulates insertion of general WARNING logs.\n     ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Simulates insertion of general ERROR logs.\n     ","lineNumber":49,"isOrphan":false},{"type":"LineComment","text":" No-op","lineNumber":101,"isOrphan":true}],"allMethods":[{"fullQualified":"public void insertFeedbackSessionLog(String studentEmail, String feedbackSessionName, String fslType, long timestamp)","name":"insertFeedbackSessionLog","type":"void","javadoc":"\n     * Simulates insertion of feedback session logs.\n     "},{"fullQualified":"public void insertInfoLog(String trace, String insertId, SourceLocation sourceLocation, long timestamp, String textPayloadMessage, LogDetails logDetails)","name":"insertInfoLog","type":"void","javadoc":"\n     * Simulates insertion of general INFO logs.\n     "},{"fullQualified":"public void insertWarningLog(String trace, String insertId, SourceLocation sourceLocation, long timestamp, String textPayloadMessage, LogDetails logDetails)","name":"insertWarningLog","type":"void","javadoc":"\n     * Simulates insertion of general WARNING logs.\n     "},{"fullQualified":"public void insertErrorLog(String trace, String insertId, SourceLocation sourceLocation, long timestamp, String textPayloadMessage, LogDetails logDetails)","name":"insertErrorLog","type":"void","javadoc":"\n     * Simulates insertion of general ERROR logs.\n     "},{"fullQualified":"private void insertGeneralLog(LogSeverity severity, String trace, String insertId, SourceLocation sourceLocation, long timestamp, String textPayloadMessage, LogDetails logDetails)","name":"insertGeneralLog","type":"void","javadoc":null},{"fullQualified":"public QueryLogsResults queryLogs(QueryLogsParams queryLogsParams)","name":"queryLogs","type":"QueryLogsResults","javadoc":null},{"fullQualified":"public void createFeedbackSessionLog(String courseId, String email, String fsName, String fslType)","name":"createFeedbackSessionLog","type":"void","javadoc":null},{"fullQualified":"public List<FeedbackSessionLogEntry> getFeedbackSessionLogs(String courseId, String email, long startTime, long endTime, String fsName)","name":"getFeedbackSessionLogs","type":"List<FeedbackSessionLogEntry>","javadoc":null}],"allConstructors":[]},{"name":"MockRecaptchaVerifier","fullyQualifiedName":"teammates.logic.api.MockRecaptchaVerifier","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public boolean isVerificationSuccessful(String captchaResponse)","name":"isVerificationSuccessful","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"MockTaskQueuer","fullyQualifiedName":"teammates.logic.api.MockTaskQueuer","isInterface":false,"codeComments":[{"type":"LineComment","text":" countdown time not tested","lineNumber":23,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the tasks added to the queue.\n     ","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the number of tasks added for each queue name.\n     ","lineNumber":35,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Clears the list of tasks added.\n     ","lineNumber":49,"isOrphan":false}],"allMethods":[{"fullQualified":" void addDeferredTask(String queueName, String workerUrl, Map<String, String> paramMap, Object requestBody, long countdownTime)","name":"addDeferredTask","type":"void","javadoc":null},{"fullQualified":"public List<TaskWrapper> getTasksAdded()","name":"getTasksAdded","type":"List<TaskWrapper>","javadoc":"\n     * Gets the tasks added to the queue.\n     "},{"fullQualified":"public Map<String, Integer> getNumberOfTasksAdded()","name":"getNumberOfTasksAdded","type":"Map<String,Integer>","javadoc":"\n     * Gets the number of tasks added for each queue name.\n     "},{"fullQualified":"public void clearTasks()","name":"clearTasks","type":"void","javadoc":"\n     * Clears the list of tasks added.\n     "}],"allConstructors":[]},{"name":"MockUserProvision","fullyQualifiedName":"teammates.logic.api.MockUserProvision","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Adds a logged-in user without admin rights.\n     *\n     * @return The user info after login process\n     ","lineNumber":24,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Adds a logged-in user as an admin.\n     *\n     * @return The user info after login process\n     ","lineNumber":33,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes the logged-in user information.\n     ","lineNumber":42,"isOrphan":false}],"allMethods":[{"fullQualified":"private UserInfo loginUser(String userId, boolean isAdmin)","name":"loginUser","type":"UserInfo","javadoc":null},{"fullQualified":"public UserInfo loginUser(String userId)","name":"loginUser","type":"UserInfo","javadoc":"\n     * Adds a logged-in user without admin rights.\n     *\n     * @return The user info after login process\n     "},{"fullQualified":"public UserInfo loginAsAdmin(String userId)","name":"loginAsAdmin","type":"UserInfo","javadoc":"\n     * Adds a logged-in user as an admin.\n     *\n     * @return The user info after login process\n     "},{"fullQualified":"public void logoutUser()","name":"logoutUser","type":"void","javadoc":"\n     * Removes the logged-in user information.\n     "},{"fullQualified":" UserInfo getCurrentLoggedInUser(UserInfoCookie uic)","name":"getCurrentLoggedInUser","type":"UserInfo","javadoc":null}],"allConstructors":[]},{"name":"UserProvisionTest","fullyQualifiedName":"teammates.logic.api.UserProvisionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" check for user not logged in","lineNumber":56,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testGetCurrentUser()","name":"testGetCurrentUser","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AccountRequestsLogicTest","fullyQualifiedName":"teammates.logic.core.AccountRequestsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" test data is refreshed before each test case","lineNumber":23,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"public void testCreateAccountRequest() throws Exception","name":"testCreateAccountRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateAccountRequest() throws Exception","name":"testUpdateAccountRequest","type":"void","javadoc":null},{"fullQualified":"public void testDeleteAccountRequest() throws Exception","name":"testDeleteAccountRequest","type":"void","javadoc":null},{"fullQualified":"public void testGetAccountRequestForRegistrationKey() throws Exception","name":"testGetAccountRequestForRegistrationKey","type":"void","javadoc":null},{"fullQualified":"public void testGetAccountRequest()","name":"testGetAccountRequest","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AccountsLogicTest","fullyQualifiedName":"teammates.logic.core.AccountsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" test data is refreshed before each test case","lineNumber":37,"isOrphan":true},{"type":"LineComment","text":" delete created accounts","lineNumber":111,"isOrphan":false},{"type":"LineComment","text":" Create correct student with original@email.com","lineNumber":125,"isOrphan":false},{"type":"LineComment","text":" check that we have the corresponding new account created.","lineNumber":232,"isOrphan":false},{"type":"LineComment","text":"Delete account to simulate Account object creation goes wrong","lineNumber":271,"isOrphan":false},{"type":"LineComment","text":"Try to join course again, Account object should be recreated","lineNumber":274,"isOrphan":false},{"type":"LineComment","text":" create a profile for the account","lineNumber":371,"isOrphan":false},{"type":"LineComment","text":" verify the instructor is the last instructor of a course","lineNumber":380,"isOrphan":false},{"type":"LineComment","text":" Make instructor account id a student too.","lineNumber":383,"isOrphan":false},{"type":"LineComment","text":" course is deleted because it is the last instructor of the course","lineNumber":404,"isOrphan":false},{"type":"LineComment","text":" verify the instructor is not the last instructor of a course","lineNumber":412,"isOrphan":false},{"type":"LineComment","text":" course is not deleted","lineNumber":418,"isOrphan":false},{"type":"LineComment","text":" verify the instructor is the last instructor of a course","lineNumber":429,"isOrphan":false},{"type":"LineComment","text":" the archived instructor is also deleted","lineNumber":437,"isOrphan":false},{"type":"LineComment","text":" the course is also deleted","lineNumber":439,"isOrphan":false},{"type":"LineComment","text":" other irrelevant instructors remain","lineNumber":449,"isOrphan":false},{"type":"LineComment","text":" invalid googleId","lineNumber":478,"isOrphan":false},{"type":"LineComment","text":" invalid notificationId","lineNumber":485,"isOrphan":false},{"type":"LineComment","text":" expired notification","lineNumber":492,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"private String getKeyForInstructor(String courseId, String email)","name":"getKeyForInstructor","type":"String","javadoc":null},{"fullQualified":"public void testCreateAccount() throws Exception","name":"testCreateAccount","type":"void","javadoc":null},{"fullQualified":"public void testGetAccountsForEmail() throws Exception","name":"testGetAccountsForEmail","type":"void","javadoc":null},{"fullQualified":"public void testJoinCourseForStudent() throws Exception","name":"testJoinCourseForStudent","type":"void","javadoc":null},{"fullQualified":"public void testJoinCourseForInstructor() throws Exception","name":"testJoinCourseForInstructor","type":"void","javadoc":null},{"fullQualified":"public void testDeleteAccountCascade_lastInstructorInCourse_shouldDeleteOrphanCourse() throws Exception","name":"testDeleteAccountCascade_lastInstructorInCourse_shouldDeleteOrphanCourse","type":"void","javadoc":null},{"fullQualified":"public void testDeleteAccountCascade_notLastInstructorInCourse_shouldNotDeleteCourse()","name":"testDeleteAccountCascade_notLastInstructorInCourse_shouldNotDeleteCourse","type":"void","javadoc":null},{"fullQualified":"public void testDeleteAccountCascade_instructorArchivedAsLastInstructor_shouldDeleteCourseAlso() throws Exception","name":"testDeleteAccountCascade_instructorArchivedAsLastInstructor_shouldDeleteCourseAlso","type":"void","javadoc":null},{"fullQualified":"public void testDeleteAccountCascade_nonExistentAccount_shouldPass()","name":"testDeleteAccountCascade_nonExistentAccount_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testUpdateReadNotifications() throws Exception","name":"testUpdateReadNotifications","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BaseLogicTest","fullyQualifiedName":"teammates.logic.core.BaseLogicTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void baseClassSetup()","name":"baseClassSetup","type":"void","javadoc":null},{"fullQualified":" void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CoursesLogicTest","fullyQualifiedName":"teammates.logic.core.CoursesLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" test data is refreshed before each test case","lineNumber":41,"isOrphan":true},{"type":"LineComment","text":" Student having zero courses is not applicable","lineNumber":301,"isOrphan":true},{"type":"BlockComment","text":" Explanation: SUT has 5 paths. They are,\n         * path 1 - exit because the account doesn't' exist.\n         * path 2 - exit because course creation failed.\n         * path 3/4 - exit because instructor creation failed.\n         * path 5 - success.\n         * Accordingly, we have 5 test cases.\n         ","lineNumber":340,"isOrphan":true},{"type":"LineComment","text":"create a duplicate instructor","lineNumber":414,"isOrphan":false},{"type":"LineComment","text":"remove the duplicate instructor object from the database.","lineNumber":448,"isOrphan":false},{"type":"LineComment","text":" Ensure there are entities in the database under this course","lineNumber":477,"isOrphan":false},{"type":"LineComment","text":" Ensure the course is not in Recycle Bin","lineNumber":484,"isOrphan":false},{"type":"LineComment","text":" Ensure the course and related entities still exist in database","lineNumber":490,"isOrphan":false},{"type":"LineComment","text":" Ensure the course is moved to Recycle Bin","lineNumber":497,"isOrphan":false},{"type":"LineComment","text":" Ensure there are entities in the database under this course","lineNumber":511,"isOrphan":false},{"type":"LineComment","text":" Ensure the course is currently in Recycle Bin","lineNumber":516,"isOrphan":false},{"type":"LineComment","text":" Ensure the course and related entities still exist in database","lineNumber":522,"isOrphan":false},{"type":"LineComment","text":" Ensure the course is restored from Recycle Bin","lineNumber":527,"isOrphan":false},{"type":"LineComment","text":" Move the course back to Recycle Bin for further testing","lineNumber":530,"isOrphan":false},{"type":"LineComment","text":" Ensure there are entities in the database under this course","lineNumber":550,"isOrphan":false},{"type":"LineComment","text":" Ensure the course and related entities are deleted","lineNumber":578,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"public void testUpdateCourseCascade_shouldCascadeUpdateTimezoneOfFeedbackSessions() throws Exception","name":"testUpdateCourseCascade_shouldCascadeUpdateTimezoneOfFeedbackSessions","type":"void","javadoc":null},{"fullQualified":"public void testAll() throws Exception","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void testGetCourse() throws Exception","name":"testGetCourse","type":"void","javadoc":null},{"fullQualified":"private void testGetSoftDeletedCoursesForInstructors()","name":"testGetSoftDeletedCoursesForInstructors","type":"void","javadoc":null},{"fullQualified":"private void testIsCoursePresent()","name":"testIsCoursePresent","type":"void","javadoc":null},{"fullQualified":"private void testVerifyCourseIsPresent() throws Exception","name":"testVerifyCourseIsPresent","type":"void","javadoc":null},{"fullQualified":"private void testGetSectionsNameForCourse() throws Exception","name":"testGetSectionsNameForCourse","type":"void","javadoc":null},{"fullQualified":"private void testGetTeamsForCourse() throws Exception","name":"testGetTeamsForCourse","type":"void","javadoc":null},{"fullQualified":"private void testGetCoursesForStudentAccount()","name":"testGetCoursesForStudentAccount","type":"void","javadoc":null},{"fullQualified":"private void testCreateCourse() throws Exception","name":"testCreateCourse","type":"void","javadoc":null},{"fullQualified":"private void testCreateCourseAndInstructor() throws Exception","name":"testCreateCourseAndInstructor","type":"void","javadoc":null},{"fullQualified":"private void testMoveCourseToRecycleBin() throws Exception","name":"testMoveCourseToRecycleBin","type":"void","javadoc":null},{"fullQualified":"private void testRestoreCourseFromRecycleBin() throws Exception","name":"testRestoreCourseFromRecycleBin","type":"void","javadoc":null},{"fullQualified":"public void testDeleteCourseCascade()","name":"testDeleteCourseCascade","type":"void","javadoc":null},{"fullQualified":"private void testUpdateCourseCascade() throws Exception","name":"testUpdateCourseCascade","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DataBundleLogicTest","fullyQualifiedName":"teammates.logic.core.DataBundleLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" data bundle not persisted before test since the remove/restore data itself is being tested","lineNumber":23,"isOrphan":true},{"type":"LineComment","text":" Only FeedbackQuestions is tested because currently, it is the only data that has a value","lineNumber":36,"isOrphan":true},{"type":"LineComment","text":" updated only in the server. If there are more in the future, they should be added in this","lineNumber":37,"isOrphan":true},{"type":"LineComment","text":" Not checking for invalid values in other entities because they","lineNumber":67,"isOrphan":true},{"type":"LineComment","text":" should be checked at lower level methods","lineNumber":68,"isOrphan":true},{"type":"LineComment","text":" test as well.","lineNumber":38,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testPersistDataBundle() throws Exception","name":"testPersistDataBundle","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeadlineExtensionsLogicTest","fullyQualifiedName":"teammates.logic.core.DeadlineExtensionsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" test data is refreshed before each test case","lineNumber":33,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"public void testCreateDeadlineExtension() throws Exception","name":"testCreateDeadlineExtension","type":"void","javadoc":null},{"fullQualified":"public void testUpdateDeadlineExtension() throws Exception","name":"testUpdateDeadlineExtension","type":"void","javadoc":null},{"fullQualified":"public void testDeleteDeadlineExtension()","name":"testDeleteDeadlineExtension","type":"void","javadoc":null},{"fullQualified":"public void testGetDeadlineExtension()","name":"testGetDeadlineExtension","type":"void","javadoc":null},{"fullQualified":"public void testDeleteDeadlineExtensions_byAttributeDeletionQuery() throws Exception","name":"testDeleteDeadlineExtensions_byAttributeDeletionQuery","type":"void","javadoc":null},{"fullQualified":"public void testDeleteDeadlineExtensions_byCourseIdAndUserDetails() throws Exception","name":"testDeleteDeadlineExtensions_byCourseIdAndUserDetails","type":"void","javadoc":null},{"fullQualified":"public void testUpdateDeadlineExtensionsWithNewEmail() throws Exception","name":"testUpdateDeadlineExtensionsWithNewEmail","type":"void","javadoc":null},{"fullQualified":"public void testGetDeadlineExtensionsPossiblyNeedingClosingEmail() throws Exception","name":"testGetDeadlineExtensionsPossiblyNeedingClosingEmail","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackQuestionsLogicTest","fullyQualifiedName":"teammates.logic.core.FeedbackQuestionsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" see beforeMethod()","lineNumber":44,"isOrphan":true},{"type":"LineComment","text":" other sessions are not affected","lineNumber":70,"isOrphan":false},{"type":"LineComment","text":" 5 students minus giver himself","lineNumber":103,"isOrphan":false},{"type":"LineComment","text":" should produce the same answer","lineNumber":105,"isOrphan":false},{"type":"LineComment","text":" instructor is not student so he can respond to all 5.","lineNumber":113,"isOrphan":false},{"type":"LineComment","text":" should produce the same answer","lineNumber":115,"isOrphan":false},{"type":"LineComment","text":" 3 - giver = 2","lineNumber":126,"isOrphan":false},{"type":"LineComment","text":" should produce the same answer","lineNumber":128,"isOrphan":false},{"type":"LineComment","text":" should produce the same answer","lineNumber":141,"isOrphan":false},{"type":"LineComment","text":"Appends a question to the back of the current question list","lineNumber":329,"isOrphan":false},{"type":"LineComment","text":"new question should not have an ID.","lineNumber":332,"isOrphan":false},{"type":"LineComment","text":"Add a question to session1course1 and sets its number to 1","lineNumber":357,"isOrphan":false},{"type":"LineComment","text":"new question should not have an ID.","lineNumber":360,"isOrphan":false},{"type":"LineComment","text":"Add a question to session1course1 and place it between existing question 2 and 3","lineNumber":382,"isOrphan":false},{"type":"LineComment","text":"new question should not have an ID.","lineNumber":385,"isOrphan":false},{"type":"LineComment","text":" the question has some responses and comments","lineNumber":499,"isOrphan":false},{"type":"LineComment","text":" the responses and comments should gone","lineNumber":509,"isOrphan":false},{"type":"LineComment","text":" verify that questions are shifted","lineNumber":516,"isOrphan":false},{"type":"LineComment","text":" other questions not get affected","lineNumber":529,"isOrphan":false},{"type":"LineComment","text":" the student only gives this response for the session","lineNumber":542,"isOrphan":false},{"type":"LineComment","text":" he is in the giver set","lineNumber":547,"isOrphan":false},{"type":"LineComment","text":" after deletion the question","lineNumber":551,"isOrphan":false},{"type":"LineComment","text":" the student should not in the giver set","lineNumber":554,"isOrphan":false},{"type":"LineComment","text":" test that questions in other courses are unaffected","lineNumber":578,"isOrphan":false},{"type":"LineComment","text":" construct a typical question","lineNumber":589,"isOrphan":false},{"type":"LineComment","text":" NONE","lineNumber":606,"isOrphan":false},{"type":"LineComment","text":" STUDENTS","lineNumber":623,"isOrphan":false},{"type":"LineComment","text":" STUDENTS_IN_SAME_SECTION","lineNumber":644,"isOrphan":false},{"type":"LineComment","text":" STUDENTS_EXCLUDING_SELF","lineNumber":657,"isOrphan":false},{"type":"LineComment","text":" TEAM MEMBERS","lineNumber":681,"isOrphan":false},{"type":"LineComment","text":" TEAM MEMBERS EXCLUDING SELF","lineNumber":700,"isOrphan":false},{"type":"LineComment","text":" TEAMS","lineNumber":718,"isOrphan":false},{"type":"LineComment","text":" TEAMS_IN_SAME_SECTION","lineNumber":735,"isOrphan":false},{"type":"LineComment","text":" TEAMS_EXCLUDING_SELF","lineNumber":745,"isOrphan":false},{"type":"LineComment","text":" INSTRUCTORS","lineNumber":762,"isOrphan":false},{"type":"LineComment","text":" construct a typical question","lineNumber":790,"isOrphan":false},{"type":"LineComment","text":" TEAMS_EXCLUDING_SELF","lineNumber":807,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void beforeMethod()","name":"beforeMethod","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackQuestions_byCourseIdAndSessionName_shouldDeleteQuestions()","name":"testDeleteFeedbackQuestions_byCourseIdAndSessionName_shouldDeleteQuestions","type":"void","javadoc":null},{"fullQualified":"public void allTests() throws Exception","name":"allTests","type":"void","javadoc":null},{"fullQualified":"public void testGetRecipientsOfQuestion() throws Exception","name":"testGetRecipientsOfQuestion","type":"void","javadoc":null},{"fullQualified":"public void testUpdateQuestionCascade_shouldShiftQuestionNumberCorrectly() throws Exception","name":"testUpdateQuestionCascade_shouldShiftQuestionNumberCorrectly","type":"void","javadoc":null},{"fullQualified":"private void testAddQuestion() throws Exception","name":"testAddQuestion","type":"void","javadoc":null},{"fullQualified":"public void testUpdateQuestionCascade() throws Exception","name":"testUpdateQuestionCascade","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackQuestionCascade_existentQuestion_shouldDoCascadeDeletion()","name":"testDeleteFeedbackQuestionCascade_existentQuestion_shouldDoCascadeDeletion","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackQuestionCascade_nonExistentQuestion_shouldFailSilently()","name":"testDeleteFeedbackQuestionCascade_nonExistentQuestion_shouldFailSilently","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackQuestionCascade_cascadeDeleteResponseOfStudent_shouldUpdateRespondents()","name":"testDeleteFeedbackQuestionCascade_cascadeDeleteResponseOfStudent_shouldUpdateRespondents","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackQuestions_byCourseId_shouldDeleteQuestions()","name":"testDeleteFeedbackQuestions_byCourseId_shouldDeleteQuestions","type":"void","javadoc":null},{"fullQualified":"public void testPopulateFieldsToGenerateInQuestion_mcqQuestionDifferentGenerateOptions_shouldPopulateCorrectly()","name":"testPopulateFieldsToGenerateInQuestion_mcqQuestionDifferentGenerateOptions_shouldPopulateCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testPopulateFieldsToGenerateInQuestion_msqQuestionDifferentGenerateOptions_shouldPopulateCorrectly()","name":"testPopulateFieldsToGenerateInQuestion_msqQuestionDifferentGenerateOptions_shouldPopulateCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testBuildCompleteGiverRecipientMap_studentQuestion_shouldBuildMapCorrectly()","name":"testBuildCompleteGiverRecipientMap_studentQuestion_shouldBuildMapCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testBuildCompleteGiverRecipientMap_instructorQuestion_shouldBuildMapCorrectly()","name":"testBuildCompleteGiverRecipientMap_instructorQuestion_shouldBuildMapCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testBuildCompleteGiverRecipientMap_selfQuestion_shouldBuildMapCorrectly()","name":"testBuildCompleteGiverRecipientMap_selfQuestion_shouldBuildMapCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testBuildCompleteGiverRecipientMap_teamQuestion_shouldBuildMapCorrectly()","name":"testBuildCompleteGiverRecipientMap_teamQuestion_shouldBuildMapCorrectly","type":"void","javadoc":null},{"fullQualified":"private void testHasFeedbackQuestionsForInstructor()","name":"testHasFeedbackQuestionsForInstructor","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackQuestionsForInstructor()","name":"testGetFeedbackQuestionsForInstructor","type":"void","javadoc":null},{"fullQualified":"private void testHasFeedbackQuestionsForStudents()","name":"testHasFeedbackQuestionsForStudents","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackQuestionsForStudents()","name":"testGetFeedbackQuestionsForStudents","type":"void","javadoc":null},{"fullQualified":"private FeedbackQuestionAttributes getQuestionFromDatabase(String questionKey)","name":"getQuestionFromDatabase","type":"FeedbackQuestionAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackResponseCommentsLogicTest","fullyQualifiedName":"teammates.logic.core.FeedbackResponseCommentsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" test data is refreshed before each test case","lineNumber":44,"isOrphan":true},{"type":"LineComment","text":" reset email","lineNumber":248,"isOrphan":false},{"type":"LineComment","text":" test user's participant type is in the list that comment giver's name is shown to","lineNumber":401,"isOrphan":false},{"type":"LineComment","text":" test comment visibility to recipient's team","lineNumber":686,"isOrphan":false},{"type":"LineComment","text":" comment visibility follows feedback question's visibility","lineNumber":750,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"public void testCreateFeedbackResponseComment() throws Exception","name":"testCreateFeedbackResponseComment","type":"void","javadoc":null},{"fullQualified":"public void testCreateFeedbackResponseComment_invalidCommentGiverType_exceptionShouldBeThrown()","name":"testCreateFeedbackResponseComment_invalidCommentGiverType_exceptionShouldBeThrown","type":"void","javadoc":null},{"fullQualified":"public void testCreateFeedbackResponseComment_unknownFeedbackParticipant_exceptionShouldBeThrown()","name":"testCreateFeedbackResponseComment_unknownFeedbackParticipant_exceptionShouldBeThrown","type":"void","javadoc":null},{"fullQualified":"public void testCreateFeedbackResponseComment_invalidVisibilitySettings_exceptionShouldBeThrown()","name":"testCreateFeedbackResponseComment_invalidVisibilitySettings_exceptionShouldBeThrown","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponseComments()","name":"testGetFeedbackResponseComments","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponseComment() throws Exception","name":"testUpdateFeedbackResponseComment","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseComment()","name":"testDeleteFeedbackResponseComment","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseComments_deleteByResponseId()","name":"testDeleteFeedbackResponseComments_deleteByResponseId","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseComments_deleteByCourseId()","name":"testDeleteFeedbackResponseComments_deleteByCourseId","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponseCommentForSessionInSection_noSectionName_shouldReturnCommentsInSession()","name":"testGetFeedbackResponseCommentForSessionInSection_noSectionName_shouldReturnCommentsInSession","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponseCommentForSessionInSection_withSectionName_shouldReturnCommentsInSection()","name":"testGetFeedbackResponseCommentForSessionInSection_withSectionName_shouldReturnCommentsInSection","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponseCommentsForQuestionInSection_noSectionName_shouldReturnCommentsForQuestion()","name":"testGetFeedbackResponseCommentsForQuestionInSection_noSectionName_shouldReturnCommentsForQuestion","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponseCommentsForQuestionInSection_withSectionName_shouldReturnCommentsForQuestion()","name":"testGetFeedbackResponseCommentsForQuestionInSection_withSectionName_shouldReturnCommentsForQuestion","type":"void","javadoc":null},{"fullQualified":"public void testIsNameVisibleToUser()","name":"testIsNameVisibleToUser","type":"void","javadoc":null},{"fullQualified":"public void testIsResponseCommentVisibleForUser()","name":"testIsResponseCommentVisibleForUser","type":"void","javadoc":null},{"fullQualified":"private void verifyNullFromGetFrCommentForSession(FeedbackResponseCommentAttributes frComment)","name":"verifyNullFromGetFrCommentForSession","type":"void","javadoc":null},{"fullQualified":"private void verifyNullFromGetFrComment(FeedbackResponseCommentAttributes frComment)","name":"verifyNullFromGetFrComment","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseCommentAttributes restoreFrCommentFromDataBundle(String existingFrCommentInDataBundle)","name":"restoreFrCommentFromDataBundle","type":"FeedbackResponseCommentAttributes","javadoc":null},{"fullQualified":"private void restoreFrCommentIdFromExistingOne(FeedbackResponseCommentAttributes frComment, FeedbackResponseCommentAttributes existingFrComment)","name":"restoreFrCommentIdFromExistingOne","type":"void","javadoc":null},{"fullQualified":"private String getQuestionIdInDataBundle(String questionInDataBundle)","name":"getQuestionIdInDataBundle","type":"String","javadoc":null},{"fullQualified":"private String getResponseIdInDataBundle(String responseInDataBundle, String questionInDataBundle)","name":"getResponseIdInDataBundle","type":"String","javadoc":null}],"allConstructors":[]},{"name":"FeedbackResponsesLogicTest","fullyQualifiedName":"teammates.logic.core.FeedbackResponsesLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" TODO: check for cases where a person is both a student and an instructor","lineNumber":1443,"isOrphan":true},{"type":"LineComment","text":" test data is refreshed before each test case","lineNumber":50,"isOrphan":true},{"type":"LineComment","text":" extra test data used on top of typical data bundle","lineNumber":60,"isOrphan":false},{"type":"LineComment","text":" Cannot have invalid params as all possible invalid params","lineNumber":167,"isOrphan":true},{"type":"LineComment","text":" are copied over from an existing response.","lineNumber":168,"isOrphan":true},{"type":"LineComment","text":" Student 4 has 1 responses to him from team members,","lineNumber":184,"isOrphan":true},{"type":"LineComment","text":" 1 response from him a team member, and","lineNumber":185,"isOrphan":true},{"type":"LineComment","text":" All these responses should be gone after he changes teams","lineNumber":213,"isOrphan":true},{"type":"LineComment","text":" Non-team response should remain","lineNumber":229,"isOrphan":true},{"type":"LineComment","text":" 1 team response from him to another team.","lineNumber":186,"isOrphan":false},{"type":"LineComment","text":" Add one more non-team response","lineNumber":199,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets all responses for a recipient of a question.\n     ","lineNumber":237,"isOrphan":false},{"type":"LineComment","text":" make sure it's the last response by the student","lineNumber":252,"isOrphan":false},{"type":"LineComment","text":" the response is given by the student","lineNumber":257,"isOrphan":false},{"type":"LineComment","text":" make sure it's not the last response by the student","lineNumber":275,"isOrphan":false},{"type":"LineComment","text":" the response is given by the student","lineNumber":280,"isOrphan":false},{"type":"LineComment","text":" Student 1 currently has 11 responses to him and 2 from himself.","lineNumber":314,"isOrphan":true},{"type":"LineComment","text":" Student 1 currently has 1 response comment for responses from instructor to him","lineNumber":315,"isOrphan":true},{"type":"LineComment","text":" and 1 response comment from responses from himself.","lineNumber":316,"isOrphan":false},{"type":"LineComment","text":" student's comment","lineNumber":335,"isOrphan":false},{"type":"LineComment","text":" instructor comment","lineNumber":337,"isOrphan":false},{"type":"LineComment","text":" Only members of the recipient team should be able to see the recipient name","lineNumber":446,"isOrphan":false},{"type":"LineComment","text":" stu -> self : instructors","lineNumber":478,"isOrphan":false},{"type":"LineComment","text":" stu -> stu : instructors, receiver","lineNumber":480,"isOrphan":false},{"type":"LineComment","text":" self -> none : other students, instructors","lineNumber":482,"isOrphan":false},{"type":"LineComment","text":" team -> ins : instructors, other students","lineNumber":484,"isOrphan":false},{"type":"LineComment","text":" stu -> stu in same section : own team members, receiver team members","lineNumber":486,"isOrphan":false},{"type":"LineComment","text":" ins -> ins : -","lineNumber":488,"isOrphan":false},{"type":"LineComment","text":" ins -> ins team : instructors","lineNumber":490,"isOrphan":false},{"type":"LineComment","text":" team -> team : receiver","lineNumber":492,"isOrphan":false},{"type":"LineComment","text":" stu -> own team mem : receiver, own team members","lineNumber":494,"isOrphan":false},{"type":"LineComment","text":" ins -> stu : receiver, instructors, other students, receiver's team members","lineNumber":496,"isOrphan":false},{"type":"LineComment","text":" stu -> ins : receiver","lineNumber":498,"isOrphan":false},{"type":"LineComment","text":" stu -> own team : own team members, instructors","lineNumber":500,"isOrphan":false},{"type":"LineComment","text":" stu -> team : other students","lineNumber":502,"isOrphan":false},{"type":"LineComment","text":" team -> stu in same section : instructors","lineNumber":504,"isOrphan":false},{"type":"LineComment","text":" team -> team in same section : receiver","lineNumber":506,"isOrphan":false},{"type":"LineComment","text":" stu -> team in same section : instructors","lineNumber":508,"isOrphan":false},{"type":"LineComment","text":" ins -> team : instructors","lineNumber":510,"isOrphan":false},{"type":"LineComment","text":" stu1 -> stu1 (self feedback)","lineNumber":513,"isOrphan":false},{"type":"LineComment","text":" stu5 -> stu5 (self feedback)","lineNumber":515,"isOrphan":false},{"type":"LineComment","text":" stu2 -> stu5","lineNumber":517,"isOrphan":false},{"type":"LineComment","text":" stu5 -> stu2","lineNumber":519,"isOrphan":false},{"type":"LineComment","text":" stu3 -> stu2","lineNumber":521,"isOrphan":false},{"type":"LineComment","text":" ins1 -> General","lineNumber":523,"isOrphan":false},{"type":"LineComment","text":" team2 -> ins2","lineNumber":525,"isOrphan":false},{"type":"LineComment","text":" team3 -> ins2","lineNumber":527,"isOrphan":false},{"type":"LineComment","text":" stu1 -> stu6","lineNumber":529,"isOrphan":false},{"type":"LineComment","text":" ins1 -> ins2","lineNumber":531,"isOrphan":false},{"type":"LineComment","text":" ins2 -> ins team","lineNumber":533,"isOrphan":false},{"type":"LineComment","text":" team1 -> team2","lineNumber":535,"isOrphan":false},{"type":"LineComment","text":" stu4 -> stu3","lineNumber":537,"isOrphan":false},{"type":"LineComment","text":" ins1 -> stu3","lineNumber":539,"isOrphan":false},{"type":"LineComment","text":" ins6 -> stu5","lineNumber":541,"isOrphan":false},{"type":"LineComment","text":" stu1 -> ins1","lineNumber":543,"isOrphan":false},{"type":"LineComment","text":" stu1 -> ins4","lineNumber":545,"isOrphan":false},{"type":"LineComment","text":" stu6 -> team3 (own team)","lineNumber":547,"isOrphan":false},{"type":"LineComment","text":" stu5 -> team2 (own team)","lineNumber":549,"isOrphan":false},{"type":"LineComment","text":" stu1 -> team3","lineNumber":551,"isOrphan":false},{"type":"LineComment","text":" team1 -> stu7","lineNumber":553,"isOrphan":false},{"type":"LineComment","text":" team3 -> team1","lineNumber":555,"isOrphan":false},{"type":"LineComment","text":" stu8 -> team1","lineNumber":557,"isOrphan":false},{"type":"LineComment","text":" ins2 -> team2","lineNumber":559,"isOrphan":false},{"type":"LineComment","text":" receiver's team members include receiver","lineNumber":611,"isOrphan":false},{"type":"LineComment","text":" other students include receiver","lineNumber":620,"isOrphan":false},{"type":"LineComment","text":" other students include giver's team members","lineNumber":642,"isOrphan":false},{"type":"LineComment","text":" invalid usage","lineNumber":651,"isOrphan":false},{"type":"LineComment","text":" \"general\" involved is checked as a section","lineNumber":740,"isOrphan":false},{"type":"LineComment","text":" \"instructors\" involved is checked as a section","lineNumber":745,"isOrphan":false},{"type":"LineComment","text":" the responses also have some associated comments","lineNumber":759,"isOrphan":false},{"type":"LineComment","text":" the student has some responses","lineNumber":767,"isOrphan":false},{"type":"LineComment","text":" responses should be deleted","lineNumber":780,"isOrphan":false},{"type":"LineComment","text":" comments should also be deleted","lineNumber":788,"isOrphan":false},{"type":"LineComment","text":" the student no longer has responses for the session","lineNumber":795,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":805,"isOrphan":false},{"type":"LineComment","text":" the response has comments","lineNumber":812,"isOrphan":false},{"type":"LineComment","text":" associated comments are deleted","lineNumber":818,"isOrphan":false},{"type":"LineComment","text":" test that responses are deleted","lineNumber":826,"isOrphan":false},{"type":"LineComment","text":" test that responses from other courses are unaffected","lineNumber":841,"isOrphan":false},{"type":"LineComment","text":" this is the only response the student has given for the session","lineNumber":850,"isOrphan":false},{"type":"LineComment","text":" the student has answers for the session","lineNumber":854,"isOrphan":false},{"type":"LineComment","text":" there is no student X as respondents","lineNumber":861,"isOrphan":false},{"type":"LineComment","text":" this is the only response the instructor has given for the session","lineNumber":871,"isOrphan":false},{"type":"LineComment","text":" the instructor has answers for the session","lineNumber":875,"isOrphan":false},{"type":"LineComment","text":" there is not instructor X in instructor respondents","lineNumber":882,"isOrphan":false},{"type":"LineComment","text":" giver is student","lineNumber":892,"isOrphan":false},{"type":"LineComment","text":" student is the recipient","lineNumber":895,"isOrphan":false},{"type":"LineComment","text":" this is the only response the giver has given for the session","lineNumber":898,"isOrphan":false},{"type":"LineComment","text":" the student has answers for the session","lineNumber":902,"isOrphan":false},{"type":"LineComment","text":" after the giver is removed from the course","lineNumber":907,"isOrphan":false},{"type":"LineComment","text":" there is no student X as respondents","lineNumber":911,"isOrphan":false},{"type":"LineComment","text":" giver is instructor","lineNumber":921,"isOrphan":false},{"type":"LineComment","text":" student is the recipient","lineNumber":924,"isOrphan":false},{"type":"LineComment","text":" this is the only response the instructor has given for the session","lineNumber":927,"isOrphan":false},{"type":"LineComment","text":" the instructor has answers for the session","lineNumber":931,"isOrphan":false},{"type":"LineComment","text":" after the giver is removed from the course","lineNumber":936,"isOrphan":false},{"type":"LineComment","text":" there is no instructor X as respondents","lineNumber":940,"isOrphan":false},{"type":"LineComment","text":" both responses got some comments","lineNumber":988,"isOrphan":false},{"type":"LineComment","text":" responses received by the team should be deleted","lineNumber":994,"isOrphan":false},{"type":"LineComment","text":" their associated comments should be deleted","lineNumber":998,"isOrphan":false},{"type":"LineComment","text":" the following two responses are given by student4InCourse1 as a representative of his team","lineNumber":1009,"isOrphan":false},{"type":"LineComment","text":" update the response's giver to the team name","lineNumber":1011,"isOrphan":false},{"type":"LineComment","text":" update the response's giver to the team name","lineNumber":1032,"isOrphan":false},{"type":"LineComment","text":" both responses got some comments","lineNumber":1057,"isOrphan":false},{"type":"LineComment","text":" responses received by the team should be deleted","lineNumber":1063,"isOrphan":false},{"type":"LineComment","text":" their associated comments should be deleted","lineNumber":1067,"isOrphan":false},{"type":"LineComment","text":" extra test data used on top of typical data bundle","lineNumber":1074,"isOrphan":false},{"type":"LineComment","text":" Alice will see 3 responses","lineNumber":1080,"isOrphan":false},{"type":"LineComment","text":" Benny will see 3 responses","lineNumber":1089,"isOrphan":false},{"type":"LineComment","text":" Charlie will see 2 responses","lineNumber":1097,"isOrphan":false},{"type":"LineComment","text":" Danny will see 2 responses","lineNumber":1105,"isOrphan":false},{"type":"LineComment","text":" Emily will see 1 response","lineNumber":1113,"isOrphan":false},{"type":"LineComment","text":" Student can see responses: q1r1, q2r1,3, q3r1, qr4r2-3, q5r1, q7r1-2, q8r1-2","lineNumber":1135,"isOrphan":true},{"type":"LineComment","text":" We don't check the actual IDs as this is also implicitly tested","lineNumber":1136,"isOrphan":true},{"type":"LineComment","text":" Test result bundle for student1","lineNumber":1129,"isOrphan":false},{"type":"LineComment","text":" later when checking the visibility table.","lineNumber":1137,"isOrphan":false},{"type":"LineComment","text":" student should not see missing responses","lineNumber":1149,"isOrphan":false},{"type":"LineComment","text":" student cannot see q6 because there is no viewable response","lineNumber":1151,"isOrphan":false},{"type":"LineComment","text":" Test the generated response visibilityTable for userNames.","lineNumber":1156,"isOrphan":false},{"type":"LineComment","text":" no entry in comment visibility table","lineNumber":1185,"isOrphan":false},{"type":"LineComment","text":" Instructor can see responses: q3r1, q6r1","lineNumber":1203,"isOrphan":true},{"type":"LineComment","text":" We don't check the actual IDs as this is also implicitly tested","lineNumber":1204,"isOrphan":true},{"type":"LineComment","text":" Test result bundle for instructor1","lineNumber":1197,"isOrphan":false},{"type":"LineComment","text":" later when checking the visibility table.","lineNumber":1205,"isOrphan":false},{"type":"LineComment","text":" instructor should not see missing responses","lineNumber":1217,"isOrphan":false},{"type":"LineComment","text":" Test the generated response visibilityTable for userNames.","lineNumber":1224,"isOrphan":false},{"type":"LineComment","text":" no entry in comment visibility table","lineNumber":1235,"isOrphan":false},{"type":"LineComment","text":" no section specified","lineNumber":1245,"isOrphan":false},{"type":"LineComment","text":" section specified","lineNumber":1254,"isOrphan":false},{"type":"LineComment","text":" Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1","lineNumber":1276,"isOrphan":false},{"type":"LineComment","text":" Instructor should still see all questions","lineNumber":1289,"isOrphan":false},{"type":"LineComment","text":" Test the generated response visibilityTable for userNames.","lineNumber":1294,"isOrphan":false},{"type":"LineComment","text":" no entry in comment visibility table","lineNumber":1321,"isOrphan":false},{"type":"LineComment","text":" Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1","lineNumber":1338,"isOrphan":true},{"type":"LineComment","text":" after filtering by section, the number of responses seen by instructor will differ.","lineNumber":1339,"isOrphan":true},{"type":"LineComment","text":" Responses viewed by instructor after filtering: q2r1-3, q3r1, q4r2-3, q5r1","lineNumber":1340,"isOrphan":false},{"type":"LineComment","text":" Instructor should still see all questions","lineNumber":1353,"isOrphan":false},{"type":"LineComment","text":" Test the generated response visibilityTable for userNames.","lineNumber":1358,"isOrphan":false},{"type":"LineComment","text":" no entry in comment visibility table","lineNumber":1374,"isOrphan":false},{"type":"LineComment","text":" Equal to session result fetch by both type","lineNumber":1428,"isOrphan":false},{"type":"LineComment","text":" create a \"null\" response to simulate trying to get a null student's response","lineNumber":1452,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"public void testAreThereResponsesForQuestion()","name":"testAreThereResponsesForQuestion","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponseCascade() throws Exception","name":"testUpdateFeedbackResponseCascade","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponsesForChangingTeam_typicalData_shouldDoCascadeDeletion() throws Exception","name":"testUpdateFeedbackResponsesForChangingTeam_typicalData_shouldDoCascadeDeletion","type":"void","javadoc":null},{"fullQualified":"private List<FeedbackResponseAttributes> getFeedbackResponsesForReceiverForQuestion(String questionId, String receiver)","name":"getFeedbackResponsesForReceiverForQuestion","type":"List<FeedbackResponseAttributes>","javadoc":"\n     * Gets all responses for a recipient of a question.\n     "},{"fullQualified":"public void testUpdateFeedbackResponsesForChangingTeam_deleteLastResponse_decreaseResponseRate()","name":"testUpdateFeedbackResponsesForChangingTeam_deleteLastResponse_decreaseResponseRate","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponsesForChangingTeam_noResponseShouldBeDeleted_shouldReaminSameResponseRate()","name":"testUpdateFeedbackResponsesForChangingTeam_noResponseShouldBeDeleted_shouldReaminSameResponseRate","type":"void","javadoc":null},{"fullQualified":"private int numResponsesFromGiverInSession(String studentEmail, String sessionName, String courseId)","name":"numResponsesFromGiverInSession","type":"int","javadoc":null},{"fullQualified":"private int getResponseRate(String sessionName, String courseId)","name":"getResponseRate","type":"int","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponsesForChangingEmail() throws Exception","name":"testUpdateFeedbackResponsesForChangingEmail","type":"void","javadoc":null},{"fullQualified":"public void testIsNameVisibleTo()","name":"testIsNameVisibleTo","type":"void","javadoc":null},{"fullQualified":"public void testIsResponseVisibleForUser()","name":"testIsResponseVisibleForUser","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_shouldDeleteRelatedResponses()","name":"testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_shouldDeleteRelatedResponses","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseCascade()","name":"testDeleteFeedbackResponseCascade","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponses_byCourseId()","name":"testDeleteFeedbackResponses_byCourseId","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponsesForQuestionCascade_studentsQuestion_shouldUpdateRespondents()","name":"testDeleteFeedbackResponsesForQuestionCascade_studentsQuestion_shouldUpdateRespondents","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponsesForQuestionCascade_instructorsQuestion_shouldUpdateRespondents()","name":"testDeleteFeedbackResponsesForQuestionCascade_instructorsQuestion_shouldUpdateRespondents","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_giverIsStudent_shouldUpdateRespondents()","name":"testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_giverIsStudent_shouldUpdateRespondents","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_giverIsInstructor_shouldUpdateRespondents()","name":"testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_giverIsInstructor_shouldUpdateRespondents","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_shouldDeleteRelevantResponsesAsRecipient() throws Exception","name":"testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_shouldDeleteRelevantResponsesAsRecipient","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_shouldDeleteRelevantResponsesAsGiver() throws Exception","name":"testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_shouldDeleteRelevantResponsesAsGiver","type":"void","javadoc":null},{"fullQualified":"public void testGetSessionResultsForUser_studentSpecificQuestion_shouldHaveCorrectResponsesFiltered()","name":"testGetSessionResultsForUser_studentSpecificQuestion_shouldHaveCorrectResponsesFiltered","type":"void","javadoc":null},{"fullQualified":"public void testGetSessionResultsForUser_studentAllQuestions_shouldGenerateCorrectBundle()","name":"testGetSessionResultsForUser_studentAllQuestions_shouldGenerateCorrectBundle","type":"void","javadoc":null},{"fullQualified":"public void testGetSessionResultsForUser_instructor_shouldGenerateCorrectBundle()","name":"testGetSessionResultsForUser_instructor_shouldGenerateCorrectBundle","type":"void","javadoc":null},{"fullQualified":"public void testGetSessionResultsForCourse_specificQuestion_shouldHaveCorrectResponsesFiltered()","name":"testGetSessionResultsForCourse_specificQuestion_shouldHaveCorrectResponsesFiltered","type":"void","javadoc":null},{"fullQualified":"public void testGetSessionResultsForCourse_allQuestions_shouldGenerateCorrectBundle()","name":"testGetSessionResultsForCourse_allQuestions_shouldGenerateCorrectBundle","type":"void","javadoc":null},{"fullQualified":"public void testGetSessionResultsForCourse_allQuestionsSpecificSection_shouldGenerateCorrectBundle()","name":"testGetSessionResultsForCourse_allQuestionsSpecificSection_shouldGenerateCorrectBundle","type":"void","javadoc":null},{"fullQualified":"public void testGetSessionResultsForCourse_responseFetchByGiverOrReceiverOnly_shouldGenerateCorrectBundle()","name":"testGetSessionResultsForCourse_responseFetchByGiverOrReceiverOnly_shouldGenerateCorrectBundle","type":"void","javadoc":null},{"fullQualified":"public void testGetSessionResultsForCourse_splitResponseFetchByGiverAndReceiver_shouldGenerateCorrectBundle()","name":"testGetSessionResultsForCourse_splitResponseFetchByGiverAndReceiver_shouldGenerateCorrectBundle","type":"void","javadoc":null},{"fullQualified":"public void testGetSessionResultsForUser_orphanResponseInDB_shouldStillHandleCorrectly() throws Exception","name":"testGetSessionResultsForUser_orphanResponseInDB_shouldStillHandleCorrectly","type":"void","javadoc":null},{"fullQualified":"private FeedbackQuestionAttributes getQuestionFromDatabase(DataBundle dataBundle, String jsonId)","name":"getQuestionFromDatabase","type":"FeedbackQuestionAttributes","javadoc":null},{"fullQualified":"private FeedbackQuestionAttributes getQuestionFromDatabase(String jsonId)","name":"getQuestionFromDatabase","type":"FeedbackQuestionAttributes","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponseFromDatabase(DataBundle dataBundle, String jsonId)","name":"getResponseFromDatabase","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponseFromDatabase(String jsonId)","name":"getResponseFromDatabase","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"private String getResponseId(String jsonId, DataBundle bundle)","name":"getResponseId","type":"String","javadoc":null},{"fullQualified":"private List<FeedbackResponseCommentAttributes> getFeedbackResponseCommentsForResponsesFromDatabase(Set<String> responseIds)","name":"getFeedbackResponseCommentsForResponsesFromDatabase","type":"List<FeedbackResponseCommentAttributes>","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionsLogicTest","fullyQualifiedName":"teammates.logic.core.FeedbackSessionsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" see beforeMethod()","lineNumber":47,"isOrphan":true},{"type":"LineComment","text":" delete existing feedback session directly","lineNumber":69,"isOrphan":false},{"type":"LineComment","text":" delete feedback session in recycle bin","lineNumber":97,"isOrphan":false},{"type":"LineComment","text":" they are in the same course","lineNumber":119,"isOrphan":false},{"type":"LineComment","text":" delete all session under the course","lineNumber":125,"isOrphan":false},{"type":"LineComment","text":" they should gone","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":" sessions in different courses should not be affected","lineNumber":136,"isOrphan":false},{"type":"LineComment","text":" restore the new course from Recycle Bin, and delete the newly added session as","lineNumber":225,"isOrphan":true},{"type":"LineComment","text":" wait for very briefly so that the above session will be within the time limit","lineNumber":211,"isOrphan":false},{"type":"LineComment","text":" removeAndRestoreTypicalDataInDatabase() wont do it","lineNumber":226,"isOrphan":false},{"type":"LineComment","text":" restore the new course from Recycle Bin, and delete the newly added session as","lineNumber":257,"isOrphan":true},{"type":"LineComment","text":" removeAndRestoreTypicalDataInDatabase() wont do it","lineNumber":258,"isOrphan":false},{"type":"LineComment","text":" restore the new course from Recycle Bin, and delete the newly added session as","lineNumber":297,"isOrphan":true},{"type":"LineComment","text":" wait for very briefly so that the above session will be within the time limit","lineNumber":278,"isOrphan":false},{"type":"LineComment","text":" wait for very briefly so that the above session will be within the time limit","lineNumber":290,"isOrphan":false},{"type":"LineComment","text":" removeAndRestoreTypicalDataInDatabase() wont do it","lineNumber":298,"isOrphan":false},{"type":"LineComment","text":" restore the new course from Recycle Bin, and delete the newly added session as","lineNumber":384,"isOrphan":true},{"type":"LineComment","text":" removeAndRestoreTypicalDataInDatabase() wont do it","lineNumber":385,"isOrphan":false},{"type":"LineComment","text":" Create a question under the session to test for cascading during delete.","lineNumber":483,"isOrphan":false},{"type":"LineComment","text":" updated session not open, status set to false","lineNumber":595,"isOrphan":false},{"type":"LineComment","text":" updated session not open, status set to false","lineNumber":613,"isOrphan":false},{"type":"LineComment","text":" updated session opening soon, opening soon email shouldn't be sent anymore","lineNumber":616,"isOrphan":false},{"type":"LineComment","text":" updated session open, status set to true","lineNumber":632,"isOrphan":false},{"type":"LineComment","text":" opening soon email shouldn't be sent anymore","lineNumber":635,"isOrphan":false},{"type":"LineComment","text":" updated session closed, status set to true","lineNumber":654,"isOrphan":false},{"type":"LineComment","text":"  updated session not closed, status set to false","lineNumber":672,"isOrphan":false},{"type":"LineComment","text":" updated session not closed, status set to false","lineNumber":690,"isOrphan":false},{"type":"LineComment","text":" closed in 10 minutes, should not send closing email anymore","lineNumber":693,"isOrphan":false},{"type":"LineComment","text":" updated session published, status set to true","lineNumber":711,"isOrphan":false},{"type":"LineComment","text":" updated session not published, status set to false","lineNumber":726,"isOrphan":false},{"type":"LineComment","text":" The instructor should have selective deadlines.","lineNumber":811,"isOrphan":false},{"type":"LineComment","text":" The instructor should have no more selective deadlines.","lineNumber":825,"isOrphan":false},{"type":"LineComment","text":" The student should have selective deadlines.","lineNumber":854,"isOrphan":false},{"type":"LineComment","text":" The student should have no more selective deadlines.","lineNumber":868,"isOrphan":false},{"type":"LineComment","text":" set as manual publish","lineNumber":892,"isOrphan":true},{"type":"LineComment","text":" Set real time of publishing","lineNumber":903,"isOrphan":false},{"type":"LineComment","text":" student who answered team question","lineNumber":970,"isOrphan":false},{"type":"LineComment","text":" student whose teammate answered team question","lineNumber":974,"isOrphan":false},{"type":"LineComment","text":" student whose team has not answered team question","lineNumber":978,"isOrphan":false},{"type":"LineComment","text":" student who did not answer any question","lineNumber":985,"isOrphan":false},{"type":"LineComment","text":" student who answered only team question","lineNumber":989,"isOrphan":false},{"type":"LineComment","text":" student who answered only individual question","lineNumber":993,"isOrphan":false},{"type":"LineComment","text":" student who answered both team and individual question","lineNumber":997,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void beforeMethod()","name":"beforeMethod","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSessionCascade_deleteSessionNotInRecycleBin_shouldDoCascadeDeletion()","name":"testDeleteFeedbackSessionCascade_deleteSessionNotInRecycleBin_shouldDoCascadeDeletion","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSessionCascade_deleteSessionInRecycleBin_shouldDoCascadeDeletion() throws Exception","name":"testDeleteFeedbackSessionCascade_deleteSessionInRecycleBin_shouldDoCascadeDeletion","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSessions_byCourseId_shouldDeleteAllSessionsUnderCourse()","name":"testDeleteFeedbackSessions_byCourseId_shouldDeleteAllSessionsUnderCourse","type":"void","javadoc":null},{"fullQualified":"public void testFeedbackSessionNotification() throws Exception","name":"testFeedbackSessionNotification","type":"void","javadoc":null},{"fullQualified":"public void testAll() throws Exception","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void testGetSoftDeletedFeedbackSessionsListForInstructors()","name":"testGetSoftDeletedFeedbackSessionsListForInstructors","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackSessionsClosingWithinTimeLimit() throws Exception","name":"testGetFeedbackSessionsClosingWithinTimeLimit","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackSessionsClosedWithinThePastHour() throws Exception","name":"testGetFeedbackSessionsClosedWithinThePastHour","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackSessionsOpeningWithinTimeLimit() throws Exception","name":"testGetFeedbackSessionsOpeningWithinTimeLimit","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackSessionsWhichNeedOpenMailsToBeSent() throws Exception","name":"testGetFeedbackSessionsWhichNeedOpenMailsToBeSent","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackSessionWhichNeedPublishedEmailsToBeSent() throws Exception","name":"testGetFeedbackSessionWhichNeedPublishedEmailsToBeSent","type":"void","javadoc":null},{"fullQualified":"private void testCreateAndDeleteFeedbackSession() throws Exception","name":"testCreateAndDeleteFeedbackSession","type":"void","javadoc":null},{"fullQualified":"private void testIsFeedbackSessionViewableToUserType()","name":"testIsFeedbackSessionViewableToUserType","type":"void","javadoc":null},{"fullQualified":"private void testIsFeedbackSessionForUserTypeToAnswer()","name":"testIsFeedbackSessionForUserTypeToAnswer","type":"void","javadoc":null},{"fullQualified":"private void testUpdateFeedbackSession() throws Exception","name":"testUpdateFeedbackSession","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackSession_shouldAdjustEmailSendingStatusAccordingly() throws Exception","name":"testUpdateFeedbackSession_shouldAdjustEmailSendingStatusAccordingly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackSessionsInstructorDeadlinesWithNewEmail()","name":"testUpdateFeedbackSessionsInstructorDeadlinesWithNewEmail","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackSessionsStudentDeadlinesWithNewEmail()","name":"testUpdateFeedbackSessionsStudentDeadlinesWithNewEmail","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSessionsDeadlinesForInstructor()","name":"testDeleteFeedbackSessionsDeadlinesForInstructor","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSessionsDeadlinesForStudent()","name":"testDeleteFeedbackSessionsDeadlinesForStudent","type":"void","javadoc":null},{"fullQualified":"private void testPublishUnpublishFeedbackSession() throws Exception","name":"testPublishUnpublishFeedbackSession","type":"void","javadoc":null},{"fullQualified":"private void testIsFeedbackSessionAttemptedByInstructor()","name":"testIsFeedbackSessionAttemptedByInstructor","type":"void","javadoc":null},{"fullQualified":"private void testIsFeedbackSessionAttemptedByStudent()","name":"testIsFeedbackSessionAttemptedByStudent","type":"void","javadoc":null},{"fullQualified":"private FeedbackSessionAttributes getNewFeedbackSession()","name":"getNewFeedbackSession","type":"FeedbackSessionAttributes","javadoc":null},{"fullQualified":"private void unpublishAllSessions() throws Exception","name":"unpublishAllSessions","type":"void","javadoc":null},{"fullQualified":"private void testMoveFeedbackSessionToRecycleBin() throws Exception","name":"testMoveFeedbackSessionToRecycleBin","type":"void","javadoc":null},{"fullQualified":"private void testRestoreFeedbackSessionFromRecycleBin() throws Exception","name":"testRestoreFeedbackSessionFromRecycleBin","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorsLogicTest","fullyQualifiedName":"teammates.logic.core.InstructorsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" test data is refreshed before each test case","lineNumber":45,"isOrphan":true},{"type":"LineComment","text":" should not throw an exception","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":" responses are updated","lineNumber":375,"isOrphan":false},{"type":"LineComment","text":" comment giver are updated","lineNumber":385,"isOrphan":false},{"type":"LineComment","text":" last editor is updated","lineNumber":392,"isOrphan":false},{"type":"LineComment","text":" the instructors has some responses in course","lineNumber":565,"isOrphan":false},{"type":"LineComment","text":" The instructor should have selective deadlines.","lineNumber":569,"isOrphan":false},{"type":"LineComment","text":" there should be no response of the instructor","lineNumber":584,"isOrphan":false},{"type":"LineComment","text":" The instructor should have no more selective deadlines.","lineNumber":588,"isOrphan":false},{"type":"LineComment","text":" the course is not empty at the beginning","lineNumber":627,"isOrphan":false},{"type":"LineComment","text":" other course is not affected","lineNumber":637,"isOrphan":false},{"type":"LineComment","text":" this is an archived instructor","lineNumber":653,"isOrphan":false},{"type":"LineComment","text":" the instructor should be deleted also","lineNumber":659,"isOrphan":false},{"type":"LineComment","text":" make instructor1OfCourse1 to have the same googleId with instructor1OfCourse2","lineNumber":674,"isOrphan":false},{"type":"LineComment","text":" instructor1OfCourse1 has some responses in course","lineNumber":685,"isOrphan":false},{"type":"LineComment","text":" the two instructors have the same googleId but in different courses","lineNumber":699,"isOrphan":false},{"type":"LineComment","text":" delete instructors for google ID","lineNumber":703,"isOrphan":false},{"type":"LineComment","text":" the two instructors should gone","lineNumber":706,"isOrphan":false},{"type":"LineComment","text":" instructor1OfCourse1's responses should be deleted also","lineNumber":709,"isOrphan":false},{"type":"LineComment","text":" Generate ArrayList<String> of emails of all coOwners in course from data bundle","lineNumber":739,"isOrphan":false},{"type":"LineComment","text":" Generate ArrayList<String> of emails of all coOwners from instructorsLogic.getCoOwnersForCourse","lineNumber":748,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll() throws Exception","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void testAddInstructor() throws Exception","name":"testAddInstructor","type":"void","javadoc":null},{"fullQualified":"private void testVerifyAllInstructorsExistInCourse() throws Exception","name":"testVerifyAllInstructorsExistInCourse","type":"void","javadoc":null},{"fullQualified":"private void testGetInstructorForEmail()","name":"testGetInstructorForEmail","type":"void","javadoc":null},{"fullQualified":"private void testGetInstructorForGoogleId()","name":"testGetInstructorForGoogleId","type":"void","javadoc":null},{"fullQualified":"private void testGetInstructorForRegistrationKey()","name":"testGetInstructorForRegistrationKey","type":"void","javadoc":null},{"fullQualified":"private void testGetInstructorsForCourse() throws Exception","name":"testGetInstructorsForCourse","type":"void","javadoc":null},{"fullQualified":"private void testGetInstructorsForGoogleId()","name":"testGetInstructorsForGoogleId","type":"void","javadoc":null},{"fullQualified":"private void testVerifyAtLeastOneInstructorIsDisplayed() throws Exception","name":"testVerifyAtLeastOneInstructorIsDisplayed","type":"void","javadoc":null},{"fullQualified":"public void testUpdateInstructorByGoogleIdCascade_shouldCascadeUpdateToFeedbackSessions() throws Exception","name":"testUpdateInstructorByGoogleIdCascade_shouldCascadeUpdateToFeedbackSessions","type":"void","javadoc":null},{"fullQualified":"public void testUpdateInstructorByGoogleIdCascade_shouldDoCascadeUpdateToCommentsAndResponses() throws Exception","name":"testUpdateInstructorByGoogleIdCascade_shouldDoCascadeUpdateToCommentsAndResponses","type":"void","javadoc":null},{"fullQualified":"private void testUpdateInstructorByGoogleIdCascade() throws Exception","name":"testUpdateInstructorByGoogleIdCascade","type":"void","javadoc":null},{"fullQualified":"private void testUpdateInstructorByEmail() throws Exception","name":"testUpdateInstructorByEmail","type":"void","javadoc":null},{"fullQualified":"public void testDeleteInstructorCascade()","name":"testDeleteInstructorCascade","type":"void","javadoc":null},{"fullQualified":"public void testDeleteInstructors_byCourseId_shouldDeleteInstructorsAssociatedWithTheCourse()","name":"testDeleteInstructors_byCourseId_shouldDeleteInstructorsAssociatedWithTheCourse","type":"void","javadoc":null},{"fullQualified":"public void testDeleteInstructorsForGoogleIdCascade_archivedInstructor_shouldDeleteAlso() throws Exception","name":"testDeleteInstructorsForGoogleIdCascade_archivedInstructor_shouldDeleteAlso","type":"void","javadoc":null},{"fullQualified":"public void testDeleteInstructorsForGoogleIdCascade() throws Exception","name":"testDeleteInstructorsForGoogleIdCascade","type":"void","javadoc":null},{"fullQualified":"private void verifySameInstructor(InstructorAttributes instructor1, InstructorAttributes instructor2)","name":"verifySameInstructor","type":"void","javadoc":null},{"fullQualified":"private void testGetCoOwnersForCourse()","name":"testGetCoOwnersForCourse","type":"void","javadoc":null},{"fullQualified":"private void testUpdateToEnsureValidityOfInstructorsForTheCourse()","name":"testUpdateToEnsureValidityOfInstructorsForTheCourse","type":"void","javadoc":null},{"fullQualified":"private void testRegenerateInstructorRegistrationKey() throws Exception","name":"testRegenerateInstructorRegistrationKey","type":"void","javadoc":null}],"allConstructors":[]},{"name":"NotificationsLogicTest","fullyQualifiedName":"teammates.logic.core.NotificationsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" test data is refreshed before each test case","lineNumber":30,"isOrphan":true},{"type":"LineComment","text":" include all tests that do not modify the database.","lineNumber":41,"isOrphan":true},{"type":"LineComment","text":" tests such as create, delete and update are tested separately.","lineNumber":42,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll() throws Exception","name":"testAll","type":"void","javadoc":null},{"fullQualified":"public void testCreateNotification() throws Exception","name":"testCreateNotification","type":"void","javadoc":null},{"fullQualified":"public void testUpdateNotification() throws Exception","name":"testUpdateNotification","type":"void","javadoc":null},{"fullQualified":"public void testDeleteNotification()","name":"testDeleteNotification","type":"void","javadoc":null},{"fullQualified":"private void testGetNotification()","name":"testGetNotification","type":"void","javadoc":null},{"fullQualified":"private void testGetAllNotifications()","name":"testGetAllNotifications","type":"void","javadoc":null},{"fullQualified":"private void testGetActiveNotificationsByTargetUser()","name":"testGetActiveNotificationsByTargetUser","type":"void","javadoc":null},{"fullQualified":"private void testDoesNotificationExists()","name":"testDoesNotificationExists","type":"void","javadoc":null},{"fullQualified":"private NotificationAttributes getNewNotificationAttributes()","name":"getNewNotificationAttributes","type":"NotificationAttributes","javadoc":null},{"fullQualified":"private void removeNotificationsFromDb(NotificationAttributes... notifications)","name":"removeNotificationsFromDb","type":"void","javadoc":null},{"fullQualified":"private void verifyNotificationEquals(NotificationAttributes expected, NotificationAttributes actual)","name":"verifyNotificationEquals","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ProfilesLogicTest","fullyQualifiedName":"teammates.logic.core.ProfilesLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" no test data used for this test","lineNumber":16,"isOrphan":true},{"type":"LineComment","text":" 4 functions are tested together as:","lineNumber":22,"isOrphan":true},{"type":"LineComment","text":"      => The functions are very simple (one-liners)","lineNumber":23,"isOrphan":true},{"type":"LineComment","text":"      => They are fundamentally related and easily tested together","lineNumber":24,"isOrphan":true},{"type":"LineComment","text":"      => It saves time during tests","lineNumber":25,"isOrphan":true},{"type":"LineComment","text":" more tests in ProfilesDbTest","lineNumber":55,"isOrphan":true},{"type":"LineComment","text":" check that profile get deleted and picture get deleted","lineNumber":65,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testStudentProfileFunctions() throws Exception","name":"testStudentProfileFunctions","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentProfile() throws Exception","name":"testDeleteStudentProfile","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentsLogicTest","fullyQualifiedName":"teammates.logic.core.StudentsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" test data is refreshed before each test case","lineNumber":45,"isOrphan":true},{"type":"LineComment","text":" move to a different team","lineNumber":164,"isOrphan":false},{"type":"LineComment","text":" response exist","lineNumber":285,"isOrphan":false},{"type":"LineComment","text":" response should not exist","lineNumber":297,"isOrphan":false},{"type":"LineComment","text":" this student is in two courses, course1 and course 2.","lineNumber":381,"isOrphan":true},{"type":"LineComment","text":" check the content from first list (we assume the content of the","lineNumber":397,"isOrphan":true},{"type":"LineComment","text":" second list is similar.","lineNumber":398,"isOrphan":true},{"type":"LineComment","text":" get list using student data from course 1","lineNumber":383,"isOrphan":false},{"type":"LineComment","text":" get list using student data from course 2","lineNumber":390,"isOrphan":false},{"type":"LineComment","text":" First student received turned out to be the one from course 2","lineNumber":403,"isOrphan":false},{"type":"LineComment","text":" then the second student received must be from course 1","lineNumber":411,"isOrphan":false},{"type":"LineComment","text":" number of students retrieved should be equal to the limit","lineNumber":519,"isOrphan":false},{"type":"LineComment","text":" should not throw an exception","lineNumber":533,"isOrphan":false},{"type":"LineComment","text":" after the student is moved from the course","lineNumber":638,"isOrphan":true},{"type":"LineComment","text":" they are in the same team","lineNumber":611,"isOrphan":false},{"type":"LineComment","text":" delete the second student","lineNumber":614,"isOrphan":false},{"type":"LineComment","text":" there is only one student in the team","lineNumber":616,"isOrphan":false},{"type":"LineComment","text":" get the response from DB","lineNumber":620,"isOrphan":false},{"type":"LineComment","text":" the team is the recipient of the response","lineNumber":626,"isOrphan":false},{"type":"LineComment","text":" this is the only response the instructor has given for the session","lineNumber":628,"isOrphan":false},{"type":"LineComment","text":" suppose the instructor has responses for the session","lineNumber":633,"isOrphan":false},{"type":"LineComment","text":" team response will also be removed","lineNumber":639,"isOrphan":false},{"type":"LineComment","text":" this will delete the response to the team","lineNumber":642,"isOrphan":false},{"type":"LineComment","text":" the instructor no longer has responses for the session","lineNumber":644,"isOrphan":false},{"type":"LineComment","text":" The student should have selective deadlines.","lineNumber":658,"isOrphan":false},{"type":"LineComment","text":" The student should have no more selective deadlines.","lineNumber":672,"isOrphan":false},{"type":"LineComment","text":" should fail silently.","lineNumber":698,"isOrphan":false},{"type":"LineComment","text":" the student has response","lineNumber":703,"isOrphan":false},{"type":"LineComment","text":" verify responses of the student are gone","lineNumber":714,"isOrphan":false},{"type":"LineComment","text":" verify that other students in the course are intact","lineNumber":722,"isOrphan":false},{"type":"LineComment","text":" the student has response","lineNumber":739,"isOrphan":false},{"type":"LineComment","text":" verify that the student is deleted","lineNumber":749,"isOrphan":false},{"type":"LineComment","text":" his responses should also be deleted","lineNumber":752,"isOrphan":false},{"type":"LineComment","text":" other students are not affected","lineNumber":766,"isOrphan":false},{"type":"LineComment","text":" there are 5 students in the course initially","lineNumber":778,"isOrphan":false},{"type":"LineComment","text":" student 1 of course 1 has given/received responses","lineNumber":781,"isOrphan":false},{"type":"LineComment","text":" student 2 of course 1 has given/received responses","lineNumber":789,"isOrphan":false},{"type":"LineComment","text":" 3 students remaining after deletion of 2 students","lineNumber":800,"isOrphan":false},{"type":"LineComment","text":" course still exists","lineNumber":803,"isOrphan":false},{"type":"LineComment","text":" responses to and from student 1 and 2 are deleted","lineNumber":806,"isOrphan":false},{"type":"LineComment","text":" the two are in different course","lineNumber":825,"isOrphan":false},{"type":"LineComment","text":" there are students in the course","lineNumber":830,"isOrphan":false},{"type":"LineComment","text":" students are deleted","lineNumber":838,"isOrphan":false},{"type":"LineComment","text":" students in other courses are not affected","lineNumber":840,"isOrphan":false},{"type":"LineComment","text":" large limit which is guaranteed to be bigger than the number of students in any course","lineNumber":847,"isOrphan":false},{"type":"LineComment","text":" other students are not affected","lineNumber":851,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"public void testAll() throws Exception","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void testValidateSections() throws Exception","name":"testValidateSections","type":"void","javadoc":null},{"fullQualified":"public void testUpdateStudentCascade() throws Exception","name":"testUpdateStudentCascade","type":"void","javadoc":null},{"fullQualified":"public void testUpdateStudentCascade_emailChanged_shouldUpdateStudentDeadlineMaps() throws Exception","name":"testUpdateStudentCascade_emailChanged_shouldUpdateStudentDeadlineMaps","type":"void","javadoc":null},{"fullQualified":"public void testUpdateStudentCascade_teamChanged_shouldDeleteOldResponsesWithinTheTeam() throws Exception","name":"testUpdateStudentCascade_teamChanged_shouldDeleteOldResponsesWithinTheTeam","type":"void","javadoc":null},{"fullQualified":"public void testRegenerateStudentRegistrationKey() throws Exception","name":"testRegenerateStudentRegistrationKey","type":"void","javadoc":null},{"fullQualified":"private void testGetStudentForEmail()","name":"testGetStudentForEmail","type":"void","javadoc":null},{"fullQualified":"private void testGetStudentForRegistrationKey()","name":"testGetStudentForRegistrationKey","type":"void","javadoc":null},{"fullQualified":"private void testGetStudentsForGoogleId()","name":"testGetStudentsForGoogleId","type":"void","javadoc":null},{"fullQualified":"private void testGetStudentForCourseIdAndGoogleId()","name":"testGetStudentForCourseIdAndGoogleId","type":"void","javadoc":null},{"fullQualified":"private void testGetNumberOfStudentsForCourse()","name":"testGetNumberOfStudentsForCourse","type":"void","javadoc":null},{"fullQualified":"private void testGetStudentsForCourse()","name":"testGetStudentsForCourse","type":"void","javadoc":null},{"fullQualified":"private void testVerifyAllStudentsExistInCourse() throws Exception","name":"testVerifyAllStudentsExistInCourse","type":"void","javadoc":null},{"fullQualified":"private void testIsStudentInAnyCourse()","name":"testIsStudentInAnyCourse","type":"void","javadoc":null},{"fullQualified":"private void testIsStudentInTeam()","name":"testIsStudentInTeam","type":"void","javadoc":null},{"fullQualified":"private void testIsStudentsInSameTeam()","name":"testIsStudentsInSameTeam","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentCascade_lastPersonInTeam_shouldDeleteTeamResponses()","name":"testDeleteStudentCascade_lastPersonInTeam_shouldDeleteTeamResponses","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentCascade_withSelectiveDeadlines_shouldDeleteDeadlines()","name":"testDeleteStudentCascade_withSelectiveDeadlines_shouldDeleteDeadlines","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentCascade()","name":"testDeleteStudentCascade","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentsForGoogleIdCascade_typicalCase_shouldDoCascadeDeletion()","name":"testDeleteStudentsForGoogleIdCascade_typicalCase_shouldDoCascadeDeletion","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentsForGoogleIdCascade_nonExistentGoogleId_shouldPass()","name":"testDeleteStudentsForGoogleIdCascade_nonExistentGoogleId_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentsInCourseCascade_typicalCase_shouldDoCascadeDeletion()","name":"testDeleteStudentsInCourseCascade_typicalCase_shouldDoCascadeDeletion","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudents_byCourseId_shouldDeleteAllStudents()","name":"testDeleteStudents_byCourseId_shouldDeleteAllStudents","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentsInCourseCascade_nonExistCourse_shouldPass()","name":"testDeleteStudentsInCourseCascade_nonExistCourse_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void classTearDown()","name":"classTearDown","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UsageStatisticsLogicTest","fullyQualifiedName":"teammates.logic.core.UsageStatisticsLogicTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" all account requests are created in distant past","lineNumber":32,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testCalculateEntitiesStatisticsForTimeRange()","name":"testCalculateEntitiesStatisticsForTimeRange","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GoogleRecaptchaServiceStub","fullyQualifiedName":"teammates.logic.external.GoogleRecaptchaServiceTest.GoogleRecaptchaServiceStub","isInterface":false,"codeComments":[{"type":"LineComment","text":" deliberately done for testing","lineNumber":67,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getApiResponse(String captchaResponse, String secretKey) throws URISyntaxException, IOException","name":"getApiResponse","type":"String","javadoc":null}],"allConstructors":[{"identifier":"private GoogleRecaptchaServiceStub(String secretKey)","javadocComment":null}]},{"name":"GoogleRecaptchaServiceTest","fullyQualifiedName":"teammates.logic.external.GoogleRecaptchaServiceTest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Tests the overloaded {@link GoogleRecaptchaService#isVerificationSuccessful(String)} method.\n     ","lineNumber":18,"isOrphan":false},{"type":"LineComment","text":" Use RecaptchaVerifierStub to mimic success response","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":" Use RecaptchaVerifierStub to mimic error codes","lineNumber":36,"isOrphan":false},{"type":"LineComment","text":" Use RecaptchaVerifierStub to mimic runtime exceptions","lineNumber":43,"isOrphan":false},{"type":"JavadocComment","text":"\n     * A subclass to mock responses and exceptions that could result in\n     * {@link GoogleRecaptchaService#getApiResponse(String, String)}.\n     * Success response is also mocked to decouple from the Google server for testing purposes. This way, tests are not\n     * affected by potential issues in the Google server (e.g. server down).\n     *\n     * @see <a href=\"https://developers.google.com/recaptcha/docs/verify#error-code-reference\">reCAPTCHA API error codes</a>\n     ","lineNumber":52,"isOrphan":false},{"type":"LineComment","text":" deliberately done for testing","lineNumber":67,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testIsVerificationSuccessful()","name":"testIsVerificationSuccessful","type":"void","javadoc":"\n     * Tests the overloaded {@link GoogleRecaptchaService#isVerificationSuccessful(String)} method.\n     "}],"allConstructors":[]},{"name":"AccountRequestsDbTest","fullyQualifiedName":"teammates.storage.api.AccountRequestsDbTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testCreateAccountRequest() throws Exception","name":"testCreateAccountRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateAccountRequest() throws Exception","name":"testUpdateAccountRequest","type":"void","javadoc":null},{"fullQualified":"public void testDeleteAccountRequest()","name":"testDeleteAccountRequest","type":"void","javadoc":null},{"fullQualified":"public void testGetAccountRequestForRegistrationKey()","name":"testGetAccountRequestForRegistrationKey","type":"void","javadoc":null},{"fullQualified":"public void testGetAccountRequest()","name":"testGetAccountRequest","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AccountsDbTest","fullyQualifiedName":"teammates.storage.api.AccountsDbTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" delete created account","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" delete created accounts","lineNumber":72,"isOrphan":false},{"type":"LineComment","text":" Should we not allow empty fields?","lineNumber":101,"isOrphan":false},{"type":"LineComment","text":" please verify the log message manually to ensure that saving request is not issued","lineNumber":126,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testGetAccount() throws Exception","name":"testGetAccount","type":"void","javadoc":null},{"fullQualified":"public void testGetAccountsForEmail() throws Exception","name":"testGetAccountsForEmail","type":"void","javadoc":null},{"fullQualified":"public void testCreateAccount() throws Exception","name":"testCreateAccount","type":"void","javadoc":null},{"fullQualified":"public void testUpdateAccount_noChangeToAccount_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateAccount_noChangeToAccount_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateAccount() throws Exception","name":"testUpdateAccount","type":"void","javadoc":null},{"fullQualified":"public void testDeleteAccount() throws Exception","name":"testDeleteAccount","type":"void","javadoc":null},{"fullQualified":"private AccountAttributes createNewAccount(String googleId) throws Exception","name":"createNewAccount","type":"AccountAttributes","javadoc":null}],"allConstructors":[]},{"name":"CoursesDbTest","fullyQualifiedName":"teammates.storage.api.CoursesDbTest","isInterface":false,"codeComments":[{"type":"BlockComment","text":"Explanation:\n         * This is an inherited method from EntitiesDb and should be tested in\n         * EntitiesDbTest class. We test it here too because the method in\n         * the parent class actually calls an overridden method from the SUT.\n         ","lineNumber":28,"isOrphan":true},{"type":"LineComment","text":" please verify the log message manually to ensure that saving request is not issued","lineNumber":148,"isOrphan":false},{"type":"LineComment","text":" please verify the log message manually to ensure that saving request is not issued","lineNumber":157,"isOrphan":false},{"type":"LineComment","text":" the test is to ensure that optimized saving policy is implemented without false negative","lineNumber":202,"isOrphan":false},{"type":"LineComment","text":" Should fail silently","lineNumber":232,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testCreateCourse() throws Exception","name":"testCreateCourse","type":"void","javadoc":null},{"fullQualified":"public void testGetCourse() throws Exception","name":"testGetCourse","type":"void","javadoc":null},{"fullQualified":"public void testGetCourses() throws Exception","name":"testGetCourses","type":"void","javadoc":null},{"fullQualified":"public void testUpdateCourse_noChangeToCourse_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateCourse_noChangeToCourse_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateCourse() throws Exception","name":"testUpdateCourse","type":"void","javadoc":null},{"fullQualified":"public void testUpdateCourse_singleFieldUpdate_shouldUpdateCorrectly() throws Exception","name":"testUpdateCourse_singleFieldUpdate_shouldUpdateCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testDeleteCourse() throws Exception","name":"testDeleteCourse","type":"void","javadoc":null},{"fullQualified":"public void testSoftDeleteCourse() throws Exception","name":"testSoftDeleteCourse","type":"void","javadoc":null},{"fullQualified":"private CourseAttributes createNewCourse() throws Exception","name":"createNewCourse","type":"CourseAttributes","javadoc":null}],"allConstructors":[]},{"name":"DeadlineExtensionsDbTest","fullyQualifiedName":"teammates.storage.api.DeadlineExtensionsDbTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testCreateDeadlineExtension() throws Exception","name":"testCreateDeadlineExtension","type":"void","javadoc":null},{"fullQualified":"public void testUpdateDeadlineExtension() throws Exception","name":"testUpdateDeadlineExtension","type":"void","javadoc":null},{"fullQualified":"public void testDeleteDeadlineExtension()","name":"testDeleteDeadlineExtension","type":"void","javadoc":null},{"fullQualified":"public void testGetDeadlineExtension()","name":"testGetDeadlineExtension","type":"void","javadoc":null},{"fullQualified":"public void testDeleteDeadlineExtensions_byCourseAndFeedbackSessionName() throws Exception","name":"testDeleteDeadlineExtensions_byCourseAndFeedbackSessionName","type":"void","javadoc":null},{"fullQualified":"public void testDeleteDeadlineExtensions_byCourseIdAndUserDetails()","name":"testDeleteDeadlineExtensions_byCourseIdAndUserDetails","type":"void","javadoc":null},{"fullQualified":"public void testUpdateDeadlineExtensionsWithNewEmail() throws Exception","name":"testUpdateDeadlineExtensionsWithNewEmail","type":"void","javadoc":null},{"fullQualified":"public void testGetDeadlineExtensionsPossiblyNeedingClosingEmail()","name":"testGetDeadlineExtensionsPossiblyNeedingClosingEmail","type":"void","javadoc":null}],"allConstructors":[]},{"name":"EntitiesDbTest","fullyQualifiedName":"teammates.storage.api.EntitiesDbTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" We are using CoursesDb to test EntitiesDb here.","lineNumber":20,"isOrphan":false},{"type":"BlockComment","text":"Explanation:\n         * The SUT (i.e. EntitiesDb::createEntity) has 4 paths. Therefore, we\n         * have 4 test cases here, one for each path.\n         ","lineNumber":25,"isOrphan":true}],"allMethods":[{"fullQualified":"public void testCreateEntity() throws Exception","name":"testCreateEntity","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackQuestionsDbTest","fullyQualifiedName":"teammates.storage.api.FeedbackQuestionsDbTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" remove possibly conflicting entity from the database","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" Assert dates are now.","lineNumber":51,"isOrphan":false},{"type":"LineComment","text":" wait for very briefly so that the update timestamp is guaranteed to change","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":" Assert lastUpdate has changed, and is now.","lineNumber":69,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":88,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":101,"isOrphan":false},{"type":"LineComment","text":" create a new question in current session","lineNumber":111,"isOrphan":false},{"type":"LineComment","text":" create another question under another session","lineNumber":122,"isOrphan":false},{"type":"LineComment","text":" the question under current session is deleted","lineNumber":135,"isOrphan":false},{"type":"LineComment","text":" the question under different session remain","lineNumber":137,"isOrphan":false},{"type":"LineComment","text":" no accident deletion","lineNumber":147,"isOrphan":false},{"type":"LineComment","text":" no accident deletion","lineNumber":157,"isOrphan":false},{"type":"LineComment","text":" no accident deletion","lineNumber":167,"isOrphan":false},{"type":"LineComment","text":" create a new question in current course","lineNumber":175,"isOrphan":false},{"type":"LineComment","text":" create another question under another course","lineNumber":186,"isOrphan":false},{"type":"LineComment","text":" the question under current course is deleted","lineNumber":198,"isOrphan":false},{"type":"LineComment","text":" the question under different course remain","lineNumber":200,"isOrphan":false},{"type":"LineComment","text":" no accident deletion","lineNumber":209,"isOrphan":false},{"type":"LineComment","text":" remove possibly conflicting entity from the database","lineNumber":220,"isOrphan":false},{"type":"LineComment","text":" remove possibly conflicting entity from the database","lineNumber":252,"isOrphan":false},{"type":"LineComment","text":" remove possibly conflicting entity from the database","lineNumber":331,"isOrphan":false},{"type":"LineComment","text":" invalid feedback path","lineNumber":428,"isOrphan":false},{"type":"LineComment","text":" the test is to ensure that optimized saving policy is implemented without false negative","lineNumber":475,"isOrphan":false},{"type":"LineComment","text":" remove possibly conflicting entity from the database","lineNumber":592,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testTimestamp() throws Exception","name":"testTimestamp","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackQuestion() throws Exception","name":"testDeleteFeedbackQuestion","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackQuestions_deleteByCourseIdAndSessionName() throws Exception","name":"testDeleteFeedbackQuestions_deleteByCourseIdAndSessionName","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackQuestions_deleteByCourseId() throws Exception","name":"testDeleteFeedbackQuestions_deleteByCourseId","type":"void","javadoc":null},{"fullQualified":"public void testCreateDeleteFeedbackQuestion() throws Exception","name":"testCreateDeleteFeedbackQuestion","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackQuestions() throws Exception","name":"testGetFeedbackQuestions","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackQuestionsForSession() throws Exception","name":"testGetFeedbackQuestionsForSession","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackQuestionsForGiverType() throws Exception","name":"testGetFeedbackQuestionsForGiverType","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackQuestion_noChangeToQuestion_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateFeedbackQuestion_noChangeToQuestion_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackQuestion() throws Exception","name":"testUpdateFeedbackQuestion","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackQuestion_singleFieldUpdate_shouldUpdateCorrectly() throws Exception","name":"testUpdateFeedbackQuestion_singleFieldUpdate_shouldUpdateCorrectly","type":"void","javadoc":null},{"fullQualified":"private FeedbackQuestionAttributes getNewFeedbackQuestionAttributes()","name":"getNewFeedbackQuestionAttributes","type":"FeedbackQuestionAttributes","javadoc":null},{"fullQualified":"private List<FeedbackQuestionAttributes> createFeedbackQuestions(int num) throws Exception","name":"createFeedbackQuestions","type":"List<FeedbackQuestionAttributes>","javadoc":null},{"fullQualified":"private int[] createNewQuestionsForDifferentRecipientTypes() throws Exception","name":"createNewQuestionsForDifferentRecipientTypes","type":"int[]","javadoc":null},{"fullQualified":"private void deleteFeedbackQuestions(int numToDelete)","name":"deleteFeedbackQuestions","type":"void","javadoc":null},{"fullQualified":"private void deleteFeedbackQuestion(FeedbackQuestionAttributes attributes)","name":"deleteFeedbackQuestion","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackResponseCommentsDbTest","fullyQualifiedName":"teammates.storage.api.FeedbackResponseCommentsDbTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" fill back the Ids","lineNumber":132,"isOrphan":false},{"type":"LineComment","text":" please verify the log message manually to ensure that saving request is not issued","lineNumber":194,"isOrphan":false},{"type":"LineComment","text":" please verify the log message manually to ensure that saving request is not issued","lineNumber":209,"isOrphan":false},{"type":"LineComment","text":" the test is to ensure that optimized saving policy is implemented without false negative","lineNumber":261,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":436,"isOrphan":false},{"type":"LineComment","text":" get another frc from data bundle and use it to create another feedback response","lineNumber":444,"isOrphan":false},{"type":"LineComment","text":" for some reason, the id is 0 instead of null. so we explicitly set it to be null","lineNumber":449,"isOrphan":false},{"type":"LineComment","text":" set this comment to have the same responseId as frcaData","lineNumber":451,"isOrphan":false},{"type":"LineComment","text":" two comments exist in the DB","lineNumber":456,"isOrphan":false},{"type":"LineComment","text":" delete one","lineNumber":460,"isOrphan":false},{"type":"LineComment","text":" other irrelevant comment remains","lineNumber":467,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":475,"isOrphan":false},{"type":"LineComment","text":" comment deleted","lineNumber":490,"isOrphan":false},{"type":"LineComment","text":" other irrelevant comment remains","lineNumber":492,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":500,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":509,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":518,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":545,"isOrphan":false},{"type":"LineComment","text":" the two existing comment are in the same course","lineNumber":555,"isOrphan":false},{"type":"LineComment","text":" create another comments different course","lineNumber":560,"isOrphan":false},{"type":"LineComment","text":" same course's comments are deleted","lineNumber":577,"isOrphan":false},{"type":"LineComment","text":" other course's data is not affected","lineNumber":580,"isOrphan":false}],"allMethods":[{"fullQualified":"public void beforeMethod() throws Exception","name":"beforeMethod","type":"void","javadoc":null},{"fullQualified":"public void afterMethod()","name":"afterMethod","type":"void","javadoc":null},{"fullQualified":"public void testAll() throws Exception","name":"testAll","type":"void","javadoc":null},{"fullQualified":"private void testEntityCreationAndDeletion() throws Exception","name":"testEntityCreationAndDeletion","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackResponseCommentFromId()","name":"testGetFeedbackResponseCommentFromId","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackResponseCommentFromCommentDetails()","name":"testGetFeedbackResponseCommentFromCommentDetails","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackResponseCommentForGiver()","name":"testGetFeedbackResponseCommentForGiver","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackResponseCommentForResponse()","name":"testGetFeedbackResponseCommentForResponse","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponseComment_noChangeToComment_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateFeedbackResponseComment_noChangeToComment_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"private void testUpdateFeedbackResponseComment() throws Exception","name":"testUpdateFeedbackResponseComment","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponseComment_singleFieldUpdate_shouldUpdateCorrectly() throws Exception","name":"testUpdateFeedbackResponseComment_singleFieldUpdate_shouldUpdateCorrectly","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackResponseCommentsForSession()","name":"testGetFeedbackResponseCommentsForSession","type":"void","javadoc":null},{"fullQualified":"private void testUpdateFeedbackResponseCommentsGiverEmail() throws Exception","name":"testUpdateFeedbackResponseCommentsGiverEmail","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseComment()","name":"testDeleteFeedbackResponseComment","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseComments_byResponseId() throws Exception","name":"testDeleteFeedbackResponseComments_byResponseId","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseComments_byQuestionId()","name":"testDeleteFeedbackResponseComments_byQuestionId","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseComments_byCourseIdAndSessionName()","name":"testDeleteFeedbackResponseComments_byCourseIdAndSessionName","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseComments_byCourseId() throws Exception","name":"testDeleteFeedbackResponseComments_byCourseId","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponseComments_nullInput_shouldThrowException()","name":"testDeleteFeedbackResponseComments_nullInput_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"private void verifyListsContainSameResponseCommentAttributes(List<FeedbackResponseCommentAttributes> expectedFrcas, List<FeedbackResponseCommentAttributes> actualFrcas)","name":"verifyListsContainSameResponseCommentAttributes","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponseCommentsForQuestion_typicalCase_shouldQueryCorrectly()","name":"testGetFeedbackResponseCommentsForQuestion_typicalCase_shouldQueryCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponseCommentsForQuestionInSection_typicalCase_shouldQueryCorrectly()","name":"testGetFeedbackResponseCommentsForQuestionInSection_typicalCase_shouldQueryCorrectly","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseCommentAttributes getFeedbackResponseComment(String courseId, Instant createdAt, String giver)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":null}],"allConstructors":[]},{"name":"FeedbackResponsesDbTest","fullyQualifiedName":"teammates.storage.api.FeedbackResponsesDbTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Add questions to DB","lineNumber":44,"isOrphan":false},{"type":"LineComment","text":" Add responses for corresponding question to DB","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" Update feedbackQuestionId for response","lineNumber":64,"isOrphan":false},{"type":"LineComment","text":" remove possibly conflicting entity from the database","lineNumber":95,"isOrphan":false},{"type":"LineComment","text":" Assert dates are now.","lineNumber":108,"isOrphan":false},{"type":"LineComment","text":" wait for very briefly so that the update timestamp is guaranteed to change","lineNumber":114,"isOrphan":false},{"type":"LineComment","text":" Assert lastUpdate has changed, and is now.","lineNumber":126,"isOrphan":false},{"type":"LineComment","text":" all response of questions are deleted","lineNumber":164,"isOrphan":false},{"type":"LineComment","text":" responses of other questions remain","lineNumber":166,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":171,"isOrphan":false},{"type":"LineComment","text":" responses are not deleted accidentally","lineNumber":177,"isOrphan":false},{"type":"LineComment","text":" response are belong to the same course","lineNumber":193,"isOrphan":false},{"type":"LineComment","text":" but in different session","lineNumber":195,"isOrphan":false},{"type":"LineComment","text":" other responses remains","lineNumber":205,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":210,"isOrphan":false},{"type":"LineComment","text":" other responses remain","lineNumber":217,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":222,"isOrphan":false},{"type":"LineComment","text":" other responses remain","lineNumber":229,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":234,"isOrphan":false},{"type":"LineComment","text":" other responses remain","lineNumber":241,"isOrphan":false},{"type":"LineComment","text":" response are belong to different courses","lineNumber":257,"isOrphan":false},{"type":"LineComment","text":" all response of courses are deleted","lineNumber":265,"isOrphan":false},{"type":"LineComment","text":" responses of other course remain","lineNumber":267,"isOrphan":false},{"type":"LineComment","text":" should pass silently","lineNumber":272,"isOrphan":false},{"type":"LineComment","text":" responses are not deleted accidentally","lineNumber":278,"isOrphan":false},{"type":"LineComment","text":" remove possibly conflicting entity from the database","lineNumber":289,"isOrphan":false},{"type":"LineComment","text":" sets the id for fra","lineNumber":294,"isOrphan":false},{"type":"LineComment","text":"Id from first success case","lineNumber":359,"isOrphan":false},{"type":"LineComment","text":" the test is to ensure that optimized saving policy is implemented without false negative","lineNumber":704,"isOrphan":false}],"allMethods":[{"fullQualified":"public void beforeClass() throws Exception","name":"beforeClass","type":"void","javadoc":null},{"fullQualified":"public void beforeMethod() throws Exception","name":"beforeMethod","type":"void","javadoc":null},{"fullQualified":"private void addQuestionsAndResponsesToDb() throws Exception","name":"addQuestionsAndResponsesToDb","type":"void","javadoc":null},{"fullQualified":"public void testGetGiverSetThatAnswerFeedbackSession_emptyResponses_shouldReturnEmptySet()","name":"testGetGiverSetThatAnswerFeedbackSession_emptyResponses_shouldReturnEmptySet","type":"void","javadoc":null},{"fullQualified":"public void testGetGiverSetThatAnswerFeedbackSession_giverIsUser_shouldReturnCorrectIdentifier()","name":"testGetGiverSetThatAnswerFeedbackSession_giverIsUser_shouldReturnCorrectIdentifier","type":"void","javadoc":null},{"fullQualified":"public void testTimestamp() throws Exception","name":"testTimestamp","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponse()","name":"testDeleteFeedbackResponse","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponses_byQuestionId()","name":"testDeleteFeedbackResponses_byQuestionId","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponses_byCourseIdAndSessionName()","name":"testDeleteFeedbackResponses_byCourseIdAndSessionName","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackResponses_byCourseId()","name":"testDeleteFeedbackResponses_byCourseId","type":"void","javadoc":null},{"fullQualified":"public void testCreateFeedbackResponse() throws Exception","name":"testCreateFeedbackResponse","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponses()","name":"testGetFeedbackResponses","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponsesForQuestion()","name":"testGetFeedbackResponsesForQuestion","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponsesForQuestionInSection()","name":"testGetFeedbackResponsesForQuestionInSection","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponsesForSession()","name":"testGetFeedbackResponsesForSession","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponsesForReceiverForCourse()","name":"testGetFeedbackResponsesForReceiverForCourse","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponsesFromGiverForQuestion()","name":"testGetFeedbackResponsesFromGiverForQuestion","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponsesForReceiverForQuestion()","name":"testGetFeedbackResponsesForReceiverForQuestion","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponsesFromGiverForCourse()","name":"testGetFeedbackResponsesFromGiverForCourse","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackResponsesForSessionInSection()","name":"testGetFeedbackResponsesForSessionInSection","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponse_noChangeToResponse_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateFeedbackResponse_noChangeToResponse_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponse() throws Exception","name":"testUpdateFeedbackResponse","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackResponse_singleFieldUpdate_shouldUpdateCorrectly() throws Exception","name":"testUpdateFeedbackResponse_singleFieldUpdate_shouldUpdateCorrectly","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getNewFeedbackResponseAttributes()","name":"getNewFeedbackResponseAttributes","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"private FeedbackResponseAttributes getResponseAttributes(String id)","name":"getResponseAttributes","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"public void afterMethod()","name":"afterMethod","type":"void","javadoc":null},{"fullQualified":"private void deleteResponsesFromDb()","name":"deleteResponsesFromDb","type":"void","javadoc":null},{"fullQualified":"private void deleteResponse(FeedbackResponseAttributes attributes)","name":"deleteResponse","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionsDbTest","fullyQualifiedName":"teammates.storage.api.FeedbackSessionsDbTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" wait for very briefly so that the start timestamp is guaranteed to change","lineNumber":165,"isOrphan":false},{"type":"LineComment","text":" soft delete a feedback session now","lineNumber":326,"isOrphan":false},{"type":"LineComment","text":" soft delete a feedback session now","lineNumber":349,"isOrphan":false},{"type":"LineComment","text":" soft delete a feedback session now","lineNumber":373,"isOrphan":false},{"type":"LineComment","text":" soft delete a feedback session now","lineNumber":397,"isOrphan":false},{"type":"LineComment","text":" soft delete a feedback session now","lineNumber":421,"isOrphan":false},{"type":"LineComment","text":" please verify the log message manually to ensure that saving request is not issued","lineNumber":440,"isOrphan":true},{"type":"LineComment","text":" please verify the log message manually to ensure that saving request is not issued","lineNumber":463,"isOrphan":true},{"type":"LineComment","text":" the test is to ensure that optimized saving policy is implemented without false negative","lineNumber":524,"isOrphan":false}],"allMethods":[{"fullQualified":"public void addSessionsToDb() throws Exception","name":"addSessionsToDb","type":"void","javadoc":null},{"fullQualified":"public void deleteSessionsFromDb()","name":"deleteSessionsFromDb","type":"void","javadoc":null},{"fullQualified":"public void testGetAllOngoingSessions_typicalCase_shouldQuerySuccessfullyWithoutDuplication()","name":"testGetAllOngoingSessions_typicalCase_shouldQuerySuccessfullyWithoutDuplication","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSession() throws Exception","name":"testDeleteFeedbackSession","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSessions_byCourseId() throws Exception","name":"testDeleteFeedbackSessions_byCourseId","type":"void","javadoc":null},{"fullQualified":"public void testCreateDeleteFeedbackSession() throws Exception","name":"testCreateDeleteFeedbackSession","type":"void","javadoc":null},{"fullQualified":"public void testGetSoftDeletedFeedbackSession_typicalCase_shouldGetDeletedSession()","name":"testGetSoftDeletedFeedbackSession_typicalCase_shouldGetDeletedSession","type":"void","javadoc":null},{"fullQualified":"public void testGetSoftDeletedFeedbackSession_sessionIsNotDeleted_shouldReturnNull()","name":"testGetSoftDeletedFeedbackSession_sessionIsNotDeleted_shouldReturnNull","type":"void","javadoc":null},{"fullQualified":"public void testAllGetFeedbackSessions()","name":"testAllGetFeedbackSessions","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackSessions()","name":"testGetFeedbackSessions","type":"void","javadoc":null},{"fullQualified":"private void testGetFeedbackSessionsForCourse()","name":"testGetFeedbackSessionsForCourse","type":"void","javadoc":null},{"fullQualified":"private void testGetSoftDeletedFeedbackSessionsForCourse()","name":"testGetSoftDeletedFeedbackSessionsForCourse","type":"void","javadoc":null},{"fullQualified":"public void testSoftDeleteFeedbackSession() throws Exception","name":"testSoftDeleteFeedbackSession","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackSessionsPossiblyNeedingOpeningSoonEmail() throws Exception","name":"testGetFeedbackSessionsPossiblyNeedingOpeningSoonEmail","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackSessionsPossiblyNeedingOpenEmail() throws Exception","name":"testGetFeedbackSessionsPossiblyNeedingOpenEmail","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackSessionsPossiblyNeedingClosingEmail() throws Exception","name":"testGetFeedbackSessionsPossiblyNeedingClosingEmail","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackSessionsPossiblyNeedingClosedEmail() throws Exception","name":"testGetFeedbackSessionsPossiblyNeedingClosedEmail","type":"void","javadoc":null},{"fullQualified":"public void testGetFeedbackSessionsPossiblyNeedingPublishedEmail() throws Exception","name":"testGetFeedbackSessionsPossiblyNeedingPublishedEmail","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackSession_noChangeToSession_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateFeedbackSession_noChangeToSession_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackSession() throws Exception","name":"testUpdateFeedbackSession","type":"void","javadoc":null},{"fullQualified":"public void testUpdateFeedbackSession_singleFieldUpdate_shouldUpdateCorrectly() throws Exception","name":"testUpdateFeedbackSession_singleFieldUpdate_shouldUpdateCorrectly","type":"void","javadoc":null},{"fullQualified":"private FeedbackSessionAttributes getNewFeedbackSession()","name":"getNewFeedbackSession","type":"FeedbackSessionAttributes","javadoc":null}],"allConstructors":[]},{"name":"InstructorsDbTest","fullyQualifiedName":"teammates.storage.api.InstructorsDbTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Verifying less privileged 'Observer' role did not return false positive in case old 'Manager' role is unchanged.","lineNumber":379,"isOrphan":false},{"type":"LineComment","text":" please verify that the log message manually to ensure that saving request is not issued","lineNumber":437,"isOrphan":true},{"type":"LineComment","text":" please verify that the log message manually to ensure that saving request is not issued","lineNumber":453,"isOrphan":true},{"type":"LineComment","text":" the test is to ensure that optimized saving policy is implemented without false negative","lineNumber":456,"isOrphan":false},{"type":"LineComment","text":" please verify the log message manually to ensure that saving request is not issued","lineNumber":560,"isOrphan":true},{"type":"LineComment","text":" please verify the log message manually to ensure that saving request is not issued","lineNumber":576,"isOrphan":true},{"type":"LineComment","text":" the test is to ensure that optimized saving policy is implemented without false negative","lineNumber":579,"isOrphan":false},{"type":"LineComment","text":" Verifying less privileged 'Observer' role did not return false positive in case old 'CoOwner' role is unchanged.","lineNumber":716,"isOrphan":false},{"type":"LineComment","text":" other course is not affected","lineNumber":812,"isOrphan":false},{"type":"LineComment","text":" other course is not affected","lineNumber":821,"isOrphan":false},{"type":"LineComment","text":" other course is not affected","lineNumber":832,"isOrphan":false}],"allMethods":[{"fullQualified":"public void addInstructorsToDb() throws Exception","name":"addInstructorsToDb","type":"void","javadoc":null},{"fullQualified":"private void setArchiveStatusOfInstructor(String googleId, String courseId, boolean archiveStatus) throws Exception","name":"setArchiveStatusOfInstructor","type":"void","javadoc":null},{"fullQualified":"public void testCreateInstructor() throws Exception","name":"testCreateInstructor","type":"void","javadoc":null},{"fullQualified":"public void testHasExistingInstructorsInCourse()","name":"testHasExistingInstructorsInCourse","type":"void","javadoc":null},{"fullQualified":"public void testGetInstructorForEmail()","name":"testGetInstructorForEmail","type":"void","javadoc":null},{"fullQualified":"public void testGetInstructorForGoogleId()","name":"testGetInstructorForGoogleId","type":"void","javadoc":null},{"fullQualified":"public void testGetInstructorForRegistrationKey()","name":"testGetInstructorForRegistrationKey","type":"void","javadoc":null},{"fullQualified":"public void testGetInstructorsForGoogleId() throws Exception","name":"testGetInstructorsForGoogleId","type":"void","javadoc":null},{"fullQualified":"public void testGetInstructorEmailsForCourse()","name":"testGetInstructorEmailsForCourse","type":"void","javadoc":null},{"fullQualified":"public void testGetInstructorsForCourse()","name":"testGetInstructorsForCourse","type":"void","javadoc":null},{"fullQualified":"public void testGetInstructorsDisplayedToStudents()","name":"testGetInstructorsDisplayedToStudents","type":"void","javadoc":null},{"fullQualified":"public void testUpdateInstructorByGoogleId() throws Exception","name":"testUpdateInstructorByGoogleId","type":"void","javadoc":null},{"fullQualified":"public void testUpdateInstructorByGoogleId_noChangeToInstructor_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateInstructorByGoogleId_noChangeToInstructor_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateInstructorByGoogleId_singleFieldUpdate_shouldUpdateCorrectly() throws Exception","name":"testUpdateInstructorByGoogleId_singleFieldUpdate_shouldUpdateCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateInstructorByEmail_noChangeToInstructor_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateInstructorByEmail_noChangeToInstructor_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateInstructorByEmail_singleFieldUpdate_shouldUpdateCorrectly() throws Exception","name":"testUpdateInstructorByEmail_singleFieldUpdate_shouldUpdateCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateInstructorByEmail() throws Exception","name":"testUpdateInstructorByEmail","type":"void","javadoc":null},{"fullQualified":"public void testDeleteInstructor()","name":"testDeleteInstructor","type":"void","javadoc":null},{"fullQualified":"public void testDeleteInstructors_byCourseId_shouldDeleteInstructorsAssociatedWithTheCourse()","name":"testDeleteInstructors_byCourseId_shouldDeleteInstructorsAssociatedWithTheCourse","type":"void","javadoc":null}],"allConstructors":[]},{"name":"NotificationsDbTest","fullyQualifiedName":"teammates.storage.api.NotificationsDbTest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Removes all notifications created by each test.\n     ","lineNumber":35,"isOrphan":false},{"type":"LineComment","text":" Conditions for this API: endTime > now, startTime < now, targetUser == specified target user","lineNumber":74,"isOrphan":false},{"type":"LineComment","text":" This set may need to be updated when the typical data bundle is updated","lineNumber":82,"isOrphan":false},{"type":"LineComment","text":" TODO: for extension, some fields are not allowed to be updated after shown is true","lineNumber":112,"isOrphan":false},{"type":"LineComment","text":" Try to update to another set of values, currently n's attributes are from notification1","lineNumber":118,"isOrphan":false},{"type":"LineComment","text":" Empty title is used here, which triggers InvalidParametersException","lineNumber":158,"isOrphan":false},{"type":"LineComment","text":" Try to update to another set of values, currently n's attributes are from notification1","lineNumber":173,"isOrphan":false}],"allMethods":[{"fullQualified":"public void setup() throws Exception","name":"setup","type":"void","javadoc":null},{"fullQualified":"public void cleanUp()","name":"cleanUp","type":"void","javadoc":"\n     * Removes all notifications created by each test.\n     "},{"fullQualified":"public void testGetNotification() throws Exception","name":"testGetNotification","type":"void","javadoc":null},{"fullQualified":"public void testGetAllNotifications() throws Exception","name":"testGetAllNotifications","type":"void","javadoc":null},{"fullQualified":"public void testGetActiveNotificationsByTargetUser() throws Exception","name":"testGetActiveNotificationsByTargetUser","type":"void","javadoc":null},{"fullQualified":"public void testCreateNotification() throws Exception","name":"testCreateNotification","type":"void","javadoc":null},{"fullQualified":"public void testUpdateNotification() throws Exception","name":"testUpdateNotification","type":"void","javadoc":null},{"fullQualified":"public void testUpdateNotification_singleFieldUpdate_shouldUpdateSuccessfully() throws Exception","name":"testUpdateNotification_singleFieldUpdate_shouldUpdateSuccessfully","type":"void","javadoc":null},{"fullQualified":"public void testDeleteNotification() throws Exception","name":"testDeleteNotification","type":"void","javadoc":null},{"fullQualified":"public void testDoesNotificationExists()","name":"testDoesNotificationExists","type":"void","javadoc":null},{"fullQualified":"public void testHasExistingEntities() throws Exception","name":"testHasExistingEntities","type":"void","javadoc":null},{"fullQualified":"private NotificationAttributes createNewNotification() throws EntityAlreadyExistsException, InvalidParametersException","name":"createNewNotification","type":"NotificationAttributes","javadoc":null},{"fullQualified":"private NotificationAttributes getNewNotificationAttributes()","name":"getNewNotificationAttributes","type":"NotificationAttributes","javadoc":null}],"allConstructors":[]},{"name":"ProfilesDbTest","fullyQualifiedName":"teammates.storage.api.ProfilesDbTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" typical profiles","lineNumber":24,"isOrphan":false},{"type":"LineComment","text":" save entity and picture","lineNumber":32,"isOrphan":false},{"type":"LineComment","text":" delete entity","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" tear down","lineNumber":73,"isOrphan":false},{"type":"LineComment","text":" create empty profile","lineNumber":76,"isOrphan":false},{"type":"LineComment","text":" tear down","lineNumber":86,"isOrphan":false},{"type":"LineComment","text":" the test is to ensure that optimized saving policy is implemented without false negative","lineNumber":96,"isOrphan":false},{"type":"LineComment","text":" cannot access entity with empty googleId","lineNumber":168,"isOrphan":false},{"type":"LineComment","text":" update same profile","lineNumber":189,"isOrphan":false},{"type":"LineComment","text":" other fields remain","lineNumber":201,"isOrphan":false},{"type":"LineComment","text":" modifiedDate remains","lineNumber":203,"isOrphan":false},{"type":"LineComment","text":" update nothing","lineNumber":206,"isOrphan":false},{"type":"LineComment","text":" other fields remain","lineNumber":212,"isOrphan":false},{"type":"LineComment","text":" modifiedDate remains","lineNumber":214,"isOrphan":false},{"type":"LineComment","text":" check that profile get deleted and picture get deleted","lineNumber":236,"isOrphan":false}],"allMethods":[{"fullQualified":"public void createTypicalData() throws Exception","name":"createTypicalData","type":"void","javadoc":null},{"fullQualified":"public void deleteTypicalData()","name":"deleteTypicalData","type":"void","javadoc":null},{"fullQualified":"public void testGetStudentProfile_nonExistentStudentProfile_shouldReturnNull()","name":"testGetStudentProfile_nonExistentStudentProfile_shouldReturnNull","type":"void","javadoc":null},{"fullQualified":"public void testGetStudentProfile_existentStudentProfile_shouldNotReturnNull()","name":"testGetStudentProfile_existentStudentProfile_shouldNotReturnNull","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOrCreateStudentProfile_nonExistentProfile_shouldCreateNewProfile() throws Exception","name":"testUpdateOrCreateStudentProfile_nonExistentProfile_shouldCreateNewProfile","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOrCreateStudentProfile_nullParameter_shouldThrowAssertionException()","name":"testUpdateOrCreateStudentProfile_nullParameter_shouldThrowAssertionException","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOrCreateStudentProfile_updateSingleField_shouldUpdateCorrectly() throws Exception","name":"testUpdateOrCreateStudentProfile_updateSingleField_shouldUpdateCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOrCreateStudentProfile_invalidParameter_shouldThrowInvalidParamException() throws Exception","name":"testUpdateOrCreateStudentProfile_invalidParameter_shouldThrowInvalidParamException","type":"void","javadoc":null},{"fullQualified":"public void testUpdateOrCreateStudentProfile_noChangesToProfile_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateOrCreateStudentProfile_noChangesToProfile_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentProfile_nonExistentEntity_shouldFailSilently()","name":"testDeleteStudentProfile_nonExistentEntity_shouldFailSilently","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentProfile_profileWithoutPicture_shouldDeleteCorrectly()","name":"testDeleteStudentProfile_profileWithoutPicture_shouldDeleteCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudentProfile_profileWithPicture_shouldDeleteCorrectly()","name":"testDeleteStudentProfile_profileWithPicture_shouldDeleteCorrectly","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentsDbTest","fullyQualifiedName":"teammates.storage.api.StudentsDbTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Assert dates are now.","lineNumber":39,"isOrphan":false},{"type":"LineComment","text":" wait for very briefly so that the update timestamp is guaranteed to change","lineNumber":45,"isOrphan":false},{"type":"LineComment","text":" Assert lastUpdate has changed, and is now.","lineNumber":55,"isOrphan":false},{"type":"LineComment","text":" remove possibly conflicting entity from the database","lineNumber":86,"isOrphan":false},{"type":"LineComment","text":" Create a new student with valid attributes","lineNumber":222,"isOrphan":false},{"type":"LineComment","text":" Create a second student with different email address","lineNumber":260,"isOrphan":false},{"type":"LineComment","text":" clean up","lineNumber":268,"isOrphan":false},{"type":"LineComment","text":" the original student is deleted","lineNumber":291,"isOrphan":false},{"type":"LineComment","text":" the test is to ensure that optimized saving policy is implemented without false negative","lineNumber":300,"isOrphan":false},{"type":"LineComment","text":" delete all students in a course","lineNumber":386,"isOrphan":true},{"type":"LineComment","text":" delete student not exist","lineNumber":356,"isOrphan":false},{"type":"LineComment","text":" delete by course and email","lineNumber":366,"isOrphan":false},{"type":"LineComment","text":" delete again - should fail silently","lineNumber":371,"isOrphan":false},{"type":"LineComment","text":" delete all students in non-existent course","lineNumber":377,"isOrphan":false},{"type":"LineComment","text":" should pass, others students remain","lineNumber":383,"isOrphan":false},{"type":"LineComment","text":" create another student in different course","lineNumber":388,"isOrphan":false},{"type":"LineComment","text":" there are students in the course","lineNumber":400,"isOrphan":false},{"type":"LineComment","text":" other course should remain","lineNumber":409,"isOrphan":false},{"type":"LineComment","text":" clean up","lineNumber":412,"isOrphan":false},{"type":"LineComment","text":" null params check:","lineNumber":415,"isOrphan":false}],"allMethods":[{"fullQualified":"public void testTimestamp() throws Exception","name":"testTimestamp","type":"void","javadoc":null},{"fullQualified":"public void testCreateStudent() throws Exception","name":"testCreateStudent","type":"void","javadoc":null},{"fullQualified":"public void testHasExistingStudentsInCourse() throws Exception","name":"testHasExistingStudentsInCourse","type":"void","javadoc":null},{"fullQualified":"public void testGetStudent() throws Exception","name":"testGetStudent","type":"void","javadoc":null},{"fullQualified":"public void testUpdateStudent_noChangeToStudent_shouldNotIssueSaveRequest() throws Exception","name":"testUpdateStudent_noChangeToStudent_shouldNotIssueSaveRequest","type":"void","javadoc":null},{"fullQualified":"public void testUpdateStudent() throws Exception","name":"testUpdateStudent","type":"void","javadoc":null},{"fullQualified":"public void testUpdateStudent_singleFieldUpdate_shouldUpdateCorrectly() throws Exception","name":"testUpdateStudent_singleFieldUpdate_shouldUpdateCorrectly","type":"void","javadoc":null},{"fullQualified":"public void testDeleteStudent() throws Exception","name":"testDeleteStudent","type":"void","javadoc":null},{"fullQualified":"private StudentAttributes createNewStudent() throws Exception","name":"createNewStudent","type":"StudentAttributes","javadoc":null},{"fullQualified":"private StudentAttributes createNewStudent(String email) throws Exception","name":"createNewStudent","type":"StudentAttributes","javadoc":null},{"fullQualified":"private boolean isEnrollInfoSameAs(StudentAttributes student, StudentAttributes otherStudent)","name":"isEnrollInfoSameAs","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"AccountRequestSearchTest","fullyQualifiedName":"teammates.storage.search.AccountRequestSearchTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" there is search result before deletion","lineNumber":111,"isOrphan":false},{"type":"LineComment","text":" delete an account request","lineNumber":115,"isOrphan":false},{"type":"LineComment","text":" the search result will change","lineNumber":118,"isOrphan":false},{"type":"LineComment","text":" delete all account requests","lineNumber":122,"isOrphan":false},{"type":"LineComment","text":" there should be no search result","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that search results match with expected output.\n     *\n     * @param actual the results from the search query.\n     * @param expected the expected results for the search query.\n     ","lineNumber":140,"isOrphan":false}],"allMethods":[{"fullQualified":"public void allTests() throws Exception","name":"allTests","type":"void","javadoc":null},{"fullQualified":"public void testSearchAccountRequest_deleteAfterSearch_shouldNotBeSearchable() throws Exception","name":"testSearchAccountRequest_deleteAfterSearch_shouldNotBeSearchable","type":"void","javadoc":null},{"fullQualified":"public void testSearchAccountRequest_noSearchService_shouldThrowException()","name":"testSearchAccountRequest_noSearchService_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"private static void verifySearchResults(List<AccountRequestAttributes> actual, AccountRequestAttributes... expected)","name":"verifySearchResults","type":"void","javadoc":"\n     * Verifies that search results match with expected output.\n     *\n     * @param actual the results from the search query.\n     * @param expected the expected results for the search query.\n     "}],"allConstructors":[]},{"name":"BaseSearchTest","fullyQualifiedName":"teammates.storage.search.BaseSearchTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void baseClassSetup()","name":"baseClassSetup","type":"void","javadoc":null},{"fullQualified":" void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorSearchTest","fullyQualifiedName":"teammates.storage.search.InstructorSearchTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" create a new instructor with unique displayed name to test that field","lineNumber":107,"isOrphan":true},{"type":"LineComment","text":" current displayed names in data bundle are either helper or instructor, which matches on many other fields","lineNumber":108,"isOrphan":false},{"type":"LineComment","text":" there is search result before deletion","lineNumber":150,"isOrphan":false},{"type":"LineComment","text":" delete a student","lineNumber":154,"isOrphan":false},{"type":"LineComment","text":" the search result will change","lineNumber":157,"isOrphan":false},{"type":"LineComment","text":" delete all instructors in course 2","lineNumber":161,"isOrphan":false},{"type":"LineComment","text":" there should be no search result","lineNumber":167,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that search results match with expected output.\n     * Parameters are modified to standardize {@link InstructorAttributes} for comparison.\n     *\n     * @param actual the results from the search query.\n     * @param expected the expected results for the search query.\n     ","lineNumber":182,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Standardizes instructors for comparison by setting key fields to null.\n     *\n     * @param instructors the instructors to standardize.\n     ","lineNumber":198,"isOrphan":false}],"allMethods":[{"fullQualified":"public void allTests() throws Exception","name":"allTests","type":"void","javadoc":null},{"fullQualified":"public void testSearchInstructor_deleteAfterSearch_shouldNotBeSearchable() throws Exception","name":"testSearchInstructor_deleteAfterSearch_shouldNotBeSearchable","type":"void","javadoc":null},{"fullQualified":"public void testSearchInstructor_noSearchService_shouldThrowException()","name":"testSearchInstructor_noSearchService_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"private static void verifySearchResults(List<InstructorAttributes> actual, InstructorAttributes... expected)","name":"verifySearchResults","type":"void","javadoc":"\n     * Verifies that search results match with expected output.\n     * Parameters are modified to standardize {@link InstructorAttributes} for comparison.\n     *\n     * @param actual the results from the search query.\n     * @param expected the expected results for the search query.\n     "},{"fullQualified":"private static void standardizeInstructorsForComparison(InstructorAttributes... instructors)","name":"standardizeInstructorsForComparison","type":"void","javadoc":"\n     * Standardizes instructors for comparison by setting key fields to null.\n     *\n     * @param instructors the instructors to standardize.\n     "}],"allConstructors":[]},{"name":"StudentSearchTest","fullyQualifiedName":"teammates.storage.search.StudentSearchTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" there is search result before deletion","lineNumber":107,"isOrphan":false},{"type":"LineComment","text":" delete a student","lineNumber":113,"isOrphan":false},{"type":"LineComment","text":" the search result will change","lineNumber":116,"isOrphan":false},{"type":"LineComment","text":" delete all students in course 2","lineNumber":124,"isOrphan":false},{"type":"LineComment","text":" the search result will change","lineNumber":129,"isOrphan":false}],"allMethods":[{"fullQualified":"public void allTests() throws Exception","name":"allTests","type":"void","javadoc":null},{"fullQualified":"public void testSearchStudent_deleteAfterSearch_shouldNotBeSearchable() throws Exception","name":"testSearchStudent_deleteAfterSearch_shouldNotBeSearchable","type":"void","javadoc":null},{"fullQualified":"public void testSearchStudents_noSearchService_shouldThrowException()","name":"testSearchStudents_noSearchService_shouldThrowException","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ResponseBodyAndCode","fullyQualifiedName":"teammates.test.AbstractBackDoor.ResponseBodyAndCode","isInterface":false,"codeComments":[],"allMethods":[],"allConstructors":[{"identifier":" ResponseBodyAndCode(String responseBody, int responseCode)","javadocComment":null}]},{"name":"AbstractBackDoor","fullyQualifiedName":"teammates.test.AbstractBackDoor","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Gets the URL of the back-end.\n     ","lineNumber":77,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the backdoor key used to authenticate with the back-end.\n     ","lineNumber":82,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the CSRF key used to authenticate with the back-end.\n     ","lineNumber":87,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes GET request with the given {@code relativeUrl}.\n     *\n     * @return The body content and status of the HTTP response\n     ","lineNumber":92,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes POST request with the given {@code relativeUrl}.\n     *\n     * @return The body content and status of the HTTP response\n     ","lineNumber":101,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes PUT request with the given {@code relativeUrl}.\n     *\n     * @return The body content and status of the HTTP response\n     ","lineNumber":110,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes DELETE request with the given {@code relativeUrl}.\n     *\n     * @return The body content and status of the HTTP response\n     ","lineNumber":119,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes HTTP request with the given {@code method} and {@code relativeUrl}.\n     *\n     * @return The content of the HTTP response\n     ","lineNumber":128,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes GET request with the given {@code relativeUrl}.\n     *\n     * @return The content of the HTTP response\n     ","lineNumber":175,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes and restores given data in the database. This method is to be called on test startup.\n     *\n     * <p>Note:  The data associated with the test accounts have to be <strong>manually</strong> removed by removing the data\n     * bundle when a test ends because the test accounts are shared across tests.\n     *\n     * <p>Test data should never be cleared after test in order to prevent incurring additional database costs because the\n     * test's data may not be accessed in another test. Also although unlikely in normal conditions, when a test fail to\n     * remove data bundle on teardown, another test should have no reason to fail.\n     *\n     * <p>Another reason not to remove associated data after a test is that in case of test failures, it helps to have the\n     * associated data in the database to debug the failure.\n     *\n     * <p>This means that removing the data bundle on startup is not always sufficient because a test only knows how\n     * to remove its associated data.\n     * This is why some tests would fail when they use the same account and use different data.\n     * Extending this method to remove data outside its associated data would introduce\n     * unnecessary complications such as extra costs and knowing exactly how much data to remove. Removing too much data\n     * would not just incur higher database costs but we can make tests unexpectedly pass(fail) when the data is expected to\n     * be not present(present) in another test.\n     *\n     * <p>TODO: Hence, we need to explicitly remove the data bundle in tests on teardown to avoid instability of tests.\n     * However, removing the data bundle on teardown manually is not a perfect solution because two tests can concurrently\n     * access the same account and their data may get mixed up in the process. This is a major problem we need to address.\n     ","lineNumber":231,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Removes given data from the database.\n     *\n     * <p>If given entities have already been deleted, it fails silently.\n     ","lineNumber":267,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets the cookie format for the given user ID.\n     ","lineNumber":276,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Puts searchable documents in data bundle into the database.\n     ","lineNumber":288,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an account from the database.\n     ","lineNumber":301,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets course data from the database.\n     ","lineNumber":328,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a course from the database.\n     ","lineNumber":342,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets archived course data from the database.\n     ","lineNumber":357,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a archived course from the database.\n     ","lineNumber":386,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the course exists and is in recycle bin.\n     ","lineNumber":401,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets instructor data from the database.\n     ","lineNumber":412,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get instructor from database. Does not include certain fields like InstructorPrivileges.\n     ","lineNumber":438,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets student data from the database.\n     ","lineNumber":470,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get student from database.\n     ","lineNumber":484,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get feedback session data from database.\n     ","lineNumber":516,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get feedback session from database.\n     ","lineNumber":531,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get soft deleted feedback session from database.\n     ","lineNumber":588,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get feedback question from database.\n     ","lineNumber":617,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Converts List of FeedbackParticipantType to sorted List of FeedbackVisibilityType.\n     ","lineNumber":664,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get feedback response from database.\n     ","lineNumber":690,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Get feedback response comment from database.\n     ","lineNumber":725,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a course from the database.\n     ","lineNumber":749,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an account request from the database.\n     ","lineNumber":758,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets registration key of an account request from the database.\n     ","lineNumber":778,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes an account request from the database.\n     ","lineNumber":794,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets notification data from the database.\n     ","lineNumber":804,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a notification from the database.\n     ","lineNumber":817,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a notification from the database.\n     ","lineNumber":837,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets a deadline extension from the database.\n     ","lineNumber":846,"isOrphan":false}],"allMethods":[{"fullQualified":"protected abstract String getAppUrl()","name":"getAppUrl","type":"String","javadoc":"\n     * Gets the URL of the back-end.\n     "},{"fullQualified":"protected abstract String getBackdoorKey()","name":"getBackdoorKey","type":"String","javadoc":"\n     * Gets the backdoor key used to authenticate with the back-end.\n     "},{"fullQualified":"protected abstract String getCsrfKey()","name":"getCsrfKey","type":"String","javadoc":"\n     * Gets the CSRF key used to authenticate with the back-end.\n     "},{"fullQualified":"public ResponseBodyAndCode executeGetRequest(String relativeUrl, Map<String, String> params)","name":"executeGetRequest","type":"ResponseBodyAndCode","javadoc":"\n     * Executes GET request with the given {@code relativeUrl}.\n     *\n     * @return The body content and status of the HTTP response\n     "},{"fullQualified":"public ResponseBodyAndCode executePostRequest(String relativeUrl, Map<String, String> params, String body)","name":"executePostRequest","type":"ResponseBodyAndCode","javadoc":"\n     * Executes POST request with the given {@code relativeUrl}.\n     *\n     * @return The body content and status of the HTTP response\n     "},{"fullQualified":"public ResponseBodyAndCode executePutRequest(String relativeUrl, Map<String, String> params, String body)","name":"executePutRequest","type":"ResponseBodyAndCode","javadoc":"\n     * Executes PUT request with the given {@code relativeUrl}.\n     *\n     * @return The body content and status of the HTTP response\n     "},{"fullQualified":"public ResponseBodyAndCode executeDeleteRequest(String relativeUrl, Map<String, String> params)","name":"executeDeleteRequest","type":"ResponseBodyAndCode","javadoc":"\n     * Executes DELETE request with the given {@code relativeUrl}.\n     *\n     * @return The body content and status of the HTTP response\n     "},{"fullQualified":"private ResponseBodyAndCode executeRequest(String method, String relativeUrl, Map<String, String> params, String body)","name":"executeRequest","type":"ResponseBodyAndCode","javadoc":"\n     * Executes HTTP request with the given {@code method} and {@code relativeUrl}.\n     *\n     * @return The content of the HTTP response\n     "},{"fullQualified":"private static HttpGet createGetRequest(String url, Map<String, String> params)","name":"createGetRequest","type":"HttpGet","javadoc":"\n     * Executes GET request with the given {@code relativeUrl}.\n     *\n     * @return The content of the HTTP response\n     "},{"fullQualified":"private static HttpPost createPostRequest(String url, Map<String, String> params, String body)","name":"createPostRequest","type":"HttpPost","javadoc":null},{"fullQualified":"private static HttpPut createPutRequest(String url, Map<String, String> params, String body)","name":"createPutRequest","type":"HttpPut","javadoc":null},{"fullQualified":"private static HttpDelete createDeleteRequest(String url, Map<String, String> params)","name":"createDeleteRequest","type":"HttpDelete","javadoc":null},{"fullQualified":"private static URI createBasicUri(String url, Map<String, String> params)","name":"createBasicUri","type":"URI","javadoc":null},{"fullQualified":"private void addAuthKeys(HttpRequestBase request)","name":"addAuthKeys","type":"void","javadoc":null},{"fullQualified":"public String removeAndRestoreDataBundle(DataBundle dataBundle) throws HttpRequestFailedException","name":"removeAndRestoreDataBundle","type":"String","javadoc":"\n     * Removes and restores given data in the database. This method is to be called on test startup.\n     *\n     * <p>Note:  The data associated with the test accounts have to be <strong>manually</strong> removed by removing the data\n     * bundle when a test ends because the test accounts are shared across tests.\n     *\n     * <p>Test data should never be cleared after test in order to prevent incurring additional database costs because the\n     * test's data may not be accessed in another test. Also although unlikely in normal conditions, when a test fail to\n     * remove data bundle on teardown, another test should have no reason to fail.\n     *\n     * <p>Another reason not to remove associated data after a test is that in case of test failures, it helps to have the\n     * associated data in the database to debug the failure.\n     *\n     * <p>This means that removing the data bundle on startup is not always sufficient because a test only knows how\n     * to remove its associated data.\n     * This is why some tests would fail when they use the same account and use different data.\n     * Extending this method to remove data outside its associated data would introduce\n     * unnecessary complications such as extra costs and knowing exactly how much data to remove. Removing too much data\n     * would not just incur higher database costs but we can make tests unexpectedly pass(fail) when the data is expected to\n     * be not present(present) in another test.\n     *\n     * <p>TODO: Hence, we need to explicitly remove the data bundle in tests on teardown to avoid instability of tests.\n     * However, removing the data bundle on teardown manually is not a perfect solution because two tests can concurrently\n     * access the same account and their data may get mixed up in the process. This is a major problem we need to address.\n     "},{"fullQualified":"public void removeDataBundle(DataBundle dataBundle)","name":"removeDataBundle","type":"void","javadoc":"\n     * Removes given data from the database.\n     *\n     * <p>If given entities have already been deleted, it fails silently.\n     "},{"fullQualified":"public String getUserCookie(String userId)","name":"getUserCookie","type":"String","javadoc":"\n     * Gets the cookie format for the given user ID.\n     "},{"fullQualified":"public String putDocuments(DataBundle dataBundle) throws HttpRequestFailedException","name":"putDocuments","type":"String","javadoc":"\n     * Puts searchable documents in data bundle into the database.\n     "},{"fullQualified":"public AccountAttributes getAccount(String googleId)","name":"getAccount","type":"AccountAttributes","javadoc":"\n     * Gets an account from the database.\n     "},{"fullQualified":"public CourseData getCourseData(String courseId)","name":"getCourseData","type":"CourseData","javadoc":"\n     * Gets course data from the database.\n     "},{"fullQualified":"public CourseAttributes getCourse(String courseId)","name":"getCourse","type":"CourseAttributes","javadoc":"\n     * Gets a course from the database.\n     "},{"fullQualified":"public CourseData getArchivedCourseData(String instructorId, String courseId)","name":"getArchivedCourseData","type":"CourseData","javadoc":"\n     * Gets archived course data from the database.\n     "},{"fullQualified":"public CourseAttributes getArchivedCourse(String instructorId, String courseId)","name":"getArchivedCourse","type":"CourseAttributes","javadoc":"\n     * Gets a archived course from the database.\n     "},{"fullQualified":"public boolean isCourseInRecycleBin(String courseId)","name":"isCourseInRecycleBin","type":"boolean","javadoc":"\n     * Returns true if the course exists and is in recycle bin.\n     "},{"fullQualified":"public InstructorData getInstructorData(String courseId, String email)","name":"getInstructorData","type":"InstructorData","javadoc":"\n     * Gets instructor data from the database.\n     "},{"fullQualified":"public InstructorAttributes getInstructor(String courseId, String instructorEmail)","name":"getInstructor","type":"InstructorAttributes","javadoc":"\n     * Get instructor from database. Does not include certain fields like InstructorPrivileges.\n     "},{"fullQualified":"public StudentData getStudentData(String courseId, String studentEmail)","name":"getStudentData","type":"StudentData","javadoc":"\n     * Gets student data from the database.\n     "},{"fullQualified":"public StudentAttributes getStudent(String courseId, String studentEmail)","name":"getStudent","type":"StudentAttributes","javadoc":"\n     * Get student from database.\n     "},{"fullQualified":"public FeedbackSessionData getFeedbackSessionData(String courseId, String feedbackSessionName)","name":"getFeedbackSessionData","type":"FeedbackSessionData","javadoc":"\n     * Get feedback session data from database.\n     "},{"fullQualified":"public FeedbackSessionAttributes getFeedbackSession(String courseId, String feedbackSessionName)","name":"getFeedbackSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Get feedback session from database.\n     "},{"fullQualified":"private Map<String, Instant> convertDeadlinesToInstant(Map<String, Long> deadlines, String timezone)","name":"convertDeadlinesToInstant","type":"Map<String,Instant>","javadoc":null},{"fullQualified":"public FeedbackSessionAttributes getSoftDeletedSession(String feedbackSessionName, String instructorId)","name":"getSoftDeletedSession","type":"FeedbackSessionAttributes","javadoc":"\n     * Get soft deleted feedback session from database.\n     "},{"fullQualified":"public FeedbackQuestionAttributes getFeedbackQuestion(String courseId, String feedbackSessionName, int qnNumber)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":"\n     * Get feedback question from database.\n     "},{"fullQualified":"private static List<FeedbackParticipantType> convertToFeedbackParticipantType(List<FeedbackVisibilityType> feedbackVisibilityTypeList)","name":"convertToFeedbackParticipantType","type":"List<FeedbackParticipantType>","javadoc":"\n     * Converts List of FeedbackParticipantType to sorted List of FeedbackVisibilityType.\n     "},{"fullQualified":"public FeedbackResponseAttributes getFeedbackResponse(String feedbackQuestionId, String giver, String recipient)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":"\n     * Get feedback response from database.\n     "},{"fullQualified":"public FeedbackResponseCommentAttributes getFeedbackResponseComment(String feedbackResponseId)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":"\n     * Get feedback response comment from database.\n     "},{"fullQualified":"public void deleteCourse(String courseId)","name":"deleteCourse","type":"void","javadoc":"\n     * Deletes a course from the database.\n     "},{"fullQualified":"public AccountRequestAttributes getAccountRequest(String email, String institute)","name":"getAccountRequest","type":"AccountRequestAttributes","javadoc":"\n     * Gets an account request from the database.\n     "},{"fullQualified":"public String getRegKeyForAccountRequest(String email, String institute)","name":"getRegKeyForAccountRequest","type":"String","javadoc":"\n     * Gets registration key of an account request from the database.\n     "},{"fullQualified":"public void deleteAccountRequest(String email, String institute)","name":"deleteAccountRequest","type":"void","javadoc":"\n     * Deletes an account request from the database.\n     "},{"fullQualified":"public NotificationData getNotificationData(String notificationId)","name":"getNotificationData","type":"NotificationData","javadoc":"\n     * Gets notification data from the database.\n     "},{"fullQualified":"public NotificationAttributes getNotification(String notificationId)","name":"getNotification","type":"NotificationAttributes","javadoc":"\n     * Gets a notification from the database.\n     "},{"fullQualified":"public void deleteNotification(String notificationId)","name":"deleteNotification","type":"void","javadoc":"\n     * Deletes a notification from the database.\n     "},{"fullQualified":"public DeadlineExtensionAttributes getDeadlineExtension(String courseId, String feedbackSessionName, String userEmail, boolean isInstructor)","name":"getDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":"\n     * Gets a deadline extension from the database.\n     "}],"allConstructors":[]},{"name":"AssertHelper","fullyQualifiedName":"teammates.test.AssertHelper","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":21,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Assert instant is now +- 1 min.\n     ","lineNumber":24,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Asserts that the superstringActual contains the exact occurrence of\n     * substringExpected. Display the difference between the two on failure.\n     ","lineNumber":36,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Asserts that the two given lists have the same contents, ignoring their order.\n     ","lineNumber":47,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void assertInstantIsNow(Instant instant)","name":"assertInstantIsNow","type":"void","javadoc":"\n     * Assert instant is now +- 1 min.\n     "},{"fullQualified":"private static void assertInstantWithinRange(Instant instant, Instant start, Instant end)","name":"assertInstantWithinRange","type":"void","javadoc":null},{"fullQualified":"public static void assertContains(String substringExpected, String superstringActual)","name":"assertContains","type":"void","javadoc":"\n     * Asserts that the superstringActual contains the exact occurrence of\n     * substringExpected. Display the difference between the two on failure.\n     "},{"fullQualified":"public static void assertSameContentIgnoreOrder(List<?> a, List<?> b)","name":"assertSameContentIgnoreOrder","type":"void","javadoc":"\n     * Asserts that the two given lists have the same contents, ignoring their order.\n     "}],"allConstructors":[{"identifier":"private AssertHelper()","javadocComment":null}]},{"name":"AssertHelperTest","fullyQualifiedName":"teammates.test.AssertHelperTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testAssertContains()","name":"testAssertContains","type":"void","javadoc":null}],"allConstructors":[]},{"name":"Executable","fullyQualifiedName":"teammates.test.BaseTestCase.Executable","isInterface":true,"codeComments":[{"type":"JavadocComment","text":"\n         * Executes a block of code, potentially throwing a {@link Throwable}.\n         ","lineNumber":253,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.ON:IllegalThrows","lineNumber":258,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.OFF:IllegalThrows","lineNumber":256,"isOrphan":false}],"allMethods":[{"fullQualified":" void execute() throws Throwable","name":"execute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BaseTestCase","fullyQualifiedName":"teammates.test.BaseTestCase","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Test Segment divider. Used to divide a test case into logical sections.\n     * The weird name is for easy spotting.\n     *\n     * @param description\n     *            of the logical section. This will be printed.\n     ","lineNumber":21,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.ON:AbbreviationAsWordInName|MethodName","lineNumber":32,"isOrphan":true},{"type":"BlockComment","text":"\n     * Here are some of the most common assertion methods provided by JUnit.\n     * They are copied here to prevent repetitive importing in test classes.\n     ","lineNumber":136,"isOrphan":true},{"type":"LineComment","text":" This method is adapted from JUnit 5's assertThrows.","lineNumber":213,"isOrphan":true},{"type":"JavadocComment","text":"\n     * {@code Executable} is a functional interface that can be used to\n     * implement any generic block of code that potentially throws a\n     * {@link Throwable}.\n     *\n     * <p>The {@code Executable} interface is similar to {@link Runnable},\n     * except that an {@code Executable} can throw any kind of exception.\n     ","lineNumber":241,"isOrphan":true},{"type":"LineComment","text":" This interface is adapted from JUnit 5's Executable interface.","lineNumber":249,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.OFF:AbbreviationAsWordInName|MethodName the weird name is for easy spotting.","lineNumber":28,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Creates a DataBundle as specified in typicalDataBundle.json.\n     ","lineNumber":54,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Populates the feedback question and response IDs within the data bundle.\n     *\n     * <p>For tests where simulated database is used, the backend will assign the question and response IDs\n     * when the entities are persisted into the database, and modify the relation IDs accordingly.\n     * However, for tests that do not use simulated database (e.g. pure data structure tests),\n     * the assignment of IDs have to be simulated.\n     ","lineNumber":71,"isOrphan":false},{"type":"LineComment","text":" Assign the same ID as the key as a later function requires a match between the key and the question ID","lineNumber":83,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Invokes the method named {@code methodName} as defined in the {@code definingClass}.\n     * @param definingClass     the class which defines the method\n     * @param parameterTypes    the parameter types of the method,\n     *                          which must be passed in the same order defined in the method\n     * @param invokingObject    the object which invokes the method, can be {@code null} if the method is static\n     * @param args              the arguments to be passed to the method invocation\n     ","lineNumber":99,"isOrphan":false},{"type":"LineComment","text":" Once we upgrade to JUnit 5, their built-in method shall be used instead.","lineNumber":214,"isOrphan":false},{"type":"LineComment","text":" As per reference method's specification","lineNumber":217,"isOrphan":false},{"type":"LineComment","text":" Once we upgrade to JUnit 5, this interface shall no longer be necessary.","lineNumber":250,"isOrphan":false},{"type":"JavadocComment","text":"\n         * Executes a block of code, potentially throwing a {@link Throwable}.\n         ","lineNumber":253,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.ON:IllegalThrows","lineNumber":258,"isOrphan":true},{"type":"LineComment","text":" CHECKSTYLE.OFF:IllegalThrows","lineNumber":256,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void ______TS(String description)","name":"______TS","type":"void","javadoc":null},{"fullQualified":"public void printTestClassHeader()","name":"printTestClassHeader","type":"void","javadoc":null},{"fullQualified":"public void printTestClassFooter()","name":"printTestClassFooter","type":"void","javadoc":null},{"fullQualified":"protected static void print(String message)","name":"print","type":"void","javadoc":null},{"fullQualified":"protected String getTestDataFolder()","name":"getTestDataFolder","type":"String","javadoc":null},{"fullQualified":"protected DataBundle getTypicalDataBundle()","name":"getTypicalDataBundle","type":"DataBundle","javadoc":"\n     * Creates a DataBundle as specified in typicalDataBundle.json.\n     "},{"fullQualified":"protected DataBundle loadDataBundle(String jsonFileName)","name":"loadDataBundle","type":"DataBundle","javadoc":null},{"fullQualified":"protected void populateQuestionAndResponseIds(DataBundle dataBundle)","name":"populateQuestionAndResponseIds","type":"void","javadoc":"\n     * Populates the feedback question and response IDs within the data bundle.\n     *\n     * <p>For tests where simulated database is used, the backend will assign the question and response IDs\n     * when the entities are persisted into the database, and modify the relation IDs accordingly.\n     * However, for tests that do not use simulated database (e.g. pure data structure tests),\n     * the assignment of IDs have to be simulated.\n     "},{"fullQualified":"protected static Object invokeMethod(Class<?> definingClass, String methodName, Class<?>[] parameterTypes, Object invokingObject, Object[] args) throws ReflectiveOperationException","name":"invokeMethod","type":"Object","javadoc":"\n     * Invokes the method named {@code methodName} as defined in the {@code definingClass}.\n     * @param definingClass     the class which defines the method\n     * @param parameterTypes    the parameter types of the method,\n     *                          which must be passed in the same order defined in the method\n     * @param invokingObject    the object which invokes the method, can be {@code null} if the method is static\n     * @param args              the arguments to be passed to the method invocation\n     "},{"fullQualified":"protected static String getPopulatedErrorMessage(String messageTemplate, String userInput, String fieldName, String errorReason) throws ReflectiveOperationException","name":"getPopulatedErrorMessage","type":"String","javadoc":null},{"fullQualified":"protected static String getPopulatedErrorMessage(String messageTemplate, String userInput, String fieldName, String errorReason, int maxLength) throws ReflectiveOperationException","name":"getPopulatedErrorMessage","type":"String","javadoc":null},{"fullQualified":"protected static String getPopulatedEmptyStringErrorMessage(String messageTemplate, String fieldName, int maxLength) throws ReflectiveOperationException","name":"getPopulatedEmptyStringErrorMessage","type":"String","javadoc":null},{"fullQualified":"protected static void assertTrue(boolean condition)","name":"assertTrue","type":"void","javadoc":null},{"fullQualified":"protected static void assertTrue(String message, boolean condition)","name":"assertTrue","type":"void","javadoc":null},{"fullQualified":"protected static void assertFalse(boolean condition)","name":"assertFalse","type":"void","javadoc":null},{"fullQualified":"protected static void assertFalse(String message, boolean condition)","name":"assertFalse","type":"void","javadoc":null},{"fullQualified":"protected static void assertEquals(int expected, int actual)","name":"assertEquals","type":"void","javadoc":null},{"fullQualified":"protected static void assertEquals(String message, int expected, int actual)","name":"assertEquals","type":"void","javadoc":null},{"fullQualified":"protected static void assertEquals(long expected, long actual)","name":"assertEquals","type":"void","javadoc":null},{"fullQualified":"protected static void assertEquals(double expected, double actual, double delta)","name":"assertEquals","type":"void","javadoc":null},{"fullQualified":"protected static void assertEquals(Object expected, Object actual)","name":"assertEquals","type":"void","javadoc":null},{"fullQualified":"protected static void assertEquals(String message, Object expected, Object actual)","name":"assertEquals","type":"void","javadoc":null},{"fullQualified":"protected static void assertArrayEquals(byte[] expected, byte[] actual)","name":"assertArrayEquals","type":"void","javadoc":null},{"fullQualified":"protected static void assertNotEquals(Object first, Object second)","name":"assertNotEquals","type":"void","javadoc":null},{"fullQualified":"protected static void assertNotSame(Object unexpected, Object actual)","name":"assertNotSame","type":"void","javadoc":null},{"fullQualified":"protected static void assertNull(Object object)","name":"assertNull","type":"void","javadoc":null},{"fullQualified":"protected static void assertNull(String message, Object object)","name":"assertNull","type":"void","javadoc":null},{"fullQualified":"protected static void assertNotNull(Object object)","name":"assertNotNull","type":"void","javadoc":null},{"fullQualified":"protected static void assertNotNull(String message, Object object)","name":"assertNotNull","type":"void","javadoc":null},{"fullQualified":"protected static void fail(String message)","name":"fail","type":"void","javadoc":null},{"fullQualified":"protected static T assertThrows(Class<T> expectedType, Executable executable)","name":"assertThrows","type":"T","javadoc":null},{"fullQualified":"private static String getCanonicalName(Class<?> clazz)","name":"getCanonicalName","type":"String","javadoc":null}],"allConstructors":[]},{"name":"BaseTestCaseWithDatabaseAccess","fullyQualifiedName":"teammates.test.BaseTestCaseWithDatabaseAccess","isInterface":false,"codeComments":[{"type":"LineComment","text":" Ignore time field as it is stamped at the time of creation in testing","lineNumber":187,"isOrphan":false},{"type":"LineComment","text":" Ignore time field as it is stamped at the time of creation in testing","lineNumber":196,"isOrphan":false},{"type":"LineComment","text":" Not available in FeedbackSessionData and thus ignored","lineNumber":210,"isOrphan":false},{"type":"LineComment","text":" pretend keys match because the key is generated only before storing into database","lineNumber":215,"isOrphan":false},{"type":"LineComment","text":" For these fields, we consider null and \"\" equivalent.","lineNumber":222,"isOrphan":false},{"type":"LineComment","text":" pretend keys match because the key is generated only before storing into database","lineNumber":233,"isOrphan":false},{"type":"LineComment","text":" Ignore time field as it is stamped at the time of creation in testing","lineNumber":240,"isOrphan":false},{"type":"LineComment","text":" Ignore time field as it is stamped at the time of creation in testing","lineNumber":246,"isOrphan":false}],"allMethods":[{"fullQualified":"protected void verifyPresentInDatabase(DataBundle data)","name":"verifyPresentInDatabase","type":"void","javadoc":null},{"fullQualified":"protected void verifyPresentInDatabase(EntityAttributes<?> expected)","name":"verifyPresentInDatabase","type":"void","javadoc":null},{"fullQualified":"private EntityAttributes<?> getEntity(EntityAttributes<?> expected)","name":"getEntity","type":"EntityAttributes<?>","javadoc":null},{"fullQualified":"protected void verifyAbsentInDatabase(EntityAttributes<?> entity)","name":"verifyAbsentInDatabase","type":"void","javadoc":null},{"fullQualified":"private void verifyEquals(EntityAttributes<?> expected, EntityAttributes<?> actual)","name":"verifyEquals","type":"void","javadoc":null},{"fullQualified":"protected abstract AccountAttributes getAccount(AccountAttributes account)","name":"getAccount","type":"AccountAttributes","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(AccountAttributes expected, AccountAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(StudentProfileAttributes expected, StudentProfileAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(CourseAttributes expected, CourseAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(FeedbackQuestionAttributes expected, FeedbackQuestionAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(FeedbackResponseAttributes expected, FeedbackResponseAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(FeedbackSessionAttributes expected, FeedbackSessionAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(InstructorAttributes expected, InstructorAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(StudentAttributes expected, StudentAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(DeadlineExtensionAttributes expected, DeadlineExtensionAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"private void equalizeIrrelevantData(NotificationAttributes expected, NotificationAttributes actual)","name":"equalizeIrrelevantData","type":"void","javadoc":null},{"fullQualified":"protected abstract StudentProfileAttributes getStudentProfile(StudentProfileAttributes studentProfileAttributes)","name":"getStudentProfile","type":"StudentProfileAttributes","javadoc":null},{"fullQualified":"protected abstract CourseAttributes getCourse(CourseAttributes course)","name":"getCourse","type":"CourseAttributes","javadoc":null},{"fullQualified":"protected abstract FeedbackQuestionAttributes getFeedbackQuestion(FeedbackQuestionAttributes fq)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":null},{"fullQualified":"protected abstract FeedbackResponseCommentAttributes getFeedbackResponseComment(FeedbackResponseCommentAttributes frc)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":null},{"fullQualified":"protected abstract FeedbackResponseAttributes getFeedbackResponse(FeedbackResponseAttributes fr)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"protected abstract FeedbackSessionAttributes getFeedbackSession(FeedbackSessionAttributes fs)","name":"getFeedbackSession","type":"FeedbackSessionAttributes","javadoc":null},{"fullQualified":"protected abstract InstructorAttributes getInstructor(InstructorAttributes instructor)","name":"getInstructor","type":"InstructorAttributes","javadoc":null},{"fullQualified":"protected abstract StudentAttributes getStudent(StudentAttributes student)","name":"getStudent","type":"StudentAttributes","javadoc":null},{"fullQualified":"protected abstract AccountRequestAttributes getAccountRequest(AccountRequestAttributes accountRequest)","name":"getAccountRequest","type":"AccountRequestAttributes","javadoc":null},{"fullQualified":"protected abstract DeadlineExtensionAttributes getDeadlineExtension(DeadlineExtensionAttributes accountRequest)","name":"getDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":null},{"fullQualified":"protected abstract NotificationAttributes getNotification(NotificationAttributes notification)","name":"getNotification","type":"NotificationAttributes","javadoc":null},{"fullQualified":"protected void removeAndRestoreDataBundle(DataBundle testData)","name":"removeAndRestoreDataBundle","type":"void","javadoc":null},{"fullQualified":"protected abstract boolean doRemoveAndRestoreDataBundle(DataBundle testData)","name":"doRemoveAndRestoreDataBundle","type":"boolean","javadoc":null},{"fullQualified":"protected void putDocuments(DataBundle testData)","name":"putDocuments","type":"void","javadoc":null},{"fullQualified":"protected abstract boolean doPutDocuments(DataBundle testData)","name":"doPutDocuments","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"BaseTestCaseWithLocalDatabaseAccess","fullyQualifiedName":"teammates.test.BaseTestCaseWithLocalDatabaseAccess","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void setupDbLayer() throws Exception","name":"setupDbLayer","type":"void","javadoc":null},{"fullQualified":"public void setupObjectify()","name":"setupObjectify","type":"void","javadoc":null},{"fullQualified":"public void tearDownObjectify()","name":"tearDownObjectify","type":"void","javadoc":null},{"fullQualified":"public void resetDbLayer() throws Exception","name":"resetDbLayer","type":"void","javadoc":null},{"fullQualified":"public void tearDownLocalDatastoreHelper() throws Exception","name":"tearDownLocalDatastoreHelper","type":"void","javadoc":null},{"fullQualified":"protected AccountAttributes getAccount(AccountAttributes account)","name":"getAccount","type":"AccountAttributes","javadoc":null},{"fullQualified":"protected StudentProfileAttributes getStudentProfile(StudentProfileAttributes studentProfileAttributes)","name":"getStudentProfile","type":"StudentProfileAttributes","javadoc":null},{"fullQualified":"protected CourseAttributes getCourse(CourseAttributes course)","name":"getCourse","type":"CourseAttributes","javadoc":null},{"fullQualified":"protected FeedbackQuestionAttributes getFeedbackQuestion(FeedbackQuestionAttributes fq)","name":"getFeedbackQuestion","type":"FeedbackQuestionAttributes","javadoc":null},{"fullQualified":"protected FeedbackResponseCommentAttributes getFeedbackResponseComment(FeedbackResponseCommentAttributes frc)","name":"getFeedbackResponseComment","type":"FeedbackResponseCommentAttributes","javadoc":null},{"fullQualified":"protected FeedbackResponseAttributes getFeedbackResponse(FeedbackResponseAttributes fr)","name":"getFeedbackResponse","type":"FeedbackResponseAttributes","javadoc":null},{"fullQualified":"protected FeedbackSessionAttributes getFeedbackSession(FeedbackSessionAttributes fs)","name":"getFeedbackSession","type":"FeedbackSessionAttributes","javadoc":null},{"fullQualified":"protected InstructorAttributes getInstructor(InstructorAttributes instructor)","name":"getInstructor","type":"InstructorAttributes","javadoc":null},{"fullQualified":"protected StudentAttributes getStudent(StudentAttributes student)","name":"getStudent","type":"StudentAttributes","javadoc":null},{"fullQualified":"protected AccountRequestAttributes getAccountRequest(AccountRequestAttributes accountRequest)","name":"getAccountRequest","type":"AccountRequestAttributes","javadoc":null},{"fullQualified":"protected DeadlineExtensionAttributes getDeadlineExtension(DeadlineExtensionAttributes deadlineExtension)","name":"getDeadlineExtension","type":"DeadlineExtensionAttributes","javadoc":null},{"fullQualified":"protected NotificationAttributes getNotification(NotificationAttributes notification)","name":"getNotification","type":"NotificationAttributes","javadoc":null},{"fullQualified":"protected void removeAndRestoreTypicalDataBundle()","name":"removeAndRestoreTypicalDataBundle","type":"void","javadoc":null},{"fullQualified":"protected boolean doRemoveAndRestoreDataBundle(DataBundle dataBundle)","name":"doRemoveAndRestoreDataBundle","type":"boolean","javadoc":null},{"fullQualified":"protected boolean doPutDocuments(DataBundle dataBundle)","name":"doPutDocuments","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"EmailChecker","fullyQualifiedName":"teammates.test.EmailChecker","isInterface":false,"codeComments":[{"type":"LineComment","text":" Utility class","lineNumber":19,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Verifies that the given {@code emailContent} is the same as\n     * the content given in the file at {@code fileName}. <br>\n     ","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Injects values specified in configuration files to the appropriate placeholders.\n     ","lineNumber":57,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Processes the {@code emailContent} for comparison.\n     ","lineNumber":69,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Substitutes values that are different across various test runs with placeholders.\n     * These values are identified using their known, unique formats.\n     ","lineNumber":76,"isOrphan":false},{"type":"LineComment","text":" regkey in URLs","lineNumber":81,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Processes the {@code emailContent} string for regeneration of expected email content.<br>\n     * Pre-condition: {@code emailContent} has previously been processed with the\n     * {@link #processEmailForComparison} function.\n     ","lineNumber":92,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void verifyEmailContent(String emailContent, String fileName) throws IOException","name":"verifyEmailContent","type":"void","javadoc":"\n     * Verifies that the given {@code emailContent} is the same as\n     * the content given in the file at {@code fileName}. <br>\n     "},{"fullQualified":"private static boolean updateSnapshot(String filePath, String emailContent) throws IOException","name":"updateSnapshot","type":"boolean","javadoc":null},{"fullQualified":"private static boolean regenerateEmailFile(String filePath, String emailContent) throws IOException","name":"regenerateEmailFile","type":"boolean","javadoc":null},{"fullQualified":"private static String injectTestProperties(String emailContent)","name":"injectTestProperties","type":"String","javadoc":"\n     * Injects values specified in configuration files to the appropriate placeholders.\n     "},{"fullQualified":"private static String getAppUrl()","name":"getAppUrl","type":"String","javadoc":null},{"fullQualified":"public static String processEmailForComparison(String emailContent)","name":"processEmailForComparison","type":"String","javadoc":"\n     * Processes the {@code emailContent} for comparison.\n     "},{"fullQualified":"private static String replaceUnpredictableValuesWithPlaceholders(String emailContent)","name":"replaceUnpredictableValuesWithPlaceholders","type":"String","javadoc":"\n     * Substitutes values that are different across various test runs with placeholders.\n     * These values are identified using their known, unique formats.\n     "},{"fullQualified":"private static String replaceInjectedValuesWithPlaceholders(String emailContent)","name":"replaceInjectedValuesWithPlaceholders","type":"String","javadoc":null},{"fullQualified":"private static String processEmailForExpectedEmailRegeneration(String emailContent)","name":"processEmailForExpectedEmailRegeneration","type":"String","javadoc":"\n     * Processes the {@code emailContent} string for regeneration of expected email content.<br>\n     * Pre-condition: {@code emailContent} has previously been processed with the\n     * {@link #processEmailForComparison} function.\n     "}],"allConstructors":[{"identifier":"private EmailChecker()","javadocComment":null}]},{"name":"EmailCheckerTest","fullyQualifiedName":"teammates.test.EmailCheckerTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testEmailContentChecking() throws Exception","name":"testEmailContentChecking","type":"void","javadoc":null},{"fullQualified":"private String injectContextDependentValuesForTest(String emailContent)","name":"injectContextDependentValuesForTest","type":"String","javadoc":null},{"fullQualified":"private static String getAppUrl()","name":"getAppUrl","type":"String","javadoc":null}],"allConstructors":[]},{"name":"FileHelper","fullyQualifiedName":"teammates.test.FileHelper","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":17,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Reads the file with the specified path as a String.\n     ","lineNumber":20,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Reads the file with the specified path as a byte array.\n     ","lineNumber":29,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Saves the supplied content to the specified file path.\n     ","lineNumber":40,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes the file with the specified path.\n     ","lineNumber":49,"isOrphan":false}],"allMethods":[{"fullQualified":"public static String readFile(String filePath) throws IOException","name":"readFile","type":"String","javadoc":"\n     * Reads the file with the specified path as a String.\n     "},{"fullQualified":"public static byte[] readFileAsBytes(String filePath) throws IOException","name":"readFileAsBytes","type":"byte[]","javadoc":"\n     * Reads the file with the specified path as a byte array.\n     "},{"fullQualified":"public static void saveFile(String filePath, String content) throws IOException","name":"saveFile","type":"void","javadoc":"\n     * Saves the supplied content to the specified file path.\n     "},{"fullQualified":"public static void deleteFile(String filePath)","name":"deleteFile","type":"void","javadoc":"\n     * Deletes the file with the specified path.\n     "}],"allConstructors":[{"identifier":"private FileHelper()","javadocComment":null}]},{"name":"MockFilterChain","fullyQualifiedName":"teammates.test.MockFilterChain","isInterface":false,"codeComments":[{"type":"LineComment","text":" not used","lineNumber":16,"isOrphan":true}],"allMethods":[{"fullQualified":"public void doFilter(ServletRequest request, ServletResponse response)","name":"doFilter","type":"void","javadoc":null}],"allConstructors":[]},{"name":"MockHttpServletRequest","fullyQualifiedName":"teammates.test.MockHttpServletRequest","isInterface":false,"codeComments":[{"type":"JavadocComment","text":"\n     * Adds cookie to the request.\n     ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Adds header to the request.\n     ","lineNumber":100,"isOrphan":false},{"type":"LineComment","text":" not used","lineNumber":206,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":241,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":246,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":251,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":256,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":261,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":303,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":308,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Adds Part to the request.\n     ","lineNumber":321,"isOrphan":false},{"type":"LineComment","text":" not used","lineNumber":350,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Adds key-value parameter to the request.\n     ","lineNumber":396,"isOrphan":false},{"type":"LineComment","text":" not used","lineNumber":445,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":450,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":473,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":478,"isOrphan":true}],"allMethods":[{"fullQualified":"public String getAuthType()","name":"getAuthType","type":"String","javadoc":null},{"fullQualified":"public Cookie[] getCookies()","name":"getCookies","type":"Cookie[]","javadoc":null},{"fullQualified":"public void addCookie(Cookie cookie)","name":"addCookie","type":"void","javadoc":"\n     * Adds cookie to the request.\n     "},{"fullQualified":"public long getDateHeader(String s)","name":"getDateHeader","type":"long","javadoc":null},{"fullQualified":"public String getHeader(String s)","name":"getHeader","type":"String","javadoc":null},{"fullQualified":"public Enumeration<String> getHeaders(String s)","name":"getHeaders","type":"Enumeration<String>","javadoc":null},{"fullQualified":"public Enumeration<String> getHeaderNames()","name":"getHeaderNames","type":"Enumeration<String>","javadoc":null},{"fullQualified":"public void addHeader(String key, String value)","name":"addHeader","type":"void","javadoc":"\n     * Adds header to the request.\n     "},{"fullQualified":"public int getIntHeader(String s)","name":"getIntHeader","type":"int","javadoc":null},{"fullQualified":"public String getMethod()","name":"getMethod","type":"String","javadoc":null},{"fullQualified":"public String getPathInfo()","name":"getPathInfo","type":"String","javadoc":null},{"fullQualified":"public String getPathTranslated()","name":"getPathTranslated","type":"String","javadoc":null},{"fullQualified":"public String getContextPath()","name":"getContextPath","type":"String","javadoc":null},{"fullQualified":"public String getQueryString()","name":"getQueryString","type":"String","javadoc":null},{"fullQualified":"public String getRemoteUser()","name":"getRemoteUser","type":"String","javadoc":null},{"fullQualified":"public boolean isUserInRole(String s)","name":"isUserInRole","type":"boolean","javadoc":null},{"fullQualified":"public Principal getUserPrincipal()","name":"getUserPrincipal","type":"Principal","javadoc":null},{"fullQualified":"public String getRequestedSessionId()","name":"getRequestedSessionId","type":"String","javadoc":null},{"fullQualified":"public void setRequestedSessionId(String requestedSessionId)","name":"setRequestedSessionId","type":"void","javadoc":null},{"fullQualified":"public String getRequestURI()","name":"getRequestURI","type":"String","javadoc":null},{"fullQualified":"public StringBuffer getRequestURL()","name":"getRequestURL","type":"StringBuffer","javadoc":null},{"fullQualified":"public String getServletPath()","name":"getServletPath","type":"String","javadoc":null},{"fullQualified":"public HttpSession getSession(boolean b)","name":"getSession","type":"HttpSession","javadoc":null},{"fullQualified":"public HttpSession getSession()","name":"getSession","type":"HttpSession","javadoc":null},{"fullQualified":"public String changeSessionId()","name":"changeSessionId","type":"String","javadoc":null},{"fullQualified":"public boolean isRequestedSessionIdValid()","name":"isRequestedSessionIdValid","type":"boolean","javadoc":null},{"fullQualified":"public boolean isRequestedSessionIdFromCookie()","name":"isRequestedSessionIdFromCookie","type":"boolean","javadoc":null},{"fullQualified":"public boolean isRequestedSessionIdFromURL()","name":"isRequestedSessionIdFromURL","type":"boolean","javadoc":null},{"fullQualified":"public boolean isRequestedSessionIdFromUrl()","name":"isRequestedSessionIdFromUrl","type":"boolean","javadoc":null},{"fullQualified":"public boolean authenticate(HttpServletResponse httpServletResponse)","name":"authenticate","type":"boolean","javadoc":null},{"fullQualified":"public void login(String s, String s1)","name":"login","type":"void","javadoc":null},{"fullQualified":"public void logout()","name":"logout","type":"void","javadoc":null},{"fullQualified":"public Collection<Part> getParts()","name":"getParts","type":"Collection<Part>","javadoc":null},{"fullQualified":"public Part getPart(String s)","name":"getPart","type":"Part","javadoc":null},{"fullQualified":"public void addPart(String key, Part part)","name":"addPart","type":"void","javadoc":"\n     * Adds Part to the request.\n     "},{"fullQualified":"public T upgrade(Class<T> aClass)","name":"upgrade","type":"T","javadoc":null},{"fullQualified":"public Object getAttribute(String s)","name":"getAttribute","type":"Object","javadoc":null},{"fullQualified":"public Enumeration<String> getAttributeNames()","name":"getAttributeNames","type":"Enumeration<String>","javadoc":null},{"fullQualified":"public String getCharacterEncoding()","name":"getCharacterEncoding","type":"String","javadoc":null},{"fullQualified":"public void setCharacterEncoding(String s)","name":"setCharacterEncoding","type":"void","javadoc":null},{"fullQualified":"public int getContentLength()","name":"getContentLength","type":"int","javadoc":null},{"fullQualified":"public long getContentLengthLong()","name":"getContentLengthLong","type":"long","javadoc":null},{"fullQualified":"public String getContentType()","name":"getContentType","type":"String","javadoc":null},{"fullQualified":"public ServletInputStream getInputStream()","name":"getInputStream","type":"ServletInputStream","javadoc":null},{"fullQualified":"public String getParameter(String s)","name":"getParameter","type":"String","javadoc":null},{"fullQualified":"public Enumeration<String> getParameterNames()","name":"getParameterNames","type":"Enumeration<String>","javadoc":null},{"fullQualified":"public String[] getParameterValues(String s)","name":"getParameterValues","type":"String[]","javadoc":null},{"fullQualified":"public Map<String, String[]> getParameterMap()","name":"getParameterMap","type":"Map<String,String[]>","javadoc":null},{"fullQualified":"public void addParam(String key, String value)","name":"addParam","type":"void","javadoc":"\n     * Adds key-value parameter to the request.\n     "},{"fullQualified":"public String getProtocol()","name":"getProtocol","type":"String","javadoc":null},{"fullQualified":"public String getScheme()","name":"getScheme","type":"String","javadoc":null},{"fullQualified":"public String getServerName()","name":"getServerName","type":"String","javadoc":null},{"fullQualified":"public int getServerPort()","name":"getServerPort","type":"int","javadoc":null},{"fullQualified":"public BufferedReader getReader()","name":"getReader","type":"BufferedReader","javadoc":null},{"fullQualified":"public void setBody(String body)","name":"setBody","type":"void","javadoc":null},{"fullQualified":"public String getRemoteAddr()","name":"getRemoteAddr","type":"String","javadoc":null},{"fullQualified":"public String getRemoteHost()","name":"getRemoteHost","type":"String","javadoc":null},{"fullQualified":"public void setAttribute(String s, Object o)","name":"setAttribute","type":"void","javadoc":null},{"fullQualified":"public void removeAttribute(String s)","name":"removeAttribute","type":"void","javadoc":null},{"fullQualified":"public Locale getLocale()","name":"getLocale","type":"Locale","javadoc":null},{"fullQualified":"public Enumeration<Locale> getLocales()","name":"getLocales","type":"Enumeration<Locale>","javadoc":null},{"fullQualified":"public boolean isSecure()","name":"isSecure","type":"boolean","javadoc":null},{"fullQualified":"public RequestDispatcher getRequestDispatcher(String s)","name":"getRequestDispatcher","type":"RequestDispatcher","javadoc":null},{"fullQualified":"public String getRealPath(String s)","name":"getRealPath","type":"String","javadoc":null},{"fullQualified":"public int getRemotePort()","name":"getRemotePort","type":"int","javadoc":null},{"fullQualified":"public String getLocalName()","name":"getLocalName","type":"String","javadoc":null},{"fullQualified":"public String getLocalAddr()","name":"getLocalAddr","type":"String","javadoc":null},{"fullQualified":"public int getLocalPort()","name":"getLocalPort","type":"int","javadoc":null},{"fullQualified":"public ServletContext getServletContext()","name":"getServletContext","type":"ServletContext","javadoc":null},{"fullQualified":"public AsyncContext startAsync()","name":"startAsync","type":"AsyncContext","javadoc":null},{"fullQualified":"public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)","name":"startAsync","type":"AsyncContext","javadoc":null},{"fullQualified":"public boolean isAsyncStarted()","name":"isAsyncStarted","type":"boolean","javadoc":null},{"fullQualified":"public boolean isAsyncSupported()","name":"isAsyncSupported","type":"boolean","javadoc":null},{"fullQualified":"public AsyncContext getAsyncContext()","name":"getAsyncContext","type":"AsyncContext","javadoc":null},{"fullQualified":"public DispatcherType getDispatcherType()","name":"getDispatcherType","type":"DispatcherType","javadoc":null}],"allConstructors":[{"identifier":"public MockHttpServletRequest(String method, String requestUrl, Map<String, List<String>> headers)","javadocComment":null},{"identifier":"public MockHttpServletRequest(String method, String requestUrl)","javadocComment":null}]},{"name":"MockHttpServletResponse","fullyQualifiedName":"teammates.test.MockHttpServletResponse","isInterface":false,"codeComments":[{"type":"LineComment","text":" not used","lineNumber":61,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":66,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":80,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":85,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":90,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":95,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":100,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":105,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":161,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":166,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":171,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":176,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":181,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":191,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":196,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":206,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":211,"isOrphan":true}],"allMethods":[{"fullQualified":"public void addCookie(Cookie cookie)","name":"addCookie","type":"void","javadoc":null},{"fullQualified":"public boolean containsHeader(String name)","name":"containsHeader","type":"boolean","javadoc":null},{"fullQualified":"public String encodeURL(String url)","name":"encodeURL","type":"String","javadoc":null},{"fullQualified":"public String encodeRedirectURL(String url)","name":"encodeRedirectURL","type":"String","javadoc":null},{"fullQualified":"public String encodeUrl(String url)","name":"encodeUrl","type":"String","javadoc":null},{"fullQualified":"public String encodeRedirectUrl(String url)","name":"encodeRedirectUrl","type":"String","javadoc":null},{"fullQualified":"public void sendError(int sc, String msg)","name":"sendError","type":"void","javadoc":null},{"fullQualified":"public void sendError(int sc)","name":"sendError","type":"void","javadoc":null},{"fullQualified":"public void sendRedirect(String location)","name":"sendRedirect","type":"void","javadoc":null},{"fullQualified":"public String getRedirectUrl()","name":"getRedirectUrl","type":"String","javadoc":null},{"fullQualified":"public void setDateHeader(String name, long date)","name":"setDateHeader","type":"void","javadoc":null},{"fullQualified":"public void addDateHeader(String name, long date)","name":"addDateHeader","type":"void","javadoc":null},{"fullQualified":"public void setHeader(String name, String value)","name":"setHeader","type":"void","javadoc":null},{"fullQualified":"public void addHeader(String name, String value)","name":"addHeader","type":"void","javadoc":null},{"fullQualified":"public void setIntHeader(String name, int value)","name":"setIntHeader","type":"void","javadoc":null},{"fullQualified":"public void addIntHeader(String name, int value)","name":"addIntHeader","type":"void","javadoc":null},{"fullQualified":"public void setStatus(int sc)","name":"setStatus","type":"void","javadoc":null},{"fullQualified":"public void setStatus(int sc, String sm)","name":"setStatus","type":"void","javadoc":null},{"fullQualified":"public int getStatus()","name":"getStatus","type":"int","javadoc":null},{"fullQualified":"public String getHeader(String s)","name":"getHeader","type":"String","javadoc":null},{"fullQualified":"public Collection<String> getHeaders(String s)","name":"getHeaders","type":"Collection<String>","javadoc":null},{"fullQualified":"public Collection<String> getHeaderNames()","name":"getHeaderNames","type":"Collection<String>","javadoc":null},{"fullQualified":"public String getCharacterEncoding()","name":"getCharacterEncoding","type":"String","javadoc":null},{"fullQualified":"public String getContentType()","name":"getContentType","type":"String","javadoc":null},{"fullQualified":"public ServletOutputStream getOutputStream()","name":"getOutputStream","type":"ServletOutputStream","javadoc":null},{"fullQualified":"public PrintWriter getWriter()","name":"getWriter","type":"PrintWriter","javadoc":null},{"fullQualified":"public void setCharacterEncoding(String charset)","name":"setCharacterEncoding","type":"void","javadoc":null},{"fullQualified":"public void setContentLength(int len)","name":"setContentLength","type":"void","javadoc":null},{"fullQualified":"public void setContentLengthLong(long l)","name":"setContentLengthLong","type":"void","javadoc":null},{"fullQualified":"public void setContentType(String type)","name":"setContentType","type":"void","javadoc":null},{"fullQualified":"public void setBufferSize(int size)","name":"setBufferSize","type":"void","javadoc":null},{"fullQualified":"public int getBufferSize()","name":"getBufferSize","type":"int","javadoc":null},{"fullQualified":"public void flushBuffer()","name":"flushBuffer","type":"void","javadoc":null},{"fullQualified":"public void resetBuffer()","name":"resetBuffer","type":"void","javadoc":null},{"fullQualified":"public boolean isCommitted()","name":"isCommitted","type":"boolean","javadoc":null},{"fullQualified":"public void reset()","name":"reset","type":"void","javadoc":null},{"fullQualified":"public void setLocale(Locale loc)","name":"setLocale","type":"void","javadoc":null},{"fullQualified":"public Locale getLocale()","name":"getLocale","type":"Locale","javadoc":null},{"fullQualified":"public List<Cookie> getCookies()","name":"getCookies","type":"List<Cookie>","javadoc":null}],"allConstructors":[]},{"name":"MockPart","fullyQualifiedName":"teammates.test.MockPart","isInterface":false,"codeComments":[{"type":"LineComment","text":" not used","lineNumber":61,"isOrphan":true},{"type":"LineComment","text":" not used","lineNumber":66,"isOrphan":true}],"allMethods":[{"fullQualified":"public InputStream getInputStream()","name":"getInputStream","type":"InputStream","javadoc":null},{"fullQualified":"public String getContentType()","name":"getContentType","type":"String","javadoc":null},{"fullQualified":"public String getName()","name":"getName","type":"String","javadoc":null},{"fullQualified":"public String getSubmittedFileName()","name":"getSubmittedFileName","type":"String","javadoc":null},{"fullQualified":"public long getSize()","name":"getSize","type":"long","javadoc":null},{"fullQualified":"public void write(String fileName)","name":"write","type":"void","javadoc":null},{"fullQualified":"public void delete()","name":"delete","type":"void","javadoc":null},{"fullQualified":"public String getHeader(String name)","name":"getHeader","type":"String","javadoc":null},{"fullQualified":"public Collection<String> getHeaders(String name)","name":"getHeaders","type":"Collection<String>","javadoc":null},{"fullQualified":"public Collection<String> getHeaderNames()","name":"getHeaderNames","type":"Collection<String>","javadoc":null}],"allConstructors":[{"identifier":"public MockPart(String filePath) throws IOException","javadocComment":null}]},{"name":"TestNgXmlTest","fullyQualifiedName":"teammates.test.TestNgXmlTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" <class name, package name>","lineNumber":18,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Files to be checked in testng-component.xml are added to testFiles.\n     *\n     * @param testNgXml    Contents of testng-component.xml\n     * @param rootPath     Root path of test files\n     * @return             Map containing {@code <class name, package name>}\n     ","lineNumber":24,"isOrphan":false},{"type":"LineComment","text":" BaseComponentTestCase, BaseTestCase (files in current directory) excluded because","lineNumber":32,"isOrphan":true},{"type":"LineComment","text":" base classes are extended by the actual tests","lineNumber":33,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Recursively adds files from testng-component.xml which are to be checked.\n     *\n     * @param path                            Check files and directories in the current path\n     *\n     * @param areFilesInCurrentDirExcluded    If true, files in the current path are not\n     *                                        added to tests but sub-directories are still checked\n     *\n     * @param packageName                     Package name of the current file\n     * @param testNgXml                       Contents of testng-component.xml\n     *\n     * @return                                Map containing {@code <class name, package name>} including\n     *                                        current file or tests in the current directory\n     ","lineNumber":42,"isOrphan":false},{"type":"LineComment","text":" If the package name is in TestNG in the form of <package name=\"teammates.package.name\" />","lineNumber":75,"isOrphan":true},{"type":"LineComment","text":" then files in the current directory are excluded because the whole package would be tested by TestNG.","lineNumber":76,"isOrphan":true}],"allMethods":[{"fullQualified":"public void checkTestsInTestNg() throws Exception","name":"checkTestsInTestNg","type":"void","javadoc":null},{"fullQualified":"private Map<String, String> getTestFiles(String testNgXml, String rootPath)","name":"getTestFiles","type":"Map<String,String>","javadoc":"\n     * Files to be checked in testng-component.xml are added to testFiles.\n     *\n     * @param testNgXml    Contents of testng-component.xml\n     * @param rootPath     Root path of test files\n     * @return             Map containing {@code <class name, package name>}\n     "},{"fullQualified":"private boolean isTestFileIncluded(String testNgXml, String packageName, String testClassName)","name":"isTestFileIncluded","type":"boolean","javadoc":null},{"fullQualified":"private Map<String, String> addFilesToTestsRecursively(String path, boolean areFilesInCurrentDirExcluded, String packageName, String testNgXml)","name":"addFilesToTestsRecursively","type":"Map<String,String>","javadoc":"\n     * Recursively adds files from testng-component.xml which are to be checked.\n     *\n     * @param path                            Check files and directories in the current path\n     *\n     * @param areFilesInCurrentDirExcluded    If true, files in the current path are not\n     *                                        added to tests but sub-directories are still checked\n     *\n     * @param packageName                     Package name of the current file\n     * @param testNgXml                       Contents of testng-component.xml\n     *\n     * @return                                Map containing {@code <class name, package name>} including\n     *                                        current file or tests in the current directory\n     "},{"fullQualified":"private boolean isPackageNameInTestNg(String packageName, String testNgXml)","name":"isPackageNameInTestNg","type":"boolean","javadoc":null}],"allConstructors":[]},{"name":"TestProperties","fullyQualifiedName":"teammates.test.TestProperties","isInterface":false,"codeComments":[{"type":"JavadocComment","text":" The directory where HTML files for testing email contents are stored. ","lineNumber":16,"isOrphan":false},{"type":"JavadocComment","text":" The directory where JSON files used to create data bundles are stored. ","lineNumber":19,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.localdatastore.port\" in test.properties file. ","lineNumber":22,"isOrphan":false},{"type":"JavadocComment","text":" Indicates whether auto-update snapshot mode is activated. ","lineNumber":25,"isOrphan":false},{"type":"JavadocComment","text":" The value of \"test.search.service.host\" in test.search.service.host file. ","lineNumber":28,"isOrphan":false},{"type":"LineComment","text":" access static fields directly","lineNumber":32,"isOrphan":true}],"allMethods":[{"fullQualified":"public static boolean isSearchServiceActive()","name":"isSearchServiceActive","type":"boolean","javadoc":null}],"allConstructors":[{"identifier":"private TestProperties()","javadocComment":null}]},{"name":"TestPropertiesTest","fullyQualifiedName":"teammates.test.TestPropertiesTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testUpdateSnapshotFlag()","name":"testUpdateSnapshotFlag","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ThreadHelper","fullyQualifiedName":"teammates.test.ThreadHelper","isInterface":false,"codeComments":[{"type":"LineComment","text":" utility class","lineNumber":9,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Makes the thread sleep for the specified time.\n     ","lineNumber":12,"isOrphan":false}],"allMethods":[{"fullQualified":"public static void waitFor(int timeInMilliSeconds)","name":"waitFor","type":"void","javadoc":"\n     * Makes the thread sleep for the specified time.\n     "}],"allConstructors":[{"identifier":"private ThreadHelper()","javadocComment":null}]},{"name":"StudentsEnrollRequestTest","fullyQualifiedName":"teammates.ui.request.StudentsEnrollRequestTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testValidate_withValidRequest_shouldPass() throws Exception","name":"testValidate_withValidRequest_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testValidate_withNullValueInRequest_shouldFail()","name":"testValidate_withNullValueInRequest_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testValidate_withEmptyEnrollList_shouldFail()","name":"testValidate_withEmptyEnrollList_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testValidate_withDuplicateEmail_shouldFail()","name":"testValidate_withDuplicateEmail_shouldFail","type":"void","javadoc":null},{"fullQualified":"private StudentsEnrollRequest.StudentEnrollRequest getTypicalStudentEnrollRequest(int index)","name":"getTypicalStudentEnrollRequest","type":"StudentsEnrollRequest.StudentEnrollRequest","javadoc":null}],"allConstructors":[]},{"name":"LegacyUrlMapperTest","fullyQualifiedName":"teammates.ui.servlets.LegacyUrlMapperTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"private void setupMocks(String requestUrl)","name":"setupMocks","type":"void","javadoc":null},{"fullQualified":"public void allTests() throws Exception","name":"allTests","type":"void","javadoc":null}],"allConstructors":[]},{"name":"OriginCheckFilterTest","fullyQualifiedName":"teammates.ui.servlets.OriginCheckFilterTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"private void setupMocks(String method)","name":"setupMocks","type":"void","javadoc":null},{"fullQualified":"public void allTests() throws Exception","name":"allTests","type":"void","javadoc":null}],"allConstructors":[]},{"name":"WebApiServletTest","fullyQualifiedName":"teammates.ui.servlets.WebApiServletTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"private void setupMocks(String method, String requestUrl)","name":"setupMocks","type":"void","javadoc":null},{"fullQualified":"private void setupMocksFromGaeQueue(String method, String requestUrl)","name":"setupMocksFromGaeQueue","type":"void","javadoc":null},{"fullQualified":"public void testUserInvokedRequests() throws Exception","name":"testUserInvokedRequests","type":"void","javadoc":null},{"fullQualified":"public void testGaeQueueInvokedRequests() throws Exception","name":"testGaeQueueInvokedRequests","type":"void","javadoc":null}],"allConstructors":[]},{"name":"WebPageServletTest","fullyQualifiedName":"teammates.ui.servlets.WebPageServletTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Nothing to test; just make sure that the response is 200","lineNumber":19,"isOrphan":true}],"allMethods":[{"fullQualified":"public void allTests() throws Exception","name":"allTests","type":"void","javadoc":null}],"allConstructors":[]},{"name":"AccountRequestSearchIndexingWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.AccountRequestSearchIndexingWorkerActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ActionFactoryTest","fullyQualifiedName":"teammates.ui.webapi.ActionFactoryTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testGetAction() throws Exception","name":"testGetAction","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ArchiveCourseActionTest","fullyQualifiedName":"teammates.ui.webapi.ArchiveCourseActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"private void verifyCourseArchive(CourseArchiveData courseArchiveData, String courseId, boolean isArchived)","name":"verifyCourseArchive","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BaseActionTest","fullyQualifiedName":"teammates.ui.webapi.BaseActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" The next few methods are for logging in as various user","lineNumber":182,"isOrphan":true},{"type":"LineComment","text":" The next few methods are for testing access control","lineNumber":266,"isOrphan":true},{"type":"LineComment","text":" 'High-level' access-control tests: here it tests access control of an action for the full range of user types.","lineNumber":268,"isOrphan":true},{"type":"LineComment","text":" 'Mid-level' access control tests: here it tests access control of an action for one user type.","lineNumber":318,"isOrphan":true},{"type":"LineComment","text":" 'Low-level' access control tests: here it tests an action once with the given parameters.","lineNumber":534,"isOrphan":true},{"type":"LineComment","text":" These methods are not aware of the user type.","lineNumber":535,"isOrphan":true},{"type":"LineComment","text":" The next few methods are for parsing results","lineNumber":574,"isOrphan":true},{"type":"LineComment","text":" The next few methods are for verifying action results","lineNumber":613,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Gets an action with empty request body and empty multipart config.\n     ","lineNumber":72,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an action with request body.\n     ","lineNumber":79,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an action with request body and multipart config.\n     ","lineNumber":86,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an action with request multipart config.\n     ","lineNumber":125,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Gets an action with list of cookies.\n     ","lineNumber":135,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Prepares the test data used for the current test.\n     ","lineNumber":147,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Tests the {@link Action#execute()} method.\n     *\n     * <p>Some actions, particularly those with large number of different outcomes,\n     * can alternatively separate each test case to different test blocks.\n     ","lineNumber":154,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Tests the {@link Action#checkAccessControl()} method.\n     *\n     * <p>Some actions, particularly those with large number of different access control settings,\n     * can alternatively separate each test case to different test blocks.\n     ","lineNumber":162,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns The {@code params} array with the {@code userId}\n     *         (together with the parameter name) inserted at the beginning.\n     ","lineNumber":170,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs in the user to the test environment as an admin.\n     ","lineNumber":184,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs in the user to the test environment as an unregistered user\n     * (without any right).\n     ","lineNumber":192,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs in the user to the test environment as an instructor\n     * (without admin rights or student rights).\n     ","lineNumber":203,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs in the user to the test environment as a student\n     * (without admin rights or instructor rights).\n     ","lineNumber":214,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs in the user to the test environment as a student-instructor\n     * (without admin rights).\n     ","lineNumber":225,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs in the user to the test environment as a maintainer.\n     ","lineNumber":236,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Logs the current user out of the test environment.\n     ","lineNumber":244,"isOrphan":false},{"type":"LineComment","text":"not checking for non-masquerade mode because admin may not be an instructor","lineNumber":404,"isOrphan":false},{"type":"LineComment","text":"not checking for non-masquerade mode because admin may not be an instructor","lineNumber":415,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the {@link Action} matching the {@code params} is accessible to the logged in user.\n     ","lineNumber":537,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the {@link Action} matching the {@code params} is not accessible to the user.\n     ","lineNumber":549,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the {@link Action} matching the {@code params} is\n     * accessible to the logged in user masquerading as another user with {@code userId}.\n     ","lineNumber":557,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the {@link Action} matching the {@code params} is not\n     * accessible to the logged in user masquerading as another user with {@code userId}.\n     ","lineNumber":565,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes the action, verifies the status code as 200 OK, and returns the result.\n     *\n     * <p>Assumption: The action returns a {@link JsonResult}.\n     ","lineNumber":576,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes the action, verifies the status code, and returns the result.\n     *\n     * <p>Assumption: The action returns a {@link JsonResult}.\n     ","lineNumber":585,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Executes the action and returns the result.\n     *\n     * <p>Assumption: The action returns a {@link ImageResult}.\n     ","lineNumber":600,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action results in {@link InvalidHttpParameterException} being thrown.\n     ","lineNumber":615,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action results in {@link InvalidHttpParameterException} being thrown.\n     ","lineNumber":623,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the action results in {@link InvalidHttpParameterException} being thrown\n     * when checking for access control.\n     ","lineNumber":631,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action results in {@link InvalidHttpRequestBodyException} being thrown.\n     ","lineNumber":640,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action results in {@link EntityNotFoundException} being thrown.\n     ","lineNumber":648,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action results in {@link EntityNotFoundException} being thrown.\n     ","lineNumber":656,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the action results in {@link EntityNotFoundException} being thrown when checking for access control.\n     ","lineNumber":664,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action results in {@link InvalidOperationException} being thrown.\n     ","lineNumber":672,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action results in {@link InvalidOperationException} being thrown.\n     ","lineNumber":680,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action does not result in any background task being added.\n     ","lineNumber":688,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action results in the specified background tasks being added.\n     ","lineNumber":696,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action does not result in any email being sent.\n     ","lineNumber":704,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns the list of emails sent as part of the executed action.\n     ","lineNumber":711,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Verifies that the executed action results in the specified number of emails being sent.\n     ","lineNumber":718,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Writes a file into the mock file storage.\n     ","lineNumber":725,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Deletes a file from the mock file storage.\n     ","lineNumber":734,"isOrphan":false},{"type":"JavadocComment","text":"\n     * Returns true if the specified file exists in the mock file storage.\n     ","lineNumber":741,"isOrphan":false}],"allMethods":[{"fullQualified":" abstract String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":" abstract String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected T getAction(String... params)","name":"getAction","type":"T","javadoc":"\n     * Gets an action with empty request body and empty multipart config.\n     "},{"fullQualified":"protected T getAction(BasicRequest requestBody, String... params)","name":"getAction","type":"T","javadoc":"\n     * Gets an action with request body.\n     "},{"fullQualified":"protected T getAction(String body, Map<String, Part> parts, List<Cookie> cookies, String... params)","name":"getAction","type":"T","javadoc":"\n     * Gets an action with request body and multipart config.\n     "},{"fullQualified":"protected T getActionWithParts(String key, String filePath, String... params) throws IOException","name":"getActionWithParts","type":"T","javadoc":"\n     * Gets an action with request multipart config.\n     "},{"fullQualified":"protected T getActionWithCookie(List<Cookie> cookies, String... params)","name":"getActionWithCookie","type":"T","javadoc":"\n     * Gets an action with list of cookies.\n     "},{"fullQualified":"public void beforeTestMethodSetup()","name":"beforeTestMethodSetup","type":"void","javadoc":null},{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":"\n     * Prepares the test data used for the current test.\n     "},{"fullQualified":"protected abstract void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":"\n     * Tests the {@link Action#execute()} method.\n     *\n     * <p>Some actions, particularly those with large number of different outcomes,\n     * can alternatively separate each test case to different test blocks.\n     "},{"fullQualified":"protected abstract void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":"\n     * Tests the {@link Action#checkAccessControl()} method.\n     *\n     * <p>Some actions, particularly those with large number of different access control settings,\n     * can alternatively separate each test case to different test blocks.\n     "},{"fullQualified":"protected String[] addUserIdToParams(String userId, String[] params)","name":"addUserIdToParams","type":"String[]","javadoc":"\n     * Returns The {@code params} array with the {@code userId}\n     *         (together with the parameter name) inserted at the beginning.\n     "},{"fullQualified":"protected void loginAsAdmin()","name":"loginAsAdmin","type":"void","javadoc":"\n     * Logs in the user to the test environment as an admin.\n     "},{"fullQualified":"protected void loginAsUnregistered(String userId)","name":"loginAsUnregistered","type":"void","javadoc":"\n     * Logs in the user to the test environment as an unregistered user\n     * (without any right).\n     "},{"fullQualified":"protected void loginAsInstructor(String userId)","name":"loginAsInstructor","type":"void","javadoc":"\n     * Logs in the user to the test environment as an instructor\n     * (without admin rights or student rights).\n     "},{"fullQualified":"protected void loginAsStudent(String userId)","name":"loginAsStudent","type":"void","javadoc":"\n     * Logs in the user to the test environment as a student\n     * (without admin rights or instructor rights).\n     "},{"fullQualified":"protected void loginAsStudentInstructor(String userId)","name":"loginAsStudentInstructor","type":"void","javadoc":"\n     * Logs in the user to the test environment as a student-instructor\n     * (without admin rights).\n     "},{"fullQualified":"protected void loginAsMaintainer()","name":"loginAsMaintainer","type":"void","javadoc":"\n     * Logs in the user to the test environment as a maintainer.\n     "},{"fullQualified":"protected void logoutUser()","name":"logoutUser","type":"void","javadoc":"\n     * Logs the current user out of the test environment.\n     "},{"fullQualified":" void grantInstructorWithSectionPrivilege(InstructorAttributes instructor, String privilege, String[] sections) throws Exception","name":"grantInstructorWithSectionPrivilege","type":"void","javadoc":null},{"fullQualified":" void verifyAnyUserCanAccess(String... params)","name":"verifyAnyUserCanAccess","type":"void","javadoc":null},{"fullQualified":" void verifyAnyLoggedInUserCanAccess(String... params)","name":"verifyAnyLoggedInUserCanAccess","type":"void","javadoc":null},{"fullQualified":" void verifyOnlyAdminCanAccess(String... params)","name":"verifyOnlyAdminCanAccess","type":"void","javadoc":null},{"fullQualified":" void verifyOnlyInstructorsCanAccess(String... params)","name":"verifyOnlyInstructorsCanAccess","type":"void","javadoc":null},{"fullQualified":" void verifyOnlyInstructorsOfTheSameCourseCanAccess(String[] submissionParams)","name":"verifyOnlyInstructorsOfTheSameCourseCanAccess","type":"void","javadoc":null},{"fullQualified":" void verifyOnlyInstructorsOfTheSameCourseWithCorrectCoursePrivilegeCanAccess(String privilege, String[] submissionParams) throws Exception","name":"verifyOnlyInstructorsOfTheSameCourseWithCorrectCoursePrivilegeCanAccess","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleWithoutLogin(String... params)","name":"verifyAccessibleWithoutLogin","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleWithoutLogin(String... params)","name":"verifyInaccessibleWithoutLogin","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleForUnregisteredUsers(String... params)","name":"verifyAccessibleForUnregisteredUsers","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleForUnregisteredUsers(String... params)","name":"verifyInaccessibleForUnregisteredUsers","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleForAdmin(String... params)","name":"verifyAccessibleForAdmin","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleForAdmin(String... params)","name":"verifyInaccessibleForAdmin","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleForStudents(String... params)","name":"verifyInaccessibleForStudents","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleForInstructors(String... params)","name":"verifyInaccessibleForInstructors","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleForAdminToMasqueradeAsInstructor(InstructorAttributes instructor, String[] submissionParams)","name":"verifyAccessibleForAdminToMasqueradeAsInstructor","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleForAdminToMasqueradeAsInstructor(String[] submissionParams)","name":"verifyAccessibleForAdminToMasqueradeAsInstructor","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleWithoutModifySessionPrivilege(String[] submissionParams)","name":"verifyInaccessibleWithoutModifySessionPrivilege","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleWithoutSubmitSessionInSectionsPrivilege(String[] submissionParams)","name":"verifyInaccessibleWithoutSubmitSessionInSectionsPrivilege","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleWithoutCorrectCoursePrivilege(String privilege, String[] submissionParams) throws Exception","name":"verifyInaccessibleWithoutCorrectCoursePrivilege","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleForInstructorsOfTheSameCourse(String[] submissionParams)","name":"verifyAccessibleForInstructorsOfTheSameCourse","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleForInstructorsOfOtherCourse(String[] submissionParams)","name":"verifyAccessibleForInstructorsOfOtherCourse","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleForStudentsOfTheSameCourse(String[] submissionParams)","name":"verifyAccessibleForStudentsOfTheSameCourse","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleForStudentsOfOtherCourse(String[] submissionParams)","name":"verifyInaccessibleForStudentsOfOtherCourse","type":"void","javadoc":null},{"fullQualified":" void verifyInaccessibleForInstructorsOfOtherCourses(String[] submissionParams)","name":"verifyInaccessibleForInstructorsOfOtherCourses","type":"void","javadoc":null},{"fullQualified":" void verifyAccessibleForMaintainers(String... params)","name":"verifyAccessibleForMaintainers","type":"void","javadoc":null},{"fullQualified":"protected void verifyCanAccess(String... params)","name":"verifyCanAccess","type":"void","javadoc":"\n     * Verifies that the {@link Action} matching the {@code params} is accessible to the logged in user.\n     "},{"fullQualified":"protected void verifyCannotAccess(String... params)","name":"verifyCannotAccess","type":"void","javadoc":"\n     * Verifies that the {@link Action} matching the {@code params} is not accessible to the user.\n     "},{"fullQualified":"protected void verifyCanMasquerade(String userId, String... params)","name":"verifyCanMasquerade","type":"void","javadoc":"\n     * Verifies that the {@link Action} matching the {@code params} is\n     * accessible to the logged in user masquerading as another user with {@code userId}.\n     "},{"fullQualified":"protected void verifyCannotMasquerade(String userId, String... params)","name":"verifyCannotMasquerade","type":"void","javadoc":"\n     * Verifies that the {@link Action} matching the {@code params} is not\n     * accessible to the logged in user masquerading as another user with {@code userId}.\n     "},{"fullQualified":"protected JsonResult getJsonResult(Action a)","name":"getJsonResult","type":"JsonResult","javadoc":"\n     * Executes the action, verifies the status code as 200 OK, and returns the result.\n     *\n     * <p>Assumption: The action returns a {@link JsonResult}.\n     "},{"fullQualified":"protected JsonResult getJsonResult(Action a, int statusCode)","name":"getJsonResult","type":"JsonResult","javadoc":"\n     * Executes the action, verifies the status code, and returns the result.\n     *\n     * <p>Assumption: The action returns a {@link JsonResult}.\n     "},{"fullQualified":"protected ImageResult getImageResult(Action a)","name":"getImageResult","type":"ImageResult","javadoc":"\n     * Executes the action and returns the result.\n     *\n     * <p>Assumption: The action returns a {@link ImageResult}.\n     "},{"fullQualified":"protected InvalidHttpParameterException verifyHttpParameterFailure(String... params)","name":"verifyHttpParameterFailure","type":"InvalidHttpParameterException","javadoc":"\n     * Verifies that the executed action results in {@link InvalidHttpParameterException} being thrown.\n     "},{"fullQualified":"protected InvalidHttpParameterException verifyHttpParameterFailure(BasicRequest requestBody, String... params)","name":"verifyHttpParameterFailure","type":"InvalidHttpParameterException","javadoc":"\n     * Verifies that the executed action results in {@link InvalidHttpParameterException} being thrown.\n     "},{"fullQualified":"protected InvalidHttpParameterException verifyHttpParameterFailureAcl(String... params)","name":"verifyHttpParameterFailureAcl","type":"InvalidHttpParameterException","javadoc":"\n     * Verifies that the action results in {@link InvalidHttpParameterException} being thrown\n     * when checking for access control.\n     "},{"fullQualified":"protected InvalidHttpRequestBodyException verifyHttpRequestBodyFailure(BasicRequest requestBody, String... params)","name":"verifyHttpRequestBodyFailure","type":"InvalidHttpRequestBodyException","javadoc":"\n     * Verifies that the executed action results in {@link InvalidHttpRequestBodyException} being thrown.\n     "},{"fullQualified":"protected EntityNotFoundException verifyEntityNotFound(String... params)","name":"verifyEntityNotFound","type":"EntityNotFoundException","javadoc":"\n     * Verifies that the executed action results in {@link EntityNotFoundException} being thrown.\n     "},{"fullQualified":"protected EntityNotFoundException verifyEntityNotFound(BasicRequest requestBody, String... params)","name":"verifyEntityNotFound","type":"EntityNotFoundException","javadoc":"\n     * Verifies that the executed action results in {@link EntityNotFoundException} being thrown.\n     "},{"fullQualified":"protected EntityNotFoundException verifyEntityNotFoundAcl(String... params)","name":"verifyEntityNotFoundAcl","type":"EntityNotFoundException","javadoc":"\n     * Verifies that the action results in {@link EntityNotFoundException} being thrown when checking for access control.\n     "},{"fullQualified":"protected InvalidOperationException verifyInvalidOperation(String... params)","name":"verifyInvalidOperation","type":"InvalidOperationException","javadoc":"\n     * Verifies that the executed action results in {@link InvalidOperationException} being thrown.\n     "},{"fullQualified":"protected InvalidOperationException verifyInvalidOperation(BasicRequest requestBody, String... params)","name":"verifyInvalidOperation","type":"InvalidOperationException","javadoc":"\n     * Verifies that the executed action results in {@link InvalidOperationException} being thrown.\n     "},{"fullQualified":"protected void verifyNoTasksAdded()","name":"verifyNoTasksAdded","type":"void","javadoc":"\n     * Verifies that the executed action does not result in any background task being added.\n     "},{"fullQualified":"protected void verifySpecifiedTasksAdded(String taskName, int taskCount)","name":"verifySpecifiedTasksAdded","type":"void","javadoc":"\n     * Verifies that the executed action results in the specified background tasks being added.\n     "},{"fullQualified":"protected void verifyNoEmailsSent()","name":"verifyNoEmailsSent","type":"void","javadoc":"\n     * Verifies that the executed action does not result in any email being sent.\n     "},{"fullQualified":"protected List<EmailWrapper> getEmailsSent()","name":"getEmailsSent","type":"List<EmailWrapper>","javadoc":"\n     * Returns the list of emails sent as part of the executed action.\n     "},{"fullQualified":"protected void verifyNumberOfEmailsSent(int emailCount)","name":"verifyNumberOfEmailsSent","type":"void","javadoc":"\n     * Verifies that the executed action results in the specified number of emails being sent.\n     "},{"fullQualified":"protected void writeFileToStorage(String targetFileName, String sourceFilePath) throws IOException","name":"writeFileToStorage","type":"void","javadoc":"\n     * Writes a file into the mock file storage.\n     "},{"fullQualified":"protected void deleteFile(String fileName)","name":"deleteFile","type":"void","javadoc":"\n     * Deletes a file from the mock file storage.\n     "},{"fullQualified":"protected boolean doesFileExist(String fileName)","name":"doesFileExist","type":"boolean","javadoc":"\n     * Returns true if the specified file exists in the mock file storage.\n     "}],"allConstructors":[]},{"name":"BinCourseActionTest","fullyQualifiedName":"teammates.ui.webapi.BinCourseActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_nonExistentCourse_shouldFail()","name":"testExecute_nonExistentCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_courseAlreadyBin_shouldFail() throws Exception","name":"testExecute_courseAlreadyBin_shouldFail","type":"void","javadoc":null},{"fullQualified":"private void verifyCourseData(CourseData data, String courseId, String courseName, String timeZone)","name":"verifyCourseData","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"BinFeedbackSessionActionTest","fullyQualifiedName":"teammates.ui.webapi.BinFeedbackSessionActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CalculateUsageStatisticsActionTest","fullyQualifiedName":"teammates.ui.webapi.CalculateUsageStatisticsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Only check that there is a stats object created.","lineNumber":45,"isOrphan":true},{"type":"LineComment","text":" Note that there is a slim possibility that this assertion may fail, if the hour has changed","lineNumber":52,"isOrphan":true},{"type":"LineComment","text":" between when the stats was gathered and the line where Instant.now is called.","lineNumber":53,"isOrphan":true},{"type":"LineComment","text":" However, as the execution happens in milliseconds precision, the risk is too small to justify","lineNumber":54,"isOrphan":true},{"type":"LineComment","text":" Everything else is not predictable.","lineNumber":46,"isOrphan":false},{"type":"LineComment","text":" the additional code needed to handle this case.","lineNumber":55,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CompileLogsActionTest","fullyQualifiedName":"teammates.ui.webapi.CompileLogsActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CreateAccountActionTest","fullyQualifiedName":"teammates.ui.webapi.CreateAccountActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" 9","lineNumber":152,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testGenerateNextDemoCourseId()","name":"testGenerateNextDemoCourseId","type":"void","javadoc":null},{"fullQualified":"private void testGenerateNextDemoCourseIdForLengthLimit(int maximumIdLength)","name":"testGenerateNextDemoCourseIdForLengthLimit","type":"void","javadoc":null},{"fullQualified":"private String generateNextDemoCourseId(String instructorEmailOrProposedCourseId, int maximumIdLength)","name":"generateNextDemoCourseId","type":"String","javadoc":null}],"allConstructors":[]},{"name":"CreateAccountRequestActionTest","fullyQualifiedName":"teammates.ui.webapi.CreateAccountRequestActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Account request not added to search indexing queue","lineNumber":88,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"private AccountCreateRequest buildCreateRequest(String name, String institution, String email)","name":"buildCreateRequest","type":"AccountCreateRequest","javadoc":null}],"allConstructors":[]},{"name":"CreateCourseActionTest","fullyQualifiedName":"teammates.ui.webapi.CreateCourseActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CreateFeedbackQuestionActionTest","fullyQualifiedName":"teammates.ui.webapi.CreateFeedbackQuestionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" verify question is created","lineNumber":92,"isOrphan":false},{"type":"LineComment","text":" verify question is created","lineNumber":112,"isOrphan":false},{"type":"LineComment","text":" verify question is created","lineNumber":141,"isOrphan":false},{"type":"LineComment","text":" contribution question cannot have students -> students feedback path","lineNumber":159,"isOrphan":false},{"type":"LineComment","text":" verify question is created","lineNumber":177,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_masqueradeMode_shouldCreateQuestionSuccessfully()","name":"testExecute_masqueradeMode_shouldCreateQuestionSuccessfully","type":"void","javadoc":null},{"fullQualified":"public void testExecute_contributionQuestion_shouldCreateQuestionSuccessfully()","name":"testExecute_contributionQuestion_shouldCreateQuestionSuccessfully","type":"void","javadoc":null},{"fullQualified":"private FeedbackQuestionCreateRequest getTypicalTextQuestionCreateRequest()","name":"getTypicalTextQuestionCreateRequest","type":"FeedbackQuestionCreateRequest","javadoc":null},{"fullQualified":"private FeedbackQuestionCreateRequest getTypicalContributionQuestionCreateRequest()","name":"getTypicalContributionQuestionCreateRequest","type":"FeedbackQuestionCreateRequest","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CreateFeedbackResponseCommentActionTest","fullyQualifiedName":"teammates.ui.webapi.CreateFeedbackResponseCommentActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"see individual test cases.","lineNumber":102,"isOrphan":true},{"type":"LineComment","text":" clean any existing comments.","lineNumber":279,"isOrphan":false},{"type":"LineComment","text":" see individual test cases","lineNumber":352,"isOrphan":true},{"type":"JavadocComment","text":"\n     * Filters instructor comments according to comment text from all comments on a response.\n     *\n     * @param responseId response id of response\n     * @param commentText comment text\n     * @return instructor comments\n     ","lineNumber":658,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_invalidHttpParameters_shouldFail()","name":"testExecute_invalidHttpParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testExecute_unpublishedSessionForInstructorResult_shouldPass()","name":"testExecute_unpublishedSessionForInstructorResult_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testExecute_unpublishedSessionEmptyGiverPermission_shouldPass()","name":"testExecute_unpublishedSessionEmptyGiverPermission_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testExecute_unpublishedSessionValidVisibilitySettings_shouldPass()","name":"testExecute_unpublishedSessionValidVisibilitySettings_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testExecute_publishedSessionForInstructorResult_shouldPass() throws Exception","name":"testExecute_publishedSessionForInstructorResult_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testExecute_emptyCommentText_shouldFail()","name":"testExecute_emptyCommentText_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_typicalCaseForSubmission_shouldPass()","name":"testExecute_typicalCaseForSubmission_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_invalidIntent_shouldFail()","name":"testExecute_invalidIntent_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_textTypeQuestionResponse_notAllowedToAddComment()","name":"testAccessControl_textTypeQuestionResponse_notAllowedToAddComment","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_contributionQuestionResponse_instructorNotAllowedToAddComment()","name":"testAccessControl_contributionQuestionResponse_instructorNotAllowedToAddComment","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_commentAlreadyExist_shouldNotCreateAgain()","name":"testExecute_commentAlreadyExist_shouldNotCreateAgain","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_submitCommentForOthersResponse_shouldFail()","name":"testAccessControl_submitCommentForOthersResponse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_invalidIntent_shouldFail()","name":"testAccessControl_invalidIntent_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_instructorWithoutSubmitSessionInSectionsPrivilege_shouldFail()","name":"testAccessControl_instructorWithoutSubmitSessionInSectionsPrivilege_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_logOut_shouldFail()","name":"testAccessControl_logOut_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_studentAccessInstructorResponse_shouldFail()","name":"testAccessControl_studentAccessInstructorResponse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_accessibleForInstructorInSameCourse_shouldPass()","name":"testAccessControl_accessibleForInstructorInSameCourse_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_accessibleForAdminToMasqueradeAsInstructor_shouldPass()","name":"testAccessControl_accessibleForAdminToMasqueradeAsInstructor_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_onlyInstructorsWithCorrectPrivilege_shouldPass() throws Exception","name":"testAccessControl_onlyInstructorsWithCorrectPrivilege_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_onlyInstructorsWithOnlyEitherPrivilege_shouldFail() throws Exception","name":"testAccessControl_onlyInstructorsWithOnlyEitherPrivilege_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorSubmissionPastEndTime_shouldAllowIfBeforeDeadline() throws Exception","name":"testAccessControl_instructorSubmissionPastEndTime_shouldAllowIfBeforeDeadline","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentSubmissionPastEndTime_shouldAllowIfBeforeDeadline() throws Exception","name":"testAccessControl_studentSubmissionPastEndTime_shouldAllowIfBeforeDeadline","type":"void","javadoc":null},{"fullQualified":"private String[] getSubmissionParamsForCrossSectionResponse()","name":"getSubmissionParamsForCrossSectionResponse","type":"String[]","javadoc":null},{"fullQualified":"private List<FeedbackResponseCommentAttributes> getInstructorComments(String responseId, String commentText)","name":"getInstructorComments","type":"List<FeedbackResponseCommentAttributes>","javadoc":"\n     * Filters instructor comments according to comment text from all comments on a response.\n     *\n     * @param responseId response id of response\n     * @param commentText comment text\n     * @return instructor comments\n     "}],"allConstructors":[]},{"name":"CreateFeedbackSessionActionTest","fullyQualifiedName":"teammates.ui.webapi.CreateFeedbackSessionActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_masqueradeMode_shouldCreateFeedbackSession()","name":"testExecute_masqueradeMode_shouldCreateFeedbackSession","type":"void","javadoc":null},{"fullQualified":"private FeedbackSessionCreateRequest getTypicalCreateRequest()","name":"getTypicalCreateRequest","type":"FeedbackSessionCreateRequest","javadoc":null},{"fullQualified":"private FeedbackSessionCreateRequest getCopySessionCreateRequest(FeedbackSessionAttributes toCopySession)","name":"getCopySessionCreateRequest","type":"FeedbackSessionCreateRequest","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CreateFeedbackSessionLogActionTest","fullyQualifiedName":"teammates.ui.webapi.CreateFeedbackSessionLogActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CreateInstructorActionTest","fullyQualifiedName":"teammates.ui.webapi.CreateInstructorActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" remove the newly added instructor","lineNumber":144,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"CreateNotificationActionTest","fullyQualifiedName":"teammates.ui.webapi.CreateNotificationActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" check that notification returned has same properties as notification created","lineNumber":49,"isOrphan":false},{"type":"LineComment","text":" check DB correctly processed request","lineNumber":57,"isOrphan":false}],"allMethods":[{"fullQualified":" String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":" String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"private NotificationCreateRequest getTypicalCreateRequest()","name":"getTypicalCreateRequest","type":"NotificationCreateRequest","javadoc":null}],"allConstructors":[]},{"name":"DeleteAccountActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteAccountActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" should fail silently.","lineNumber":58,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteAccountRequestActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteAccountRequestActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" should fail silently.","lineNumber":67,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteCourseActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteCourseActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_notInRecycleBin_shouldPass()","name":"testExecute_notInRecycleBin_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteFeedbackQuestionActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteFeedbackQuestionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" question is deleted","lineNumber":50,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteFeedbackResponseCommentActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteFeedbackResponseCommentActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" non-existent feedback response comment id","lineNumber":78,"isOrphan":false},{"type":"LineComment","text":" See each independent test case","lineNumber":93,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void refreshTestData()","name":"refreshTestData","type":"void","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControlsForCommentByInstructor() throws Exception","name":"testAccessControlsForCommentByInstructor","type":"void","javadoc":null},{"fullQualified":"public void testAccessControlsForCommentByInstructorAsFeedbackParticipant()","name":"testAccessControlsForCommentByInstructorAsFeedbackParticipant","type":"void","javadoc":null},{"fullQualified":"public void testAccessControlsForCommentByStudent()","name":"testAccessControlsForCommentByStudent","type":"void","javadoc":null},{"fullQualified":"public void testCrossSectionAccessControl() throws Exception","name":"testCrossSectionAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testAccessControlsForCommentByTeam() throws Exception","name":"testAccessControlsForCommentByTeam","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorSubmissionPastEndTime_shouldAllowIfBeforeDeadline() throws Exception","name":"testAccessControl_instructorSubmissionPastEndTime_shouldAllowIfBeforeDeadline","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentSubmissionPastEndTime_shouldAllowIfBeforeDeadline() throws Exception","name":"testAccessControl_studentSubmissionPastEndTime_shouldAllowIfBeforeDeadline","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteFeedbackSessionActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteFeedbackSessionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" see test cases below","lineNumber":28,"isOrphan":true},{"type":"LineComment","text":" Delete again","lineNumber":117,"isOrphan":true},{"type":"LineComment","text":" Delete once","lineNumber":113,"isOrphan":false},{"type":"LineComment","text":" Will fail silently and not throw any exception","lineNumber":118,"isOrphan":false},{"type":"LineComment","text":" Will fail silently and not throw any exception","lineNumber":132,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSessionAction_invalidParameters_shouldThrowHttpParameterException()","name":"testDeleteFeedbackSessionAction_invalidParameters_shouldThrowHttpParameterException","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSessionAction_typicalCase_shouldPass() throws Exception","name":"testDeleteFeedbackSessionAction_typicalCase_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testDeleteFeedbackSession_failureCases_shouldFailSilently()","name":"testDeleteFeedbackSession_failureCases_shouldFailSilently","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteInstructorActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteInstructorActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"see test cases below","lineNumber":27,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_typicalCaseByGoogleId_shouldPass()","name":"testExecute_typicalCaseByGoogleId_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testExecute_deleteInstructorByEmail_shouldSuccess()","name":"testExecute_deleteInstructorByEmail_shouldSuccess","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_adminDeletesLastInstructorByGoogleId_shouldPass()","name":"testExecute_adminDeletesLastInstructorByGoogleId_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_instructorDeleteOwnRoleByGoogleId_shouldPass()","name":"testExecute_instructorDeleteOwnRoleByGoogleId_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_deleteLastInstructorByGoogleId_shouldFail()","name":"testExecute_deleteLastInstructorByGoogleId_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_deleteLastInstructorInMasqueradeByGoogleId_shouldFail()","name":"testExecute_deleteLastInstructorInMasqueradeByGoogleId_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_deleteInstructorInMasqueradeByGoogleId_shouldPass()","name":"testExecute_deleteInstructorInMasqueradeByGoogleId_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters_shouldFail()","name":"testExecute_notEnoughParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_noSuchInstructor_shouldFail()","name":"testExecute_noSuchInstructor_shouldFail","type":"void","javadoc":null},{"fullQualified":"private void attemptToDeleteFakeInstructorByGoogleId()","name":"attemptToDeleteFakeInstructorByGoogleId","type":"void","javadoc":null},{"fullQualified":"private void attemptToDeleteFakeInstructorByEmail()","name":"attemptToDeleteFakeInstructorByEmail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_adminDeletesInstructorInFakeCourse_shouldFail()","name":"testExecute_adminDeletesInstructorInFakeCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteNotificationActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteNotificationActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":" String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteStudentActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteStudentActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteStudentProfilePictureActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteStudentProfilePictureActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void classSetup()","name":"classSetup","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"private void testValidAction() throws Exception","name":"testValidAction","type":"void","javadoc":null},{"fullQualified":"private void testInvalidProfileAction()","name":"testInvalidProfileAction","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"DeleteStudentsActionTest","fullyQualifiedName":"teammates.ui.webapi.DeleteStudentsActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"EnrollStudentsActionTest","fullyQualifiedName":"teammates.ui.webapi.EnrollStudentsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See test cases below.","lineNumber":34,"isOrphan":true},{"type":"LineComment","text":" verify search indexing task is added to task queue when new student is enrolled","lineNumber":50,"isOrphan":false},{"type":"LineComment","text":" verify student in database","lineNumber":67,"isOrphan":false},{"type":"LineComment","text":" verify response data is correct","lineNumber":77,"isOrphan":false},{"type":"LineComment","text":" verify search indexing task is added to task queue when existing student is updated","lineNumber":101,"isOrphan":false},{"type":"LineComment","text":" Ensure that student5InCourse1 has a unique team name in the course.","lineNumber":112,"isOrphan":true},{"type":"LineComment","text":" Otherwise, it will give a duplicate team name error when changing section name.","lineNumber":113,"isOrphan":false},{"type":"LineComment","text":" verify tasks only added for students successfully enrolled","lineNumber":169,"isOrphan":false},{"type":"LineComment","text":" Enroll students up to but not exceeding limit.","lineNumber":227,"isOrphan":false},{"type":"LineComment","text":" Enroll one more student to exceed limit.","lineNumber":231,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withNewStudent_shouldBeAddedToDatabase() throws Exception","name":"testExecute_withNewStudent_shouldBeAddedToDatabase","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withNewStudentWithEmptySectionName_shouldBeAddedToDatabaseWithDefaultSectionName() throws Exception","name":"testExecute_withNewStudentWithEmptySectionName_shouldBeAddedToDatabaseWithDefaultSectionName","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withExistingStudent_shouldBeUpdatedToDatabase() throws Exception","name":"testExecute_withExistingStudent_shouldBeUpdatedToDatabase","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withSectionFieldChanged_shouldBeUpdatedToDatabase() throws Exception","name":"testExecute_withSectionFieldChanged_shouldBeUpdatedToDatabase","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withEmailFieldChanged_shouldCreateNewStudent() throws Exception","name":"testExecute_withEmailFieldChanged_shouldCreateNewStudent","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withInvalidEnrollRequests_shouldNotBeEnrolled() throws Exception","name":"testExecute_withInvalidEnrollRequests_shouldNotBeEnrolled","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withDuplicatedTeamNameAmongSectionsToExistingStudents_shouldThrowInvalidBodyException()","name":"testExecute_withDuplicatedTeamNameAmongSectionsToExistingStudents_shouldThrowInvalidBodyException","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withDuplicatedTeamNameAmongSectionsInInput_shouldThrowInvalidBodyException()","name":"testExecute_withDuplicatedTeamNameAmongSectionsInInput_shouldThrowInvalidBodyException","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withNumberOfStudentsMoreThanSectionLimit_shouldThrowInvalidHttpRequestBodyException() throws Exception","name":"testExecute_withNumberOfStudentsMoreThanSectionLimit_shouldThrowInvalidHttpRequestBodyException","type":"void","javadoc":null},{"fullQualified":"private void verifyCorrectResponseData(StudentsEnrollRequest.StudentEnrollRequest request, StudentData response)","name":"verifyCorrectResponseData","type":"void","javadoc":null},{"fullQualified":"private void verifyDuplicatedTeamNameDetected(String courseId, StudentsEnrollRequest req, String expectedTeam, String expectedSectionOne, String expectedSectionTwo)","name":"verifyDuplicatedTeamNameDetected","type":"void","javadoc":null},{"fullQualified":"private StudentsEnrollRequest prepareRequest(List<StudentAttributes> enrolledStudents)","name":"prepareRequest","type":"StudentsEnrollRequest","javadoc":null},{"fullQualified":"private List<StudentData> executeActionAndReturnResults(String courseId, StudentsEnrollRequest req) throws Exception","name":"executeActionAndReturnResults","type":"List<StudentData>","javadoc":null},{"fullQualified":"private void verifyStudentInDatabase(StudentAttributes expectedStudent, String actualStudentCourse, String actualStudentEmail)","name":"verifyStudentInDatabase","type":"void","javadoc":null},{"fullQualified":"private StudentAttributes getTypicalNewStudent(String courseId)","name":"getTypicalNewStudent","type":"StudentAttributes","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionClosedRemindersActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionClosedRemindersActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Session is closed recently","lineNumber":53,"isOrphan":true},{"type":"LineComment","text":" Ditto, but with disabled closed reminder","lineNumber":70,"isOrphan":true},{"type":"LineComment","text":" Still in grace period; closed reminder should not be sent","lineNumber":89,"isOrphan":true},{"type":"LineComment","text":" fsLogic will set the flag to false","lineNumber":66,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to false","lineNumber":67,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to false","lineNumber":85,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to false","lineNumber":86,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to false","lineNumber":102,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to false","lineNumber":103,"isOrphan":false},{"type":"LineComment","text":" 3 co-owners in course1 x 1 session","lineNumber":109,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionClosingRemindersActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionClosingRemindersActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Modify session to close in 24 hours","lineNumber":56,"isOrphan":true},{"type":"LineComment","text":" Ditto, but disable the closing reminder","lineNumber":73,"isOrphan":true},{"type":"LineComment","text":" 1 session not yet opened; do not send the closing reminder","lineNumber":92,"isOrphan":true},{"type":"LineComment","text":" 5 students, 5 instructors, and 3 co-owner instructors in course1","lineNumber":115,"isOrphan":true},{"type":"LineComment","text":" sentClosingEmail is true for all sessions, should only send emails to those with extended deadlines","lineNumber":212,"isOrphan":true},{"type":"LineComment","text":" 2 students, 1 instructor with valid deadline extensions within time period","lineNumber":213,"isOrphan":true},{"type":"LineComment","text":" 1 student in session with reminders disabled","lineNumber":214,"isOrphan":true},{"type":"LineComment","text":" fsLogic will set the flag to true","lineNumber":69,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to true","lineNumber":70,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to true","lineNumber":88,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to true","lineNumber":89,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to true","lineNumber":105,"isOrphan":false},{"type":"LineComment","text":" fsLogic will set the flag to true","lineNumber":106,"isOrphan":false},{"type":"LineComment","text":" wait for very briefly so that the above session will be within the time limit","lineNumber":109,"isOrphan":false},{"type":"LineComment","text":" 3 students and 2 instructors in session have deadline extensions and should not receive email","lineNumber":116,"isOrphan":false},{"type":"LineComment","text":" update deadline extensions to have end time within the next 24 hours","lineNumber":149,"isOrphan":false},{"type":"LineComment","text":" wait for very briefly so that the above session will be within the time limit","lineNumber":206,"isOrphan":false},{"type":"LineComment","text":" 1 student with outdated deadline, 1 student with deleted deadline","lineNumber":215,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionOpeningRemindersActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionOpeningRemindersActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Close the session and re-open with the opening time 1 day before","lineNumber":51,"isOrphan":true},{"type":"LineComment","text":" 5 students, 5 instructors, and 3 co-owner instructors in course1","lineNumber":89,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionOpeningSoonRemindersActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionOpeningSoonRemindersActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Close the session and re-open with the opening time within 24 hours from now","lineNumber":50,"isOrphan":true},{"type":"LineComment","text":" similar to previous but the session has already ended in the past and is being reopened","lineNumber":200,"isOrphan":true},{"type":"LineComment","text":" this could happen if an instructor reuses a session for example","lineNumber":201,"isOrphan":true},{"type":"LineComment","text":" 3 co-owners in course1 x 2 sessions","lineNumber":88,"isOrphan":false},{"type":"LineComment","text":" check that the subject matches either session 1 or session 2's details","lineNumber":91,"isOrphan":false},{"type":"LineComment","text":" close session","lineNumber":131,"isOrphan":false},{"type":"LineComment","text":" reopen session to miss the opening soon email time limit","lineNumber":141,"isOrphan":false},{"type":"LineComment","text":" allow session to be off the time limit to ensure that sentOpeningEmail is marked false","lineNumber":168,"isOrphan":false},{"type":"LineComment","text":" random date in future","lineNumber":170,"isOrphan":false},{"type":"LineComment","text":" wait for the session to be inside time limit so email is sent","lineNumber":181,"isOrphan":false},{"type":"LineComment","text":" random date in future","lineNumber":215,"isOrphan":false},{"type":"LineComment","text":" wait for the session to be in the time limit so that email is sent","lineNumber":223,"isOrphan":false},{"type":"LineComment","text":" set start and end time to be sometime in the past","lineNumber":243,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionPublishedEmailWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionPublishedEmailWorkerActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" 5 students, 5 instructors, and 3 co-owner instructors in course1","lineNumber":50,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionPublishedRemindersActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionPublishedRemindersActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Publish session by moving automated publish time","lineNumber":46,"isOrphan":true},{"type":"LineComment","text":" Publish session by moving automated publish time and disable publish reminder","lineNumber":57,"isOrphan":true},{"type":"LineComment","text":" Do a manual publish","lineNumber":70,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionRemindEmailWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionRemindEmailWorkerActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" 1 student and 4 instructors sent reminder, 1 instructor notified","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" notification to only requesting instructors","lineNumber":96,"isOrphan":false},{"type":"LineComment","text":" Ensure that every email recipient is accounted for","lineNumber":112,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionRemindParticularUsersEmailWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionRemindParticularUsersEmailWorkerActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" send 3 emails as specified in the submission parameters","lineNumber":59,"isOrphan":false},{"type":"LineComment","text":" send 2 emails as specified in the submission parameters","lineNumber":94,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_sendCopyToInstructorFalse_requestingInstructorNotNotified() throws Exception","name":"testExecute_sendCopyToInstructorFalse_requestingInstructorNotNotified","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionResendPublishedEmailWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionResendPublishedEmailWorkerActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" send 2 emails + 1 notification as specified in the submission parameters","lineNumber":59,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"FeedbackSessionUnpublishedEmailWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.FeedbackSessionUnpublishedEmailWorkerActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" 5 students, 5 instructors, and 3 co-owner instructors in course1","lineNumber":50,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetAccountActionTest","fullyQualifiedName":"teammates.ui.webapi.GetAccountActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetAccountRequestActionTest","fullyQualifiedName":"teammates.ui.webapi.GetAccountRequestActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetAccountsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetAccountsActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"private void assertEqualAccounts(List<AccountAttributes> accounts, List<AccountData> accountDataList)","name":"assertEqualAccounts","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetActionClassesActionTest","fullyQualifiedName":"teammates.ui.webapi.GetActionClassesActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetAuthInfoActionTest","fullyQualifiedName":"teammates.ui.webapi.GetAuthInfoActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_addCsrfTokenCookies_shouldAddToResponseAccordingToExistingCsrfToken()","name":"testExecute_addCsrfTokenCookies_shouldAddToResponseAccordingToExistingCsrfToken","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetCourseActionTest","fullyQualifiedName":"teammates.ui.webapi.GetCourseActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"See test cases below","lineNumber":29,"isOrphan":true},{"type":"LineComment","text":"see test cases below","lineNumber":116,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_typicalUsage_shouldPass()","name":"testExecute_typicalUsage_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters_shouldFail()","name":"testExecute_notEnoughParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_nonExistentCourse_shouldFail()","name":"testExecute_nonExistentCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"private void testNonExistentCourse()","name":"testNonExistentCourse","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_invalidParameterValues_shouldFail()","name":"testAccessControl_invalidParameterValues_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_testInstructorAccess_shouldPass()","name":"testAccessControl_testInstructorAccess_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_testStudentAccess_shouldPass()","name":"testAccessControl_testStudentAccess_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_loggedInEntityBothInstructorAndStudent_shouldBeAccessible() throws Exception","name":"testAccessControl_loggedInEntityBothInstructorAndStudent_shouldBeAccessible","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetCourseJoinStatusActionTest","fullyQualifiedName":"teammates.ui.webapi.GetCourseJoinStatusActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetCoursesActionTest","fullyQualifiedName":"teammates.ui.webapi.GetCoursesActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See separated test cases below.","lineNumber":39,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testGetCoursesAction_withNoParameter_shouldThrowHttpParameterException()","name":"testGetCoursesAction_withNoParameter_shouldThrowHttpParameterException","type":"void","javadoc":null},{"fullQualified":"public void testGetCoursesAction_withInvalidEntityType_shouldReturnBadResponse()","name":"testGetCoursesAction_withInvalidEntityType_shouldReturnBadResponse","type":"void","javadoc":null},{"fullQualified":"public void testGetCoursesAction_withInstructorEntityTypeAndNoCourseStatus_shouldThrowParameterFailure()","name":"testGetCoursesAction_withInstructorEntityTypeAndNoCourseStatus_shouldThrowParameterFailure","type":"void","javadoc":null},{"fullQualified":"public void testGetCoursesAction_withInvalidCourseStatus_shouldReturnBadResponse()","name":"testGetCoursesAction_withInvalidCourseStatus_shouldReturnBadResponse","type":"void","javadoc":null},{"fullQualified":"public void testGetCoursesAction_withInstructorEntityTypeAndActiveCourses_shouldReturnCorrectCourses()","name":"testGetCoursesAction_withInstructorEntityTypeAndActiveCourses_shouldReturnCorrectCourses","type":"void","javadoc":null},{"fullQualified":"public void testGetCoursesAction_withInstructorEntityTypeAndArchivedCourses_shouldReturnCorrectCourses()","name":"testGetCoursesAction_withInstructorEntityTypeAndArchivedCourses_shouldReturnCorrectCourses","type":"void","javadoc":null},{"fullQualified":"public void testGetCoursesAction_withInstructorEntityTypeAndSoftDeletedCourses_shouldReturnCorrectCourses()","name":"testGetCoursesAction_withInstructorEntityTypeAndSoftDeletedCourses_shouldReturnCorrectCourses","type":"void","javadoc":null},{"fullQualified":"public void testGetCoursesAction_withStudentEntityType_shouldReturnCorrectCourses()","name":"testGetCoursesAction_withStudentEntityType_shouldReturnCorrectCourses","type":"void","javadoc":null},{"fullQualified":"private void verifySameCourseData(CourseData actualCourse, CourseAttributes expectedCourse)","name":"verifySameCourseData","type":"void","javadoc":null},{"fullQualified":"private void verifySameCourseDataStudent(CourseData actualCourse, CourseAttributes expectedCourse)","name":"verifySameCourseDataStudent","type":"void","javadoc":null},{"fullQualified":"private CoursesData getValidCourses(String... params)","name":"getValidCourses","type":"CoursesData","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetCourseSectionNamesActionTest","fullyQualifiedName":"teammates.ui.webapi.GetCourseSectionNamesActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See test cases below","lineNumber":29,"isOrphan":true},{"type":"LineComment","text":" See test cases below","lineNumber":68,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_typicalUsage_shouldPass() throws Exception","name":"testExecute_typicalUsage_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_nonExistCourse_shouldFail()","name":"testExecute_nonExistCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_testInvalidAccess_shouldPass()","name":"testAccessControl_testInvalidAccess_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_testInstructorAccess_shouldPass()","name":"testAccessControl_testInstructorAccess_shouldPass","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetDeadlineExtensionActionTest","fullyQualifiedName":"teammates.ui.webapi.GetDeadlineExtensionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Const.ParamsNames.COURSE_ID","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" Const.ParamsNames.FEEDBACK_SESSION_NAME","lineNumber":48,"isOrphan":false},{"type":"LineComment","text":" Const.ParamsNames.USER_EMAIL","lineNumber":58,"isOrphan":false},{"type":"LineComment","text":" Const.ParamsNames.IS_INSTRUCTOR","lineNumber":68,"isOrphan":true},{"type":"LineComment","text":" Only can access with backdoor key","lineNumber":112,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackQuestionRecipientsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackQuestionRecipientsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See independent test cases","lineNumber":52,"isOrphan":true},{"type":"LineComment","text":"see independent test cases","lineNumber":164,"isOrphan":true},{"type":"LineComment","text":" Use typical bundle for testing access control because we want to make the login account consistent","lineNumber":169,"isOrphan":true},{"type":"LineComment","text":" with \"high-level\" and \"mid-level\" access control tests, although accounts are same in two bundles","lineNumber":170,"isOrphan":false}],"allMethods":[{"fullQualified":"public void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_invalidIntend_shouldFail()","name":"testExecute_invalidIntend_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testExecute_moderatedAndPreviewPersonToGetRecipients_shouldReturnSameRecipientsGotFromGiver()","name":"testExecute_moderatedAndPreviewPersonToGetRecipients_shouldReturnSameRecipientsGotFromGiver","type":"void","javadoc":null},{"fullQualified":"public void testExecute_differentRecipientTypes_shouldReturnRecipientsCorrectly()","name":"testExecute_differentRecipientTypes_shouldReturnRecipientsCorrectly","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_studentSubmission() throws Exception","name":"testAccessControl_studentSubmission","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_instructorSubmission() throws Exception","name":"testAccessControl_instructorSubmission","type":"void","javadoc":null},{"fullQualified":"private void useTypicalDataBundle()","name":"useTypicalDataBundle","type":"void","javadoc":null},{"fullQualified":"private String[] generateParameters(FeedbackSessionAttributes session, int questionNumber, Intent intent, String regKey, String moderatedPerson, String previewPerson)","name":"generateParameters","type":"String[]","javadoc":null},{"fullQualified":"private FeedbackQuestionRecipientsData getRecipients(String[] params)","name":"getRecipients","type":"FeedbackQuestionRecipientsData","javadoc":null},{"fullQualified":"private void verifyFeedbackQuestionRecipientsDataEquals(FeedbackQuestionRecipientsData expected, FeedbackQuestionRecipientsData actual)","name":"verifyFeedbackQuestionRecipientsDataEquals","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackQuestionsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackQuestionsActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_studentFeedbackSubmissionMcqGenerateOptionsForTeams_shouldReturnGeneratedFields() throws Exception","name":"testExecute_studentFeedbackSubmissionMcqGenerateOptionsForTeams_shouldReturnGeneratedFields","type":"void","javadoc":null},{"fullQualified":"public void testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_shouldReturnGeneratedFields() throws Exception","name":"testExecute_instructorFeedbackSubmissionMcqGenerateOptionsForTeams_shouldReturnGeneratedFields","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackResponseCommentActionTest","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackResponseCommentActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" ses individual test cases","lineNumber":69,"isOrphan":true},{"type":"LineComment","text":" see individual test cases","lineNumber":163,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters_shouldFail()","name":"testExecute_notEnoughParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_invalidIntent_shouldFail()","name":"testExecute_invalidIntent_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_typicalSuccessCase_shouldPass()","name":"testExecute_typicalSuccessCase_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_typicalSuccessCase_shouldPass()","name":"testAccessControl_typicalSuccessCase_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_invalidIntent_shouldFail()","name":"testAccessControl_invalidIntent_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_responseNotExisting_shouldFail()","name":"testAccessControl_responseNotExisting_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_accessAcrossCourses_shouldFail()","name":"testAccessControl_accessAcrossCourses_shouldFail","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponseCommentData getFeedbackResponseComments(String[] params)","name":"getFeedbackResponseComments","type":"FeedbackResponseCommentData","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackResponsesActionTest","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackResponsesActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See independent test cases","lineNumber":63,"isOrphan":true},{"type":"LineComment","text":"see independent test cases","lineNumber":151,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters_shouldFail()","name":"testExecute_notEnoughParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_invalidIntent_shouldFail()","name":"testExecute_invalidIntent_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_studentSubmission_shouldGetResponseSuccessfully() throws Exception","name":"testExecute_studentSubmission_shouldGetResponseSuccessfully","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_instructorSubmission_shouldGetResponseSuccessfully() throws Exception","name":"testExecute_instructorSubmission_shouldGetResponseSuccessfully","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_commentSubmission_shouldGetCommentsSuccessfully() throws Exception","name":"testExecute_commentSubmission_shouldGetCommentsSuccessfully","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_notAnswerable_cannotAccess()","name":"testAccessControl_notAnswerable_cannotAccess","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_invalidIntent_shouldFail()","name":"testAccessControl_invalidIntent_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_typicalStudentAccess_canAccess()","name":"testAccessControl_typicalStudentAccess_canAccess","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_typicalInstructorAccess_canAccess()","name":"testAccessControl_typicalInstructorAccess_canAccess","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_getNonExistingFeedbackResponse_shouldFail()","name":"testAccessControl_getNonExistingFeedbackResponse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_getResponseInPreview_shouldFail()","name":"testAccessControl_getResponseInPreview_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_accessAcrossCourses_shouldFail()","name":"testAccessControl_accessAcrossCourses_shouldFail","type":"void","javadoc":null},{"fullQualified":"private FeedbackResponsesData getFeedbackResponse(String[] params)","name":"getFeedbackResponse","type":"FeedbackResponsesData","javadoc":null},{"fullQualified":"private void verifyFeedbackResponseEquals(FeedbackResponseAttributes expected, FeedbackResponseData actual) throws Exception","name":"verifyFeedbackResponseEquals","type":"void","javadoc":null},{"fullQualified":"private void verifyFeedbackCommentEquals(FeedbackResponseCommentAttributes expected, FeedbackResponseCommentData actual)","name":"verifyFeedbackCommentEquals","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackSessionActionTest","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackSessionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" TODO: Add test cases","lineNumber":42,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_fullDetail()","name":"testExecute_fullDetail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_instructorSubmission()","name":"testExecute_instructorSubmission","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_instructorResult()","name":"testExecute_instructorResult","type":"void","javadoc":null},{"fullQualified":"protected void textExecute_studentSubmission()","name":"textExecute_studentSubmission","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_studentResult()","name":"testExecute_studentResult","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_studentResult() throws Exception","name":"testAccessControl_studentResult","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_fullDetail()","name":"testAccessControl_fullDetail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_instructorResult() throws Exception","name":"testAccessControl_instructorResult","type":"void","javadoc":null},{"fullQualified":"private String[] generateParameters(FeedbackSessionAttributes session, Intent intent, String regKey, String moderatedPerson, String previewPerson)","name":"generateParameters","type":"String[]","javadoc":null},{"fullQualified":"private void assertEqualDeadlines(Map<String, Instant> expectedDeadlineInstants, Map<String, Long> actualDeadlines, String timeZone)","name":"assertEqualDeadlines","type":"void","javadoc":null},{"fullQualified":"private void updateFirstFeedbackSessionOfTypicalCourse1(Instant newEndTime, Map<String, Instant> studentDeadlines, Map<String, Instant> instructorDeadlines)","name":"updateFirstFeedbackSessionOfTypicalCourse1","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackSessionLogsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackSessionLogsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" The filtering by the logs processor cannot be tested directly, assume that it filters correctly","lineNumber":123,"isOrphan":true},{"type":"LineComment","text":" No need to check output again here, it will be exactly the same as the previous case","lineNumber":160,"isOrphan":true},{"type":"LineComment","text":" TODO: if we restrict the range from start to end time, it should be tested here as well","lineNumber":162,"isOrphan":true},{"type":"LineComment","text":" Here, it simply returns all log entries","lineNumber":124,"isOrphan":false},{"type":"LineComment","text":" Course has 6 feedback sessions, last 4 of which have no log entries","lineNumber":128,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackSessionsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackSessionsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Make student2InCourse2 and instructor1OfCourse1 belong to the same account.","lineNumber":58,"isOrphan":false},{"type":"LineComment","text":" see individual tests","lineNumber":68,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asInstructorWithCourseId_shouldReturnAllSessionsForCourse()","name":"testExecute_asInstructorWithCourseId_shouldReturnAllSessionsForCourse","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor()","name":"testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asInstructorWithRecycleBinFlagFalse_shouldReturnAllSessionsForInstructor()","name":"testExecute_asInstructorWithRecycleBinFlagFalse_shouldReturnAllSessionsForInstructor","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_instructorAsStudent_shouldReturnAllSessionsForStudent()","name":"testExecute_instructorAsStudent_shouldReturnAllSessionsForStudent","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_instructorAsStudentWithCourseId_shouldReturnAllSessionsForCourseOfStudent()","name":"testExecute_instructorAsStudentWithCourseId_shouldReturnAllSessionsForCourseOfStudent","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_instructorAsStudentWithInvalidCourseId_shouldReturnEmptyList()","name":"testExecute_instructorAsStudentWithInvalidCourseId_shouldReturnEmptyList","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asStudentWithCourseId_shouldReturnAllSessionsForCourse()","name":"testExecute_asStudentWithCourseId_shouldReturnAllSessionsForCourse","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asStudent_shouldReturnAllSessionsForAccount()","name":"testExecute_asStudent_shouldReturnAllSessionsForAccount","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asStudentWithDeadlines_shouldHaveCorrectSubmissionStatus() throws Exception","name":"testExecute_asStudentWithDeadlines_shouldHaveCorrectSubmissionStatus","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_unknownEntityType_shouldFail()","name":"testExecute_unknownEntityType_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"private void assertDeadlinesFilteredForStudent(FeedbackSessionData sessionData, FeedbackSessionAttributes expectedSession, String emailAddress)","name":"assertDeadlinesFilteredForStudent","type":"void","javadoc":null},{"fullQualified":"private void assertInformationHiddenForStudent(FeedbackSessionData data)","name":"assertInformationHiddenForStudent","type":"void","javadoc":null},{"fullQualified":"private void assertInformationHidden(FeedbackSessionData data)","name":"assertInformationHidden","type":"void","javadoc":null},{"fullQualified":"private void assertPartialInformationMatch(FeedbackSessionData data, FeedbackSessionAttributes expectedSession)","name":"assertPartialInformationMatch","type":"void","javadoc":null},{"fullQualified":"private void assertAllInformationMatch(FeedbackSessionData data, FeedbackSessionAttributes expectedSession)","name":"assertAllInformationMatch","type":"void","javadoc":null},{"fullQualified":"private void assertAllInstructorSessionsMatch(FeedbackSessionsData sessionsData, List<FeedbackSessionAttributes> expectedSessions)","name":"assertAllInstructorSessionsMatch","type":"void","javadoc":null},{"fullQualified":"private void assertAllStudentSessionsMatch(FeedbackSessionsData sessionsData, List<FeedbackSessionAttributes> expectedSessions, String emailAddress)","name":"assertAllStudentSessionsMatch","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetFeedbackSessionSubmittedGiverSetActionTest","fullyQualifiedName":"teammates.ui.webapi.GetFeedbackSessionSubmittedGiverSetActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetHasResponsesActionTest","fullyQualifiedName":"teammates.ui.webapi.GetHasResponsesActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"set test cases below","lineNumber":35,"isOrphan":true},{"type":"LineComment","text":"Different results for question and course","lineNumber":181,"isOrphan":false},{"type":"LineComment","text":" we gathered expected from typical bundle","lineNumber":258,"isOrphan":false},{"type":"LineComment","text":" student has responded here","lineNumber":261,"isOrphan":false},{"type":"LineComment","text":" no questions here for student","lineNumber":265,"isOrphan":false},{"type":"LineComment","text":" team has responded here","lineNumber":269,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters_shouldFail()","name":"testExecute_notEnoughParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asInstructorWithFakeCourse_shouldFail()","name":"testExecute_asInstructorWithFakeCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asInstructorWithFakeQuestion_shouldFail()","name":"testExecute_asInstructorWithFakeQuestion_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asInstructorGetRespondentsInCourse_shouldPass()","name":"testExecute_asInstructorGetRespondentsInCourse_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void asInstructor_getRespondentsForQuestion_shouldPass()","name":"asInstructor_getRespondentsForQuestion_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asInstructorWithQuestionIdAndCourseId_preferQuestionId()","name":"testExecute_asInstructorWithQuestionIdAndCourseId_preferQuestionId","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asStudentWithFakeFeedbackSessionName_shouldFail()","name":"testExecute_asStudentWithFakeFeedbackSessionName_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asStudentGetHasRespondedForSession_shouldPass()","name":"testExecute_asStudentGetHasRespondedForSession_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_asStudentGetHasRespondedForSessionWithoutFsParam_shouldPass()","name":"testExecute_asStudentGetHasRespondedForSessionWithoutFsParam_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_notEnoughParameters_shouldFail()","name":"testAccessControl_notEnoughParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_wrongEntityType_shouldFail()","name":"testAccessControl_wrongEntityType_shouldFail","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetInstructorActionTest","fullyQualifiedName":"teammates.ui.webapi.GetInstructorActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetInstructorPrivilegeActionTest","fullyQualifiedName":"teammates.ui.webapi.GetInstructorPrivilegeActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" update section privilege for testing purpose.","lineNumber":36,"isOrphan":true},{"type":"LineComment","text":" course level privilege","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" section level privilege","lineNumber":51,"isOrphan":false},{"type":"LineComment","text":" session level privilege","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":" see individual tests.","lineNumber":74,"isOrphan":true},{"type":"LineComment","text":" course id is used for instructor identify verification here.","lineNumber":82,"isOrphan":false},{"type":"LineComment","text":" course id is used for instructor identify verification here.","lineNumber":98,"isOrphan":false},{"type":"LineComment","text":" course id is used for instructor identify verification here.","lineNumber":128,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_fetchPrivilegeOfNonExistInstructor_shouldFail()","name":"testExecute_fetchPrivilegeOfNonExistInstructor_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_fetchPrivilegeOfAnotherInstructorByEmail_shouldSucceed()","name":"testExecute_fetchPrivilegeOfAnotherInstructorByEmail_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_fetchPrivilegeOfAnotherInstructor_shouldSucceed()","name":"testExecute_fetchPrivilegeOfAnotherInstructor_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters_shouldFail()","name":"testExecute_notEnoughParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_fetchPrivilegeOfSelf_shouldSucceed()","name":"testExecute_fetchPrivilegeOfSelf_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetInstructorsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetInstructorsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" no parameters","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" the #instructors is 5","lineNumber":65,"isOrphan":false},{"type":"LineComment","text":" with information hiding, it is 4 instead","lineNumber":67,"isOrphan":false},{"type":"LineComment","text":" information is hidden","lineNumber":77,"isOrphan":false},{"type":"LineComment","text":" the #instructors is 5","lineNumber":96,"isOrphan":false},{"type":"LineComment","text":" without information hiding, it is still 5","lineNumber":98,"isOrphan":false},{"type":"LineComment","text":" try to access instructors in his own course","lineNumber":168,"isOrphan":false},{"type":"LineComment","text":" try to access instructors in other course","lineNumber":174,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withoutIntent_shouldReturnPartialData()","name":"testExecute_withoutIntent_shouldReturnPartialData","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withFullDetailIntent_shouldReturnDataWithFullDetail()","name":"testExecute_withFullDetailIntent_shouldReturnDataWithFullDetail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_withFullDetailIntent_shouldDoAuthenticationOfInstructor()","name":"testAccessControl_withFullDetailIntent_shouldDoAuthenticationOfInstructor","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_withoutIntent_shouldDoAuthenticationOfStudent()","name":"testAccessControl_withoutIntent_shouldDoAuthenticationOfStudent","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetNationalitiesActionTest","fullyQualifiedName":"teammates.ui.webapi.GetNationalitiesActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetNotificationActionTest","fullyQualifiedName":"teammates.ui.webapi.GetNotificationActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See independent test cases","lineNumber":38,"isOrphan":true}],"allMethods":[{"fullQualified":" String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":" String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void baseClassSetup()","name":"baseClassSetup","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_withValidNotificationId_shouldReturnData()","name":"testExecute_withValidNotificationId_shouldReturnData","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_withInvalidNotificationId_shouldThrowError()","name":"testExecute_withInvalidNotificationId_shouldThrowError","type":"void","javadoc":null},{"fullQualified":"private void verifyNotificationEquals(NotificationData expected, NotificationData actual)","name":"verifyNotificationEquals","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetNotificationsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetNotificationsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See independent test cases","lineNumber":35,"isOrphan":true},{"type":"LineComment","text":" should fetch correct number of notifications","lineNumber":110,"isOrphan":false},{"type":"LineComment","text":" notification's shown attribute should not be updated","lineNumber":140,"isOrphan":false},{"type":"LineComment","text":" when usertype is GENERAL","lineNumber":161,"isOrphan":false},{"type":"LineComment","text":" when usertype is a random string","lineNumber":167,"isOrphan":false},{"type":"LineComment","text":" should update notification has shown attribute","lineNumber":194,"isOrphan":false}],"allMethods":[{"fullQualified":" String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":" String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withValidUserTypeForNonAdmin_shouldReturnData()","name":"testExecute_withValidUserTypeForNonAdmin_shouldReturnData","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withoutUserTypeForAdmin_shouldReturnAllNotifications()","name":"testExecute_withoutUserTypeForAdmin_shouldReturnAllNotifications","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withoutUserTypeForNonAdmin_shouldFail()","name":"testExecute_withoutUserTypeForNonAdmin_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testExecute_invalidUserType_shouldFail()","name":"testExecute_invalidUserType_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withFalseIsFetchingAll_shouldUpdateShownAndReturnUnreadNotifications()","name":"testExecute_withFalseIsFetchingAll_shouldUpdateShownAndReturnUnreadNotifications","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withoutIsFetchingAll_shouldUpdateShownAndReturnUnreadNotifications()","name":"testExecute_withoutIsFetchingAll_shouldUpdateShownAndReturnUnreadNotifications","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withInvalidIsFetchingAll_shouldFail()","name":"testExecute_withInvalidIsFetchingAll_shouldFail","type":"void","javadoc":null},{"fullQualified":"private void verifyNotificationEquals(NotificationData expected, NotificationData actual)","name":"verifyNotificationEquals","type":"void","javadoc":null},{"fullQualified":"private void verifyDoesNotContainNotifications(List<NotificationData> notifications, Set<String> readIds)","name":"verifyDoesNotContainNotifications","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetOngoingSessionsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetOngoingSessionsActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"private void verifyNoExistingSession(JsonResult r)","name":"verifyNoExistingSession","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetReadNotificationsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetReadNotificationsActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":" String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetRegkeyValidityActionTest","fullyQualifiedName":"teammates.ui.webapi.GetRegkeyValidityActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetSessionResponseStatsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetSessionResponseStatsActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetSessionResultsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetSessionResultsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Malicious api call using course Id of the student to bypass the check","lineNumber":323,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"private boolean isSessionResultsDataEqual(SessionResultsData self, SessionResultsData other)","name":"isSessionResultsDataEqual","type":"boolean","javadoc":null},{"fullQualified":"private boolean isQuestionOutputEqual(SessionResultsData.QuestionOutput self, SessionResultsData.QuestionOutput other)","name":"isQuestionOutputEqual","type":"boolean","javadoc":null},{"fullQualified":"private boolean isResponseOutputEqual(SessionResultsData.ResponseOutput self, SessionResultsData.ResponseOutput other)","name":"isResponseOutputEqual","type":"boolean","javadoc":null},{"fullQualified":"public void testAccessControl_withRegistrationKey_shouldPass() throws Exception","name":"testAccessControl_withRegistrationKey_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_withoutCorrectAuthInfoAccessStudentResult_shouldFail() throws Exception","name":"testAccessControl_withoutCorrectAuthInfoAccessStudentResult_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentAccessOwnCourseSessionResult_shouldPass() throws Exception","name":"testAccessControl_studentAccessOwnCourseSessionResult_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentAccessUnpublishedSessionStudentResult_shouldFail()","name":"testAccessControl_studentAccessUnpublishedSessionStudentResult_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_accessStudentSessionResultWithMasqueradeMode_shouldPass() throws Exception","name":"testAccessControl_accessStudentSessionResultWithMasqueradeMode_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentAccessOtherCourseSessionResult_shouldFail()","name":"testAccessControl_studentAccessOtherCourseSessionResult_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorAccessHisCourseFullDetail_shouldPass()","name":"testAccessControl_instructorAccessHisCourseFullDetail_shouldPass","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetStudentActionTest","fullyQualifiedName":"teammates.ui.webapi.GetStudentActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"private void assertStudentDataMatches(StudentData studentData, StudentAttributes student, boolean isRequestFromInstructor)","name":"assertStudentDataMatches","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetStudentProfileActionTest","fullyQualifiedName":"teammates.ui.webapi.GetStudentProfileActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See test cases below.","lineNumber":30,"isOrphan":true},{"type":"LineComment","text":" Prepare an unregistered teammate","lineNumber":94,"isOrphan":false},{"type":"LineComment","text":" See test cases below.","lineNumber":140,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withExistingProfileAndNoParameter_shouldReturnOwnProfile()","name":"testExecute_withExistingProfileAndNoParameter_shouldReturnOwnProfile","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withMissingCourseId_shouldReturnOwnProfile()","name":"testExecute_withMissingCourseId_shouldReturnOwnProfile","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withMissingStudentEmail_shouldReturnOwnProfile()","name":"testExecute_withMissingStudentEmail_shouldReturnOwnProfile","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withStudentEmailAndCourseId_shouldReturnProfileByStudentEmail()","name":"testExecute_withStudentEmailAndCourseId_shouldReturnProfileByStudentEmail","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withProfileNotYetCreated_shouldReturnEmptyProfile()","name":"testExecute_withProfileNotYetCreated_shouldReturnEmptyProfile","type":"void","javadoc":null},{"fullQualified":"public void testExecute_getProfileOfUnregisteredStudent_shouldReturnEmptyProfile() throws Exception","name":"testExecute_getProfileOfUnregisteredStudent_shouldReturnEmptyProfile","type":"void","javadoc":null},{"fullQualified":"private void testGetCorrectProfile(StudentProfileAttributes expectedProfile, String expectedName, String... submissionParams)","name":"testGetCorrectProfile","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_withoutCorrectAuthInfo_shouldFail()","name":"testAccessControl_withoutCorrectAuthInfo_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentNotExistInCourse_shouldFail()","name":"testAccessControl_studentNotExistInCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentAccessHisOwnProfile_shouldPass()","name":"testAccessControl_studentAccessHisOwnProfile_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentAccessHisTeammateProfile_shouldPass()","name":"testAccessControl_studentAccessHisTeammateProfile_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentAccessHisClassmateButNotTeammateProfile_shouldFail()","name":"testAccessControl_studentAccessHisClassmateButNotTeammateProfile_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentAccessStudentInOtherCourse_shouldFail()","name":"testAccessControl_studentAccessStudentInOtherCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorAccessProfileWithMissingStudentEmail_shouldFail()","name":"testAccessControl_instructorAccessProfileWithMissingStudentEmail_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorAccessProfileWithMissingCourseId_shouldFail()","name":"testAccessControl_instructorAccessProfileWithMissingCourseId_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorAccessProfileFromHisCourse_shouldPass()","name":"testAccessControl_instructorAccessProfileFromHisCourse_shouldPass","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorWithoutViewStudentInSectionPrivilege_shouldFail() throws Exception","name":"testAccessControl_instructorWithoutViewStudentInSectionPrivilege_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorAccessOtherCourse_shouldFail()","name":"testAccessControl_instructorAccessOtherCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_withMasqueradeMode_shouldPass()","name":"testAccessControl_withMasqueradeMode_shouldPass","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetStudentProfilePictureActionTest","fullyQualifiedName":"teammates.ui.webapi.GetStudentProfilePictureActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"student from another team","lineNumber":145,"isOrphan":false},{"type":"LineComment","text":"student from another course","lineNumber":156,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetStudentsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetStudentsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" no parameters","lineNumber":36,"isOrphan":false},{"type":"LineComment","text":" information is hidden","lineNumber":89,"isOrphan":false},{"type":"LineComment","text":" information is hidden","lineNumber":90,"isOrphan":false},{"type":"LineComment","text":" ensure the reason for not being able to access is not due to being from a different course","lineNumber":110,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withOnlyCourseId_shouldReturnAllStudentsOfTheCourse()","name":"testExecute_withOnlyCourseId_shouldReturnAllStudentsOfTheCourse","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withCourseIdAndTeamName_shouldReturnAllStudentsOfTheTeam()","name":"testExecute_withCourseIdAndTeamName_shouldReturnAllStudentsOfTheTeam","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_withOnlyCourseId_shouldDoAuthenticationOfInstructor()","name":"testAccessControl_withOnlyCourseId_shouldDoAuthenticationOfInstructor","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_withCourseIdAndTeamName_shouldDoAuthenticationOfStudent()","name":"testAccessControl_withCourseIdAndTeamName_shouldDoAuthenticationOfStudent","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetTimeZonesActionTest","fullyQualifiedName":"teammates.ui.webapi.GetTimeZonesActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" This test does not check the timezone database used is the latest","lineNumber":33,"isOrphan":true},{"type":"LineComment","text":" There is a quirk in the ETC/GMT time zones due to the tzdb using POSIX-style signs in the zone names and the","lineNumber":37,"isOrphan":true},{"type":"LineComment","text":" output abbreviations. POSIX has positive signs west of Greenwich, while we are used to positive signs east","lineNumber":38,"isOrphan":true},{"type":"LineComment","text":" of Greenwich in practice. For example, TZ='Etc/GMT+8' uses the abbreviation \"GMT+8\" and corresponds to 8","lineNumber":39,"isOrphan":true},{"type":"LineComment","text":" hours behind UTC (i.e. west of Greenwich) even though many people would expect it to mean 8 hours ahead of","lineNumber":40,"isOrphan":true},{"type":"LineComment","text":" UTC (i.e. east of Greenwich; like Singapore or China).","lineNumber":41,"isOrphan":true},{"type":"LineComment","text":" Only check that the version number is returned, and some sample values for timezone offset","lineNumber":34,"isOrphan":false},{"type":"LineComment","text":" (adapted from tzdb table comments)","lineNumber":42,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"GetUsageStatisticsActionTest","fullyQualifiedName":"teammates.ui.webapi.GetUsageStatisticsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" For now, we stop at simply checking that the request is successful,","lineNumber":93,"isOrphan":true},{"type":"LineComment","text":" as we do not have means to reliably create test usage attributes data yet.","lineNumber":94,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorCourseJoinEmailWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.InstructorCourseJoinEmailWorkerActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"InstructorSearchIndexingWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.InstructorSearchIndexingWorkerActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"JoinCourseActionTest","fullyQualifiedName":"teammates.ui.webapi.JoinCourseActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"JsonResultTest","fullyQualifiedName":"teammates.ui.webapi.JsonResultTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"public void testConstructorAndSendResponse() throws Exception","name":"testConstructorAndSendResponse","type":"void","javadoc":null}],"allConstructors":[]},{"name":"MarkNotificationAsReadActionTest","fullyQualifiedName":"teammates.ui.webapi.MarkNotificationAsReadActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":" String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":" String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"PostStudentProfilePictureActionTest","fullyQualifiedName":"teammates.ui.webapi.PostStudentProfilePictureActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"PublishFeedbackSessionActionTest","fullyQualifiedName":"teammates.ui.webapi.PublishFeedbackSessionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Attempt to publish the same session again.","lineNumber":49,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_invalidRequests_shouldFail()","name":"testExecute_invalidRequests_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"QueryLogsActionTest","fullyQualifiedName":"teammates.ui.webapi.QueryLogsActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"RegenerateInstructorKeyActionTest","fullyQualifiedName":"teammates.ui.webapi.RegenerateInstructorKeyActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"no parameters","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":"null instructor email","lineNumber":41,"isOrphan":false},{"type":"LineComment","text":"null course id","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" see individual tests","lineNumber":117,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void baseClassSetup()","name":"baseClassSetup","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters()","name":"testExecute_notEnoughParameters","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_nonExistentCourse_shouldFail()","name":"testExecute_nonExistentCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_nonExistentInstructorInCourse_shouldFail()","name":"testExecute_nonExistentInstructorInCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_regenerateInstructorKey()","name":"testExecute_regenerateInstructorKey","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"RegenerateStudentKeyActionTest","fullyQualifiedName":"teammates.ui.webapi.RegenerateStudentKeyActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"no parameters","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":"null student email","lineNumber":41,"isOrphan":false},{"type":"LineComment","text":"null course id","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":" see individual tests","lineNumber":116,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void baseClassSetup()","name":"baseClassSetup","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters()","name":"testExecute_notEnoughParameters","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_nonExistentCourse_shouldFail()","name":"testExecute_nonExistentCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_nonExistentStudentInCourse_shouldFail()","name":"testExecute_nonExistentStudentInCourse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_regenerateStudentKey()","name":"testExecute_regenerateStudentKey","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"RemindFeedbackSessionResultActionTest","fullyQualifiedName":"teammates.ui.webapi.RemindFeedbackSessionResultActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"RemindFeedbackSessionSubmissionActionTest","fullyQualifiedName":"teammates.ui.webapi.RemindFeedbackSessionSubmissionActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ResetAccountActionTest","fullyQualifiedName":"teammates.ui.webapi.ResetAccountActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"ResetAccountRequestActionTest","fullyQualifiedName":"teammates.ui.webapi.ResetAccountRequestActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Const.ParamsNames.INSTRUCTOR_EMAIL,","lineNumber":38,"isOrphan":false},{"type":"LineComment","text":" Const.ParamNames.INSTRUCTOR_INSTITUTION,","lineNumber":46,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"RestoreCourseActionTest","fullyQualifiedName":"teammates.ui.webapi.RestoreCourseActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"RestoreFeedbackSessionActionTest","fullyQualifiedName":"teammates.ui.webapi.RestoreFeedbackSessionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See test cases below.","lineNumber":38,"isOrphan":true},{"type":"LineComment","text":" Verify response","lineNumber":49,"isOrphan":false},{"type":"LineComment","text":" Verify model","lineNumber":53,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_withSessionInBin_shouldRestoreSession() throws Exception","name":"testExecute_withSessionInBin_shouldRestoreSession","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_withSessionNotInBin_shouldFail()","name":"testExecute_withSessionNotInBin_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_withEmptyParameters_shouldFail()","name":"testExecute_withEmptyParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SearchAccountRequestsActionTest","fullyQualifiedName":"teammates.ui.webapi.SearchAccountRequestsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See test cases below.","lineNumber":40,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters_shouldFail()","name":"testExecute_notEnoughParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchEmail_shouldSucceed()","name":"testExecute_searchEmail_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchInstitute_shouldSucceed()","name":"testExecute_searchInstitute_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchName_shouldSucceed()","name":"testExecute_searchName_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchNoMatch_shouldBeEmpty()","name":"testExecute_searchNoMatch_shouldBeEmpty","type":"void","javadoc":null},{"fullQualified":"public void testExecute_noSearchService_shouldReturn501()","name":"testExecute_noSearchService_shouldReturn501","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SearchInstructorsActionTest","fullyQualifiedName":"teammates.ui.webapi.SearchInstructorsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See test cases below.","lineNumber":39,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters_shouldFail()","name":"testExecute_notEnoughParameters_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchCourseId_shouldSucceed()","name":"testExecute_searchCourseId_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchDisplayedName_shouldSucceed()","name":"testExecute_searchDisplayedName_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchEmail_shouldSucceed()","name":"testExecute_searchEmail_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchGoogleId_shouldSucceed()","name":"testExecute_searchGoogleId_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchName_shouldSucceed()","name":"testExecute_searchName_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_searchNoMatch_shouldBeEmpty()","name":"testExecute_searchNoMatch_shouldBeEmpty","type":"void","javadoc":null},{"fullQualified":"public void testExecute_noSearchService_shouldReturn501()","name":"testExecute_noSearchService_shouldReturn501","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SearchStudentsActionTest","fullyQualifiedName":"teammates.ui.webapi.SearchStudentsActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See individual test cases below","lineNumber":37,"isOrphan":true}],"allMethods":[{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void execute_invalidParameters_parameterFailure()","name":"execute_invalidParameters_parameterFailure","type":"void","javadoc":null},{"fullQualified":"public void execute_adminSearchName_success()","name":"execute_adminSearchName_success","type":"void","javadoc":null},{"fullQualified":"public void execute_adminSearchCourseId_success()","name":"execute_adminSearchCourseId_success","type":"void","javadoc":null},{"fullQualified":"public void execute_adminSearchAccountsGeneral_success()","name":"execute_adminSearchAccountsGeneral_success","type":"void","javadoc":null},{"fullQualified":"public void execute_adminSearchEmail_success()","name":"execute_adminSearchEmail_success","type":"void","javadoc":null},{"fullQualified":"public void execute_adminSearchNoMatch_noMatch()","name":"execute_adminSearchNoMatch_noMatch","type":"void","javadoc":null},{"fullQualified":"public void execute_adminSearchGoogleId_success()","name":"execute_adminSearchGoogleId_success","type":"void","javadoc":null},{"fullQualified":"public void execute_instructorSearchGoogleId_matchOnlyStudentsInCourse()","name":"execute_instructorSearchGoogleId_matchOnlyStudentsInCourse","type":"void","javadoc":null},{"fullQualified":"public void execute_noSearchService_shouldReturn501()","name":"execute_noSearchService_shouldReturn501","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SendErrorReportActionTest","fullyQualifiedName":"teammates.ui.webapi.SendErrorReportActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SendJoinReminderEmailActionTest","fullyQualifiedName":"teammates.ui.webapi.SendJoinReminderEmailActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Reassign the attributes to retrieve their keys","lineNumber":104,"isOrphan":false},{"type":"LineComment","text":" 2 unregistered students, thus 2 emails queued to be sent","lineNumber":117,"isOrphan":false},{"type":"LineComment","text":" no unregistered students, thus no emails sent","lineNumber":140,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SessionLinksRecoveryActionTest","fullyQualifiedName":"teammates.ui.webapi.SessionLinksRecoveryActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" no params","lineNumber":29,"isOrphan":false},{"type":"LineComment","text":" see individual tests","lineNumber":143,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParameters()","name":"testExecute_notEnoughParameters","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_invalidEmail_shouldFail()","name":"testExecute_invalidEmail_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_nonExistingEmail()","name":"testExecute_nonExistingEmail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_noFeedbackSessionsFound()","name":"testExecute_noFeedbackSessionsFound","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_openedOrClosedAndUnpublishedSessions()","name":"testExecute_openedOrClosedAndUnpublishedSessions","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_openedOrClosedAndPublishedSessions()","name":"testExecute_openedOrClosedAndPublishedSessions","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentCourseJoinEmailWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.StudentCourseJoinEmailWorkerActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null}],"allConstructors":[]},{"name":"StudentSearchIndexingWorkerActionTest","fullyQualifiedName":"teammates.ui.webapi.StudentSearchIndexingWorkerActionTest","isInterface":false,"codeComments":[],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"SubmitFeedbackResponsesActionTest","fullyQualifiedName":"teammates.ui.webapi.SubmitFeedbackResponsesActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" See each independent test case.","lineNumber":33,"isOrphan":true},{"type":"LineComment","text":" See each independent test case.","lineNumber":38,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorSubmissionPastEndTime_shouldAllowIfBeforeDeadline() throws Exception","name":"testAccessControl_instructorSubmissionPastEndTime_shouldAllowIfBeforeDeadline","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentSubmissionPastEndTime_shouldAllowIfBeforeDeadline() throws Exception","name":"testAccessControl_studentSubmissionPastEndTime_shouldAllowIfBeforeDeadline","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UnpublishFeedbackSessionActionTest","fullyQualifiedName":"teammates.ui.webapi.UnpublishFeedbackSessionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" session is unpublished","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":" sent unpublish email task is added","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":" session is still unpublished","lineNumber":71,"isOrphan":false},{"type":"LineComment","text":" sent unpublish email task should not be added","lineNumber":75,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UpdateCourseActionTest","fullyQualifiedName":"teammates.ui.webapi.UpdateCourseActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" verify time zone will be changed","lineNumber":57,"isOrphan":false},{"type":"LineComment","text":" verify time zone did not change","lineNumber":127,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"private void verifySessionsInCourseHaveTimeZone(String courseId, String courseTimeZone)","name":"verifySessionsInCourseHaveTimeZone","type":"void","javadoc":null},{"fullQualified":"private void verifyCourseData(CourseData data, String courseId, String courseName, String timeZone)","name":"verifyCourseData","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UpdateFeedbackQuestionActionTest","fullyQualifiedName":"teammates.ui.webapi.UpdateFeedbackQuestionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" There are already responses for this question","lineNumber":204,"isOrphan":false},{"type":"LineComment","text":" All existing responses should remain","lineNumber":219,"isOrphan":false},{"type":"LineComment","text":" question is not updated","lineNumber":247,"isOrphan":false},{"type":"LineComment","text":" TODO: ADD this test case in FeedbackTextQuestionDetailsTest","lineNumber":252,"isOrphan":false},{"type":"LineComment","text":" set recommended length as a negative integer","lineNumber":268,"isOrphan":false},{"type":"LineComment","text":" question is not updated","lineNumber":274,"isOrphan":false},{"type":"LineComment","text":" recommended length does not change","lineNumber":278,"isOrphan":false},{"type":"LineComment","text":" question is not updated","lineNumber":300,"isOrphan":false},{"type":"LineComment","text":" TODO first comment was there before, but the second one seems to be the one happening?","lineNumber":344,"isOrphan":true},{"type":"LineComment","text":" Response rate should not change because other questions have the same respondents","lineNumber":345,"isOrphan":true},{"type":"LineComment","text":" Total possible respondents should decrease because instructors","lineNumber":390,"isOrphan":true},{"type":"LineComment","text":" Response rate should decrease by 1 as response from student1 in qn1 is changed","lineNumber":346,"isOrphan":false},{"type":"LineComment","text":" Response rate should decrease by 1 because the response of the unique instructor respondent is deleted","lineNumber":369,"isOrphan":false},{"type":"LineComment","text":" (except session creator) are no longer possible respondents","lineNumber":391,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_customizedNumberOfRecipient_shouldUpdateSuccessfully()","name":"testExecute_customizedNumberOfRecipient_shouldUpdateSuccessfully","type":"void","javadoc":null},{"fullQualified":"public void testExecute_anonymousTeamSession_shouldUpdateSuccessfully()","name":"testExecute_anonymousTeamSession_shouldUpdateSuccessfully","type":"void","javadoc":null},{"fullQualified":"public void testExecute_selfFeedback_shouldUpdateSuccessfully()","name":"testExecute_selfFeedback_shouldUpdateSuccessfully","type":"void","javadoc":null},{"fullQualified":"public void testExecute_editingContributionTypeQuestion_shouldUpdateSuccessfully()","name":"testExecute_editingContributionTypeQuestion_shouldUpdateSuccessfully","type":"void","javadoc":null},{"fullQualified":"public void testExecute_invalidQuestionNumber_shouldThrowException()","name":"testExecute_invalidQuestionNumber_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testExecute_invalidRecommendedLength_shouldThrowException()","name":"testExecute_invalidRecommendedLength_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testExecute_invalidGiverRecipientType_shouldThrowException()","name":"testExecute_invalidGiverRecipientType_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"public void testExecute_differentScenarios_shouldUpdateResponseRateCorrectly()","name":"testExecute_differentScenarios_shouldUpdateResponseRateCorrectly","type":"void","javadoc":null},{"fullQualified":"private FeedbackQuestionUpdateRequest getTypicalTextQuestionUpdateRequest()","name":"getTypicalTextQuestionUpdateRequest","type":"FeedbackQuestionUpdateRequest","javadoc":null},{"fullQualified":"private FeedbackQuestionUpdateRequest getTypicalContributionQuestionUpdateRequest()","name":"getTypicalContributionQuestionUpdateRequest","type":"FeedbackQuestionUpdateRequest","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UpdateFeedbackResponseCommentActionTest","fullyQualifiedName":"teammates.ui.webapi.UpdateFeedbackResponseCommentActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" see individual test cases.","lineNumber":99,"isOrphan":true},{"type":"LineComment","text":" see individual test cases","lineNumber":387,"isOrphan":true}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void prepareTestData()","name":"prepareTestData","type":"void","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_notEnoughParams_shouldFail()","name":"testExecute_notEnoughParams_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_typicalSuccessfulCases_shouldPass()","name":"testExecute_typicalSuccessfulCases_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_emptyVisibilitySettings_shouldPass()","name":"testExecute_emptyVisibilitySettings_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_variousVisibilitySettings_shouldPass()","name":"testExecute_variousVisibilitySettings_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_nonExistingFeedbackResponse_shouldFail()","name":"testExecute_nonExistingFeedbackResponse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_instructorIsNotCommentGiver_shouldPass()","name":"testExecute_instructorIsNotCommentGiver_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_typicalCasePublishedSession_shouldPass() throws Exception","name":"testExecute_typicalCasePublishedSession_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_emptyCommentText_shouldFail()","name":"testExecute_emptyCommentText_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_invalidIntent_shouldFail()","name":"testExecute_invalidIntent_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_accessibleWithPrivilege_shouldPass()","name":"testAccessControl_accessibleWithPrivilege_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_typicalSuccessfulCase_shouldPass()","name":"testAccessControl_typicalSuccessfulCase_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_invalidIntent_shouldFail()","name":"testAccessControl_invalidIntent_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_updateCommentForOthersResponse_shouldFail()","name":"testAccessControl_updateCommentForOthersResponse_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_nonExistingResponseComment_shouldFail()","name":"testAccessControl_nonExistingResponseComment_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_instructorsWithCorrectPrivilege_shouldPass() throws Exception","name":"testAccessControl_instructorsWithCorrectPrivilege_shouldPass","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl_instructorWithOnlyEitherSectionPrivilege_shouldFail() throws Exception","name":"testAccessControl_instructorWithOnlyEitherSectionPrivilege_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_instructorSubmissionPastEndTime_shouldAllowIfBeforeDeadline() throws Exception","name":"testAccessControl_instructorSubmissionPastEndTime_shouldAllowIfBeforeDeadline","type":"void","javadoc":null},{"fullQualified":"public void testAccessControl_studentSubmissionPastEndTime_shouldAllowIfBeforeDeadline() throws Exception","name":"testAccessControl_studentSubmissionPastEndTime_shouldAllowIfBeforeDeadline","type":"void","javadoc":null},{"fullQualified":"private String[] getSubmissionParamsForCrossSectionResponseComment()","name":"getSubmissionParamsForCrossSectionResponseComment","type":"String[]","javadoc":null}],"allConstructors":[]},{"name":"UpdateFeedbackSessionActionTest","fullyQualifiedName":"teammates.ui.webapi.UpdateFeedbackSessionActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Const.ParamsNames.COURSE_ID, session.getCourseId(),","lineNumber":65,"isOrphan":false},{"type":"LineComment","text":" Const.ParamsNames.FEEDBACK_SESSION_NAME, session.getFeedbackSessionName(),","lineNumber":70,"isOrphan":false},{"type":"LineComment","text":" Const.ParamsNames.NOTIFY_ABOUT_DEADLINES, String.valueOf(false),","lineNumber":75,"isOrphan":false},{"type":"LineComment","text":" The typical feedback session update request does not change any selective deadlines.","lineNumber":133,"isOrphan":false},{"type":"LineComment","text":" These are arbitrary.","lineNumber":145,"isOrphan":false},{"type":"LineComment","text":" The typical update request does not contain the course 1 student 1's email.","lineNumber":203,"isOrphan":false},{"type":"LineComment","text":" The deadline for course 1 student 1 was deleted; the map no longer contains a deadline for them.","lineNumber":210,"isOrphan":false},{"type":"LineComment","text":" Create deadline.","lineNumber":243,"isOrphan":false},{"type":"LineComment","text":" Update deadline.","lineNumber":245,"isOrphan":false},{"type":"LineComment","text":" Delete deadline.","lineNumber":247,"isOrphan":false},{"type":"LineComment","text":" Verify correct emails sent","lineNumber":257,"isOrphan":false},{"type":"LineComment","text":" content[0] contains old deadline, content[1] contains new deadline","lineNumber":300,"isOrphan":false},{"type":"LineComment","text":" These are arbitrary.","lineNumber":355,"isOrphan":false},{"type":"LineComment","text":" The typical update request does not contain the course 1 helper instructor's email.","lineNumber":413,"isOrphan":false},{"type":"LineComment","text":" The deadline for course 1 helper instructor was deleted; the map no longer contains a deadline for them.","lineNumber":420,"isOrphan":false},{"type":"LineComment","text":" Create deadline.","lineNumber":453,"isOrphan":false},{"type":"LineComment","text":" Update deadline.","lineNumber":455,"isOrphan":false},{"type":"LineComment","text":" Delete deadline.","lineNumber":457,"isOrphan":false},{"type":"LineComment","text":" Verify correct emails sent","lineNumber":467,"isOrphan":false},{"type":"LineComment","text":" content[0] contains old deadline, content[1] contains new deadline","lineNumber":510,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_changeDeadlineForStudents_shouldChangeDeadlinesCorrectlyWhenAppropriate()","name":"testExecute_changeDeadlineForStudents_shouldChangeDeadlinesCorrectlyWhenAppropriate","type":"void","javadoc":null},{"fullQualified":"public void testExecute_changeDeadlineForInstructors_shouldChangeDeadlinesCorrectlyWhenAppropriate()","name":"testExecute_changeDeadlineForInstructors_shouldChangeDeadlinesCorrectlyWhenAppropriate","type":"void","javadoc":null},{"fullQualified":"public void testExecute_startTimeEarlierThanVisibleTime_shouldGiveInvalidParametersError()","name":"testExecute_startTimeEarlierThanVisibleTime_shouldGiveInvalidParametersError","type":"void","javadoc":null},{"fullQualified":"public void testExecute_differentFeedbackSessionVisibleResponseVisibleSetting_shouldConvertToSpecialTime() throws Exception","name":"testExecute_differentFeedbackSessionVisibleResponseVisibleSetting_shouldConvertToSpecialTime","type":"void","javadoc":null},{"fullQualified":"public void testExecute_masqueradeModeWithManualReleaseResult_shouldEditSessionSuccessfully()","name":"testExecute_masqueradeModeWithManualReleaseResult_shouldEditSessionSuccessfully","type":"void","javadoc":null},{"fullQualified":"public void testExecute_invalidRequestBody_shouldThrowException()","name":"testExecute_invalidRequestBody_shouldThrowException","type":"void","javadoc":null},{"fullQualified":"private FeedbackSessionUpdateRequest getTypicalFeedbackSessionUpdateRequest()","name":"getTypicalFeedbackSessionUpdateRequest","type":"FeedbackSessionUpdateRequest","javadoc":null},{"fullQualified":"private Map<String, Long> convertDeadlinesToLong(Map<String, Instant> deadlines)","name":"convertDeadlinesToLong","type":"Map<String,Long>","javadoc":null},{"fullQualified":"private String getFormattedInstantForDeadlineExtensionEmail(Instant instant, String timezone)","name":"getFormattedInstantForDeadlineExtensionEmail","type":"String","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UpdateInstructorActionTest","fullyQualifiedName":"teammates.ui.webapi.UpdateInstructorActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"remove the new instructor entity that was created","lineNumber":114,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UpdateInstructorPrivilegeActionTest","fullyQualifiedName":"teammates.ui.webapi.UpdateInstructorPrivilegeActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" see individual tests","lineNumber":32,"isOrphan":true},{"type":"LineComment","text":" verify the privilege has indeed been updated","lineNumber":79,"isOrphan":false},{"type":"LineComment","text":" verify the privilege has indeed been updated","lineNumber":142,"isOrphan":false},{"type":"LineComment","text":" verify the privilege has indeed been updated","lineNumber":217,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute()","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_validCourseLevelInput_shouldSucceed()","name":"testExecute_validCourseLevelInput_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_validSectionLevelInput_shouldSucceed()","name":"testExecute_validSectionLevelInput_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_validSessionLevelInput_shouldSucceed()","name":"testExecute_validSessionLevelInput_shouldSucceed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_requestPrivilegesInconsistent_shouldBeAutoFixed()","name":"testExecute_requestPrivilegesInconsistent_shouldBeAutoFixed","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_lastInstructorWithModifyInstructorPrivilege_shouldPreserve()","name":"testExecute_lastInstructorWithModifyInstructorPrivilege_shouldPreserve","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_withNullPrivileges_shouldFail()","name":"testExecute_withNullPrivileges_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testExecute_withInvalidInstructorEmail_shouldFail()","name":"testExecute_withInvalidInstructorEmail_shouldFail","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UpdateNotificationActionTest","fullyQualifiedName":"teammates.ui.webapi.UpdateNotificationActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" Verify that correctly updated in the DB","lineNumber":55,"isOrphan":false}],"allMethods":[{"fullQualified":" String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":" String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"protected void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"private NotificationUpdateRequest getTypicalUpdateRequest()","name":"getTypicalUpdateRequest","type":"NotificationUpdateRequest","javadoc":null}],"allConstructors":[]},{"name":"UpdateStudentActionTest","fullyQualifiedName":"teammates.ui.webapi.UpdateStudentActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":"no parameters","lineNumber":44,"isOrphan":false},{"type":"LineComment","text":"null student email","lineNumber":47,"isOrphan":false},{"type":"LineComment","text":"null course id","lineNumber":53,"isOrphan":false},{"type":"LineComment","text":" after trim, this is equal to newStudentEmail","lineNumber":88,"isOrphan":false},{"type":"LineComment","text":" deleting edited student","lineNumber":147,"isOrphan":false},{"type":"LineComment","text":" verify student in database","lineNumber":267,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withTeamNameAlreadyExistsInAnotherSection_shouldFail()","name":"testExecute_withTeamNameAlreadyExistsInAnotherSection_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withSectionAlreadyHasMaxNumberOfStudents_shouldFail() throws Exception","name":"testExecute_withSectionAlreadyHasMaxNumberOfStudents_shouldFail","type":"void","javadoc":null},{"fullQualified":"public void testExecute_withEmptySectionName_shouldBeUpdatedWithDefaultSectionName()","name":"testExecute_withEmptySectionName_shouldBeUpdatedWithDefaultSectionName","type":"void","javadoc":null},{"fullQualified":"protected void testAccessControl() throws Exception","name":"testAccessControl","type":"void","javadoc":null}],"allConstructors":[]},{"name":"UpdateStudentProfileActionTest","fullyQualifiedName":"teammates.ui.webapi.UpdateStudentProfileActionTest","isInterface":false,"codeComments":[{"type":"LineComment","text":" simulate sanitization that occurs before persistence","lineNumber":41,"isOrphan":false}],"allMethods":[{"fullQualified":"protected String getActionUri()","name":"getActionUri","type":"String","javadoc":null},{"fullQualified":"protected String getRequestMethod()","name":"getRequestMethod","type":"String","javadoc":null},{"fullQualified":"public void testExecute() throws Exception","name":"testExecute","type":"void","javadoc":null},{"fullQualified":"private void testActionWithInvalidParameters(AccountAttributes student) throws Exception","name":"testActionWithInvalidParameters","type":"void","javadoc":null},{"fullQualified":"private void testActionWithScriptInjection(AccountAttributes student) throws Exception","name":"testActionWithScriptInjection","type":"void","javadoc":null},{"fullQualified":"private void testActionSuccess(AccountAttributes student, String caseDescription)","name":"testActionSuccess","type":"void","javadoc":null},{"fullQualified":"private void testActionInMasqueradeMode(AccountAttributes student)","name":"testActionInMasqueradeMode","type":"void","javadoc":null},{"fullQualified":"private String[] createValidParamsForMasqueradeMode(String googleId)","name":"createValidParamsForMasqueradeMode","type":"String[]","javadoc":null},{"fullQualified":"private String[] createValidParam(String googleId)","name":"createValidParam","type":"String[]","javadoc":null},{"fullQualified":"private StudentProfileUpdateRequest createValidRequestForProfile()","name":"createValidRequestForProfile","type":"StudentProfileUpdateRequest","javadoc":null},{"fullQualified":"private StudentProfileUpdateRequest createInvalidUpdateRequest()","name":"createInvalidUpdateRequest","type":"StudentProfileUpdateRequest","javadoc":null},{"fullQualified":"private StudentProfileUpdateRequest createInvalidUpdateRequestForProfileWithScriptInjection()","name":"createInvalidUpdateRequestForProfileWithScriptInjection","type":"StudentProfileUpdateRequest","javadoc":null},{"fullQualified":"protected void testAccessControl()","name":"testAccessControl","type":"void","javadoc":null},{"fullQualified":"private void testActionForbidden()","name":"testActionForbidden","type":"void","javadoc":null}],"allConstructors":[]}]}