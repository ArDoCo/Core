TEAMMATES is a Web app that runs on Google App Engine (GAE) cloud platform.
Given above is an overview of the main components.
The UI seen by users consists of Web pages containing HTML, CSS (for styling) and JavaScripts (for client-side interactions such as sorting, input validation etc.).
This UI is generated by Java Server Pages (JSP) and Java Servlets residing on the server.
Requests are sent to the server over normal HTTP.
In future, AJAX may be used sparingly to fetch data from the server asynchronously.
The main logic of the app is in Java POJOs (Plain Old Java Objects).
Some automated tasks are implemented as Servlets.
Storage uses the persistence framework provided by GAE datastore, a noSQL database.
TEAMMATES makes heavy use of automated regression testing.
TestNG is used for Java unit testing and QUnit for JavaScript unit testing.
We use Selenium Web Driver to automate UI testing.
Test Driver can access the application directly to set up test data.
We use JSON format to transmit such data to the application.
The Client component can connect to the back end directly without using a Browser.
It is used for administrative purposes, e.g., migrating data to a new schema.
The Common component contains utility code used across the application.
The diagram below shows how the code is organized into packages inside each component and dependencies among them.
There are some things to note.
logic, ui.view, ui.controller represent an application of Model-View-Controller pattern.
ui.view and ui.website packages are not Java packages.
They consist of jsp, html, js and css files.
The diagram below shows the object structure of the UI component.
Request from the Browser for a specific page will go through following steps.
First, request received by the GAE server.
Second, custom filters are applied according to the order specified in web.xml.
In our case this would be DatastoreFilter and LoginFilter.
For example, the LoginFilter will forward any request from not-logged-in users to the login page.
If the request is from logged in user, then it will proceed according to the URL, e.g. /page/instructorHomePage.
Third, request forwarded to the ControllerServlet.
Fourth, controllerServlet uses the ActionFactory to generate the matching Action object, e.g., InstructorHomePageAction.
Fifth, controllerServlet executes the action.
Sixth, the Action object checks the access rights of the user.
If the action is allowed, it interacts with the Logic component to perform the action.
Seventh, assuming the action was loading a page, the Action gathers the data required for the page into a PageData object, e.g. InstructorHomePageData, creates a ShowPageResult object by enclosing the PageData object created previously, and returns it to the ControllerServlet.
Eighth, controllerServlet sends the result.
In the case of a ShowPageResult, this is equivalent to forwarding to the matching JSP page.
Ninth, the JSP page uses the data in the given PageData object to generate the HTML page.
Tenth, the response will then be sent back to the Browser, which will render the page.
There are some things to note.
After performing certain actions, the Browser should load another page, possibly with the status of the previous action.
For example, if the action is delete course, the Browser should load the courses page after the server performed the action. 
In such cases, the result generated for the action will be of type RedirectResult which simply instructs the Browser to send a fresh request for the specified page.
In such cases, we do not create a PageData object for the original request.
For example, a browser request for delete course action.
Server performs the action (creates a RedirectResult object but no PageData object) and instructs the Browser to load the courses page.
As instructed, the Browser requests for the courses page.
Server processes the request separately (creates a ShowPageResult object but no PageData object) and returns the courses page.
The result of some actions is downloading of a file (e.g. an evaluation report).
In such cases, the result type will be FileDownloadResult and no PageData object will be generated.
Since the high-level workflow of processing a request is same for any request, we use the, the Template Method pattern to abstract the process folow into the Action class.
The list of actions and corresponding URIs are listed in the ActionURIs nested class of the Const class.
The list of pages and corresponding URIs are listed in the ViewURIs nested class of the Const class.
The UI consist of product pages (functional), product pages (peripheral), website pages, project pages.
Product pages (functional), e.g., courses page.
These require login.
Product pages (peripheral), e.g., help pages, error pages, etc.
Website pages are the static pages of the product website, e.g., contact.html.
Project pages meant for developers, such as this page.
The Logic component handles the business logic of TEAMMATES.
It is accessible via a thin facade class called Logic which makes use of several Logic classes to handle the logic related to various types of data and to access data from the Storage component.
In particular, Logic is responsible for the following.
Managing relationships between entities, e.g., cascade logic for create/update/delete.
Managing transactions, e.g., to ensure atomicity of a transaction.
Sanitizing input values recevied from the UI component.
Providing a mechanims for checking access control rights.
Package overview contains logic.api, logic.backdoor, logic.core, logic.automated.
logic.api provides the normal API of the component.
logic.backdoor provides a mechanism for the test driver to access data.
logic.core contains the core logic of the system.
logic.automated contains the logic of automated tasks.
Logic API is represented by the classes Logic, GateKeeper, BackDoorLogic.
Logic is used for the use of the UI.
Logic class acts as a facade between UI (servlets) and the backend of the app.
GateKeeper is used for the use of the UI.
To check the access rights of a user for a given action.
BackDoorLogic is used for the use of TestDriver (via BackDoorServlet).
In general, null values should not be used as parameters to this API, except when following the KeepExisting policy (explained later).
To access control the following information are presented.
Although this component provides methods to perform access control, it API itself is not access controlled.
The UI is expected to check access control (using GateKeeper class) before calling a method in the Logic.
However, calls received by BackDoorServlet are authenticated using the backdoor key.
Backdoor key is a string known only to the person who deployed the app (typically, the administrator).
To API for creating entities the following information are presented.
Null parameters causes an assertion failure.
Invalid parameters throws InvalidParametersException.
Entity already exists throws EntityAlreadyExists exception (escalated from Storage level).
When creating Evaluations, Submission entities are automatically created at the time of creating an evaluation or changing the team structure of a course.
To API for retrieving entities the following information are presented.
Attempting to retrieve objects using null parameters causes an assertion failure.
Entity not found returns null if the target entity not found.
This way, read operations can be used easily for checking the existence of an entity.
Throws EntityDoesNotExistsExeption if a parent entity of a target entity is not found e.g., trying to list students of a non-existent course.
To API for updating entities the following information are presented.
Primary keys cannot be edited except Student.email.
KeepExistingPolicy is that the new value of an optional attribute is specified as null or set to Uninitialized, the existing value will prevail. 
This is not a good policy. 
To be reconsidered.
Null parameters throws an assertion error if that parameter cannot be null.
Optional attributes follow KeepExistingPolicy.
Entity not found throws EntityDoesNotExistException exception.
Invalid parameters throws InvalidParametersException.
To API for deleting entities the following information are presented.
Null parameters are not expected.
Results in assertion failure.
The following explains the FailDeleteSilentlyPolicy.
In general, delete operation do not throw exceptions if the target entity does not exist.
Instead, it logs a warning.
This is because if it does not exist, it is as good as deleted.
The following explains the Cascade policy.
When a parent entity is deleted, entities that have referential integrity with the deleted entity should also be deleted.
Refer to the API for the cascade logic.
The Storage component performs CRUD (Create, Read, Update, Delete) operations on data entities individually.
Package overview contains storage.api, storage.entity, storage.datastore.
storage.api provides the normal API of the component.
storage.entity classes that represent persistable entities.
storage.datastore classes for dealing with the datastore.
Storage contains minimal logic beyond what is directly relevant to CRUD operations.
In particular, it handles the following.
Validating data inside entities before creating/updating them, to ensure they are in a valid state.
Hiding the complexities of datastore from the Logic component.
All GQL queries are to be contained inside the Storage component.
Protecting persitable objects, classes in the storage.entity package are not visible outside this component to prevent accidental modification to the entity's attributes.
(Since these classes have been marked as persistence capable, and changes to their attributes are automatically persisted to the datastore by default).
Instead, a corresponding non-persistent data transfer object named Attributes (e.g., CourseAttributes is the data transfer object for Course entities) object is returned, where values can be modified easily without any impact on the persistent data copy.
These datatransfer classes are in common.datatransfer package explained later.
Note that this decision was taken before GAE started supporting the ability to detach entities to prevent accidental modifications to persistable data.
The decision to use data transfer objects is to be reconsidered in the future.
The Storage component will not perform any cascade delete/create operations.
Cascade logic is currently handled by the Logic component.
Note that the navigability of the association links between entity objects appear to be in the reverse direction of what we see in a normal OOP design.
This is because we want to keep the data scheme flexible so that new entity types can be added later with minimal modifications to existing elements.
Add and Delete operations try to wait until data is persisted in the datastore before returning.
This is not enough to compensate for eventual consistency involving multiple servers in the GAE production enviornment.
However, it is expected to avoid test failures caused by eventual consistency in dev server and reduce such problems in the live server.
Note that Eventual consistency here means it takes some time for a database operation to propagate across all serves of the Google's distributed datastore.
As a result, the data may be in an inconsistent states for short periods of time although things should become consistent eventually.
For example, an object we deleted may appear to still exist for a short while.
Implementation of Transaction Control has been decided against due to limitations of GAE environment and the nature of our data schema.
Please see TEAMMATES Decision Analysis document for more information.
In general, if Null is passed as a parameter, the corresponding value is NOT modified, as per the KeepExistingPolicy that was previously mentioned.
To API for creating the following information are presented.
Attempt to create an entity that already exists throws EntityAlreadyExists exception.
Attempt to create an entity with invalid data throws InvalidParametersException.
To API for retrieving the following information are presented.
Attempt to retrieve an entity that does not exist returns null.
To API for updating the following information are presented.
Attempt to update an entity that does not exist throws EntityDoesNotExistException.
Attempt to update an entity with invalid data throws InvalidParametersException.
To API for deleting the following information are presented.
Attempt to delete an entity that does not exist fails silently.
The Common component contains common utilities used across TEAMMATES.
Package overview contains common.util, common.exceptions, common.datatransfer.
common.util contains utility classes.
common.exceptions contains custom exceptions.
common.datatransfer containts data transfer objects.
Given below are some more information about this package.
common.datatransfer package contains lightweight data transfer object classes for transferring data among components.
They can be combined in various ways to transfer structured data between components.
Given below are three examples.
Test Driver can use the DataBundle in this manner to send an arbitrary number of objects to be persisted in the database.
This structure can be used to transfer data of a course (e.g., when constructing the home page for an instructor).
This structure can be used to send results of an evaluation (e.g., when showing an evaluation report to an instructor).
For convenience, these classes use public variables for data.
This is not a good practice as it contravenes OO principle of information hiding and increases the risk of inconsistent data.
This strategy is to be reconsidered at a later date.
The TestDriver component automates the testing of TEAMMATES.
Package overview contains test.driver, test.pageobjects, test.cases, and subpackages.
test.driver contains infrastructure need for running the test driver.
test.pageobjects contains abstractions of the pages as the appear on a Browser (i.e. SUTs).
test.cases contains test cases.
Sub packages contains x.cases.testdriver, x.cases.browsertests, x.cases.common, x.cases.logic, x.cases.storage.
x.cases.driver contains component test cases for testing test driver infrastructure.
x.cases.browsertests contains system test cases for testing the UI.
x.cases.common contains component test cases for testing the Common component.
x.cases.logic contains component test cases for testing the Logic component.
x.cases.storage contains component test cases for testing the Storage component.
There are some things to note.
Some component tests are pure unit tests (i.e., test one component in isolation) while others are integration tests that tests units as well as integration of units with each other.
AllJsTests.java (implemented as a UI test) is for unit testing JavaScript code.
This is how TEAMMATES testing maps to standard types of testing.
The Client component contains scripts that can connect to the application backend for things such as migrating data and calculating statistics.
Package overview contains client.remoteapi, client.scripts.
client.remoteapi contains classes needed to connect to the backend directly.
client.scripts contains scripts that do things with the back end data.